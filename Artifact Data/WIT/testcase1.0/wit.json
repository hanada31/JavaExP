{
  "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/",
  "classes": [
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/Basic.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_without_condition(int)",
          "exception": "throw new RuntimeException(\"throw_without_condition\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Int('x0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 14,
          "throwingLine": 16,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_null_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_null_condition\");",
          "pathCojunction": "(x == null)",
          "symbolicPathConjunction": "(x == null)",
          "backwardsPathConjunction": "(x == null)",
          "simplifiedPathConjunction": "null == x",
          "z3Inputs": "[x0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nx0_isNull = Bool('x0_isNull')\n\nconstraints = [\n  x0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nnull = Symbol('null')\npath_conjunction = (Eq(x, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 24,
          "throwingLine": 26,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_value_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_value_condition\");",
          "pathCojunction": "(x.equals(\"value\"))",
          "symbolicPathConjunction": "(x.equals(\"value\"))",
          "backwardsPathConjunction": "(x.equals(\"value\"))",
          "simplifiedPathConjunction": "x.equals(\"value\")",
          "z3Inputs": "[x0 = \"value\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\n\nconstraints = [\n  x0 == \"value\"\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_equals = Symbol('x_equals')\npath_conjunction = x_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 34,
          "throwingLine": 36,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_value_condition_not_equal(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_value_condition\");",
          "pathCojunction": "(!(z))",
          "symbolicPathConjunction": "(!(z))",
          "backwardsPathConjunction": "(!(x.equals(\"value\")))",
          "simplifiedPathConjunction": "!x.equals(\"value\")",
          "z3Inputs": "[z0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nz0 = Bool('z0')\n\nconstraints = [\n  Not(z0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_equals = Symbol('x_equals')\npath_conjunction = (~(x_equals))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 45,
          "throwingLine": 48,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_modified_var_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_modified_var_condition\");",
          "pathCojunction": "(y.equals(\"value\"))",
          "symbolicPathConjunction": "(y.equals(\"value\"))",
          "backwardsPathConjunction": "(x.equals(\"value\"))",
          "simplifiedPathConjunction": "x.equals(\"value\")",
          "z3Inputs": "[x0 = \"value\", y1 = \"value\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\ny1 = String('y1')\n\nconstraints = [\n  y1 == x0,\n  y1 == \"value\"\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_equals = Symbol('x_equals')\npath_conjunction = x_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 57,
          "throwingLine": 61,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_modified_value_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_modified_value_condition\");",
          "pathCojunction": "(x.equals(y.substring(0, 5)))",
          "symbolicPathConjunction": "(x.equals(y.substring(0, 5)))",
          "backwardsPathConjunction": "(x.equals(\"value123\".substring(0, 5)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\n\nconstraints = [\n  y0 == StringVal(\"value123\"), \n  x0 == y0.substring(0, 5)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_equals = Symbol('x_equals')\n\"value123\"_substring = Symbol('\"value123\"_substring')\npath_conjunction = x_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 71,
          "throwingLine": 74,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_modified_value_condition2(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_modified_value_condition2\");",
          "pathCojunction": "(z.equals(y.substring(0, 5)))",
          "symbolicPathConjunction": "(z.equals(y.substring(0, 5)))",
          "backwardsPathConjunction": "(x.equals(\"value123\".substring(0, 5)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nz0 = String('z0')\n\nconstraints = [\n  y0 == StringVal(\"value123\"), \n  z0 == x0,\n  z0 == y0.substring(0, 5)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_equals = Symbol('x_equals')\n\"value123\"_substring = Symbol('\"value123\"_substring')\npath_conjunction = x_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 84,
          "throwingLine": 88,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_modified_value_condition3(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_modified_value_condition3\");",
          "pathCojunction": "(!(y.length() > 2)) && (x.equals(y))",
          "symbolicPathConjunction": "(!(y.length() > 2)) && (x.equals(y))",
          "backwardsPathConjunction": "(!(y.length() > 2)) && (x.equals(y))",
          "simplifiedPathConjunction": "x.equals(y) && y.length() <= 2",
          "z3Inputs": "[y0 = \"\", x0 = \"\"]\n[x0 = \"A\", y0 = \"A\"]\n[x0 = \"B\", y0 = \"B\"]\n[x0 = \"C\", y0 = \"C\"]\n[x0 = \"D\", y0 = \"D\"]\n[x0 = \"E\", y0 = \"E\"]\n[x0 = \"F\", y0 = \"F\"]\n[x0 = \"G\", y0 = \"G\"]\n[x0 = \"H\", y0 = \"H\"]\n[x0 = \"I\", y0 = \"I\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\n\nconstraints = [\n  And(Not(Length(y0) > 2), x0 == y0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\ny_length = Symbol('y_length')\nx_equals = Symbol('x_equals')\npath_conjunction = ((~((StrictGreaterThan(y_length, 2)))) & x_equals)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 99,
          "throwingLine": 103,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_modified_value_condition3(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_modified_value_condition3\");",
          "pathCojunction": "(y.length() > 2) && (x.equals(y))",
          "symbolicPathConjunction": "(y.length() > 2) && (x.equals(y))",
          "backwardsPathConjunction": "(y.length() > 2) && (x.equals(y))",
          "simplifiedPathConjunction": "x.equals(y) && y.length() > 2",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\ny1 = String('y1')\n\nconstraints = [\n  y1 == y0.substring(0, 5),\n  And(Length(y1) > 2, x0 == y1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\ny_length = Symbol('y_length')\nx_equals = Symbol('x_equals')\npath_conjunction = ((StrictGreaterThan(y_length, 2)) & x_equals)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 99,
          "throwingLine": 103,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition\");",
          "pathCojunction": "(x != null && y == null)",
          "symbolicPathConjunction": "(x != null && y == null)",
          "backwardsPathConjunction": "(x != null && y == null)",
          "simplifiedPathConjunction": "null == y && null != x",
          "z3Inputs": "[x0_isNull = False, y0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(Not(x0_isNull), y0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nnull = Symbol('null')\npath_conjunction = ((Ne(x, null)) & (Eq(y, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 112,
          "throwingLine": 114,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition2(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition2\");",
          "pathCojunction": "(x != null || y != null)",
          "symbolicPathConjunction": "(x != null || y != null)",
          "backwardsPathConjunction": "(x != null || y != null)",
          "simplifiedPathConjunction": "null != x || null != y",
          "z3Inputs": "[x0_isNull = False, y0_isNull = False]\n[x0_isNull = True, y0_isNull = False]\n[x0_isNull = False, y0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  Or(Not(x0_isNull), Not(y0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nnull = Symbol('null')\npath_conjunction = ((Ne(x, null)) | (Ne(y, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 125,
          "throwingLine": 127,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition3(java.lang.String, java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition2\");",
          "pathCojunction": "(x == null || y == null || z == null)",
          "symbolicPathConjunction": "(x == null || y == null || z == null)",
          "backwardsPathConjunction": "(x == null || y == null || z == null)",
          "simplifiedPathConjunction": "null == x || null == y || null == z",
          "z3Inputs": "[z0_isNull = False, x0_isNull = True, y0_isNull = False]\n[y0_isNull = True]\n[z0_isNull = True, y0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nz0 = String('z0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\nz0_isNull = Bool('z0_isNull')\n\nconstraints = [\n  Or(Or(x0_isNull, y0_isNull), z0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\nnull = Symbol('null')\npath_conjunction = (((Eq(x, null)) | (Eq(y, null))) | (Eq(z, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 142,
          "throwingLine": 144,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition4(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition3\");",
          "pathCojunction": "(x != null) && (y == null)",
          "symbolicPathConjunction": "(x != null) && (y == null)",
          "backwardsPathConjunction": "(x != null) && (y == null)",
          "simplifiedPathConjunction": "null == y && null != x",
          "z3Inputs": "[x0_isNull = False, y0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(Not(x0_isNull), y0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nnull = Symbol('null')\npath_conjunction = ((Ne(x, null)) & (Eq(y, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 153,
          "throwingLine": 156,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition5(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition4\");",
          "pathCojunction": "(x == null) && (!(y == null))",
          "symbolicPathConjunction": "(x == null) && (!(y == null))",
          "backwardsPathConjunction": "(x == null) && (!(y == null))",
          "simplifiedPathConjunction": "null == x && null != y",
          "z3Inputs": "[x0_isNull = True, y0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(x0_isNull, Not(y0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nnull = Symbol('null')\npath_conjunction = ((Eq(x, null)) & (~((Eq(y, null)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 166,
          "throwingLine": 171,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition6(java.lang.String, java.lang.String, int)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition4\");",
          "pathCojunction": "(x == null) && (!(z > 0)) && (y == null)",
          "symbolicPathConjunction": "(x == null) && (!(z > 0)) && (y == null)",
          "backwardsPathConjunction": "(x == null) && (!(z > 0)) && (y == null)",
          "simplifiedPathConjunction": "null == x && null == y && z <= 0",
          "z3Inputs": "[z0 = 0, y0_isNull = True, x0_isNull = True]\n[z0 = -1, x0_isNull = True, y0_isNull = True]\n[z0 = -2, x0_isNull = True, y0_isNull = True]\n[z0 = -3, x0_isNull = True, y0_isNull = True]\n[z0 = -4, x0_isNull = True, y0_isNull = True]\n[z0 = -5, x0_isNull = True, y0_isNull = True]\n[z0 = -6, x0_isNull = True, y0_isNull = True]\n[z0 = -7, x0_isNull = True, y0_isNull = True]\n[z0 = -8, x0_isNull = True, y0_isNull = True]\n[z0 = -9, x0_isNull = True, y0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nz0 = Int('z0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(And(x0_isNull, Not(z0 > 0)), y0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z', integer=True)\nnull = Symbol('null')\npath_conjunction = (((Eq(x, null)) & (~((StrictGreaterThan(z, 0))))) & (Eq(y, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition6(java.lang.String, java.lang.String, int)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition4\");",
          "pathCojunction": "(x == null) && (z > 0) && (y == null)",
          "symbolicPathConjunction": "(x == null) && (z > 0) && (y == null)",
          "backwardsPathConjunction": "(x == null) && (z > 0) && (y == null)",
          "simplifiedPathConjunction": "null == x && null == y && z > 0",
          "z3Inputs": "[z0 = 1, y0_isNull = True, x0_isNull = True]\n[z0 = 2, x0_isNull = True, y0_isNull = True]\n[z0 = 3, x0_isNull = True, y0_isNull = True]\n[z0 = 4, x0_isNull = True, y0_isNull = True]\n[z0 = 5, x0_isNull = True, y0_isNull = True]\n[z0 = 6, x0_isNull = True, y0_isNull = True]\n[z0 = 7, x0_isNull = True, y0_isNull = True]\n[z0 = 8, x0_isNull = True, y0_isNull = True]\n[z0 = 9, x0_isNull = True, y0_isNull = True]\n[z0 = 10, x0_isNull = True, y0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nz0 = Int('z0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(And(x0_isNull, z0 > 0), y0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z', integer=True)\nnull = Symbol('null')\npath_conjunction = (((Eq(x, null)) & (StrictGreaterThan(z, 0))) & (Eq(y, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/MultiplePath.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths1(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths1\");",
          "pathCojunction": "(n > 2) && (!(list.get(0).equals(\"ab\"))) && (!(list.get(0).equals(\"bc\"))) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(n > 2) && (!(list.get(0).equals(\"ab\"))) && (!(list.get(0).equals(\"bc\"))) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(n > 2) && (!(list.get(0).equals(\"ab\"))) && (!(list.get(0).equals(\"bc\"))) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && !list.get(0).equals(\"bc\") && n > 2",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\n\nconstraints = [\n  And(And(And(n0 > 2, Not(list0.get(0).equals(\"ab\"))), Not(list0.get(0).equals(\"bc\"))), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nlist = Symbol('list')\nlist_get_equals = Symbol('list_get_equals')\nlist_get = Symbol('list_get')\nx_startsWith = Symbol('x_startsWith')\npath_conjunction = ((((StrictGreaterThan(n, 2)) & (~(list_get_equals))) & (~(list_get_equals))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 33,
          "throwingLine": 42,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths1(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths1\");",
          "pathCojunction": "(n > 2) && (list.get(0).equals(\"ab\")) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(n > 2) && (list.get(0).equals(\"ab\")) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(n > 2) && (list.get(0).equals(\"ab\")) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "list.get(0)_equals && x.startsWith(\"123\") && n > 2",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\n\nconstraints = [\n  And(And(n0 > 2, list0.get(0).equals(\"ab\")), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nlist = Symbol('list')\nlist_get_equals = Symbol('list_get_equals')\nlist_get = Symbol('list_get')\nx_startsWith = Symbol('x_startsWith')\npath_conjunction = (((StrictGreaterThan(n, 2)) & list_get_equals) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 33,
          "throwingLine": 42,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths1(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths1\");",
          "pathCojunction": "(!(n > 2)) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(!(n > 2)) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(!(n > 2)) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && n <= 2",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\n\nconstraints = [\n  And(Not(n0 > 2), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nx_startsWith = Symbol('x_startsWith')\npath_conjunction = ((~((StrictGreaterThan(n, 2)))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 33,
          "throwingLine": 42,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths2(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths2\");",
          "pathCojunction": "(n > 2 && list != null && !list.isEmpty()) && (!(list.get(0).equals(\"a\"))) && (!(list.get(0).equals(\"b\"))) && (!(list.get(0).equals(\"c\"))) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(n > 2 && list != null && !list.isEmpty()) && ((!(s.equals(\"a\"))) && (!(s.equals(\"b\"))) && (!(s.equals(\"c\")))) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(n > 2 && list != null && !list.isEmpty()) && (!(list.get(0).equals(\"a\"))) && (!(list.get(0).equals(\"b\"))) && (!(list.get(0).equals(\"c\"))) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && !list.get(0).equals(\"b\") && !list.isEmpty() && n > 2 && list != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  And(And(And(And(And(And(n0 > 2, Not(list0_isNull)), Not(list0.isEmpty())), Not(list0.get(0).equals(\"a\"))), Not(list0.get(0).equals(\"b\"))), Not(list0.get(0).equals(\"c\"))), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nlist = Symbol('list')\nlist_isEmpty = Symbol('list_isEmpty')\nlist_get_equals = Symbol('list_get_equals')\nlist_get = Symbol('list_get')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = (((((((StrictGreaterThan(n, 2)) & (Ne(list, null))) & (~(list_isEmpty))) & (~(list_get_equals))) & (~(list_get_equals))) & (~(list_get_equals))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 53,
          "throwingLine": 58,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths2(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths2\");",
          "pathCojunction": "(n > 2 && list != null && !list.isEmpty()) && (list.get(0).equals(\"a\")) && (list.get(0).equals(\"ab\")) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(n > 2 && list != null && !list.isEmpty()) && ((s.equals(\"a\")) && (s.equals(\"ab\"))) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(n > 2 && list != null && !list.isEmpty()) && (list.get(0).equals(\"a\")) && (list.get(0).equals(\"ab\")) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "list.get(0).equals(\"a\") && x.startsWith(\"123\") && !list.isEmpty() && n > 2 && list != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  And(And(And(And(And(n0 > 2, Not(list0_isNull)), Not(list0.isEmpty())), list0.get(0).equals(\"a\")), list0.get(0).equals(\"ab\")), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nlist = Symbol('list')\nlist_isEmpty = Symbol('list_isEmpty')\nlist_get_equals = Symbol('list_get_equals')\nlist_get = Symbol('list_get')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = ((((((StrictGreaterThan(n, 2)) & (Ne(list, null))) & (~(list_isEmpty))) & list_get_equals) & list_get_equals) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 53,
          "throwingLine": 58,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths2(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths2\");",
          "pathCojunction": "(!(n > 2 && list != null && !list.isEmpty())) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(!(n > 2 && list != null && !list.isEmpty())) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(!(n > 2 && list != null && !list.isEmpty())) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && (list.isEmpty() || list == null || n <= 2)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  And(Not(And(And(n0 > 2, Not(list0_isNull)), Not(list0.isEmpty()))), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nlist = Symbol('list')\nlist_isEmpty = Symbol('list_isEmpty')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = ((~((((StrictGreaterThan(n, 2)) & (Ne(list, null))) & (~(list_isEmpty))))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 53,
          "throwingLine": 58,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/MultipleCall.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.throw_with_ret_value_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_callee_condition2\");",
          "pathCojunction": "(!(x.length() == 2)) && (x.equals(y))",
          "symbolicPathConjunction": "(call_another_method(x)) && (x.equals(y))",
          "backwardsPathConjunction": "(!(x.length() == 2)) && (x.equals(\"67890\"))",
          "simplifiedPathConjunction": "x.equals(\"67890\") && x.length() != 2",
          "z3Inputs": "[y0 = \"67890\", x0 = \"67890\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\n\nconstraints = [\n  y0 == StringVal(\"67890\"), \n  And(Not(Length(x0) == 2), x0 == y0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_length = Symbol('x_length')\nx_equals = Symbol('x_equals')\npath_conjunction = ((~((Eq(x_length, 2)))) & x_equals)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 17,
          "throwingLine": 20,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.throw_exception_caller_with_arg(int)",
          "exception": "throw new RuntimeException(\"throw_exception_in_callee_directly\")",
          "pathCojunction": "(x < 1000)",
          "symbolicPathConjunction": "(m < 1000)",
          "backwardsPathConjunction": "(x < 1000)",
          "simplifiedPathConjunction": "x < 1000",
          "z3Inputs": "[x0 = 999]\n[x0 = 0]\n[x0 = -1]\n[x0 = -2]\n[x0 = -3]\n[x0 = -4]\n[x0 = -5]\n[x0 = -6]\n[x0 = -7]\n[x0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Int('x0')\n\nconstraints = [\n  x0 < 1000\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x', integer=True)\npath_conjunction = (StrictLessThan(x, 1000))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 42,
          "throwingLine": 43,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/MultipleThrow.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleThrow.throw_two(java.lang.String)",
          "exception": "throw new NullPointerException(\"throw_two\");",
          "pathCojunction": "(!(x == null)) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(!(x == null)) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(!(x == null)) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && null != x",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nx0_isNull = Bool('x0_isNull')\n\nconstraints = [\n  And(Not(x0_isNull), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(x, null)))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 23,
          "throwingLine": 28,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleThrow.throw_two(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_two\");",
          "pathCojunction": "(x == null)",
          "symbolicPathConjunction": "(x == null)",
          "backwardsPathConjunction": "(x == null)",
          "simplifiedPathConjunction": "null == x",
          "z3Inputs": "[x0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nx0_isNull = Bool('x0_isNull')\n\nconstraints = [\n  x0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nnull = Symbol('null')\npath_conjunction = (Eq(x, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 23,
          "throwingLine": 25,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleThrow.throw_two_nouse_if(java.lang.String, java.lang.String)",
          "exception": "throw new NullPointerException(\"throw_two_nouse_if\");",
          "pathCojunction": "(!(x == null)) && (y == null) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(!(x == null)) && (y == null) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(!(x == null)) && (y == null) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && null == y && null != x",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(And(Not(x0_isNull), y0_isNull), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(x, null)))) & (Eq(y, null))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 31,
          "throwingLine": 39,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleThrow.throw_two_nouse_if(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_two_nouse_if\");",
          "pathCojunction": "(x == null)",
          "symbolicPathConjunction": "(x == null)",
          "backwardsPathConjunction": "(x == null)",
          "simplifiedPathConjunction": "null == x",
          "z3Inputs": "[x0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\n\nconstraints = [\n  x0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nnull = Symbol('null')\npath_conjunction = (Eq(x, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 31,
          "throwingLine": 33,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleThrow.throw_two_nouse_if(java.lang.String, java.lang.String)",
          "exception": "throw new NullPointerException(\"throw_two_nouse_if\");",
          "pathCojunction": "(!(x == null)) && (!(y == null)) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(!(x == null)) && (!(y == null)) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(!(x == null)) && (!(y == null)) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && null != x && null != y",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(And(Not(x0_isNull), Not(y0_isNull)), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(x, null)))) & (~((Eq(y, null))))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 31,
          "throwingLine": 39,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/FiledValueInfluenced.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.FiledValueInfluenced.throw_with_outVar_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_outVar_condition\");",
          "pathCojunction": "(outVar == 0)",
          "symbolicPathConjunction": "(outVar == 0)",
          "backwardsPathConjunction": "(outVar == 0)",
          "simplifiedPathConjunction": "outVar == 0",
          "z3Inputs": "[outVar0 = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\noutVar0 = Int('outVar0')\n\nconstraints = [\n  outVar0 == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutVar = Symbol('outVar', integer=True)\npath_conjunction = (Eq(outVar, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 17,
          "throwingLine": 19,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    }
  ]
}