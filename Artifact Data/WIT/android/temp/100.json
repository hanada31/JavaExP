[
  {
    "qualifiedSignature": "android.view.FrameStats.getFramePresentedTimeNano(int)",
    "exception": "throw new IndexOutOfBoundsException();",
    "pathCojunction": "(mFramesPresentedTimeNano == null)",
    "symbolicPathConjunction": "(mFramesPresentedTimeNano == null)",
    "backwardsPathConjunction": "(mFramesPresentedTimeNano == null)",
    "simplifiedPathConjunction": "mFramesPresentedTimeNano == null",
    "z3Inputs": "[mFramesPresentedTimeNano0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nmFramesPresentedTimeNano0_isNull = Bool('mFramesPresentedTimeNano0_isNull')\n\nconstraints = [\n  mFramesPresentedTimeNano0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmFramesPresentedTimeNano = Symbol('mFramesPresentedTimeNano')\nnull = Symbol('null')\npath_conjunction = (Eq(mFramesPresentedTimeNano, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 91,
    "throwingLine": 93,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/FrameStats.java"
  },
  {
    "qualifiedSignature": "android.view.InputEvent.recycle()",
    "exception": "throw new RuntimeException(toString() + \" recycled twice!\");",
    "pathCojunction": "(!(TRACK_RECYCLED_LOCATION)) && (mRecycled)",
    "symbolicPathConjunction": "(!(TRACK_RECYCLED_LOCATION)) && (mRecycled)",
    "backwardsPathConjunction": "(!(TRACK_RECYCLED_LOCATION)) && (mRecycled)",
    "z3Inputs": "[TRACK_RECYCLED_LOCATION0 = False, mRecycled0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nTRACK_RECYCLED_LOCATION0 = Bool('TRACK_RECYCLED_LOCATION0')\nmRecycled0 = Bool('mRecycled0')\n\nconstraints = [\n  TRACK_RECYCLED_LOCATION0 == False,\n  And(Not(TRACK_RECYCLED_LOCATION0), mRecycled0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmRecycled = Symbol('mRecycled')\npath_conjunction = ((~(False)) & mRecycled)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 126,
    "throwingLine": 134,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/InputEvent.java"
  },
  {
    "qualifiedSignature": "android.view.InputEvent.recycleIfNeededAfterDispatch()",
    "exception": "throw new RuntimeException(toString() + \" recycled twice!\");",
    "pathCojunction": "(!(false)) && (mRecycled)",
    "symbolicPathConjunction": "(recycle())",
    "backwardsPathConjunction": "(!(false)) && (mRecycled)",
    "z3Inputs": "[mRecycled0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmRecycled0 = Bool('mRecycled0')\n\nconstraints = [\n  And(Not(False), mRecycled0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmRecycled = Symbol('mRecycled')\npath_conjunction = ((~(False)) & mRecycled)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 151,
    "throwingLine": 152,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/InputEvent.java"
  },
  {
    "qualifiedSignature": "android.view.animation.Animation.setDuration(long)",
    "exception": "throw new IllegalArgumentException(\"Animation duration cannot be negative\");",
    "pathCojunction": "(durationMillis < 0)",
    "symbolicPathConjunction": "(durationMillis < 0)",
    "backwardsPathConjunction": "(durationMillis < 0)",
    "simplifiedPathConjunction": "durationMillis < 0",
    "z3Inputs": "[durationMillis0 = -9223372036854775808]\n[durationMillis0 = -1]\n[durationMillis0 = -2]\n[durationMillis0 = -3]\n[durationMillis0 = -4]\n[durationMillis0 = -5]\n[durationMillis0 = -6]\n[durationMillis0 = -7]\n[durationMillis0 = -8]\n[durationMillis0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndurationMillis0 = Int('durationMillis0')\n\nconstraints = [\n  durationMillis0 >= -9223372036854775808, durationMillis0 <= 9223372036854775807, # implicit\n  durationMillis0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndurationMillis = Symbol('durationMillis')\npath_conjunction = (StrictLessThan(durationMillis, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 442,
    "throwingLine": 444,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/animation/Animation.java"
  }
]