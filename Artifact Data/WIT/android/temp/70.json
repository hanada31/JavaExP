[
  {
    "qualifiedSignature": "android.net.Uri.fromFile(java.io.File)",
    "exception": "throw new NullPointerException(\"file\");",
    "pathCojunction": "(file == null)",
    "symbolicPathConjunction": "(file == null)",
    "backwardsPathConjunction": "(file == null)",
    "simplifiedPathConjunction": "file == null",
    "z3Inputs": "[file0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\n\nconstraints = [\n  file0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nnull = Symbol('null')\npath_conjunction = (Eq(file, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 471,
    "throwingLine": 473,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Uri.java"
  },
  {
    "qualifiedSignature": "android.net.Uri.fromParts(java.lang.String, java.lang.String, java.lang.String)",
    "exception": "throw new NullPointerException(\"scheme\");",
    "pathCojunction": "(scheme == null)",
    "symbolicPathConjunction": "(scheme == null)",
    "backwardsPathConjunction": "(scheme == null)",
    "simplifiedPathConjunction": "null == scheme",
    "z3Inputs": "[scheme0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nscheme0 = String('scheme0')\nssp0 = String('ssp0')\nfragment0 = String('fragment0')\nscheme0_isNull = Bool('scheme0_isNull')\n\nconstraints = [\n  scheme0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nscheme = Symbol('scheme')\nnull = Symbol('null')\npath_conjunction = (Eq(scheme, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 846,
    "throwingLine": 848,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Uri.java"
  },
  {
    "qualifiedSignature": "android.net.Uri.fromParts(java.lang.String, java.lang.String, java.lang.String)",
    "exception": "throw new NullPointerException(\"ssp\");",
    "pathCojunction": "(!(scheme == null)) && (ssp == null)",
    "symbolicPathConjunction": "(!(scheme == null)) && (ssp == null)",
    "backwardsPathConjunction": "(!(scheme == null)) && (ssp == null)",
    "simplifiedPathConjunction": "null == ssp && null != scheme",
    "z3Inputs": "[ssp0_isNull = True, scheme0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nscheme0 = String('scheme0')\nssp0 = String('ssp0')\nfragment0 = String('fragment0')\nscheme0_isNull = Bool('scheme0_isNull')\nssp0_isNull = Bool('ssp0_isNull')\n\nconstraints = [\n  And(Not(scheme0_isNull), ssp0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nscheme = Symbol('scheme')\nssp = Symbol('ssp')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(scheme, null)))) & (Eq(ssp, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 846,
    "throwingLine": 851,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Uri.java"
  },
  {
    "qualifiedSignature": "android.net.Uri.PathSegments.get(int)",
    "exception": "throw new IndexOutOfBoundsException();",
    "pathCojunction": "(index >= size)",
    "symbolicPathConjunction": "(index >= size)",
    "backwardsPathConjunction": "(index >= size)",
    "simplifiedPathConjunction": "index >= size",
    "z3Inputs": "[index0 = 0, size0 = 0]\n[size0 = -1, index0 = -1]\n[size0 = -2, index0 = -2]\n[size0 = -3, index0 = -3]\n[size0 = -4, index0 = -4]\n[size0 = -5, index0 = -5]\n[size0 = -6, index0 = -6]\n[size0 = -7, index0 = -7]\n[size0 = -8, index0 = -8]\n[size0 = -9, index0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nsize0 = Int('size0')\n\nconstraints = [\n  index0 >= size0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nsize = Symbol('size', integer=True)\npath_conjunction = (GreaterThan(index, size))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1016,
    "throwingLine": 1018,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Uri.java"
  },
  {
    "qualifiedSignature": "android.net.Uri.Builder.build()",
    "exception": "throw new UnsupportedOperationException(\"An opaque URI must have a scheme.\");",
    "pathCojunction": "(opaquePart != null) && (this.scheme == null)",
    "symbolicPathConjunction": "(opaquePart != null) && (this.scheme == null)",
    "backwardsPathConjunction": "(opaquePart != null) && (this.scheme == null)",
    "z3Inputs": "[opaquePart0_isNull = False, this_scheme0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthis_scheme0 = String('this_scheme0')\nopaquePart0_isNull = Bool('opaquePart0_isNull')\nthis_scheme0_isNull = Bool('this_scheme0_isNull')\n\nconstraints = [\n  And(Not(opaquePart0_isNull), this_scheme0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1557,
    "throwingLine": 1560,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Uri.java"
  },
  {
    "qualifiedSignature": "android.net.Uri.getQueryParameter(java.lang.String)",
    "exception": "throw new NullPointerException(\"key\");",
    "pathCojunction": "(!(isOpaque())) && (key == null)",
    "symbolicPathConjunction": "(!(isOpaque())) && (key == null)",
    "backwardsPathConjunction": "(!(isOpaque())) && (key == null)",
    "simplifiedPathConjunction": "key == null && !isOpaque()",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  And(Not(isOpaque()), key0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\n_isOpaque = Symbol('_isOpaque')\nnull = Symbol('null')\npath_conjunction = ((~(_isOpaque)) & (Eq(key, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 1707,
    "throwingLine": 1712,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Uri.java"
  },
  {
    "qualifiedSignature": "android.net.Uri.getQueryParameter(java.lang.String)",
    "exception": "throw new UnsupportedOperationException(NOT_HIERARCHICAL);",
    "pathCojunction": "(isOpaque())",
    "symbolicPathConjunction": "(isOpaque())",
    "backwardsPathConjunction": "(isOpaque())",
    "simplifiedPathConjunction": "isOpaque()",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\n\nconstraints = [\n  isOpaque()\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_isOpaque = Symbol('_isOpaque')\npath_conjunction = _isOpaque\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 1707,
    "throwingLine": 1709,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Uri.java"
  },
  {
    "qualifiedSignature": "android.net.Uri.getBooleanQueryParameter(java.lang.String, boolean)",
    "exception": "throw new UnsupportedOperationException(NOT_HIERARCHICAL);",
    "pathCojunction": "(isOpaque())",
    "symbolicPathConjunction": "(getQueryParameter(key))",
    "backwardsPathConjunction": "(isOpaque())",
    "simplifiedPathConjunction": "isOpaque()",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\ndefaultValue0 = Bool('defaultValue0')\n\nconstraints = [\n  isOpaque()\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_isOpaque = Symbol('_isOpaque')\npath_conjunction = _isOpaque\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1761,
    "throwingLine": 1762,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Uri.java"
  },
  {
    "qualifiedSignature": "android.net.Uri.getBooleanQueryParameter(java.lang.String, boolean)",
    "exception": "throw new NullPointerException(\"key\");",
    "pathCojunction": "(!(isOpaque())) && (key == null)",
    "symbolicPathConjunction": "(getQueryParameter(key))",
    "backwardsPathConjunction": "(!(isOpaque())) && (key == null)",
    "simplifiedPathConjunction": "key == null && !isOpaque()",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\ndefaultValue0 = Bool('defaultValue0')\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  And(Not(isOpaque()), key0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\n_isOpaque = Symbol('_isOpaque')\nnull = Symbol('null')\npath_conjunction = ((~(_isOpaque)) & (Eq(key, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1761,
    "throwingLine": 1762,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Uri.java"
  }
]