[
  {
    "qualifiedSignature": "android.text.TextDirectionHeuristics.TextDirectionHeuristicImpl.isRtl(java.lang.CharSequence, int, int)",
    "exception": "throw new IllegalArgumentException();",
    "pathCojunction": "(cs == null || start < 0 || count < 0 || cs.length() - count < start)",
    "symbolicPathConjunction": "(cs == null || start < 0 || count < 0 || cs.length() - count < start)",
    "backwardsPathConjunction": "(cs == null || start < 0 || count < 0 || cs.length() - count < start)",
    "simplifiedPathConjunction": "cs == null || count > cs.length() - start || count < 0 || start < 0",
    "z3Inputs": "[count0 = -1, cs0 = \"!0!\"]\n[count0 = -2, cs0 = \"\"]\n[count0 = -3, cs0 = \"\"]\n[count0 = -4, cs0 = \"\"]\n[count0 = -5, cs0 = \"\"]\n[count0 = -6, cs0 = \"\"]\n[count0 = -7, cs0 = \"\"]\n[count0 = -8, cs0 = \"\"]\n[count0 = -9, cs0 = \"\"]\n[count0 = -10, cs0 = \"\"]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncs0 = String('cs0')\nstart0 = Int('start0')\ncount0 = Int('count0')\ncs0_isNull = Bool('cs0_isNull')\n\nconstraints = [\n  Or(Or(Or(cs0_isNull, start0 < 0), count0 < 0), Length(cs0) - count0 < start0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncs = Symbol('cs')\nstart = Symbol('start', integer=True)\ncount = Symbol('count', integer=True)\ncs_length = Symbol('cs_length')\nnull = Symbol('null')\npath_conjunction = ((((Eq(cs, null)) | (StrictLessThan(start, 0))) | (StrictLessThan(count, 0))) | (StrictLessThan((cs_length - count), start)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 153,
    "throwingLine": 155,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/TextDirectionHeuristics.java"
  },
  {
    "qualifiedSignature": "android.text.TextUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int)",
    "exception": "throw new IndexOutOfBoundsException()",
    "pathCojunction": "(!(needle.length() == 0)) && (true) && (!(start > s.length() - needle.length())) && (!(start < 0)) && (2 * len < needle.length())",
    "symbolicPathConjunction": "((!(needle.length() == 0)) && (true) && (!(start > end - needle.length())) && (!(start < 0)) && (regionMatches(s, start, needle, 0, needle.length())))",
    "backwardsPathConjunction": "(!(needle.length() == 0)) && (true) && (!(start > s.length() - needle.length())) && (!(start < 0)) && (2 * len < needle.length())",
    "simplifiedPathConjunction": "start >= 0 && needle.length() <= s.length() - start && needle.length() > 2*len && needle.length() != 0",
    "z3Inputs": "[start0 = 0, needle0 = \"A\", s0 = \"B\", len0 = 0]\n[start0 = 0, needle0 = \"C\", s0 = \"D\", len0 = -1]\n[start0 = 0, needle0 = \"E\", s0 = \"F\", len0 = -2]\n[start0 = 0, needle0 = \"G\", s0 = \"H\", len0 = -3]\n[start0 = 0, needle0 = \"I\", s0 = \"J\", len0 = -4]\n[start0 = 0, needle0 = \"K\", s0 = \"L\", len0 = -5]\n[start0 = 0, needle0 = \"M\", s0 = \"N\", len0 = -6]\n[start0 = 0, needle0 = \"O\", s0 = \"P\", len0 = -7]\n[start0 = 0, needle0 = \"Q\", s0 = \"R\", len0 = -8]\n[start0 = 0, needle0 = \"S\", s0 = \"T\", len0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nneedle0 = String('needle0')\nstart0 = Int('start0')\nlen0 = Int('len0')\n\nconstraints = [\n  And(And(And(And(Not(Length(needle0) == 0), True), Not(start0 > Length(s0) - Length(needle0))), Not(start0 < 0)), 2 * len0 < Length(needle0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nneedle = Symbol('needle')\nstart = Symbol('start', integer=True)\nlen = Symbol('len', integer=True)\nneedle_length = Symbol('needle_length')\ns_length = Symbol('s_length')\npath_conjunction = (((((~((Eq(needle_length, 0)))) & True) & (~((StrictGreaterThan(start, (s_length - needle_length)))))) & (~((StrictLessThan(start, 0))))) & (StrictLessThan((2 * len), needle_length)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 273,
    "throwingLine": 274,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/TextUtils.java"
  },
  {
    "qualifiedSignature": "android.text.TextUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int, int)",
    "exception": "throw new IndexOutOfBoundsException()",
    "pathCojunction": "(!(nlen == 0)) && (true) && (!(start > end - nlen)) && (!(start < 0)) && (2 * len < nlen)",
    "symbolicPathConjunction": "(!(needle.length() == 0)) && (true) && (!(start > end - needle.length())) && (!(start < 0)) && (regionMatches(s, start, needle, 0, needle.length()))",
    "backwardsPathConjunction": "(!(needle.length() == 0)) && (true) && (!(start > end - needle.length())) && (!(start < 0)) && (2 * len < needle.length())",
    "simplifiedPathConjunction": "end >= needle.length() + start && start >= 0 && needle.length() > 2*len && needle.length() != 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nneedle0 = String('needle0')\nstart0 = Int('start0')\nend0 = Int('end0')\nnlen0 = Int('nlen0')\nstart1 = Int('start1')\nlen0 = Int('len0')\n\nconstraints = [\n  nlen0 == Length(needle0),\n  c0 == needle0.charAt(0),\n  start1 == indexOf(s0, c0, start0),\n  And(And(And(And(Not(nlen0 == 0), True), Not(start1 > end0 - nlen0)), Not(start1 < 0)), 2 * len0 < nlen0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nneedle = Symbol('needle')\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\nlen = Symbol('len', integer=True)\nneedle_length = Symbol('needle_length')\npath_conjunction = (((((~((Eq(needle_length, 0)))) & True) & (~((StrictGreaterThan(start, (end - needle_length)))))) & (~((StrictLessThan(start, 0))))) & (StrictLessThan((2 * len), needle_length)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 278,
    "throwingLine": 295,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/TextUtils.java"
  },
  {
    "qualifiedSignature": "android.text.TextUtils.regionMatches(java.lang.CharSequence, int, java.lang.CharSequence, int, int)",
    "exception": "throw new IndexOutOfBoundsException();",
    "pathCojunction": "(tempLen < len)",
    "symbolicPathConjunction": "(tempLen < len)",
    "backwardsPathConjunction": "(2 * len < len)",
    "simplifiedPathConjunction": "len < 0",
    "z3Inputs": "[len0 = -1, tempLen0 = -2]\n[tempLen0 = -4, len0 = -2]\n[tempLen0 = -6, len0 = -3]\n[tempLen0 = -8, len0 = -4]\n[tempLen0 = -10, len0 = -5]\n[tempLen0 = -12, len0 = -6]\n[tempLen0 = -14, len0 = -7]\n[tempLen0 = -16, len0 = -8]\n[tempLen0 = -18, len0 = -9]\n[tempLen0 = -20, len0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\none0 = String('one0')\ntoffset0 = Int('toffset0')\ntwo0 = String('two0')\nooffset0 = Int('ooffset0')\nlen0 = Int('len0')\ntempLen0 = Int('tempLen0')\n\nconstraints = [\n  tempLen0 == 2 * len0,\n  tempLen0 < len0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlen = Symbol('len', integer=True)\npath_conjunction = (StrictLessThan((2 * len), len))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 306,
    "throwingLine": 310,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/TextUtils.java"
  },
  {
    "qualifiedSignature": "android.text.TextUtils.SimpleStringSplitter.remove()",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 520,
    "throwingLine": 521,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/TextUtils.java"
  }
]