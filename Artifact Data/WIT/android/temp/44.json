[
  {
    "qualifiedSignature": "android.text.SpannableStringBuilder.charAt(int)",
    "exception": "throw new IndexOutOfBoundsException(\"charAt: \" + where + \" >= length \" + len);",
    "pathCojunction": "(!(where < 0)) && (where >= len)",
    "symbolicPathConjunction": "(length()) && (!(where < 0)) && (where >= len)",
    "backwardsPathConjunction": "(!(where < 0)) && (where >= mText.length - mGapLength)",
    "simplifiedPathConjunction": "mGapLength >= mText.length - where && where >= 0",
    "z3Inputs": "[where0 = 0, len0 = 0, mGapLength0 = 0, mText0_length = 0]\n[mGapLength0 = -1, mText0_length = 1, where0 = 2, len0 = 2]\n[mGapLength0 = 1, mText0_length = 2, where0 = 1, len0 = 1]\n[mGapLength0 = 2, mText0_length = 3, where0 = 1, len0 = 1]\n[mGapLength0 = 3, mText0_length = 4, where0 = 1, len0 = 1]\n[mGapLength0 = 4, mText0_length = 5, where0 = 1, len0 = 1]\n[mGapLength0 = 5, mText0_length = 6, where0 = 1, len0 = 1]\n[mGapLength0 = 6, mText0_length = 7, where0 = 1, len0 = 1]\n[mGapLength0 = 7, mText0_length = 8, where0 = 1, len0 = 1]\n[mGapLength0 = 8, mText0_length = 9, where0 = 1, len0 = 1]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwhere0 = Int('where0')\nmGapLength0 = Int('mGapLength0')\nlen0 = Int('len0')\nmText0_length = Int('mText0_length')\n\nconstraints = [\n  len0 == mText0_length - mGapLength0,\n  mText0_length >= 0, # implicit\n  And(Not(where0 < 0), where0 >= len0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwhere = Symbol('where', integer=True)\nmGapLength = Symbol('mGapLength', integer=True)\nmText = Symbol('mText')\nmText_length = Symbol('mText_length', integer=True)\npath_conjunction = ((~((StrictLessThan(where, 0)))) & (GreaterThan(where, (mText_length - mGapLength))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 119,
    "throwingLine": 124,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/SpannableStringBuilder.java"
  },
  {
    "qualifiedSignature": "android.text.SpannableStringBuilder.charAt(int)",
    "exception": "throw new IndexOutOfBoundsException(\"charAt: \" + where + \" < 0\");",
    "pathCojunction": "(where < 0)",
    "symbolicPathConjunction": "(length()) && (where < 0)",
    "backwardsPathConjunction": "(where < 0)",
    "simplifiedPathConjunction": "where < 0",
    "z3Inputs": "[where0 = -1, len0 = 0, mGapLength0 = 0, mText0_length = 0]\n[mGapLength0 = -1, mText0_length = 1, where0 = -2, len0 = 2]\n[mGapLength0 = 0, mText0_length = 0, where0 = -2, len0 = 0]\n[mGapLength0 = 0, mText0_length = 0, where0 = -3, len0 = 0]\n[mGapLength0 = 0, mText0_length = 0, where0 = -4, len0 = 0]\n[mGapLength0 = 0, mText0_length = 0, where0 = -5, len0 = 0]\n[mGapLength0 = 0, mText0_length = 0, where0 = -6, len0 = 0]\n[mGapLength0 = 0, mText0_length = 0, where0 = -7, len0 = 0]\n[mGapLength0 = 0, mText0_length = 0, where0 = -8, len0 = 0]\n[mGapLength0 = 0, mText0_length = 0, where0 = -9, len0 = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwhere0 = Int('where0')\nmGapLength0 = Int('mGapLength0')\nlen0 = Int('len0')\nmText0_length = Int('mText0_length')\n\nconstraints = [\n  len0 == mText0_length - mGapLength0,\n  mText0_length >= 0, # implicit\n  where0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwhere = Symbol('where', integer=True)\npath_conjunction = (StrictLessThan(where, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 119,
    "throwingLine": 122,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/SpannableStringBuilder.java"
  },
  {
    "qualifiedSignature": "android.text.SpannableStringBuilder.getChars(int, int, char[], int)",
    "exception": "throw new IndexOutOfBoundsException(\"getChars\" + \" \" + region(start, end) + \" starts before 0\")",
    "pathCojunction": "(!(end < start)) && (!(start > mText.length - mGapLength || end > mText.length - mGapLength)) && (start < 0 || end < 0)",
    "symbolicPathConjunction": "(!(!(end < start)) && (length()) && (!(start > mText.length - mGapLength || end > mText.length - mGapLength)) && (start < 0 || end < 0))",
    "backwardsPathConjunction": "(!(end < start)) && (!(start > mText.length - mGapLength || end > mText.length - mGapLength)) && (start < 0 || end < 0)",
    "simplifiedPathConjunction": "end >= start && end <= -mGapLength + mText.length && mGapLength <= mText.length - start && (end < 0 || start < 0)",
    "z3Inputs": "[mGapLength0 = 0, start0 = -1, mText0_length = 0, end0 = -1]\n[mGapLength0 = -1,\n start0 = -2,\n mText0_length = 1,\n end0 = -2]\n[mGapLength0 = -2,\n start0 = -3,\n mText0_length = 1,\n end0 = -3]\n[mGapLength0 = -3,\n start0 = -4,\n mText0_length = 1,\n end0 = -4]\n[mGapLength0 = -3,\n start0 = -4,\n mText0_length = 2,\n end0 = -4]\n[mGapLength0 = -3,\n start0 = -4,\n mText0_length = 3,\n end0 = -4]\n[mGapLength0 = -4,\n start0 = -4,\n mText0_length = 4,\n end0 = -4]\n[mGapLength0 = -4,\n start0 = -4,\n mText0_length = 5,\n end0 = -4]\n[mGapLength0 = -4,\n start0 = -4,\n mText0_length = 6,\n end0 = -4]\n[mGapLength0 = -4,\n start0 = -4,\n mText0_length = 7,\n end0 = -4]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstart0 = Int('start0')\nend0 = Int('end0')\ndestoff0 = Int('destoff0')\nmGapLength0 = Int('mGapLength0')\nmText0_length = Int('mText0_length')\n\nconstraints = [\n  mText0_length >= 0, # implicit\n  And(And(Not(end0 < start0), Not(Or(start0 > mText0_length - mGapLength0, end0 > mText0_length - mGapLength0))), Or(start0 < 0, end0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\nmGapLength = Symbol('mGapLength', integer=True)\nmText = Symbol('mText')\nmText_length = Symbol('mText_length', integer=True)\npath_conjunction = (((~((StrictLessThan(end, start)))) & (~(((StrictGreaterThan(start, (mText_length - mGapLength))) | (StrictGreaterThan(end, (mText_length - mGapLength))))))) & ((StrictLessThan(start, 0)) | (StrictLessThan(end, 0))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1204,
    "throwingLine": 1205,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/SpannableStringBuilder.java"
  },
  {
    "qualifiedSignature": "android.text.SpannableStringBuilder.getChars(int, int, char[], int)",
    "exception": "throw new IndexOutOfBoundsException(\"getChars\" + \" \" + region(start, end) + \" ends beyond length \" + len)",
    "pathCojunction": "(!(end < start)) && (start > mText.length - mGapLength || end > mText.length - mGapLength)",
    "symbolicPathConjunction": "(!(!(end < start)) && (length()) && (start > mText.length - mGapLength || end > mText.length - mGapLength))",
    "backwardsPathConjunction": "(!(end < start)) && (start > mText.length - mGapLength || end > mText.length - mGapLength)",
    "simplifiedPathConjunction": "end >= start && (end > -mGapLength + mText.length || mGapLength > mText.length - start)",
    "z3Inputs": "[mGapLength0 = 1, start0 = 0, mText0_length = 0, end0 = 0]\n[mGapLength0 = 0, start0 = -1, mText0_length = 1, end0 = 2]\n[mGapLength0 = -1, start0 = 2, mText0_length = 0, end0 = 2]\n[mGapLength0 = -2, start0 = 3, mText0_length = 0, end0 = 3]\n[mGapLength0 = -1, start0 = 2, mText0_length = 0, end0 = 4]\n[mGapLength0 = -1, start0 = 2, mText0_length = 0, end0 = 5]\n[mGapLength0 = -1, start0 = 2, mText0_length = 0, end0 = 6]\n[mGapLength0 = -1, start0 = 2, mText0_length = 0, end0 = 7]\n[mGapLength0 = -1, start0 = 2, mText0_length = 0, end0 = 8]\n[mGapLength0 = -1, start0 = 2, mText0_length = 0, end0 = 9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstart0 = Int('start0')\nend0 = Int('end0')\ndestoff0 = Int('destoff0')\nmGapLength0 = Int('mGapLength0')\nmText0_length = Int('mText0_length')\n\nconstraints = [\n  mText0_length >= 0, # implicit\n  And(Not(end0 < start0), Or(start0 > mText0_length - mGapLength0, end0 > mText0_length - mGapLength0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\nmGapLength = Symbol('mGapLength', integer=True)\nmText = Symbol('mText')\nmText_length = Symbol('mText_length', integer=True)\npath_conjunction = ((~((StrictLessThan(end, start)))) & ((StrictGreaterThan(start, (mText_length - mGapLength))) | (StrictGreaterThan(end, (mText_length - mGapLength)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1204,
    "throwingLine": 1205,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/SpannableStringBuilder.java"
  },
  {
    "qualifiedSignature": "android.text.SpannableStringBuilder.getChars(int, int, char[], int)",
    "exception": "throw new IndexOutOfBoundsException(\"getChars\" + \" \" + region(start, end) + \" has end before start\")",
    "pathCojunction": "(end < start)",
    "symbolicPathConjunction": "(!(end < start))",
    "backwardsPathConjunction": "(end < start)",
    "simplifiedPathConjunction": "end < start",
    "z3Inputs": "[start0 = 1, end0 = 0]\n[start0 = 0, end0 = -1]\n[start0 = -1, end0 = -2]\n[start0 = -2, end0 = -3]\n[start0 = -3, end0 = -4]\n[start0 = -4, end0 = -5]\n[start0 = -5, end0 = -6]\n[start0 = -6, end0 = -7]\n[start0 = -7, end0 = -8]\n[start0 = -8, end0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstart0 = Int('start0')\nend0 = Int('end0')\ndestoff0 = Int('destoff0')\n\nconstraints = [\n  end0 < start0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (StrictLessThan(end, start))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1204,
    "throwingLine": 1205,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/SpannableStringBuilder.java"
  },
  {
    "qualifiedSignature": "android.text.SpannableStringBuilder.toString()",
    "exception": "throw new IndexOutOfBoundsException(\"getChars\" + \" \" + region(0, len) + \" has end before start\")",
    "pathCojunction": "(len < 0)",
    "symbolicPathConjunction": "(length()) && (getChars(0, len, buf, 0))",
    "backwardsPathConjunction": "(mText.length - mGapLength < 0)",
    "simplifiedPathConjunction": "mGapLength > mText.length",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmGapLength0 = Int('mGapLength0')\nlen0 = Int('len0')\nmText0_length = Int('mText0_length')\n\nconstraints = [\n  len0 == mText0_length - mGapLength0,\n  buf0 == new char[len0],\n  mText0_length >= 0, # implicit\n  len0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmGapLength = Symbol('mGapLength', integer=True)\nmText = Symbol('mText')\nmText_length = Symbol('mText_length', integer=True)\npath_conjunction = (StrictLessThan((mText_length - mGapLength), 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1223,
    "throwingLine": 1227,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/SpannableStringBuilder.java"
  },
  {
    "qualifiedSignature": "android.text.SpannableStringBuilder.substring(int, int)",
    "exception": "throw new IndexOutOfBoundsException(\"getChars\" + \" \" + region(start, end) + \" ends beyond length \" + len)",
    "pathCojunction": "(!(end < start)) && (start > mText.length - mGapLength || end > mText.length - mGapLength)",
    "symbolicPathConjunction": "(getChars(start, end, buf, 0))",
    "backwardsPathConjunction": "(!(end < start)) && (start > mText.length - mGapLength || end > mText.length - mGapLength)",
    "simplifiedPathConjunction": "end >= start && (end > -mGapLength + mText.length || mGapLength > mText.length - start)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstart0 = Int('start0')\nend0 = Int('end0')\nmGapLength0 = Int('mGapLength0')\nmText0_length = Int('mText0_length')\n\nconstraints = [\n  buf0 == new char[end0 - start0],\n  mText0_length >= 0, # implicit\n  And(Not(end0 < start0), Or(start0 > mText0_length - mGapLength0, end0 > mText0_length - mGapLength0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\nmGapLength = Symbol('mGapLength', integer=True)\nmText = Symbol('mText')\nmText_length = Symbol('mText_length', integer=True)\npath_conjunction = ((~((StrictLessThan(end, start)))) & ((StrictGreaterThan(start, (mText_length - mGapLength))) | (StrictGreaterThan(end, (mText_length - mGapLength)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1237,
    "throwingLine": 1239,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/SpannableStringBuilder.java"
  },
  {
    "qualifiedSignature": "android.text.SpannableStringBuilder.substring(int, int)",
    "exception": "throw new IndexOutOfBoundsException(\"getChars\" + \" \" + region(start, end) + \" starts before 0\")",
    "pathCojunction": "(!(end < start)) && (!(start > mText.length - mGapLength || end > mText.length - mGapLength)) && (start < 0 || end < 0)",
    "symbolicPathConjunction": "(getChars(start, end, buf, 0))",
    "backwardsPathConjunction": "(!(end < start)) && (!(start > mText.length - mGapLength || end > mText.length - mGapLength)) && (start < 0 || end < 0)",
    "simplifiedPathConjunction": "end >= start && end <= -mGapLength + mText.length && mGapLength <= mText.length - start && (end < 0 || start < 0)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstart0 = Int('start0')\nend0 = Int('end0')\nmGapLength0 = Int('mGapLength0')\nmText0_length = Int('mText0_length')\n\nconstraints = [\n  buf0 == new char[end0 - start0],\n  mText0_length >= 0, # implicit\n  And(And(Not(end0 < start0), Not(Or(start0 > mText0_length - mGapLength0, end0 > mText0_length - mGapLength0))), Or(start0 < 0, end0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\nmGapLength = Symbol('mGapLength', integer=True)\nmText = Symbol('mText')\nmText_length = Symbol('mText_length', integer=True)\npath_conjunction = (((~((StrictLessThan(end, start)))) & (~(((StrictGreaterThan(start, (mText_length - mGapLength))) | (StrictGreaterThan(end, (mText_length - mGapLength))))))) & ((StrictLessThan(start, 0)) | (StrictLessThan(end, 0))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1237,
    "throwingLine": 1239,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/SpannableStringBuilder.java"
  },
  {
    "qualifiedSignature": "android.text.SpannableStringBuilder.substring(int, int)",
    "exception": "throw new IndexOutOfBoundsException(\"getChars\" + \" \" + region(start, end) + \" has end before start\")",
    "pathCojunction": "(end < start)",
    "symbolicPathConjunction": "(getChars(start, end, buf, 0))",
    "backwardsPathConjunction": "(end < start)",
    "simplifiedPathConjunction": "end < start",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstart0 = Int('start0')\nend0 = Int('end0')\n\nconstraints = [\n  buf0 == new char[end0 - start0],\n  end0 < start0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (StrictLessThan(end, start))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1237,
    "throwingLine": 1239,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/SpannableStringBuilder.java"
  }
]