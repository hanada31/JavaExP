[
  {
    "qualifiedSignature": "android.util.SparseBooleanArray.setKeyAt(int, int)",
    "exception": "throw new ArrayIndexOutOfBoundsException(index);",
    "pathCojunction": "(index >= mSize)",
    "symbolicPathConjunction": "(index >= mSize)",
    "backwardsPathConjunction": "(index >= mSize)",
    "simplifiedPathConjunction": "index >= mSize",
    "z3Inputs": "[index0 = 0, mSize0 = 0]\n[mSize0 = -1, index0 = -1]\n[mSize0 = -2, index0 = -2]\n[mSize0 = -3, index0 = -3]\n[mSize0 = -4, index0 = -4]\n[mSize0 = -5, index0 = -5]\n[mSize0 = -6, index0 = -6]\n[mSize0 = -7, index0 = -7]\n[mSize0 = -8, index0 = -8]\n[mSize0 = -9, index0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nkey0 = Int('key0')\nmSize0 = Int('mSize0')\n\nconstraints = [\n  index0 >= mSize0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nmSize = Symbol('mSize', integer=True)\npath_conjunction = (GreaterThan(index, mSize))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 227,
    "throwingLine": 230,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/SparseBooleanArray.java"
  },
  {
    "qualifiedSignature": "android.util.ArraySet.append(E)",
    "exception": "throw new IllegalStateException(\"Array is full\");",
    "pathCojunction": "(!(value == null)) && (index >= mHashes.length)",
    "symbolicPathConjunction": "(!(value == null)) && (index >= mHashes.length)",
    "backwardsPathConjunction": "(!(value == null)) && (mSize >= mHashes.length)",
    "simplifiedPathConjunction": "mHashes.length <= mSize && null != value",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nindex0 = Int('index0')\nmIdentityHashCode0 = Bool('mIdentityHashCode0')\nhash0 = Int('hash0')\nvalue0_isNull = Bool('value0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  index0 == mSize0,\n  hash0 == (mIdentityHashCode0 ? System.identityHashCode(value0) : value0.hashCode()),\n  mHashes0_length >= 0, # implicit\n  And(Not(value0_isNull), index0 >= mHashes0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nmSize = Symbol('mSize', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(value, null)))) & (GreaterThan(mSize, mHashes_length)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 460,
    "throwingLine": 465,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArraySet.java"
  },
  {
    "qualifiedSignature": "android.util.ArraySet.append(E)",
    "exception": "throw new IllegalStateException(\"Array is full\");",
    "pathCojunction": "(value == null) && (index >= mHashes.length)",
    "symbolicPathConjunction": "(value == null) && (index >= mHashes.length)",
    "backwardsPathConjunction": "(value == null) && (mSize >= mHashes.length)",
    "simplifiedPathConjunction": "null == value && mHashes.length <= mSize",
    "z3Inputs": "[mHashes0_length = 0,\n mSize0 = 0,\n hash0 = 0,\n index0 = 0,\n value0_isNull = True]\n[mHashes0_length = 1,\n value0_isNull = True,\n index0 = 1,\n mSize0 = 1,\n hash0 = 0]\n[mHashes0_length = 2,\n value0_isNull = True,\n index0 = 2,\n mSize0 = 2,\n hash0 = 0]\n[mHashes0_length = 1,\n value0_isNull = True,\n index0 = 3,\n mSize0 = 3,\n hash0 = 0]\n[mHashes0_length = 1,\n value0_isNull = True,\n index0 = 4,\n mSize0 = 4,\n hash0 = 0]\n[mHashes0_length = 1,\n value0_isNull = True,\n index0 = 5,\n mSize0 = 5,\n hash0 = 0]\n[mHashes0_length = 1,\n value0_isNull = True,\n index0 = 6,\n mSize0 = 6,\n hash0 = 0]\n[mHashes0_length = 1,\n value0_isNull = True,\n index0 = 7,\n mSize0 = 7,\n hash0 = 0]\n[mHashes0_length = 1,\n value0_isNull = True,\n index0 = 8,\n mSize0 = 8,\n hash0 = 0]\n[mHashes0_length = 1,\n value0_isNull = True,\n index0 = 9,\n mSize0 = 9,\n hash0 = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nindex0 = Int('index0')\nhash0 = Int('hash0')\nvalue0_isNull = Bool('value0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  index0 == mSize0,\n  hash0 == 0,\n  mHashes0_length >= 0, # implicit\n  And(value0_isNull, index0 >= mHashes0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nmSize = Symbol('mSize', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Eq(value, null)) & (GreaterThan(mSize, mHashes_length)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 460,
    "throwingLine": 465,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArraySet.java"
  }
]