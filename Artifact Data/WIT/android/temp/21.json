[
  {
    "qualifiedSignature": "android.app.DownloadManager.Request.addRequestHeader(java.lang.String, java.lang.String)",
    "exception": "throw new NullPointerException(\"header cannot be null\");",
    "pathCojunction": "(header == null)",
    "symbolicPathConjunction": "(header == null)",
    "backwardsPathConjunction": "(header == null)",
    "simplifiedPathConjunction": "header == null",
    "z3Inputs": "[header0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nheader0 = String('header0')\nvalue0 = String('value0')\nheader0_isNull = Bool('header0_isNull')\n\nconstraints = [\n  header0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nheader = Symbol('header')\nnull = Symbol('null')\npath_conjunction = (Eq(header, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 618,
    "throwingLine": 620,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/DownloadManager.java"
  },
  {
    "qualifiedSignature": "android.app.DownloadManager.Request.addRequestHeader(java.lang.String, java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"header may not contain ':'\");",
    "pathCojunction": "(!(header == null)) && (header.contains(\":\"))",
    "symbolicPathConjunction": "(!(header == null)) && (header.contains(\":\"))",
    "backwardsPathConjunction": "(!(header == null)) && (header.contains(\":\"))",
    "simplifiedPathConjunction": "header.contains(\":\") && header != null",
    "z3Inputs": "[header0 = \":\", header0_isNull = False]\n[header0 = \"A:\", header0_isNull = False]\n[header0 = \":B\", header0_isNull = False]\n[header0 = \":C\", header0_isNull = False]\n[header0 = \":D\", header0_isNull = False]\n[header0 = \":E\", header0_isNull = False]\n[header0 = \":F\", header0_isNull = False]\n[header0 = \":G\", header0_isNull = False]\n[header0 = \":H\", header0_isNull = False]\n[header0 = \":I\", header0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nheader0 = String('header0')\nvalue0 = String('value0')\nheader0_isNull = Bool('header0_isNull')\n\nconstraints = [\n  And(Not(header0_isNull), Contains(header0, StringVal(':')))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nheader = Symbol('header')\nheader_contains = Symbol('header_contains')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(header, null)))) & header_contains)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 618,
    "throwingLine": 623,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/DownloadManager.java"
  },
  {
    "qualifiedSignature": "android.app.DownloadManager.Query.orderBy(java.lang.String, int)",
    "exception": "throw new IllegalArgumentException(\"Cannot order by \" + column);",
    "pathCojunction": "(!(direction != ORDER_ASCENDING && direction != ORDER_DESCENDING)) && (!(column.equals(COLUMN_LAST_MODIFIED_TIMESTAMP))) && (!(column.equals(COLUMN_TOTAL_SIZE_BYTES)))",
    "symbolicPathConjunction": "(!(direction != ORDER_ASCENDING && direction != ORDER_DESCENDING)) && (!(column.equals(COLUMN_LAST_MODIFIED_TIMESTAMP))) && (!(column.equals(COLUMN_TOTAL_SIZE_BYTES)))",
    "backwardsPathConjunction": "(!(direction != ORDER_ASCENDING && direction != ORDER_DESCENDING)) && (!(column.equals(COLUMN_LAST_MODIFIED_TIMESTAMP))) && (!(column.equals(COLUMN_TOTAL_SIZE_BYTES)))",
    "simplifiedPathConjunction": "!column.equals(\"total_size\") && (direction == 1 || direction == 2)",
    "z3Inputs": "[direction0 = 1,\n column0 = \"\",\n COLUMN_LAST_MODIFIED_TIMESTAMP0 = \"last_modified_timestamp\",\n COLUMN_TOTAL_SIZE_BYTES0 = \"total_size\",\n ORDER_DESCENDING0 = 2,\n ORDER_ASCENDING0 = 1]\n[direction0 = 1,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2,\n COLUMN_TOTAL_SIZE_BYTES0 = \"total_size\",\n column0 = \"A\",\n COLUMN_LAST_MODIFIED_TIMESTAMP0 = \"last_modified_timestamp\"]\n[direction0 = 2,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2,\n COLUMN_TOTAL_SIZE_BYTES0 = \"total_size\",\n column0 = \"\",\n COLUMN_LAST_MODIFIED_TIMESTAMP0 = \"last_modified_timestamp\"]\n[direction0 = 2,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2,\n COLUMN_TOTAL_SIZE_BYTES0 = \"total_size\",\n column0 = \"B\",\n COLUMN_LAST_MODIFIED_TIMESTAMP0 = \"last_modified_timestamp\"]\n[direction0 = 2,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2,\n COLUMN_TOTAL_SIZE_BYTES0 = \"total_size\",\n column0 = \"C\",\n COLUMN_LAST_MODIFIED_TIMESTAMP0 = \"last_modified_timestamp\"]\n[direction0 = 2,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2,\n COLUMN_TOTAL_SIZE_BYTES0 = \"total_size\",\n column0 = \"D\",\n COLUMN_LAST_MODIFIED_TIMESTAMP0 = \"last_modified_timestamp\"]\n[direction0 = 2,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2,\n COLUMN_TOTAL_SIZE_BYTES0 = \"total_size\",\n column0 = \"E\",\n COLUMN_LAST_MODIFIED_TIMESTAMP0 = \"last_modified_timestamp\"]\n[direction0 = 2,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2,\n COLUMN_TOTAL_SIZE_BYTES0 = \"total_size\",\n column0 = \"F\",\n COLUMN_LAST_MODIFIED_TIMESTAMP0 = \"last_modified_timestamp\"]\n[direction0 = 2,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2,\n COLUMN_TOTAL_SIZE_BYTES0 = \"total_size\",\n column0 = \"G\",\n COLUMN_LAST_MODIFIED_TIMESTAMP0 = \"last_modified_timestamp\"]\n[direction0 = 2,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2,\n COLUMN_TOTAL_SIZE_BYTES0 = \"total_size\",\n column0 = \"H\",\n COLUMN_LAST_MODIFIED_TIMESTAMP0 = \"last_modified_timestamp\"]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncolumn0 = String('column0')\ndirection0 = Int('direction0')\nORDER_ASCENDING0 = Int('ORDER_ASCENDING0')\nORDER_DESCENDING0 = Int('ORDER_DESCENDING0')\nCOLUMN_LAST_MODIFIED_TIMESTAMP0 = String('COLUMN_LAST_MODIFIED_TIMESTAMP0')\nCOLUMN_TOTAL_SIZE_BYTES0 = String('COLUMN_TOTAL_SIZE_BYTES0')\n\nconstraints = [\n  ORDER_ASCENDING0 == 1,\n  ORDER_DESCENDING0 == 2,\n  COLUMN_LAST_MODIFIED_TIMESTAMP0 == StringVal(\"last_modified_timestamp\"), \n  COLUMN_TOTAL_SIZE_BYTES0 == StringVal(\"total_size\"), \n  And(And(Not(And(direction0 != ORDER_ASCENDING0, direction0 != ORDER_DESCENDING0)), Not(column0 == COLUMN_LAST_MODIFIED_TIMESTAMP0)), Not(column0 == COLUMN_TOTAL_SIZE_BYTES0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncolumn = Symbol('column')\ndirection = Symbol('direction', integer=True)\ncolumn_equals = Symbol('column_equals')\npath_conjunction = (((~(((Ne(direction, 1)) & (Ne(direction, 2))))) & (~(column_equals))) & (~(column_equals)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 935,
    "throwingLine": 945,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/DownloadManager.java"
  },
  {
    "qualifiedSignature": "android.app.DownloadManager.Query.orderBy(java.lang.String, int)",
    "exception": "throw new IllegalArgumentException(\"Invalid direction: \" + direction);",
    "pathCojunction": "(direction != ORDER_ASCENDING && direction != ORDER_DESCENDING)",
    "symbolicPathConjunction": "(direction != ORDER_ASCENDING && direction != ORDER_DESCENDING)",
    "backwardsPathConjunction": "(direction != ORDER_ASCENDING && direction != ORDER_DESCENDING)",
    "simplifiedPathConjunction": "direction != 1 && direction != 2",
    "z3Inputs": "[direction0 = 0,\n ORDER_DESCENDING0 = 2,\n ORDER_ASCENDING0 = 1]\n[direction0 = 3,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2]\n[direction0 = 4,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2]\n[direction0 = 5,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2]\n[direction0 = 6,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2]\n[direction0 = 7,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2]\n[direction0 = 8,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2]\n[direction0 = 9,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2]\n[direction0 = 10,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2]\n[direction0 = 11,\n ORDER_ASCENDING0 = 1,\n ORDER_DESCENDING0 = 2]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncolumn0 = String('column0')\ndirection0 = Int('direction0')\nORDER_ASCENDING0 = Int('ORDER_ASCENDING0')\nORDER_DESCENDING0 = Int('ORDER_DESCENDING0')\n\nconstraints = [\n  ORDER_ASCENDING0 == 1,\n  ORDER_DESCENDING0 == 2,\n  And(direction0 != ORDER_ASCENDING0, direction0 != ORDER_DESCENDING0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndirection = Symbol('direction', integer=True)\npath_conjunction = ((Ne(direction, 1)) & (Ne(direction, 2)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 935,
    "throwingLine": 937,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/DownloadManager.java"
  },
  {
    "qualifiedSignature": "android.app.DownloadManager.markRowDeleted(long...)",
    "exception": "throw new IllegalArgumentException(\"input param 'ids' can't be null\");",
    "pathCojunction": "(ids == null || ids.length == 0)",
    "symbolicPathConjunction": "(ids == null || ids.length == 0)",
    "backwardsPathConjunction": "(ids == null || ids.length == 0)",
    "simplifiedPathConjunction": "ids == null || ids.length == 0",
    "z3Inputs": "[ids0_isNull = True, ids0_length = 1]\n[ids0_length = 0]\n[ids0_isNull = True, ids0_length = 2]\n[ids0_isNull = True, ids0_length = 3]\n[ids0_isNull = True, ids0_length = 4]\n[ids0_isNull = True, ids0_length = 5]\n[ids0_isNull = True, ids0_length = 6]\n[ids0_isNull = True, ids0_length = 7]\n[ids0_isNull = True, ids0_length = 8]\n[ids0_isNull = True, ids0_length = 9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nids0_isNull = Bool('ids0_isNull')\nids0_length = Int('ids0_length')\n\nconstraints = [\n  ids0_length >= 0, # implicit\n  Or(ids0_isNull, ids0_length == 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nids = Symbol('ids')\nids_length = Symbol('ids_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Eq(ids, null)) | (Eq(ids_length, 0)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1095,
    "throwingLine": 1098,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/DownloadManager.java"
  },
  {
    "qualifiedSignature": "android.app.DownloadManager.remove(long...)",
    "exception": "throw new IllegalArgumentException(\"input param 'ids' can't be null\");",
    "pathCojunction": "(ids == null || ids.length == 0)",
    "symbolicPathConjunction": "(markRowDeleted(ids))",
    "backwardsPathConjunction": "(ids == null || ids.length == 0)",
    "simplifiedPathConjunction": "ids == null || ids.length == 0",
    "z3Inputs": "[ids0_isNull = True, ids0_length = 1]\n[ids0_length = 0]\n[ids0_isNull = True, ids0_length = 2]\n[ids0_isNull = True, ids0_length = 3]\n[ids0_isNull = True, ids0_length = 4]\n[ids0_isNull = True, ids0_length = 5]\n[ids0_isNull = True, ids0_length = 6]\n[ids0_isNull = True, ids0_length = 7]\n[ids0_isNull = True, ids0_length = 8]\n[ids0_isNull = True, ids0_length = 9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nids0_isNull = Bool('ids0_isNull')\nids0_length = Int('ids0_length')\n\nconstraints = [\n  ids0_length >= 0, # implicit\n  Or(ids0_isNull, ids0_length == 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nids = Symbol('ids')\nids_length = Symbol('ids_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Eq(ids, null)) | (Eq(ids_length, 0)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1111,
    "throwingLine": 1112,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/DownloadManager.java"
  },
  {
    "qualifiedSignature": "android.app.LoaderManagerImpl.destroyLoader(int)",
    "exception": "throw new IllegalStateException(\"Called while creating a loader\");",
    "pathCojunction": "(mCreatingLoader)",
    "symbolicPathConjunction": "(mCreatingLoader)",
    "backwardsPathConjunction": "(mCreatingLoader)",
    "simplifiedPathConjunction": "mCreatingLoader",
    "z3Inputs": "[mCreatingLoader0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nmCreatingLoader0 = Bool('mCreatingLoader0')\n\nconstraints = [\n  mCreatingLoader0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmCreatingLoader = Symbol('mCreatingLoader')\npath_conjunction = mCreatingLoader\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 734,
    "throwingLine": 736,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/LoaderManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStack()",
    "exception": "throw new IllegalStateException(\"Can not perform this action inside of \" + mNoTransactionsBecause)",
    "pathCojunction": "(!(false)) && (!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "symbolicPathConjunction": "(enqueueAction(new PopBackStackState(null, -1, 0), false))",
    "backwardsPathConjunction": "(!(false)) && (!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "z3Inputs": "[mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmStateSaved0 = Bool('mStateSaved0')\nmNoTransactionsBecause0_isNull = Bool('mNoTransactionsBecause0_isNull')\n\nconstraints = [\n  And(And(Not(False), Not(mStateSaved0)), Not(mNoTransactionsBecause0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmStateSaved = Symbol('mStateSaved')\nmNoTransactionsBecause = Symbol('mNoTransactionsBecause')\nnull = Symbol('null')\npath_conjunction = (((~(False)) & (~(mStateSaved))) & (Ne(mNoTransactionsBecause, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 828,
    "throwingLine": 829,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStack()",
    "exception": "throw new IllegalStateException(\"Can not perform this action after onSaveInstanceState\")",
    "pathCojunction": "(!(false)) && (mStateSaved)",
    "symbolicPathConjunction": "(enqueueAction(new PopBackStackState(null, -1, 0), false))",
    "backwardsPathConjunction": "(!(false)) && (mStateSaved)",
    "z3Inputs": "[mStateSaved0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmStateSaved0 = Bool('mStateSaved0')\n\nconstraints = [\n  And(Not(False), mStateSaved0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmStateSaved = Symbol('mStateSaved')\npath_conjunction = ((~(False)) & mStateSaved)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 828,
    "throwingLine": 829,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStackImmediate()",
    "exception": "throw new IllegalStateException(\"Can not perform this action after onSaveInstanceState\");",
    "pathCojunction": "(mStateSaved)",
    "symbolicPathConjunction": "(mStateSaved)",
    "backwardsPathConjunction": "(mStateSaved)",
    "simplifiedPathConjunction": "mStateSaved",
    "z3Inputs": "[mStateSaved0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmStateSaved0 = Bool('mStateSaved0')\n\nconstraints = [\n  mStateSaved0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmStateSaved = Symbol('mStateSaved')\npath_conjunction = mStateSaved\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 833,
    "throwingLine": 834,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStackImmediate()",
    "exception": "throw new IllegalStateException(\"Can not perform this action inside of \" + mNoTransactionsBecause);",
    "pathCojunction": "(!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "symbolicPathConjunction": "((!(mStateSaved)) && (mNoTransactionsBecause != null))",
    "backwardsPathConjunction": "(!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "simplifiedPathConjunction": "!mStateSaved && mNoTransactionsBecause != null",
    "z3Inputs": "[mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmStateSaved0 = Bool('mStateSaved0')\nmNoTransactionsBecause0_isNull = Bool('mNoTransactionsBecause0_isNull')\n\nconstraints = [\n  And(Not(mStateSaved0), Not(mNoTransactionsBecause0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmStateSaved = Symbol('mStateSaved')\nmNoTransactionsBecause = Symbol('mNoTransactionsBecause')\nnull = Symbol('null')\npath_conjunction = ((~(mStateSaved)) & (Ne(mNoTransactionsBecause, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 833,
    "throwingLine": 834,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStack(java.lang.String, int)",
    "exception": "throw new IllegalStateException(\"Can not perform this action after onSaveInstanceState\")",
    "pathCojunction": "(!(false)) && (mStateSaved)",
    "symbolicPathConjunction": "(enqueueAction(new PopBackStackState(name, -1, flags), false))",
    "backwardsPathConjunction": "(!(false)) && (mStateSaved)",
    "z3Inputs": "[mStateSaved0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\nflags0 = Int('flags0')\nmStateSaved0 = Bool('mStateSaved0')\n\nconstraints = [\n  And(Not(False), mStateSaved0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmStateSaved = Symbol('mStateSaved')\npath_conjunction = ((~(False)) & mStateSaved)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 839,
    "throwingLine": 840,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStack(java.lang.String, int)",
    "exception": "throw new IllegalStateException(\"Can not perform this action inside of \" + mNoTransactionsBecause)",
    "pathCojunction": "(!(false)) && (!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "symbolicPathConjunction": "(enqueueAction(new PopBackStackState(name, -1, flags), false))",
    "backwardsPathConjunction": "(!(false)) && (!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "z3Inputs": "[mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\nflags0 = Int('flags0')\nmStateSaved0 = Bool('mStateSaved0')\nmNoTransactionsBecause0_isNull = Bool('mNoTransactionsBecause0_isNull')\n\nconstraints = [\n  And(And(Not(False), Not(mStateSaved0)), Not(mNoTransactionsBecause0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmStateSaved = Symbol('mStateSaved')\nmNoTransactionsBecause = Symbol('mNoTransactionsBecause')\nnull = Symbol('null')\npath_conjunction = (((~(False)) & (~(mStateSaved))) & (Ne(mNoTransactionsBecause, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 839,
    "throwingLine": 840,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStackImmediate(java.lang.String, int)",
    "exception": "throw new IllegalStateException(\"Can not perform this action inside of \" + mNoTransactionsBecause);",
    "pathCojunction": "(!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "symbolicPathConjunction": "((!(mStateSaved)) && (mNoTransactionsBecause != null))",
    "backwardsPathConjunction": "(!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "simplifiedPathConjunction": "!mStateSaved && mNoTransactionsBecause != null",
    "z3Inputs": "[mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\nflags0 = Int('flags0')\nmStateSaved0 = Bool('mStateSaved0')\nmNoTransactionsBecause0_isNull = Bool('mNoTransactionsBecause0_isNull')\n\nconstraints = [\n  And(Not(mStateSaved0), Not(mNoTransactionsBecause0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmStateSaved = Symbol('mStateSaved')\nmNoTransactionsBecause = Symbol('mNoTransactionsBecause')\nnull = Symbol('null')\npath_conjunction = ((~(mStateSaved)) & (Ne(mNoTransactionsBecause, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 844,
    "throwingLine": 845,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStackImmediate(java.lang.String, int)",
    "exception": "throw new IllegalStateException(\"Can not perform this action after onSaveInstanceState\");",
    "pathCojunction": "(mStateSaved)",
    "symbolicPathConjunction": "(mStateSaved)",
    "backwardsPathConjunction": "(mStateSaved)",
    "simplifiedPathConjunction": "mStateSaved",
    "z3Inputs": "[mStateSaved0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\nflags0 = Int('flags0')\nmStateSaved0 = Bool('mStateSaved0')\n\nconstraints = [\n  mStateSaved0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmStateSaved = Symbol('mStateSaved')\npath_conjunction = mStateSaved\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 844,
    "throwingLine": 845,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStack(int, int)",
    "exception": "throw new IllegalStateException(\"Can not perform this action after onSaveInstanceState\")",
    "pathCojunction": "(!(id < 0)) && (!(false)) && (mStateSaved)",
    "symbolicPathConjunction": "(!(id < 0)) && (!(enqueueAction(new PopBackStackState(null, id, flags), false)))",
    "backwardsPathConjunction": "(!(id < 0)) && (!(false)) && (mStateSaved)",
    "z3Inputs": "[id0 = 0, mStateSaved0 = True]\n[mStateSaved0 = True, id0 = 1]\n[mStateSaved0 = True, id0 = 2]\n[mStateSaved0 = True, id0 = 3]\n[mStateSaved0 = True, id0 = 4]\n[mStateSaved0 = True, id0 = 5]\n[mStateSaved0 = True, id0 = 6]\n[mStateSaved0 = True, id0 = 7]\n[mStateSaved0 = True, id0 = 8]\n[mStateSaved0 = True, id0 = 9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nflags0 = Int('flags0')\nmStateSaved0 = Bool('mStateSaved0')\n\nconstraints = [\n  And(And(Not(id0 < 0), Not(False)), mStateSaved0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nid = Symbol('id', integer=True)\nmStateSaved = Symbol('mStateSaved')\npath_conjunction = (((~((StrictLessThan(id, 0)))) & (~(False))) & mStateSaved)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 850,
    "throwingLine": 854,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStack(int, int)",
    "exception": "throw new IllegalStateException(\"Can not perform this action inside of \" + mNoTransactionsBecause)",
    "pathCojunction": "(!(id < 0)) && (!(false)) && (!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "symbolicPathConjunction": "(!(id < 0)) && (!(enqueueAction(new PopBackStackState(null, id, flags), false)))",
    "backwardsPathConjunction": "(!(id < 0)) && (!(false)) && (!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "z3Inputs": "[id0 = 0,\n mNoTransactionsBecause0_isNull = False,\n mStateSaved0 = False]\n[id0 = 1,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n[id0 = 2,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n[id0 = 3,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n[id0 = 4,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n[id0 = 5,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n[id0 = 6,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n[id0 = 7,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n[id0 = 8,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n[id0 = 9,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nflags0 = Int('flags0')\nmStateSaved0 = Bool('mStateSaved0')\nmNoTransactionsBecause0_isNull = Bool('mNoTransactionsBecause0_isNull')\n\nconstraints = [\n  And(And(And(Not(id0 < 0), Not(False)), Not(mStateSaved0)), Not(mNoTransactionsBecause0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nid = Symbol('id', integer=True)\nmStateSaved = Symbol('mStateSaved')\nmNoTransactionsBecause = Symbol('mNoTransactionsBecause')\nnull = Symbol('null')\npath_conjunction = ((((~((StrictLessThan(id, 0)))) & (~(False))) & (~(mStateSaved))) & (Ne(mNoTransactionsBecause, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 850,
    "throwingLine": 854,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStack(int, int)",
    "exception": "throw new IllegalArgumentException(\"Bad id: \" + id);",
    "pathCojunction": "(id < 0)",
    "symbolicPathConjunction": "(id < 0)",
    "backwardsPathConjunction": "(id < 0)",
    "simplifiedPathConjunction": "id < 0",
    "z3Inputs": "[id0 = -1]\n[id0 = -2]\n[id0 = -3]\n[id0 = -4]\n[id0 = -5]\n[id0 = -6]\n[id0 = -7]\n[id0 = -8]\n[id0 = -9]\n[id0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nflags0 = Int('flags0')\n\nconstraints = [\n  id0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nid = Symbol('id', integer=True)\npath_conjunction = (StrictLessThan(id, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 850,
    "throwingLine": 852,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStackImmediate(int, int)",
    "exception": "throw new IllegalStateException(\"Can not perform this action inside of \" + mNoTransactionsBecause);",
    "pathCojunction": "(!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "symbolicPathConjunction": "((!(mStateSaved)) && (mNoTransactionsBecause != null))",
    "backwardsPathConjunction": "(!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "simplifiedPathConjunction": "!mStateSaved && mNoTransactionsBecause != null",
    "z3Inputs": "[mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nflags0 = Int('flags0')\nmStateSaved0 = Bool('mStateSaved0')\nmNoTransactionsBecause0_isNull = Bool('mNoTransactionsBecause0_isNull')\n\nconstraints = [\n  And(Not(mStateSaved0), Not(mNoTransactionsBecause0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmStateSaved = Symbol('mStateSaved')\nmNoTransactionsBecause = Symbol('mNoTransactionsBecause')\nnull = Symbol('null')\npath_conjunction = ((~(mStateSaved)) & (Ne(mNoTransactionsBecause, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 858,
    "throwingLine": 859,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStackImmediate(int, int)",
    "exception": "throw new IllegalStateException(\"Can not perform this action after onSaveInstanceState\");",
    "pathCojunction": "(mStateSaved)",
    "symbolicPathConjunction": "(mStateSaved)",
    "backwardsPathConjunction": "(mStateSaved)",
    "simplifiedPathConjunction": "mStateSaved",
    "z3Inputs": "[mStateSaved0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nflags0 = Int('flags0')\nmStateSaved0 = Bool('mStateSaved0')\n\nconstraints = [\n  mStateSaved0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmStateSaved = Symbol('mStateSaved')\npath_conjunction = mStateSaved\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 858,
    "throwingLine": 859,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.popBackStackImmediate(int, int)",
    "exception": "throw new IllegalArgumentException(\"Bad id: \" + id);",
    "pathCojunction": "(!(mStateSaved)) && (!(mNoTransactionsBecause != null)) && (id < 0)",
    "symbolicPathConjunction": "((!(mStateSaved)) && (!(mNoTransactionsBecause != null))) && (id < 0)",
    "backwardsPathConjunction": "(!(mStateSaved)) && (!(mNoTransactionsBecause != null)) && (id < 0)",
    "simplifiedPathConjunction": "mNoTransactionsBecause == null && !mStateSaved && id < 0",
    "z3Inputs": "[id0 = -1,\n mNoTransactionsBecause0_isNull = True,\n mStateSaved0 = False]\n[id0 = -2,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = True]\n[id0 = -3,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = True]\n[id0 = -4,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = True]\n[id0 = -5,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = True]\n[id0 = -6,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = True]\n[id0 = -7,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = True]\n[id0 = -8,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = True]\n[id0 = -9,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = True]\n[id0 = -10,\n mStateSaved0 = False,\n mNoTransactionsBecause0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nflags0 = Int('flags0')\nmStateSaved0 = Bool('mStateSaved0')\nmNoTransactionsBecause0_isNull = Bool('mNoTransactionsBecause0_isNull')\n\nconstraints = [\n  And(And(Not(mStateSaved0), Not(Not(mNoTransactionsBecause0_isNull))), id0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nid = Symbol('id', integer=True)\nmStateSaved = Symbol('mStateSaved')\nmNoTransactionsBecause = Symbol('mNoTransactionsBecause')\nnull = Symbol('null')\npath_conjunction = (((~(mStateSaved)) & (~((Ne(mNoTransactionsBecause, null))))) & (StrictLessThan(id, 0)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 858,
    "throwingLine": 861,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.enqueueAction(android.app.FragmentManagerImpl.OpGenerator, boolean)",
    "exception": "throw new IllegalStateException(\"Can not perform this action after onSaveInstanceState\");",
    "pathCojunction": "(!(allowStateLoss)) && (mStateSaved)",
    "symbolicPathConjunction": "(!(allowStateLoss)) && (!(mStateSaved))",
    "backwardsPathConjunction": "(!(allowStateLoss)) && (mStateSaved)",
    "simplifiedPathConjunction": "mStateSaved && !allowStateLoss",
    "z3Inputs": "[mStateSaved0 = True, allowStateLoss0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nallowStateLoss0 = Bool('allowStateLoss0')\nmStateSaved0 = Bool('mStateSaved0')\n\nconstraints = [\n  And(Not(allowStateLoss0), mStateSaved0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nallowStateLoss = Symbol('allowStateLoss')\nmStateSaved = Symbol('mStateSaved')\npath_conjunction = ((~(allowStateLoss)) & mStateSaved)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1903,
    "throwingLine": 1905,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  },
  {
    "qualifiedSignature": "android.app.FragmentManagerImpl.enqueueAction(android.app.FragmentManagerImpl.OpGenerator, boolean)",
    "exception": "throw new IllegalStateException(\"Can not perform this action inside of \" + mNoTransactionsBecause);",
    "pathCojunction": "(!(allowStateLoss)) && (!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "symbolicPathConjunction": "(!(allowStateLoss)) && (!(!(mStateSaved)) && (mNoTransactionsBecause != null))",
    "backwardsPathConjunction": "(!(allowStateLoss)) && (!(mStateSaved)) && (mNoTransactionsBecause != null)",
    "simplifiedPathConjunction": "!allowStateLoss && !mStateSaved && mNoTransactionsBecause != null",
    "z3Inputs": "[mStateSaved0 = False,\n allowStateLoss0 = False,\n mNoTransactionsBecause0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nallowStateLoss0 = Bool('allowStateLoss0')\nmStateSaved0 = Bool('mStateSaved0')\nmNoTransactionsBecause0_isNull = Bool('mNoTransactionsBecause0_isNull')\n\nconstraints = [\n  And(And(Not(allowStateLoss0), Not(mStateSaved0)), Not(mNoTransactionsBecause0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nallowStateLoss = Symbol('allowStateLoss')\nmStateSaved = Symbol('mStateSaved')\nmNoTransactionsBecause = Symbol('mNoTransactionsBecause')\nnull = Symbol('null')\npath_conjunction = (((~(allowStateLoss)) & (~(mStateSaved))) & (Ne(mNoTransactionsBecause, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1903,
    "throwingLine": 1905,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/FragmentManager.java"
  }
]