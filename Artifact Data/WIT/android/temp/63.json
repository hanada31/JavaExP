[
  {
    "qualifiedSignature": "android.util.Base64.decode(java.lang.String, int)",
    "exception": "throw new IllegalArgumentException(\"bad base-64\")",
    "pathCojunction": "(!(new Decoder(flags, new byte[len * 3 / 4]).process(str.getBytes(), 0, str.getBytes().length, true)))",
    "symbolicPathConjunction": "(decode(str.getBytes(), flags))",
    "backwardsPathConjunction": "(!(new Decoder(flags, new byte[len * 3 / 4]).process(str.getBytes(), 0, str.getBytes().length, true)))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstr0 = String('str0')\nflags0 = Int('flags0')\nlen0 = Int('len0')\n\nconstraints = [\n  Not(new Decoder(flags0, new byte[len0 * 3 / 4]).process(str0.getBytes(), 0, str0.getBytes().length, true))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstr = Symbol('str')\nflags = Symbol('flags', integer=True)\nlen = Symbol('len', integer=True)\nnew Decoder(flags, new byte[len * 3 / 4])_process = Symbol('new Decoder(flags, new byte[len * 3 / 4])_process')\nstr_getBytes = Symbol('str_getBytes')\npath_conjunction = (~(new Decoder(flags, new byte[len * 3 / 4])_process))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 118,
    "throwingLine": 119,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64.java"
  },
  {
    "qualifiedSignature": "android.util.Base64.decode(byte[], int)",
    "exception": "throw new IllegalArgumentException(\"bad base-64\")",
    "pathCojunction": "(!(new Decoder(flags, new byte[len * 3 / 4]).process(input, 0, input.length, true)))",
    "symbolicPathConjunction": "(decode(input, 0, input.length, flags))",
    "backwardsPathConjunction": "(!(new Decoder(flags, new byte[len * 3 / 4]).process(input, 0, input.length, true)))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nflags0 = Int('flags0')\nlen0 = Int('len0')\ninput0_length = Int('input0_length')\n\nconstraints = [\n  input0_length >= 0, # implicit\n  Not(new Decoder(flags0, new byte[len0 * 3 / 4]).process(input0, 0, input0_length, true))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 136,
    "throwingLine": 137,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64.java"
  },
  {
    "qualifiedSignature": "android.util.Base64.decode(byte[], int, int, int)",
    "exception": "throw new IllegalArgumentException(\"bad base-64\");",
    "pathCojunction": "(!(decoder.process(input, offset, len, true)))",
    "symbolicPathConjunction": "(!decoder.process(input, offset, len, true))",
    "backwardsPathConjunction": "(!(new Decoder(flags, new byte[len * 3 / 4]).process(input, offset, len, true)))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noffset0 = Int('offset0')\nlen0 = Int('len0')\nflags0 = Int('flags0')\n\nconstraints = [\n  decoder0 == new Decoder(flags0, new byte[len0 * 3 / 4]),\n  Not(decoder0.process(input0, offset0, len0, true))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninput = Symbol('input')\noffset = Symbol('offset', integer=True)\nlen = Symbol('len', integer=True)\nflags = Symbol('flags', integer=True)\nnew Decoder(flags, new byte[len * 3 / 4])_process = Symbol('new Decoder(flags, new byte[len * 3 / 4])_process')\npath_conjunction = (~(new Decoder(flags, new byte[len * 3 / 4])_process))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 156,
    "throwingLine": 162,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64.java"
  }
]