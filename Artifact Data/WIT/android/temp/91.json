[
  {
    "qualifiedSignature": "android.view.KeyEvent.metaStateHasModifiers(int, int)",
    "exception": "throw new IllegalArgumentException(\"modifiers must not contain \" + \"META_CAPS_LOCK_ON, META_NUM_LOCK_ON, META_SCROLL_LOCK_ON, \" + \"META_CAP_LOCKED, META_ALT_LOCKED, META_SYM_LOCKED, \" + \"or META_SELECTING\");",
    "pathCojunction": "((modifiers & META_INVALID_MODIFIER_MASK) != 0)",
    "symbolicPathConjunction": "((modifiers & META_INVALID_MODIFIER_MASK) != 0)",
    "backwardsPathConjunction": "((modifiers & META_INVALID_MODIFIER_MASK) != 0)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmetaState0 = Int('metaState0')\nmodifiers0 = Int('modifiers0')\nMETA_INVALID_MODIFIER_MASK0 = Int('META_INVALID_MODIFIER_MASK0')\n\nconstraints = [\n  META_INVALID_MODIFIER_MASK0 == META_LOCK_MASK | META_SYNTHETIC_MASK,\n  modifiers0 & META_INVALID_MODIFIER_MASK0 != 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodifiers = Symbol('modifiers', integer=True)\npath_conjunction = (Ne(((modifiers & META_LOCK_MASK) | META_SYNTHETIC_MASK), 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 2248,
    "throwingLine": 2253,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/KeyEvent.java"
  },
  {
    "qualifiedSignature": "android.view.KeyEvent.hasModifiers(int)",
    "exception": "throw new IllegalArgumentException(\"modifiers must not contain \" + \"META_CAPS_LOCK_ON, META_NUM_LOCK_ON, META_SCROLL_LOCK_ON, \" + \"META_CAP_LOCKED, META_ALT_LOCKED, META_SYM_LOCKED, \" + \"or META_SELECTING\")",
    "pathCojunction": "((modifiers & META_LOCK_MASK | META_SYNTHETIC_MASK) != 0)",
    "symbolicPathConjunction": "(metaStateHasModifiers(mMetaState, modifiers))",
    "backwardsPathConjunction": "((modifiers & META_LOCK_MASK | META_SYNTHETIC_MASK) != 0)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodifiers0 = Int('modifiers0')\nmMetaState0 = Int('mMetaState0')\n\nconstraints = [\n  modifiers0 & META_LOCK_MASK | META_SYNTHETIC_MASK != 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodifiers = Symbol('modifiers', integer=True)\npath_conjunction = (Ne(((modifiers & META_LOCK_MASK) | META_SYNTHETIC_MASK), 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 2336,
    "throwingLine": 2337,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/KeyEvent.java"
  },
  {
    "qualifiedSignature": "android.view.KeyEvent.DispatcherState.startTracking(android.view.KeyEvent, java.lang.Object)",
    "exception": "throw new IllegalArgumentException(\"Can only start tracking on a down event\");",
    "pathCojunction": "(event.getAction() != ACTION_DOWN)",
    "symbolicPathConjunction": "(event.getAction() != ACTION_DOWN)",
    "backwardsPathConjunction": "(event.getAction() != ACTION_DOWN)",
    "simplifiedPathConjunction": "event.getAction() != 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nACTION_DOWN0 = Int('ACTION_DOWN0')\n\nconstraints = [\n  ACTION_DOWN0 == 0,\n  event0.getAction() != ACTION_DOWN0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nevent = Symbol('event')\nevent_getAction = Symbol('event_getAction')\npath_conjunction = (Ne(event_getAction, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 2889,
    "throwingLine": 2891,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/KeyEvent.java"
  }
]