[
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertisingSetParameters.Builder.setInterval(int)",
    "exception": "throw new IllegalArgumentException(\"unknown interval \" + interval);",
    "pathCojunction": "(interval < INTERVAL_MIN || interval > INTERVAL_MAX)",
    "symbolicPathConjunction": "(interval < INTERVAL_MIN || interval > INTERVAL_MAX)",
    "backwardsPathConjunction": "(interval < INTERVAL_MIN || interval > INTERVAL_MAX)",
    "simplifiedPathConjunction": "interval > 16777215 || interval < 160",
    "z3Inputs": "[interval0 = 16777216,\n INTERVAL_MAX0 = 16777215,\n INTERVAL_MIN0 = 160]\n[INTERVAL_MIN0 = 160,\n INTERVAL_MAX0 = 16777215,\n interval0 = 0]\n[INTERVAL_MIN0 = 160,\n INTERVAL_MAX0 = 16777215,\n interval0 = -1]\n[INTERVAL_MIN0 = 160,\n INTERVAL_MAX0 = 16777215,\n interval0 = -2]\n[INTERVAL_MIN0 = 160,\n INTERVAL_MAX0 = 16777215,\n interval0 = -3]\n[INTERVAL_MIN0 = 160,\n INTERVAL_MAX0 = 16777215,\n interval0 = -4]\n[INTERVAL_MIN0 = 160,\n INTERVAL_MAX0 = 16777215,\n interval0 = -5]\n[INTERVAL_MIN0 = 160,\n INTERVAL_MAX0 = 16777215,\n interval0 = -6]\n[INTERVAL_MIN0 = 160,\n INTERVAL_MAX0 = 16777215,\n interval0 = -7]\n[INTERVAL_MIN0 = 160,\n INTERVAL_MAX0 = 16777215,\n interval0 = -8]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninterval0 = Int('interval0')\nINTERVAL_MIN0 = Int('INTERVAL_MIN0')\nINTERVAL_MAX0 = Int('INTERVAL_MAX0')\n\nconstraints = [\n  INTERVAL_MIN0 == 160,\n  INTERVAL_MAX0 == 16777215,\n  Or(interval0 < INTERVAL_MIN0, interval0 > INTERVAL_MAX0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninterval = Symbol('interval', integer=True)\npath_conjunction = ((StrictLessThan(interval, 160)) | (StrictGreaterThan(interval, 16777215)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 374,
    "throwingLine": 376,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertisingSetParameters.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertisingSetParameters.Builder.setTxPowerLevel(int)",
    "exception": "throw new IllegalArgumentException(\"unknown txPowerLevel \" + txPowerLevel);",
    "pathCojunction": "(txPowerLevel < TX_POWER_MIN || txPowerLevel > TX_POWER_MAX)",
    "symbolicPathConjunction": "(txPowerLevel < TX_POWER_MIN || txPowerLevel > TX_POWER_MAX)",
    "backwardsPathConjunction": "(txPowerLevel < TX_POWER_MIN || txPowerLevel > TX_POWER_MAX)",
    "simplifiedPathConjunction": "txPowerLevel > 1 || txPowerLevel < -127",
    "z3Inputs": "[txPowerLevel0 = 2, TX_POWER_MAX0 = 1, TX_POWER_MIN0 = -127]\n[txPowerLevel0 = -128,\n TX_POWER_MIN0 = -127,\n TX_POWER_MAX0 = 1]\n[txPowerLevel0 = -129,\n TX_POWER_MIN0 = -127,\n TX_POWER_MAX0 = 1]\n[txPowerLevel0 = -130,\n TX_POWER_MIN0 = -127,\n TX_POWER_MAX0 = 1]\n[txPowerLevel0 = -131,\n TX_POWER_MIN0 = -127,\n TX_POWER_MAX0 = 1]\n[txPowerLevel0 = -132,\n TX_POWER_MIN0 = -127,\n TX_POWER_MAX0 = 1]\n[txPowerLevel0 = -133,\n TX_POWER_MIN0 = -127,\n TX_POWER_MAX0 = 1]\n[txPowerLevel0 = -134,\n TX_POWER_MIN0 = -127,\n TX_POWER_MAX0 = 1]\n[txPowerLevel0 = -135,\n TX_POWER_MIN0 = -127,\n TX_POWER_MAX0 = 1]\n[txPowerLevel0 = -136,\n TX_POWER_MIN0 = -127,\n TX_POWER_MAX0 = 1]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntxPowerLevel0 = Int('txPowerLevel0')\nTX_POWER_MIN0 = Int('TX_POWER_MIN0')\nTX_POWER_MAX0 = Int('TX_POWER_MAX0')\n\nconstraints = [\n  TX_POWER_MIN0 == -127,\n  TX_POWER_MAX0 == 1,\n  Or(txPowerLevel0 < TX_POWER_MIN0, txPowerLevel0 > TX_POWER_MAX0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntxPowerLevel = Symbol('txPowerLevel', integer=True)\npath_conjunction = ((StrictLessThan(txPowerLevel, -127)) | (StrictGreaterThan(txPowerLevel, 1)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 393,
    "throwingLine": 395,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertisingSetParameters.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertisingSetParameters.Builder.build()",
    "exception": "throw new IllegalStateException(\"Advertising can't be both connectable and anonymous\");",
    "pathCojunction": "(!(mIsLegacy)) && (!(mConnectable && mScannable)) && (mIsAnonymous && mConnectable)",
    "symbolicPathConjunction": "(!(mIsLegacy)) && (!(mConnectable && mScannable)) && (mIsAnonymous && mConnectable)",
    "backwardsPathConjunction": "(!(mIsLegacy)) && (!(mConnectable && mScannable)) && (mIsAnonymous && mConnectable)",
    "simplifiedPathConjunction": "mConnectable && mIsAnonymous && !mIsLegacy && !mScannable",
    "z3Inputs": "[mConnectable0 = True,\n mScannable0 = False,\n mIsLegacy0 = False,\n mIsAnonymous0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmIsLegacy0 = Bool('mIsLegacy0')\nmConnectable0 = Bool('mConnectable0')\nmScannable0 = Bool('mScannable0')\nmIsAnonymous0 = Bool('mIsAnonymous0')\n\nconstraints = [\n  And(And(Not(mIsLegacy0), Not(And(mConnectable0, mScannable0))), And(mIsAnonymous0, mConnectable0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmIsLegacy = Symbol('mIsLegacy')\nmConnectable = Symbol('mConnectable')\nmScannable = Symbol('mScannable')\nmIsAnonymous = Symbol('mIsAnonymous')\npath_conjunction = (((~(mIsLegacy)) & (~((mConnectable & mScannable)))) & (mIsAnonymous & mConnectable))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 406,
    "throwingLine": 428,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertisingSetParameters.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertisingSetParameters.Builder.build()",
    "exception": "throw new IllegalStateException(\"Advertising can't be both connectable and scannable\");",
    "pathCojunction": "(!(mIsLegacy)) && (mConnectable && mScannable)",
    "symbolicPathConjunction": "(!(mIsLegacy)) && (mConnectable && mScannable)",
    "backwardsPathConjunction": "(!(mIsLegacy)) && (mConnectable && mScannable)",
    "simplifiedPathConjunction": "mConnectable && mScannable && !mIsLegacy",
    "z3Inputs": "[mConnectable0 = True,\n mScannable0 = True,\n mIsLegacy0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmIsLegacy0 = Bool('mIsLegacy0')\nmConnectable0 = Bool('mConnectable0')\nmScannable0 = Bool('mScannable0')\n\nconstraints = [\n  And(Not(mIsLegacy0), And(mConnectable0, mScannable0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmIsLegacy = Symbol('mIsLegacy')\nmConnectable = Symbol('mConnectable')\nmScannable = Symbol('mScannable')\npath_conjunction = ((~(mIsLegacy)) & (mConnectable & mScannable))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 406,
    "throwingLine": 423,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertisingSetParameters.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertisingSetParameters.Builder.build()",
    "exception": "throw new IllegalStateException(\"Legacy advertisement can't be connectable and non-scannable\");",
    "pathCojunction": "(mIsLegacy) && (!(mIsAnonymous)) && (mConnectable && !mScannable)",
    "symbolicPathConjunction": "(mIsLegacy) && (!(mIsAnonymous)) && (mConnectable && !mScannable)",
    "backwardsPathConjunction": "(mIsLegacy) && (!(mIsAnonymous)) && (mConnectable && !mScannable)",
    "simplifiedPathConjunction": "mConnectable && mIsLegacy && !mIsAnonymous && !mScannable",
    "z3Inputs": "[mConnectable0 = True,\n mScannable0 = False,\n mIsLegacy0 = True,\n mIsAnonymous0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmIsLegacy0 = Bool('mIsLegacy0')\nmIsAnonymous0 = Bool('mIsAnonymous0')\nmConnectable0 = Bool('mConnectable0')\nmScannable0 = Bool('mScannable0')\n\nconstraints = [\n  And(And(mIsLegacy0, Not(mIsAnonymous0)), And(mConnectable0, Not(mScannable0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmIsLegacy = Symbol('mIsLegacy')\nmIsAnonymous = Symbol('mIsAnonymous')\nmConnectable = Symbol('mConnectable')\nmScannable = Symbol('mScannable')\npath_conjunction = ((mIsLegacy & (~(mIsAnonymous))) & (mConnectable & (~(mScannable))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 406,
    "throwingLine": 413,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertisingSetParameters.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertisingSetParameters.Builder.build()",
    "exception": "throw new IllegalArgumentException(\"Legacy advertising can't be anonymous\");",
    "pathCojunction": "(mIsLegacy) && (mIsAnonymous)",
    "symbolicPathConjunction": "(mIsLegacy) && (mIsAnonymous)",
    "backwardsPathConjunction": "(mIsLegacy) && (mIsAnonymous)",
    "simplifiedPathConjunction": "mIsAnonymous && mIsLegacy",
    "z3Inputs": "[mIsLegacy0 = True, mIsAnonymous0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmIsLegacy0 = Bool('mIsLegacy0')\nmIsAnonymous0 = Bool('mIsAnonymous0')\n\nconstraints = [\n  And(mIsLegacy0, mIsAnonymous0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmIsLegacy = Symbol('mIsLegacy')\nmIsAnonymous = Symbol('mIsAnonymous')\npath_conjunction = (mIsLegacy & mIsAnonymous)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 406,
    "throwingLine": 409,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertisingSetParameters.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertisingSetParameters.Builder.build()",
    "exception": "throw new IllegalStateException(\"Legacy advertising can't include TX power level in header\");",
    "pathCojunction": "(mIsLegacy) && (!(mIsAnonymous)) && (!(mConnectable && !mScannable)) && (mIncludeTxPower)",
    "symbolicPathConjunction": "(mIsLegacy) && (!(mIsAnonymous)) && (!(mConnectable && !mScannable)) && (mIncludeTxPower)",
    "backwardsPathConjunction": "(mIsLegacy) && (!(mIsAnonymous)) && (!(mConnectable && !mScannable)) && (mIncludeTxPower)",
    "simplifiedPathConjunction": "mIncludeTxPower && mIsLegacy && !mIsAnonymous && (mScannable || !mConnectable)",
    "z3Inputs": "[mConnectable0 = False,\n mScannable0 = False,\n mIncludeTxPower0 = True,\n mIsLegacy0 = True,\n mIsAnonymous0 = False]\n[mScannable0 = True,\n mIncludeTxPower0 = True,\n mIsLegacy0 = True,\n mIsAnonymous0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmIsLegacy0 = Bool('mIsLegacy0')\nmIsAnonymous0 = Bool('mIsAnonymous0')\nmConnectable0 = Bool('mConnectable0')\nmScannable0 = Bool('mScannable0')\nmIncludeTxPower0 = Bool('mIncludeTxPower0')\n\nconstraints = [\n  And(And(And(mIsLegacy0, Not(mIsAnonymous0)), Not(And(mConnectable0, Not(mScannable0)))), mIncludeTxPower0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmIsLegacy = Symbol('mIsLegacy')\nmIsAnonymous = Symbol('mIsAnonymous')\nmConnectable = Symbol('mConnectable')\nmScannable = Symbol('mScannable')\nmIncludeTxPower = Symbol('mIncludeTxPower')\npath_conjunction = (((mIsLegacy & (~(mIsAnonymous))) & (~((mConnectable & (~(mScannable)))))) & mIncludeTxPower)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 406,
    "throwingLine": 418,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertisingSetParameters.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertiseData.Builder.addManufacturerData(int, byte[])",
    "exception": "throw new IllegalArgumentException(\"invalid manufacturerId - \" + manufacturerId);",
    "pathCojunction": "(manufacturerId < 0)",
    "symbolicPathConjunction": "(manufacturerId < 0)",
    "backwardsPathConjunction": "(manufacturerId < 0)",
    "simplifiedPathConjunction": "manufacturerId < 0",
    "z3Inputs": "[manufacturerId0 = -1]\n[manufacturerId0 = -2]\n[manufacturerId0 = -3]\n[manufacturerId0 = -4]\n[manufacturerId0 = -5]\n[manufacturerId0 = -6]\n[manufacturerId0 = -7]\n[manufacturerId0 = -8]\n[manufacturerId0 = -9]\n[manufacturerId0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmanufacturerId0 = Int('manufacturerId0')\n\nconstraints = [\n  manufacturerId0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmanufacturerId = Symbol('manufacturerId', integer=True)\npath_conjunction = (StrictLessThan(manufacturerId, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 249,
    "throwingLine": 251,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertiseData.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertiseData.Builder.addManufacturerData(int, byte[])",
    "exception": "throw new IllegalArgumentException(\"manufacturerSpecificData is null\");",
    "pathCojunction": "(!(manufacturerId < 0)) && (manufacturerSpecificData == null)",
    "symbolicPathConjunction": "(!(manufacturerId < 0)) && (manufacturerSpecificData == null)",
    "backwardsPathConjunction": "(!(manufacturerId < 0)) && (manufacturerSpecificData == null)",
    "simplifiedPathConjunction": "manufacturerSpecificData == null && manufacturerId >= 0",
    "z3Inputs": "[manufacturerId0 = 0,\n manufacturerSpecificData0_isNull = True]\n[manufacturerSpecificData0_isNull = True,\n manufacturerId0 = 1]\n[manufacturerSpecificData0_isNull = True,\n manufacturerId0 = 2]\n[manufacturerSpecificData0_isNull = True,\n manufacturerId0 = 3]\n[manufacturerSpecificData0_isNull = True,\n manufacturerId0 = 4]\n[manufacturerSpecificData0_isNull = True,\n manufacturerId0 = 5]\n[manufacturerSpecificData0_isNull = True,\n manufacturerId0 = 6]\n[manufacturerSpecificData0_isNull = True,\n manufacturerId0 = 7]\n[manufacturerSpecificData0_isNull = True,\n manufacturerId0 = 8]\n[manufacturerSpecificData0_isNull = True,\n manufacturerId0 = 9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmanufacturerId0 = Int('manufacturerId0')\nmanufacturerSpecificData0_isNull = Bool('manufacturerSpecificData0_isNull')\n\nconstraints = [\n  And(Not(manufacturerId0 < 0), manufacturerSpecificData0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmanufacturerId = Symbol('manufacturerId', integer=True)\nmanufacturerSpecificData = Symbol('manufacturerSpecificData')\nnull = Symbol('null')\npath_conjunction = ((~((StrictLessThan(manufacturerId, 0)))) & (Eq(manufacturerSpecificData, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 249,
    "throwingLine": 255,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertiseData.java"
  }
]