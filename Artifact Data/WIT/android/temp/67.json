[
  {
    "qualifiedSignature": "android.util.StateSet.get(int)",
    "exception": "throw new IllegalArgumentException(\"Invalid state set mask\");",
    "pathCojunction": "(mask >= VIEW_STATE_SETS.length)",
    "symbolicPathConjunction": "(mask >= VIEW_STATE_SETS.length)",
    "backwardsPathConjunction": "(mask >= VIEW_STATE_SETS.length)",
    "simplifiedPathConjunction": "VIEW_STATE_SETS.length <= mask",
    "z3Inputs": "[VIEW_STATE_SETS0_length = 0, mask0 = 0]\n[VIEW_STATE_SETS0_length = 1, mask0 = 1]\n[VIEW_STATE_SETS0_length = 2, mask0 = 2]\n[VIEW_STATE_SETS0_length = 1, mask0 = 3]\n[VIEW_STATE_SETS0_length = 1, mask0 = 4]\n[VIEW_STATE_SETS0_length = 1, mask0 = 5]\n[VIEW_STATE_SETS0_length = 1, mask0 = 6]\n[VIEW_STATE_SETS0_length = 1, mask0 = 7]\n[VIEW_STATE_SETS0_length = 1, mask0 = 8]\n[VIEW_STATE_SETS0_length = 1, mask0 = 9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmask0 = Int('mask0')\nVIEW_STATE_SETS0_length = Int('VIEW_STATE_SETS0_length')\n\nconstraints = [\n  VIEW_STATE_SETS0_length >= 0, # implicit\n  mask0 >= VIEW_STATE_SETS0_length\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmask = Symbol('mask', integer=True)\nVIEW_STATE_SETS = Symbol('VIEW_STATE_SETS')\nVIEW_STATE_SETS_length = Symbol('VIEW_STATE_SETS_length', integer=True)\npath_conjunction = (GreaterThan(mask, VIEW_STATE_SETS_length))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 112,
    "throwingLine": 114,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/StateSet.java"
  },
  {
    "qualifiedSignature": "android.util.MonthDisplayHelper.getDigitsForRow(int)",
    "exception": "throw new IllegalArgumentException(\"row \" + row + \" out of range (0-5)\");",
    "pathCojunction": "(row < 0 || row > 5)",
    "symbolicPathConjunction": "(row < 0 || row > 5)",
    "backwardsPathConjunction": "(row < 0 || row > 5)",
    "simplifiedPathConjunction": "row > 5 || row < 0",
    "z3Inputs": "[row0 = 6]\n[row0 = -1]\n[row0 = -2]\n[row0 = -3]\n[row0 = -4]\n[row0 = -5]\n[row0 = -6]\n[row0 = -7]\n[row0 = -8]\n[row0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrow0 = Int('row0')\n\nconstraints = [\n  Or(row0 < 0, row0 > 5)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrow = Symbol('row', integer=True)\npath_conjunction = ((StrictLessThan(row, 0)) | (StrictGreaterThan(row, 5)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 115,
    "throwingLine": 117,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MonthDisplayHelper.java"
  },
  {
    "qualifiedSignature": "android.util.FastImmutableArraySet.FastIterator.remove()",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 74,
    "throwingLine": 75,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/FastImmutableArraySet.java"
  },
  {
    "qualifiedSignature": "android.util.MathUtils.addOrThrow(int, int)",
    "exception": "throw new IllegalArgumentException(\"Addition overflow: \" + a + \" + \" + b);",
    "pathCojunction": "(!(b == 0)) && (!(b > 0 && a <= (Integer.MAX_VALUE - b))) && (!(b < 0 && a >= (Integer.MIN_VALUE - b)))",
    "symbolicPathConjunction": "(!(b == 0)) && (!(b > 0 && a <= (Integer.MAX_VALUE - b))) && (!(b < 0 && a >= (Integer.MIN_VALUE - b)))",
    "backwardsPathConjunction": "(!(b == 0)) && (!(b > 0 && a <= (Integer.MAX_VALUE - b))) && (!(b < 0 && a >= (Integer.MIN_VALUE - b)))",
    "simplifiedPathConjunction": "(b >= 0 || Integer.MIN_VALUE > a + b) && (b <= 0 || Integer.MAX_VALUE < a + b) && b != 0",
    "z3Inputs": "[b0 = -2147483649, a0 = 0]\n[b0 = 2147483649, a0 = -1]\n[b0 = 2147483650, a0 = -2]\n[b0 = 2147483651, a0 = -3]\n[b0 = 2147483652, a0 = -4]\n[b0 = 2147483653, a0 = -5]\n[b0 = 2147483654, a0 = -6]\n[b0 = 2147483655, a0 = -7]\n[b0 = 2147483656, a0 = -8]\n[b0 = 2147483657, a0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\n\nconstraints = [\n  And(And(Not(b0 == 0), Not(And(b0 > 0, a0 <= 2147483647 - b0))), Not(And(b0 < 0, a0 >= -2147483648 - b0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a', integer=True)\nb = Symbol('b', integer=True)\nInteger_MAX_VALUE = Symbol('Integer_MAX_VALUE', integer=True)\nInteger_MIN_VALUE = Symbol('Integer_MIN_VALUE', integer=True)\nInteger_MAX_VALUE = Symbol('Integer_MAX_VALUE', integer=True)\nInteger_MIN_VALUE = Symbol('Integer_MIN_VALUE', integer=True)\npath_conjunction = (((~((Eq(b, 0)))) & (~(((StrictGreaterThan(b, 0)) & (LessThan(a, (Integer_MAX_VALUE - b))))))) & (~(((StrictLessThan(b, 0)) & (GreaterThan(a, (Integer_MIN_VALUE - b)))))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 263,
    "throwingLine": 275,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MathUtils.java"
  },
  {
    "qualifiedSignature": "android.util.jar.StrictJarFile.EntryIterator.remove()",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 291,
    "throwingLine": 292,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/jar/StrictJarFile.java"
  }
]