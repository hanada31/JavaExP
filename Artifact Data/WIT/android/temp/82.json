[
  {
    "qualifiedSignature": "android.net.nsd.NsdServiceInfo.setAttribute(java.lang.String, byte[])",
    "exception": "throw new IllegalArgumentException(\"Key strings must be printable US-ASCII\");",
    "pathCojunction": "(!(TextUtils.isEmpty(key))) && (i < key.length()) && (character < 0x20 || character > 0x7E)",
    "symbolicPathConjunction": "(!(TextUtils.isEmpty(key))) && (i < key.length()) && (character < 0x20 || character > 0x7E)",
    "backwardsPathConjunction": "(!(TextUtils.isEmpty(key))) && (0 < key.length()) && (key.charAt(0) < 0x20 || key.charAt(0) > 0x7E)",
    "simplifiedPathConjunction": "!TextUtils.isEmpty(key) && (key.charAt(0) > 126 || key.charAt(0) < 32) && key.length() > 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\ni0 = Int('i0')\n\nconstraints = [\n  i0 == 0,\n  character0 == key0.charAt(i0),\n  And(And(Not(TextUtils.isEmpty(key0)), i0 < Length(key0)), Or(character0 < 0x20, character0 > 0x7E))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nTextUtils_isEmpty = Symbol('TextUtils_isEmpty')\nkey_length = Symbol('key_length')\nkey_charAt = Symbol('key_charAt')\npath_conjunction = (((~(TextUtils_isEmpty)) & (StrictLessThan(0, key_length))) & ((StrictLessThan(key_charAt, 0x20)) | (StrictGreaterThan(key_charAt, 0x7E))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 190,
    "throwingLine": 199,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/nsd/NsdServiceInfo.java"
  },
  {
    "qualifiedSignature": "android.net.nsd.NsdServiceInfo.setAttribute(java.lang.String, byte[])",
    "exception": "throw new IllegalArgumentException(\"Key strings must not include '='\");",
    "pathCojunction": "(!(TextUtils.isEmpty(key))) && (i < key.length()) && (!(character < 0x20 || character > 0x7E)) && (character == 0x3D)",
    "symbolicPathConjunction": "(!(TextUtils.isEmpty(key))) && (i < key.length()) && (!(character < 0x20 || character > 0x7E)) && (character == 0x3D)",
    "backwardsPathConjunction": "(!(TextUtils.isEmpty(key))) && (0 < key.length()) && (!(key.charAt(0) < 0x20 || key.charAt(0) > 0x7E)) && (key.charAt(0) == 0x3D)",
    "simplifiedPathConjunction": "key.charAt(0) == 61 && !TextUtils.isEmpty(key) && key.length() > 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\ni0 = Int('i0')\n\nconstraints = [\n  i0 == 0,\n  character0 == key0.charAt(i0),\n  And(And(And(Not(TextUtils.isEmpty(key0)), i0 < Length(key0)), Not(Or(character0 < 0x20, character0 > 0x7E))), character0 == 0x3D)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nTextUtils_isEmpty = Symbol('TextUtils_isEmpty')\nkey_length = Symbol('key_length')\nkey_charAt = Symbol('key_charAt')\npath_conjunction = ((((~(TextUtils_isEmpty)) & (StrictLessThan(0, key_length))) & (~(((StrictLessThan(key_charAt, 0x20)) | (StrictGreaterThan(key_charAt, 0x7E)))))) & (Eq(key_charAt, 0x3D)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 190,
    "throwingLine": 201,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/nsd/NsdServiceInfo.java"
  },
  {
    "qualifiedSignature": "android.net.nsd.NsdServiceInfo.setAttribute(java.lang.String, byte[])",
    "exception": "throw new IllegalArgumentException(\"Key cannot be empty\");",
    "pathCojunction": "(TextUtils.isEmpty(key))",
    "symbolicPathConjunction": "(TextUtils.isEmpty(key))",
    "backwardsPathConjunction": "(TextUtils.isEmpty(key))",
    "simplifiedPathConjunction": "TextUtils.isEmpty(key)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\n\nconstraints = [\n  TextUtils.isEmpty(key0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nTextUtils_isEmpty = Symbol('TextUtils_isEmpty')\npath_conjunction = TextUtils_isEmpty\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 190,
    "throwingLine": 192,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/nsd/NsdServiceInfo.java"
  },
  {
    "qualifiedSignature": "android.net.NetworkPolicy.getNetworkPolicyFromBackup(java.io.DataInputStream)",
    "exception": "throw new BackupUtils.BadVersionException(\"Unknown backup version: \" + version);",
    "pathCojunction": "(version < VERSION_INIT || version > VERSION_RAPID)",
    "symbolicPathConjunction": "(version < VERSION_INIT || version > VERSION_RAPID)",
    "backwardsPathConjunction": "(in.readInt() < VERSION_INIT || in.readInt() > VERSION_RAPID)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nversion0 = Int('version0')\nVERSION_INIT0 = Int('VERSION_INIT0')\nVERSION_RAPID0 = Int('VERSION_RAPID0')\n\nconstraints = [\n  version0 == in0.readInt(),\n  VERSION_INIT0 == 1,\n  VERSION_RAPID0 == 3,\n  Or(version0 < VERSION_INIT0, version0 > VERSION_RAPID0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nin_readInt = Symbol('in_readInt')\npath_conjunction = ((StrictLessThan(in_readInt, 1)) | (StrictGreaterThan(in_readInt, 3)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 270,
    "throwingLine": 273,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkPolicy.java"
  },
  {
    "qualifiedSignature": "android.net.NetworkUtils.maskRawAddress(byte[], int)",
    "exception": "throw new RuntimeException(\"IP address with \" + array.length + \" bytes has invalid prefix length \" + prefixLength);",
    "pathCojunction": "(prefixLength < 0 || prefixLength > array.length * 8)",
    "symbolicPathConjunction": "(prefixLength < 0 || prefixLength > array.length * 8)",
    "backwardsPathConjunction": "(prefixLength < 0 || prefixLength > array.length * 8)",
    "simplifiedPathConjunction": "prefixLength > 8*array.length || prefixLength < 0",
    "z3Inputs": "[array0_length = 0, prefixLength0 = 1]\n[array0_length = 1, prefixLength0 = -1]\n[array0_length = 1, prefixLength0 = -2]\n[array0_length = 2, prefixLength0 = -2]\n[array0_length = 3, prefixLength0 = -2]\n[array0_length = 4, prefixLength0 = -2]\n[array0_length = 5, prefixLength0 = -3]\n[array0_length = 5, prefixLength0 = -2]\n[array0_length = 4, prefixLength0 = -1]\n[array0_length = 1, prefixLength0 = 9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nprefixLength0 = Int('prefixLength0')\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Or(prefixLength0 < 0, prefixLength0 > array0_length * 8)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nprefixLength = Symbol('prefixLength', integer=True)\narray_length = Symbol('array_length', integer=True)\npath_conjunction = ((StrictLessThan(prefixLength, 0)) | (StrictGreaterThan(prefixLength, (array_length * 8))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 252,
    "throwingLine": 254,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkUtils.java"
  },
  {
    "qualifiedSignature": "android.net.NetworkTemplate.getNetworkTemplateFromBackup(java.io.DataInputStream)",
    "exception": "throw new BackupUtils.BadVersionException(\"Unknown Backup Serialization Version\");",
    "pathCojunction": "(version < 1 || version > BACKUP_VERSION)",
    "symbolicPathConjunction": "(version < 1 || version > BACKUP_VERSION)",
    "backwardsPathConjunction": "(in.readInt() < 1 || in.readInt() > BACKUP_VERSION)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nversion0 = Int('version0')\nBACKUP_VERSION0 = Int('BACKUP_VERSION0')\n\nconstraints = [\n  version0 == in0.readInt(),\n  BACKUP_VERSION0 == 1,\n  Or(version0 < 1, version0 > BACKUP_VERSION0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nin_readInt = Symbol('in_readInt')\npath_conjunction = ((StrictLessThan(in_readInt, 1)) | (StrictGreaterThan(in_readInt, 1)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 524,
    "throwingLine": 527,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkTemplate.java"
  },
  {
    "qualifiedSignature": "android.net.NetworkTemplate.getNetworkTemplateFromBackup(java.io.DataInputStream)",
    "exception": "throw new BackupUtils.BadVersionException(\"Restored network template contains unknown match rule \" + matchRule);",
    "pathCojunction": "(!(version < 1 || version > BACKUP_VERSION)) && (!(isKnownMatchRule(matchRule)))",
    "symbolicPathConjunction": "(!(version < 1 || version > BACKUP_VERSION)) && (!isKnownMatchRule(matchRule))",
    "backwardsPathConjunction": "(!(in.readInt() < 1 || in.readInt() > BACKUP_VERSION)) && (!(isKnownMatchRule(in.readInt())))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nversion0 = Int('version0')\nBACKUP_VERSION0 = Int('BACKUP_VERSION0')\nmatchRule0 = Int('matchRule0')\nsubscriberId0 = String('subscriberId0')\nnetworkId0 = String('networkId0')\n\nconstraints = [\n  version0 == in0.readInt(),\n  BACKUP_VERSION0 == 1,\n  matchRule0 == in0.readInt(),\n  subscriberId0 == BackupUtils.readString(in0),\n  networkId0 == BackupUtils.readString(in0),\n  And(Not(Or(version0 < 1, version0 > BACKUP_VERSION0)), Not(isKnownMatchRule(matchRule0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nin_readInt = Symbol('in_readInt')\n_isKnownMatchRule = Symbol('_isKnownMatchRule')\npath_conjunction = ((~(((StrictLessThan(in_readInt, 1)) | (StrictGreaterThan(in_readInt, 1))))) & (~(_isKnownMatchRule)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 524,
    "throwingLine": 535,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkTemplate.java"
  }
]