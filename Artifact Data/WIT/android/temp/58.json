[
  {
    "qualifiedSignature": "android.util.LruCache.resize(int)",
    "exception": "throw new IllegalArgumentException(\"maxSize <= 0\");",
    "pathCojunction": "(maxSize <= 0)",
    "symbolicPathConjunction": "(maxSize <= 0)",
    "backwardsPathConjunction": "(maxSize <= 0)",
    "simplifiedPathConjunction": "maxSize <= 0",
    "z3Inputs": "[maxSize0 = 0]\n[maxSize0 = -1]\n[maxSize0 = -2]\n[maxSize0 = -3]\n[maxSize0 = -4]\n[maxSize0 = -5]\n[maxSize0 = -6]\n[maxSize0 = -7]\n[maxSize0 = -8]\n[maxSize0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmaxSize0 = Int('maxSize0')\n\nconstraints = [\n  maxSize0 <= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmaxSize = Symbol('maxSize', integer=True)\npath_conjunction = (LessThan(maxSize, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 95,
    "throwingLine": 97,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/LruCache.java"
  },
  {
    "qualifiedSignature": "android.util.LruCache.get(K)",
    "exception": "throw new NullPointerException(\"key == null\");",
    "pathCojunction": "(key == null)",
    "symbolicPathConjunction": "(key == null)",
    "backwardsPathConjunction": "(key == null)",
    "simplifiedPathConjunction": "key == null",
    "z3Inputs": "[key0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 112,
    "throwingLine": 114,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/LruCache.java"
  },
  {
    "qualifiedSignature": "android.util.LruCache.put(K, V)",
    "exception": "throw new NullPointerException(\"key == null || value == null\");",
    "pathCojunction": "(key == null || value == null)",
    "symbolicPathConjunction": "(key == null || value == null)",
    "backwardsPathConjunction": "(key == null || value == null)",
    "simplifiedPathConjunction": "key == null || null == value",
    "z3Inputs": "[key0_isNull = True, value0_isNull = False]\n[value0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  Or(key0_isNull, value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((Eq(key, null)) | (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 166,
    "throwingLine": 168,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/LruCache.java"
  },
  {
    "qualifiedSignature": "android.util.LruCache.remove(K)",
    "exception": "throw new NullPointerException(\"key == null\");",
    "pathCojunction": "(key == null)",
    "symbolicPathConjunction": "(key == null)",
    "backwardsPathConjunction": "(key == null)",
    "simplifiedPathConjunction": "key == null",
    "z3Inputs": "[key0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 231,
    "throwingLine": 233,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/LruCache.java"
  },
  {
    "qualifiedSignature": "android.util.ExceptionUtils.wrap(java.io.IOException)",
    "exception": "throw new ParcelableException(e);",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 33,
    "throwingLine": 34,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ExceptionUtils.java"
  },
  {
    "qualifiedSignature": "android.util.ExceptionUtils.propagateIfInstanceOf(java.lang.Throwable, java.lang.Class<E>)",
    "exception": "throw c.cast(t);",
    "pathCojunction": "(t != null && c.isInstance(t))",
    "symbolicPathConjunction": "(t != null && c.isInstance(t))",
    "backwardsPathConjunction": "(t != null && c.isInstance(t))",
    "simplifiedPathConjunction": "c.isInstance(t) && null != t",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nt0_isNull = Bool('t0_isNull')\n\nconstraints = [\n  And(Not(t0_isNull), c0.isInstance(t0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nt = Symbol('t')\nc = Symbol('c')\nc_isInstance = Symbol('c_isInstance')\nnull = Symbol('null')\npath_conjunction = ((Ne(t, null)) & c_isInstance)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 60,
    "throwingLine": 62,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ExceptionUtils.java"
  },
  {
    "qualifiedSignature": "android.util.ExceptionUtils.propagate(java.lang.Throwable, java.lang.Class<E>)",
    "exception": "throw new RuntimeException(t);",
    "pathCojunction": "(!(t != null && c.isInstance(t))) && (true)",
    "symbolicPathConjunction": "(propagateIfInstanceOf(t, c)) && (propagate(t))",
    "backwardsPathConjunction": "(!(t != null && c.isInstance(t))) && (true)",
    "simplifiedPathConjunction": "null == t || !c.isInstance(t)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nt0_isNull = Bool('t0_isNull')\n\nconstraints = [\n  And(Not(And(Not(t0_isNull), c0.isInstance(t0))), True)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nt = Symbol('t')\nc = Symbol('c')\nc_isInstance = Symbol('c_isInstance')\nnull = Symbol('null')\npath_conjunction = ((~(((Ne(t, null)) & c_isInstance))) & True)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 70,
    "throwingLine": 72,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ExceptionUtils.java"
  },
  {
    "qualifiedSignature": "android.util.ExceptionUtils.propagate(java.lang.Throwable, java.lang.Class<E>)",
    "exception": "throw c.cast(t);",
    "pathCojunction": "(t != null && c.isInstance(t))",
    "symbolicPathConjunction": "(propagateIfInstanceOf(t, c))",
    "backwardsPathConjunction": "(t != null && c.isInstance(t))",
    "simplifiedPathConjunction": "c.isInstance(t) && null != t",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nt0_isNull = Bool('t0_isNull')\n\nconstraints = [\n  And(Not(t0_isNull), c0.isInstance(t0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nt = Symbol('t')\nc = Symbol('c')\nc_isInstance = Symbol('c_isInstance')\nnull = Symbol('null')\npath_conjunction = ((Ne(t, null)) & c_isInstance)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 70,
    "throwingLine": 71,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ExceptionUtils.java"
  },
  {
    "qualifiedSignature": "android.util.ExceptionUtils.propagate(java.lang.Throwable)",
    "exception": "throw new RuntimeException(t);",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 75,
    "throwingLine": 79,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ExceptionUtils.java"
  },
  {
    "qualifiedSignature": "android.util.LongArrayQueue.removeFirst()",
    "exception": "throw new NoSuchElementException(\"Queue is empty!\");",
    "pathCojunction": "(mSize == 0)",
    "symbolicPathConjunction": "(mSize == 0)",
    "backwardsPathConjunction": "(mSize == 0)",
    "simplifiedPathConjunction": "mSize == 0",
    "z3Inputs": "[mSize0 = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\n\nconstraints = [\n  mSize0 == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmSize = Symbol('mSize', integer=True)\npath_conjunction = (Eq(mSize, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 111,
    "throwingLine": 113,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/LongArrayQueue.java"
  },
  {
    "qualifiedSignature": "android.util.LongArrayQueue.get(int)",
    "exception": "throw new IndexOutOfBoundsException(\"Index \" + position + \" not valid for a queue of size \" + mSize);",
    "pathCojunction": "(position < 0 || position >= mSize)",
    "symbolicPathConjunction": "(position < 0 || position >= mSize)",
    "backwardsPathConjunction": "(position < 0 || position >= mSize)",
    "simplifiedPathConjunction": "mSize <= position || position < 0",
    "z3Inputs": "[position0 = -1, mSize0 = 0]\n[position0 = -1, mSize0 = -1]\n[position0 = -2, mSize0 = -2]\n[position0 = -3, mSize0 = -3]\n[position0 = -4, mSize0 = -4]\n[position0 = -5, mSize0 = -5]\n[position0 = -6, mSize0 = -6]\n[position0 = -7, mSize0 = -7]\n[position0 = -8, mSize0 = -8]\n[position0 = -9, mSize0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\nmSize0 = Int('mSize0')\n\nconstraints = [\n  Or(position0 < 0, position0 >= mSize0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nposition = Symbol('position', integer=True)\nmSize = Symbol('mSize', integer=True)\npath_conjunction = ((StrictLessThan(position, 0)) | (GreaterThan(position, mSize)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 130,
    "throwingLine": 132,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/LongArrayQueue.java"
  },
  {
    "qualifiedSignature": "android.util.LongArrayQueue.peekFirst()",
    "exception": "throw new NoSuchElementException(\"Queue is empty!\");",
    "pathCojunction": "(mSize == 0)",
    "symbolicPathConjunction": "(mSize == 0)",
    "backwardsPathConjunction": "(mSize == 0)",
    "simplifiedPathConjunction": "mSize == 0",
    "z3Inputs": "[mSize0 = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\n\nconstraints = [\n  mSize0 == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmSize = Symbol('mSize', integer=True)\npath_conjunction = (Eq(mSize, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 145,
    "throwingLine": 147,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/LongArrayQueue.java"
  },
  {
    "qualifiedSignature": "android.util.LongArrayQueue.peekLast()",
    "exception": "throw new NoSuchElementException(\"Queue is empty!\");",
    "pathCojunction": "(mSize == 0)",
    "symbolicPathConjunction": "(mSize == 0)",
    "backwardsPathConjunction": "(mSize == 0)",
    "simplifiedPathConjunction": "mSize == 0",
    "z3Inputs": "[mSize0 = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\n\nconstraints = [\n  mSize0 == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmSize = Symbol('mSize', integer=True)\npath_conjunction = (Eq(mSize, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 158,
    "throwingLine": 160,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/LongArrayQueue.java"
  }
]