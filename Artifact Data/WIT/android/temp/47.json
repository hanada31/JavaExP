[
  {
    "qualifiedSignature": "android.text.InputFilter.AllCaps.CharSequenceWrapper.charAt(int)",
    "exception": "throw new IndexOutOfBoundsException();",
    "pathCojunction": "(index < 0 || index >= mLength)",
    "symbolicPathConjunction": "(index < 0 || index >= mLength)",
    "backwardsPathConjunction": "(index < 0 || index >= mLength)",
    "simplifiedPathConjunction": "index >= mLength || index < 0",
    "z3Inputs": "[index0 = -1, mLength0 = 0]\n[mLength0 = -1, index0 = -1]\n[mLength0 = -2, index0 = -2]\n[index0 = -3]\n[index0 = -4]\n[mLength0 = -3, index0 = -5]\n[mLength0 = -4, index0 = -6]\n[index0 = -7]\n[mLength0 = -5, index0 = -8]\n[mLength0 = -6, index0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nmLength0 = Int('mLength0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= mLength0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nmLength = Symbol('mLength', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, mLength)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 122,
    "throwingLine": 124,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/InputFilter.java"
  },
  {
    "qualifiedSignature": "android.text.InputFilter.AllCaps.CharSequenceWrapper.subSequence(int, int)",
    "exception": "throw new IndexOutOfBoundsException();",
    "pathCojunction": "(start < 0 || end < 0 || end > mLength || start > end)",
    "symbolicPathConjunction": "(start < 0 || end < 0 || end > mLength || start > end)",
    "backwardsPathConjunction": "(start < 0 || end < 0 || end > mLength || start > end)",
    "simplifiedPathConjunction": "end > mLength || end < 0 || end < start || start < 0",
    "z3Inputs": "[mLength0 = -2, start0 = -1, end0 = -2]\n[mLength0 = -3, end0 = -3]\n[mLength0 = -5, end0 = -4]\n[start0 = -2, end0 = -5]\n[start0 = -2, end0 = -6]\n[mLength0 = -8, end0 = -7]\n[start0 = -3, end0 = -8]\n[start0 = -4, end0 = -9]\n[mLength0 = -11, end0 = -10]\n[start0 = -5, end0 = -11]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstart0 = Int('start0')\nend0 = Int('end0')\nmLength0 = Int('mLength0')\n\nconstraints = [\n  Or(Or(Or(start0 < 0, end0 < 0), end0 > mLength0), start0 > end0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\nmLength = Symbol('mLength', integer=True)\npath_conjunction = ((((StrictLessThan(start, 0)) | (StrictLessThan(end, 0))) | (StrictGreaterThan(end, mLength))) | (StrictGreaterThan(start, end)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 129,
    "throwingLine": 131,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/InputFilter.java"
  }
]