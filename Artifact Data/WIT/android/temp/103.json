[
  {
    "qualifiedSignature": "android.view.RenderNodeAnimator.start()",
    "exception": "throw new IllegalStateException(\"Missing target!\");",
    "pathCojunction": "(mTarget == null)",
    "symbolicPathConjunction": "(mTarget == null)",
    "backwardsPathConjunction": "(mTarget == null)",
    "simplifiedPathConjunction": "mTarget == null",
    "z3Inputs": "[mTarget0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmTarget0_isNull = Bool('mTarget0_isNull')\n\nconstraints = [\n  mTarget0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmTarget = Symbol('mTarget')\nnull = Symbol('null')\npath_conjunction = (Eq(mTarget, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 184,
    "throwingLine": 186,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/RenderNodeAnimator.java"
  },
  {
    "qualifiedSignature": "android.view.RenderNodeAnimator.start()",
    "exception": "throw new IllegalStateException(\"Already started!\");",
    "pathCojunction": "(!(mTarget == null)) && (mState != STATE_PREPARE)",
    "symbolicPathConjunction": "(!(mTarget == null)) && (mState != STATE_PREPARE)",
    "backwardsPathConjunction": "(!(mTarget == null)) && (mState != STATE_PREPARE)",
    "simplifiedPathConjunction": "mState != 0 && mTarget != null",
    "z3Inputs": "[mState0 = 1, mTarget0_isNull = False, STATE_PREPARE0 = 0]\n[STATE_PREPARE0 = 0, mTarget0_isNull = False, mState0 = 2]\n[STATE_PREPARE0 = 0, mTarget0_isNull = False, mState0 = 3]\n[STATE_PREPARE0 = 0, mTarget0_isNull = False, mState0 = 4]\n[STATE_PREPARE0 = 0, mTarget0_isNull = False, mState0 = 5]\n[STATE_PREPARE0 = 0, mTarget0_isNull = False, mState0 = 6]\n[STATE_PREPARE0 = 0, mTarget0_isNull = False, mState0 = 7]\n[STATE_PREPARE0 = 0, mTarget0_isNull = False, mState0 = 8]\n[STATE_PREPARE0 = 0, mTarget0_isNull = False, mState0 = 9]\n[STATE_PREPARE0 = 0, mTarget0_isNull = False, mState0 = 10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmState0 = Int('mState0')\nSTATE_PREPARE0 = Int('STATE_PREPARE0')\nmTarget0_isNull = Bool('mTarget0_isNull')\n\nconstraints = [\n  STATE_PREPARE0 == 0,\n  And(Not(mTarget0_isNull), mState0 != STATE_PREPARE0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmTarget = Symbol('mTarget')\nmState = Symbol('mState', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(mTarget, null)))) & (Ne(mState, 0)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 184,
    "throwingLine": 190,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/RenderNodeAnimator.java"
  },
  {
    "qualifiedSignature": "android.view.RenderNodeAnimator.pause()",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 282,
    "throwingLine": 283,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/RenderNodeAnimator.java"
  },
  {
    "qualifiedSignature": "android.view.RenderNodeAnimator.resume()",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 287,
    "throwingLine": 288,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/RenderNodeAnimator.java"
  },
  {
    "qualifiedSignature": "android.view.RenderNodeAnimator.setStartDelay(long)",
    "exception": "throw new IllegalArgumentException(\"startDelay must be positive; \" + startDelay);",
    "pathCojunction": "(startDelay < 0)",
    "symbolicPathConjunction": "(startDelay < 0)",
    "backwardsPathConjunction": "(startDelay < 0)",
    "simplifiedPathConjunction": "startDelay < 0",
    "z3Inputs": "[startDelay0 = -9223372036854775808]\n[startDelay0 = -1]\n[startDelay0 = -2]\n[startDelay0 = -3]\n[startDelay0 = -4]\n[startDelay0 = -5]\n[startDelay0 = -6]\n[startDelay0 = -7]\n[startDelay0 = -8]\n[startDelay0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstartDelay0 = Int('startDelay0')\n\nconstraints = [\n  startDelay0 >= -9223372036854775808, startDelay0 <= 9223372036854775807, # implicit\n  startDelay0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstartDelay = Symbol('startDelay')\npath_conjunction = (StrictLessThan(startDelay, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 326,
    "throwingLine": 329,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/RenderNodeAnimator.java"
  },
  {
    "qualifiedSignature": "android.view.RenderNodeAnimator.setDuration(long)",
    "exception": "throw new IllegalArgumentException(\"duration must be positive; \" + duration);",
    "pathCojunction": "(duration < 0)",
    "symbolicPathConjunction": "(duration < 0)",
    "backwardsPathConjunction": "(duration < 0)",
    "simplifiedPathConjunction": "duration < 0",
    "z3Inputs": "[duration0 = -9223372036854775808]\n[duration0 = -1]\n[duration0 = -2]\n[duration0 = -3]\n[duration0 = -4]\n[duration0 = -5]\n[duration0 = -6]\n[duration0 = -7]\n[duration0 = -8]\n[duration0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  duration0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nduration = Symbol('duration')\npath_conjunction = (StrictLessThan(duration, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 342,
    "throwingLine": 345,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/RenderNodeAnimator.java"
  },
  {
    "qualifiedSignature": "android.view.DragEvent.recycle()",
    "exception": "throw new RuntimeException(toString() + \" recycled twice!\");",
    "pathCojunction": "(!(TRACK_RECYCLED_LOCATION)) && (mRecycled)",
    "symbolicPathConjunction": "(!(TRACK_RECYCLED_LOCATION)) && (mRecycled)",
    "backwardsPathConjunction": "(!(TRACK_RECYCLED_LOCATION)) && (mRecycled)",
    "z3Inputs": "[TRACK_RECYCLED_LOCATION0 = False, mRecycled0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nTRACK_RECYCLED_LOCATION0 = Bool('TRACK_RECYCLED_LOCATION0')\nmRecycled0 = Bool('mRecycled0')\n\nconstraints = [\n  TRACK_RECYCLED_LOCATION0 == False,\n  And(Not(TRACK_RECYCLED_LOCATION0), mRecycled0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmRecycled = Symbol('mRecycled')\npath_conjunction = ((~(False)) & mRecycled)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 446,
    "throwingLine": 455,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/DragEvent.java"
  },
  {
    "qualifiedSignature": "android.view.LayoutInflater.setFactory(android.view.LayoutInflater.Factory)",
    "exception": "throw new NullPointerException(\"Given factory can not be null\");",
    "pathCojunction": "(!(mFactorySet)) && (factory == null)",
    "symbolicPathConjunction": "(!(mFactorySet)) && (factory == null)",
    "backwardsPathConjunction": "(!(mFactorySet)) && (factory == null)",
    "simplifiedPathConjunction": "factory == null && !mFactorySet",
    "z3Inputs": "[factory0_isNull = True, mFactorySet0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmFactorySet0 = Bool('mFactorySet0')\nfactory0_isNull = Bool('factory0_isNull')\n\nconstraints = [\n  And(Not(mFactorySet0), factory0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfactory = Symbol('factory')\nmFactorySet = Symbol('mFactorySet')\nnull = Symbol('null')\npath_conjunction = ((~(mFactorySet)) & (Eq(factory, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 348,
    "throwingLine": 353,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/LayoutInflater.java"
  },
  {
    "qualifiedSignature": "android.view.LayoutInflater.setFactory(android.view.LayoutInflater.Factory)",
    "exception": "throw new IllegalStateException(\"A factory has already been set on this LayoutInflater\");",
    "pathCojunction": "(mFactorySet)",
    "symbolicPathConjunction": "(mFactorySet)",
    "backwardsPathConjunction": "(mFactorySet)",
    "simplifiedPathConjunction": "mFactorySet",
    "z3Inputs": "[mFactorySet0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmFactorySet0 = Bool('mFactorySet0')\n\nconstraints = [\n  mFactorySet0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmFactorySet = Symbol('mFactorySet')\npath_conjunction = mFactorySet\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 348,
    "throwingLine": 350,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/LayoutInflater.java"
  },
  {
    "qualifiedSignature": "android.view.LayoutInflater.setFactory2(android.view.LayoutInflater.Factory2)",
    "exception": "throw new NullPointerException(\"Given factory can not be null\");",
    "pathCojunction": "(!(mFactorySet)) && (factory == null)",
    "symbolicPathConjunction": "(!(mFactorySet)) && (factory == null)",
    "backwardsPathConjunction": "(!(mFactorySet)) && (factory == null)",
    "simplifiedPathConjunction": "factory == null && !mFactorySet",
    "z3Inputs": "[factory0_isNull = True, mFactorySet0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmFactorySet0 = Bool('mFactorySet0')\nfactory0_isNull = Bool('factory0_isNull')\n\nconstraints = [\n  And(Not(mFactorySet0), factory0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfactory = Symbol('factory')\nmFactorySet = Symbol('mFactorySet')\nnull = Symbol('null')\npath_conjunction = ((~(mFactorySet)) & (Eq(factory, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 367,
    "throwingLine": 372,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/LayoutInflater.java"
  },
  {
    "qualifiedSignature": "android.view.LayoutInflater.setFactory2(android.view.LayoutInflater.Factory2)",
    "exception": "throw new IllegalStateException(\"A factory has already been set on this LayoutInflater\");",
    "pathCojunction": "(mFactorySet)",
    "symbolicPathConjunction": "(mFactorySet)",
    "backwardsPathConjunction": "(mFactorySet)",
    "simplifiedPathConjunction": "mFactorySet",
    "z3Inputs": "[mFactorySet0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmFactorySet0 = Bool('mFactorySet0')\n\nconstraints = [\n  mFactorySet0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmFactorySet = Symbol('mFactorySet')\npath_conjunction = mFactorySet\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 367,
    "throwingLine": 369,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/LayoutInflater.java"
  }
]