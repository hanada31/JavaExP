[
  {
    "qualifiedSignature": "android.view.inputmethod.CursorAnchorInfo.Builder.addCharacterBounds(int, float, float, float, float, int)",
    "exception": "throw new IllegalArgumentException(\"index must not be a negative integer.\");",
    "pathCojunction": "(index < 0)",
    "symbolicPathConjunction": "(index < 0)",
    "backwardsPathConjunction": "(index < 0)",
    "simplifiedPathConjunction": "index < 0",
    "z3Inputs": "[index0 = -1]\n[index0 = -2]\n[index0 = -3]\n[index0 = -4]\n[index0 = -5]\n[index0 = -6]\n[index0 = -7]\n[index0 = -8]\n[index0 = -9]\n[index0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nleft0 = Real('left0')\ntop0 = Real('top0')\nright0 = Real('right0')\nbottom0 = Real('bottom0')\nflags0 = Int('flags0')\n\nconstraints = [\n  index0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\npath_conjunction = (StrictLessThan(index, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 347,
    "throwingLine": 349,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/inputmethod/CursorAnchorInfo.java"
  },
  {
    "qualifiedSignature": "android.view.inputmethod.CursorAnchorInfo.Builder.build()",
    "exception": "throw new IllegalArgumentException(\"Coordinate transformation matrix is \" + \"required when positional parameters are specified.\");",
    "pathCojunction": "(!(mMatrixInitialized)) && (hasCharacterBounds || !Float.isNaN(mInsertionMarkerHorizontal) || !Float.isNaN(mInsertionMarkerTop) || !Float.isNaN(mInsertionMarkerBaseline) || !Float.isNaN(mInsertionMarkerBottom))",
    "symbolicPathConjunction": "(!(mMatrixInitialized)) && (hasCharacterBounds || !Float.isNaN(mInsertionMarkerHorizontal) || !Float.isNaN(mInsertionMarkerTop) || !Float.isNaN(mInsertionMarkerBaseline) || !Float.isNaN(mInsertionMarkerBottom))",
    "backwardsPathConjunction": "(!(mMatrixInitialized)) && ((mCharacterBoundsArrayBuilder != null && !mCharacterBoundsArrayBuilder.isEmpty()) || !Float.isNaN(mInsertionMarkerHorizontal) || !Float.isNaN(mInsertionMarkerTop) || !Float.isNaN(mInsertionMarkerBaseline) || !Float.isNaN(mInsertionMarkerBottom))",
    "simplifiedPathConjunction": "!mMatrixInitialized && (!Float.isNaN(mInsertionMarkerBaseline) || !mCharacterBoundsArrayBuilder.isEmpty()) && (!Float.isNaN(mInsertionMarkerBaseline) || mCharacterBoundsArrayBuilder != null)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmMatrixInitialized0 = Bool('mMatrixInitialized0')\nhasCharacterBounds0 = Bool('hasCharacterBounds0')\nmInsertionMarkerHorizontal0 = Real('mInsertionMarkerHorizontal0')\nmInsertionMarkerTop0 = Real('mInsertionMarkerTop0')\nmInsertionMarkerBaseline0 = Real('mInsertionMarkerBaseline0')\nmInsertionMarkerBottom0 = Real('mInsertionMarkerBottom0')\nmCharacterBoundsArrayBuilder0_isNull = Bool('mCharacterBoundsArrayBuilder0_isNull')\n\nconstraints = [\n  hasCharacterBounds0 == And(Not(mCharacterBoundsArrayBuilder0_isNull), Not(mCharacterBoundsArrayBuilder0.isEmpty())),\n  And(Not(mMatrixInitialized0), Or(Or(Or(Or(hasCharacterBounds0, Not(Float.isNaN(mInsertionMarkerHorizontal0))), Not(Float.isNaN(mInsertionMarkerTop0))), Not(Float.isNaN(mInsertionMarkerBaseline0))), Not(Float.isNaN(mInsertionMarkerBottom0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmMatrixInitialized = Symbol('mMatrixInitialized')\nmCharacterBoundsArrayBuilder = Symbol('mCharacterBoundsArrayBuilder')\nmInsertionMarkerHorizontal = Symbol('mInsertionMarkerHorizontal', integer=True)\nmInsertionMarkerTop = Symbol('mInsertionMarkerTop', integer=True)\nmInsertionMarkerBaseline = Symbol('mInsertionMarkerBaseline', integer=True)\nmInsertionMarkerBottom = Symbol('mInsertionMarkerBottom', integer=True)\nmCharacterBoundsArrayBuilder_isEmpty = Symbol('mCharacterBoundsArrayBuilder_isEmpty')\nFloat_isNaN = Symbol('Float_isNaN')\nnull = Symbol('null')\npath_conjunction = ((~(mMatrixInitialized)) & ((((((Ne(mCharacterBoundsArrayBuilder, null)) & (~(mCharacterBoundsArrayBuilder_isEmpty))) | (~(Float_isNaN))) | (~(Float_isNaN))) | (~(Float_isNaN))) | (~(Float_isNaN))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 377,
    "throwingLine": 388,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/inputmethod/CursorAnchorInfo.java"
  }
]