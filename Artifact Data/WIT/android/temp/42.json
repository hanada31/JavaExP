[
  {
    "qualifiedSignature": "android.text.method.WordIterator.setCharSequence(java.lang.CharSequence, int, int)",
    "exception": "throw new IndexOutOfBoundsException(\"input indexes are outside the CharSequence\");",
    "pathCojunction": "(!(0 <= start && end <= charSequence.length()))",
    "symbolicPathConjunction": "(!(0 <= start && end <= charSequence.length()))",
    "backwardsPathConjunction": "(!(0 <= start && end <= charSequence.length()))",
    "simplifiedPathConjunction": "charSequence.length() < end || start < 0",
    "z3Inputs": "[start0 = -1, end0 = 0, charSequence0 = \"\"]\n[start0 = -1, charSequence0 = \"!0!\", end0 = -1]\n[charSequence0 = \"A\", end0 = 2]\n[start0 = -2, charSequence0 = \"\", end0 = 1]\n[start0 = -2, charSequence0 = \"\", end0 = 3]\n[start0 = -3, charSequence0 = \"\", end0 = 3]\n[start0 = -3, charSequence0 = \"\", end0 = 2]\n[start0 = -4, charSequence0 = \"\", end0 = 2]\n[start0 = -5, charSequence0 = \"\", end0 = 2]\n[start0 = -6, charSequence0 = \"\", end0 = 2]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncharSequence0 = String('charSequence0')\nstart0 = Int('start0')\nend0 = Int('end0')\n\nconstraints = [\n  Not(And(0 <= start0, end0 <= Length(charSequence0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncharSequence = Symbol('charSequence')\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\ncharSequence_length = Symbol('charSequence_length')\npath_conjunction = (~(((LessThan(0, start)) & (LessThan(end, charSequence_length)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 62,
    "throwingLine": 69,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/method/WordIterator.java"
  },
  {
    "qualifiedSignature": "android.text.method.WordIterator.getPunctuationBeginning(int)",
    "exception": "throw new IllegalArgumentException(\"Invalid offset: \" + (offset) + \". Valid range is [\" + mStart + \", \" + mEnd + \"]\");",
    "pathCojunction": "(!(mStart <= offset && offset <= mEnd))",
    "symbolicPathConjunction": "(!(mStart <= offset && offset <= mEnd))",
    "backwardsPathConjunction": "(!(mStart <= offset && offset <= mEnd))",
    "simplifiedPathConjunction": "mStart > offset || mEnd < offset",
    "z3Inputs": "[mStart0 = 1, mEnd0 = 0, offset0 = 0]\n[offset0 = -1, mEnd0 = -2, mStart0 = 0]\n[offset0 = -2, mStart0 = -1]\n[offset0 = -3, mEnd0 = -4, mStart0 = -2]\n[offset0 = -4, mEnd0 = -5, mStart0 = -3]\n[offset0 = -5, mStart0 = -4]\n[offset0 = -6, mEnd0 = -7, mStart0 = -5]\n[offset0 = -7, mEnd0 = -8, mStart0 = -6]\n[offset0 = -8, mStart0 = -7]\n[offset0 = -9, mEnd0 = -10, mStart0 = -8]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noffset0 = Int('offset0')\nmEnd0 = Int('mEnd0')\nmStart0 = Int('mStart0')\n\nconstraints = [\n  Not(And(mStart0 <= offset0, offset0 <= mEnd0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noffset = Symbol('offset', integer=True)\nmEnd = Symbol('mEnd', integer=True)\nmStart = Symbol('mStart', integer=True)\npath_conjunction = (~(((LessThan(mStart, offset)) & (LessThan(offset, mEnd)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 284,
    "throwingLine": 285,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/method/WordIterator.java"
  },
  {
    "qualifiedSignature": "android.text.method.WordIterator.getPunctuationEnd(int)",
    "exception": "throw new IllegalArgumentException(\"Invalid offset: \" + (offset) + \". Valid range is [\" + mStart + \", \" + mEnd + \"]\");",
    "pathCojunction": "(!(mStart <= offset && offset <= mEnd))",
    "symbolicPathConjunction": "(!(mStart <= offset && offset <= mEnd))",
    "backwardsPathConjunction": "(!(mStart <= offset && offset <= mEnd))",
    "simplifiedPathConjunction": "mStart > offset || mEnd < offset",
    "z3Inputs": "[mStart0 = 1, mEnd0 = 0, offset0 = 0]\n[offset0 = -1, mEnd0 = -2, mStart0 = 0]\n[offset0 = -2, mStart0 = -1]\n[offset0 = -3, mEnd0 = -4, mStart0 = -2]\n[offset0 = -4, mEnd0 = -5, mStart0 = -3]\n[offset0 = -5, mStart0 = -4]\n[offset0 = -6, mEnd0 = -7, mStart0 = -5]\n[offset0 = -7, mEnd0 = -8, mStart0 = -6]\n[offset0 = -8, mStart0 = -7]\n[offset0 = -9, mEnd0 = -10, mStart0 = -8]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noffset0 = Int('offset0')\nmEnd0 = Int('mEnd0')\nmStart0 = Int('mStart0')\n\nconstraints = [\n  Not(And(mStart0 <= offset0, offset0 <= mEnd0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noffset = Symbol('offset', integer=True)\nmEnd = Symbol('mEnd', integer=True)\nmStart = Symbol('mStart', integer=True)\npath_conjunction = (~(((LessThan(mStart, offset)) & (LessThan(offset, mEnd)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 301,
    "throwingLine": 302,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/method/WordIterator.java"
  }
]