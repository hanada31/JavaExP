[
  {
    "qualifiedSignature": "android.app.WallpaperManager.FastBitmapDrawable.setAlpha(int)",
    "exception": "throw new UnsupportedOperationException(\"Not supported with this drawable\");",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nalpha0 = Int('alpha0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 239,
    "throwingLine": 240,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/WallpaperManager.java"
  },
  {
    "qualifiedSignature": "android.app.WallpaperManager.FastBitmapDrawable.setDither(boolean)",
    "exception": "throw new UnsupportedOperationException(\"Not supported with this drawable\");",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndither0 = Bool('dither0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 249,
    "throwingLine": 250,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/WallpaperManager.java"
  },
  {
    "qualifiedSignature": "android.app.WallpaperManager.FastBitmapDrawable.setFilterBitmap(boolean)",
    "exception": "throw new UnsupportedOperationException(\"Not supported with this drawable\");",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfilter0 = Bool('filter0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 254,
    "throwingLine": 255,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/WallpaperManager.java"
  },
  {
    "qualifiedSignature": "android.app.AlarmManager.cancel(android.app.AlarmManager.OnAlarmListener)",
    "exception": "throw new NullPointerException(\"cancel() called with a null OnAlarmListener\");",
    "pathCojunction": "(listener == null)",
    "symbolicPathConjunction": "(listener == null)",
    "backwardsPathConjunction": "(listener == null)",
    "simplifiedPathConjunction": "listener == null",
    "z3Inputs": "[listener0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlistener0_isNull = Bool('listener0_isNull')\n\nconstraints = [\n  listener0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlistener = Symbol('listener')\nnull = Symbol('null')\npath_conjunction = (Eq(listener, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 943,
    "throwingLine": 945,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AlarmManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.strDebugOpToOp(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"Unknown operation string: \" + op);",
    "pathCojunction": "(!(i < sOpNames.length))",
    "symbolicPathConjunction": "(!(i < sOpNames.length))",
    "backwardsPathConjunction": "(!(0 < sOpNames.length))",
    "simplifiedPathConjunction": "sOpNames.length <= 0",
    "z3Inputs": "[i0 = 0, sOpNames0_length = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nop0 = String('op0')\ni0 = Int('i0')\nsOpNames0_length = Int('sOpNames0_length')\n\nconstraints = [\n  i0 == 0,\n  sOpNames0_length >= 0, # implicit\n  Not(i0 < sOpNames0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsOpNames = Symbol('sOpNames')\nsOpNames_length = Symbol('sOpNames_length', integer=True)\npath_conjunction = (~((StrictLessThan(0, sOpNames_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 2055,
    "throwingLine": 2061,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.strDebugOpToOp(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"Unknown operation string: \" + op);",
    "pathCojunction": "(i < sOpNames.length) && (!(sOpNames[i].equals(op)))",
    "symbolicPathConjunction": "(i < sOpNames.length) && (!(sOpNames[i].equals(op)))",
    "backwardsPathConjunction": "(0 < sOpNames.length) && (!(sOpNames[0].equals(op)))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nop0 = String('op0')\ni0 = Int('i0')\nsOpNames0_length = Int('sOpNames0_length')\n\nconstraints = [\n  i0 == 0,\n  sOpNames0_length >= 0, # implicit\n  And(i0 < sOpNames0_length, Not(sOpNames0[i0].equals(op0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nop = Symbol('op')\nsOpNames = Symbol('sOpNames')\nsOpNames_length = Symbol('sOpNames_length', integer=True)\nsOpNames[0]_equals = Symbol('sOpNames[0]_equals')\npath_conjunction = ((StrictLessThan(0, sOpNames_length)) & (~(sOpNames[0]_equals)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 2055,
    "throwingLine": 2061,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.HistoricalOps.getUidOpsAt(int)",
    "exception": "throw new IndexOutOfBoundsException();",
    "pathCojunction": "(mHistoricalUidOps == null)",
    "symbolicPathConjunction": "(mHistoricalUidOps == null)",
    "backwardsPathConjunction": "(mHistoricalUidOps == null)",
    "simplifiedPathConjunction": "mHistoricalUidOps == null",
    "z3Inputs": "[mHistoricalUidOps0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nmHistoricalUidOps0_isNull = Bool('mHistoricalUidOps0_isNull')\n\nconstraints = [\n  mHistoricalUidOps0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmHistoricalUidOps = Symbol('mHistoricalUidOps')\nnull = Symbol('null')\npath_conjunction = (Eq(mHistoricalUidOps, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 3109,
    "throwingLine": 3111,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.HistoricalUidOps.getPackageOpsAt(int)",
    "exception": "throw new IndexOutOfBoundsException();",
    "pathCojunction": "(mHistoricalPackageOps == null)",
    "symbolicPathConjunction": "(mHistoricalPackageOps == null)",
    "backwardsPathConjunction": "(mHistoricalPackageOps == null)",
    "simplifiedPathConjunction": "mHistoricalPackageOps == null",
    "z3Inputs": "[mHistoricalPackageOps0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nmHistoricalPackageOps0_isNull = Bool('mHistoricalPackageOps0_isNull')\n\nconstraints = [\n  mHistoricalPackageOps0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmHistoricalPackageOps = Symbol('mHistoricalPackageOps')\nnull = Symbol('null')\npath_conjunction = (Eq(mHistoricalPackageOps, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 3395,
    "throwingLine": 3397,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.HistoricalPackageOps.getOpAt(int)",
    "exception": "throw new IndexOutOfBoundsException();",
    "pathCojunction": "(mHistoricalOps == null)",
    "symbolicPathConjunction": "(mHistoricalOps == null)",
    "backwardsPathConjunction": "(mHistoricalOps == null)",
    "simplifiedPathConjunction": "mHistoricalOps == null",
    "z3Inputs": "[mHistoricalOps0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nmHistoricalOps0_isNull = Bool('mHistoricalOps0_isNull')\n\nconstraints = [\n  mHistoricalOps0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmHistoricalOps = Symbol('mHistoricalOps')\nnull = Symbol('null')\npath_conjunction = (Eq(mHistoricalOps, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 3634,
    "throwingLine": 3636,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.strOpToOp(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"Unknown operation string: \" + op);",
    "pathCojunction": "(val == null)",
    "symbolicPathConjunction": "(val == null)",
    "backwardsPathConjunction": "(sOpStrToOp.get(op) == null)",
    "simplifiedPathConjunction": "null == sOpStrToOp.get(op)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nop0 = String('op0')\nval0 = Int('val0')\nval0_isNull = Bool('val0_isNull')\n\nconstraints = [\n  val0 == sOpStrToOp0.get(op0),\n  val0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nop = Symbol('op')\nsOpStrToOp = Symbol('sOpStrToOp')\nsOpStrToOp_get = Symbol('sOpStrToOp_get')\nnull = Symbol('null')\npath_conjunction = (Eq(sOpStrToOp_get, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 4915,
    "throwingLine": 4918,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.noteOp(java.lang.String, int, java.lang.String)",
    "exception": "throw new SecurityException(buildSecurityExceptionMsg(strOpToOp(op), uid, packageName))",
    "pathCojunction": "(noteOpNoThrow(op, uid, packageName) == 2)",
    "symbolicPathConjunction": "(noteOp(strOpToOp(op), uid, packageName))",
    "backwardsPathConjunction": "(noteOpNoThrow(op, uid, packageName) == 2)",
    "simplifiedPathConjunction": "noteOpNoThrow(op, uid, packageName) == 2",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nop0 = String('op0')\nuid0 = Int('uid0')\npackageName0 = String('packageName0')\n\nconstraints = [\n  noteOpNoThrow(op0, uid0, packageName0) == 2\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nop = Symbol('op')\nuid = Symbol('uid', integer=True)\npackageName = Symbol('packageName')\n_noteOpNoThrow = Symbol('_noteOpNoThrow')\npath_conjunction = (Eq(_noteOpNoThrow, 2))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 5017,
    "throwingLine": 5018,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.noteProxyOp(java.lang.String, java.lang.String)",
    "exception": "throw new SecurityException(\"Proxy package \" + mContext.getOpPackageName() + \" from uid \" + Process.myUid() + \" or calling package \" + proxiedPackageName + \" from uid \" + Binder.getCallingUid() + \" not allowed to perform \" + sOpNames[strOpToOp(op)])",
    "pathCojunction": "(noteProxyOpNoThrow(op, proxiedPackageName) == 2)",
    "symbolicPathConjunction": "(noteProxyOp(strOpToOp(op), proxiedPackageName))",
    "backwardsPathConjunction": "(noteProxyOpNoThrow(op, proxiedPackageName) == 2)",
    "simplifiedPathConjunction": "noteProxyOpNoThrow(op, proxiedPackageName) == 2",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nop0 = String('op0')\nproxiedPackageName0 = String('proxiedPackageName0')\n\nconstraints = [\n  noteProxyOpNoThrow(op0, proxiedPackageName0) == 2\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nop = Symbol('op')\nproxiedPackageName = Symbol('proxiedPackageName')\n_noteProxyOpNoThrow = Symbol('_noteProxyOpNoThrow')\npath_conjunction = (Eq(_noteProxyOpNoThrow, 2))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 5044,
    "throwingLine": 5045,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.startOp(java.lang.String, int, java.lang.String)",
    "exception": "throw new SecurityException(buildSecurityExceptionMsg(strOpToOp(op), uid, packageName))",
    "pathCojunction": "(startOpNoThrow(strOpToOp(op), uid, packageName, startIfModeDefault) == 2)",
    "symbolicPathConjunction": "(startOp(strOpToOp(op), uid, packageName))",
    "backwardsPathConjunction": "(startOpNoThrow(strOpToOp(op), uid, packageName, startIfModeDefault) == 2)",
    "simplifiedPathConjunction": "startOpNoThrow(strOpToOp(op), uid, packageName, startIfModeDefault) == 2",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nop0 = String('op0')\nuid0 = Int('uid0')\npackageName0 = String('packageName0')\nstartIfModeDefault0 = Bool('startIfModeDefault0')\n\nconstraints = [\n  startOpNoThrow(strOpToOp(op0), uid0, packageName0, startIfModeDefault0) == 2\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nop = Symbol('op')\nuid = Symbol('uid', integer=True)\npackageName = Symbol('packageName')\nstartIfModeDefault = Symbol('startIfModeDefault')\n_startOpNoThrow = Symbol('_startOpNoThrow')\n_strOpToOp = Symbol('_strOpToOp')\npath_conjunction = (Eq(_startOpNoThrow, 2))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 5091,
    "throwingLine": 5092,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.noteOp(int, int, java.lang.String)",
    "exception": "throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));",
    "pathCojunction": "(mode == MODE_ERRORED)",
    "symbolicPathConjunction": "(mode == MODE_ERRORED)",
    "backwardsPathConjunction": "(noteOpNoThrow(op, uid, packageName) == MODE_ERRORED)",
    "simplifiedPathConjunction": "noteOpNoThrow(op, uid, packageName) == 2",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nop0 = Int('op0')\nuid0 = Int('uid0')\npackageName0 = String('packageName0')\nmode0 = Int('mode0')\nMODE_ERRORED0 = Int('MODE_ERRORED0')\n\nconstraints = [\n  mode0 == noteOpNoThrow(op0, uid0, packageName0),\n  MODE_ERRORED0 == 2,\n  mode0 == MODE_ERRORED0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nop = Symbol('op', integer=True)\nuid = Symbol('uid', integer=True)\npackageName = Symbol('packageName')\n_noteOpNoThrow = Symbol('_noteOpNoThrow')\npath_conjunction = (Eq(_noteOpNoThrow, 2))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 5231,
    "throwingLine": 5234,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.noteProxyOp(int, java.lang.String)",
    "exception": "throw new SecurityException(\"Proxy package \" + mContext.getOpPackageName() + \" from uid \" + Process.myUid() + \" or calling package \" + proxiedPackageName + \" from uid \" + Binder.getCallingUid() + \" not allowed to perform \" + sOpNames[op]);",
    "pathCojunction": "(mode == MODE_ERRORED)",
    "symbolicPathConjunction": "(mode == MODE_ERRORED)",
    "backwardsPathConjunction": "(noteProxyOpNoThrow(op, proxiedPackageName) == MODE_ERRORED)",
    "simplifiedPathConjunction": "noteProxyOpNoThrow(op, proxiedPackageName) == 2",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nop0 = Int('op0')\nproxiedPackageName0 = String('proxiedPackageName0')\nmode0 = Int('mode0')\nMODE_ERRORED0 = Int('MODE_ERRORED0')\n\nconstraints = [\n  mode0 == noteProxyOpNoThrow(op0, proxiedPackageName0),\n  MODE_ERRORED0 == 2,\n  mode0 == MODE_ERRORED0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nop = Symbol('op', integer=True)\nproxiedPackageName = Symbol('proxiedPackageName')\n_noteProxyOpNoThrow = Symbol('_noteProxyOpNoThrow')\npath_conjunction = (Eq(_noteProxyOpNoThrow, 2))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 5258,
    "throwingLine": 5261,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.startOp(int, int, java.lang.String)",
    "exception": "throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName))",
    "pathCojunction": "(startOpNoThrow(op, uid, packageName, startIfModeDefault) == 2)",
    "symbolicPathConjunction": "(startOp(op, uid, packageName, false))",
    "backwardsPathConjunction": "(startOpNoThrow(op, uid, packageName, startIfModeDefault) == 2)",
    "simplifiedPathConjunction": "startOpNoThrow(op, uid, packageName, startIfModeDefault) == 2",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nop0 = Int('op0')\nuid0 = Int('uid0')\npackageName0 = String('packageName0')\nstartIfModeDefault0 = Bool('startIfModeDefault0')\n\nconstraints = [\n  startOpNoThrow(op0, uid0, packageName0, startIfModeDefault0) == 2\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nop = Symbol('op', integer=True)\nuid = Symbol('uid', integer=True)\npackageName = Symbol('packageName')\nstartIfModeDefault = Symbol('startIfModeDefault')\n_startOpNoThrow = Symbol('_startOpNoThrow')\npath_conjunction = (Eq(_startOpNoThrow, 2))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 5355,
    "throwingLine": 5356,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  },
  {
    "qualifiedSignature": "android.app.AppOpsManager.startOp(int, int, java.lang.String, boolean)",
    "exception": "throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));",
    "pathCojunction": "(mode == MODE_ERRORED)",
    "symbolicPathConjunction": "(mode == MODE_ERRORED)",
    "backwardsPathConjunction": "(startOpNoThrow(op, uid, packageName, startIfModeDefault) == MODE_ERRORED)",
    "simplifiedPathConjunction": "startOpNoThrow(op, uid, packageName, startIfModeDefault) == 2",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nop0 = Int('op0')\nuid0 = Int('uid0')\npackageName0 = String('packageName0')\nstartIfModeDefault0 = Bool('startIfModeDefault0')\nmode0 = Int('mode0')\nMODE_ERRORED0 = Int('MODE_ERRORED0')\n\nconstraints = [\n  mode0 == startOpNoThrow(op0, uid0, packageName0, startIfModeDefault0),\n  MODE_ERRORED0 == 2,\n  mode0 == MODE_ERRORED0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nop = Symbol('op', integer=True)\nuid = Symbol('uid', integer=True)\npackageName = Symbol('packageName')\nstartIfModeDefault = Symbol('startIfModeDefault')\n_startOpNoThrow = Symbol('_startOpNoThrow')\npath_conjunction = (Eq(_startOpNoThrow, 2))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 5378,
    "throwingLine": 5381,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/AppOpsManager.java"
  }
]