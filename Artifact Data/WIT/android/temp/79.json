[
  {
    "qualifiedSignature": "android.net.NetworkStatsHistory.DataStreamUtils.readFullLongArray(java.io.DataInputStream)",
    "exception": "throw new ProtocolException(\"negative array size\");",
    "pathCojunction": "(size < 0)",
    "symbolicPathConjunction": "(size < 0)",
    "backwardsPathConjunction": "(in.readInt() < 0)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == in0.readInt(),\n  size0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nin_readInt = Symbol('in_readInt')\npath_conjunction = (StrictLessThan(in_readInt, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 756,
    "throwingLine": 758,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkStatsHistory.java"
  },
  {
    "qualifiedSignature": "android.net.NetworkStatsHistory.DataStreamUtils.readVarLong(java.io.DataInputStream)",
    "exception": "throw new ProtocolException(\"malformed long\");",
    "pathCojunction": "(shift < 64) && (!((b & 0x80) == 0)) && (!(shift < 64))",
    "symbolicPathConjunction": "(shift < 64) && (!((b & 0x80) == 0)) && (!(shift < 64))",
    "backwardsPathConjunction": "(shift + 7 + 7 < 64) && (!((in.readByte() & 0x80) == 0)) && (!(shift + 7 + 7 < 64))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nshift0 = Int('shift0')\nresult0 = Int('result0')\nb0 = Int('b0')\nresult1 = Int('result1')\nshift1 = Int('shift1')\n\nconstraints = [\n  shift0 == 0,\n  result0 == 0,\n  b0 == in0.readByte(),\n  result1 == (b0 & 0x7F) << shift0,\n  shift1 == shift0 + 7,\n  result0 >= -9223372036854775808, result0 <= 9223372036854775807, # implicit\n  b0 >= -128, b0 <= 127, # implicit\n  result1 >= -9223372036854775808, result1 <= 9223372036854775807, # implicit\n  And(And(shift1 < 64, Not(b0 & 0x80 == 0)), Not(shift1 < 64))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nin_readByte = Symbol('in_readByte')\npath_conjunction = (((StrictLessThan(((shift + 7) + 7), 64)) & (~((Eq((in_readByte & 0x80), 0))))) & (~((StrictLessThan(((shift + 7) + 7), 64)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 769,
    "throwingLine": 779,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkStatsHistory.java"
  },
  {
    "qualifiedSignature": "android.net.NetworkStatsHistory.DataStreamUtils.readVarLongArray(java.io.DataInputStream)",
    "exception": "throw new ProtocolException(\"negative array size\");",
    "pathCojunction": "(!(size == -1)) && (size < 0)",
    "symbolicPathConjunction": "(!(size == -1)) && (size < 0)",
    "backwardsPathConjunction": "(!(in.readInt() == -1)) && (in.readInt() < 0)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == in0.readInt(),\n  And(Not(size0 == -1), size0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nin_readInt = Symbol('in_readInt')\npath_conjunction = ((~((Eq(in_readInt, -1)))) & (StrictLessThan(in_readInt, 0)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 797,
    "throwingLine": 800,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkStatsHistory.java"
  },
  {
    "qualifiedSignature": "android.net.NetworkStatsHistory.DataStreamUtils.writeVarLongArray(java.io.DataOutputStream, long[], int)",
    "exception": "throw new IllegalArgumentException(\"size larger than length\");",
    "pathCojunction": "(!(values == null)) && (size > values.length)",
    "symbolicPathConjunction": "(!(values == null)) && (size > values.length)",
    "backwardsPathConjunction": "(!(values == null)) && (size > values.length)",
    "simplifiedPathConjunction": "size > values.length && null != values",
    "z3Inputs": "[size0 = 1, values0_length = 0, values0_isNull = False]\n[size0 = 2, values0_isNull = False, values0_length = 1]\n[size0 = 2, values0_isNull = False, values0_length = 0]\n[size0 = 3, values0_isNull = False, values0_length = 0]\n[size0 = 4, values0_isNull = False, values0_length = 0]\n[size0 = 5, values0_isNull = False, values0_length = 0]\n[size0 = 6, values0_isNull = False, values0_length = 0]\n[size0 = 7, values0_isNull = False, values0_length = 0]\n[size0 = 8, values0_isNull = False, values0_length = 0]\n[size0 = 9, values0_isNull = False, values0_length = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\nvalues0_isNull = Bool('values0_isNull')\nvalues0_length = Int('values0_length')\n\nconstraints = [\n  values0_length >= 0, # implicit\n  And(Not(values0_isNull), size0 > values0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nsize = Symbol('size', integer=True)\nvalues_length = Symbol('values_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(values, null)))) & (StrictGreaterThan(size, values_length)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 809,
    "throwingLine": 815,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkStatsHistory.java"
  },
  {
    "qualifiedSignature": "android.net.Network.openConnection(java.net.URL, java.net.Proxy)",
    "exception": "throw new IllegalArgumentException(\"proxy is null\");",
    "pathCojunction": "(proxy == null)",
    "symbolicPathConjunction": "(proxy == null)",
    "backwardsPathConjunction": "(proxy == null)",
    "simplifiedPathConjunction": "null == proxy",
    "z3Inputs": "[proxy0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nproxy0_isNull = Bool('proxy0_isNull')\n\nconstraints = [\n  proxy0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nproxy = Symbol('proxy')\nnull = Symbol('null')\npath_conjunction = (Eq(proxy, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 354,
    "throwingLine": 355,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Network.java"
  },
  {
    "qualifiedSignature": "android.net.Network.fromNetworkHandle(long)",
    "exception": "throw new IllegalArgumentException(\"Value passed to fromNetworkHandle() is not a network handle.\");",
    "pathCojunction": "(!(networkHandle == 0)) && ((networkHandle & ((1L << HANDLE_MAGIC_SIZE) - 1)) != HANDLE_MAGIC || networkHandle < 0)",
    "symbolicPathConjunction": "(!(networkHandle == 0)) && ((networkHandle & ((1L << HANDLE_MAGIC_SIZE) - 1)) != HANDLE_MAGIC || networkHandle < 0)",
    "backwardsPathConjunction": "(!(networkHandle == 0)) && ((networkHandle & ((1L << HANDLE_MAGIC_SIZE) - 1)) != HANDLE_MAGIC || networkHandle < 0)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnetworkHandle0 = Int('networkHandle0')\nHANDLE_MAGIC_SIZE0 = Int('HANDLE_MAGIC_SIZE0')\nHANDLE_MAGIC0 = Int('HANDLE_MAGIC0')\n\nconstraints = [\n  HANDLE_MAGIC_SIZE0 == 32,\n  HANDLE_MAGIC0 == 0xcafed00dL,\n  networkHandle0 >= -9223372036854775808, networkHandle0 <= 9223372036854775807, # implicit\n  HANDLE_MAGIC0 >= -9223372036854775808, HANDLE_MAGIC0 <= 9223372036854775807, # implicit\n  And(Not(networkHandle0 == 0), Or(networkHandle0 & 1L << HANDLE_MAGIC_SIZE0 - 1 != HANDLE_MAGIC0, networkHandle0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnetworkHandle = Symbol('networkHandle')\npath_conjunction = ((~((Eq(networkHandle, 0)))) & ((Ne((networkHandle & ((1L << 32) - 1)), 0xcafed00dL)) | (StrictLessThan(networkHandle, 0))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 425,
    "throwingLine": 432,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Network.java"
  },
  {
    "qualifiedSignature": "android.net.Network.fromNetworkHandle(long)",
    "exception": "throw new IllegalArgumentException(\"Network.fromNetworkHandle refusing to instantiate NETID_UNSET Network.\");",
    "pathCojunction": "(networkHandle == 0)",
    "symbolicPathConjunction": "(networkHandle == 0)",
    "backwardsPathConjunction": "(networkHandle == 0)",
    "simplifiedPathConjunction": "networkHandle == 0",
    "z3Inputs": "[networkHandle0 = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnetworkHandle0 = Int('networkHandle0')\n\nconstraints = [\n  networkHandle0 >= -9223372036854775808, networkHandle0 <= 9223372036854775807, # implicit\n  networkHandle0 == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnetworkHandle = Symbol('networkHandle')\npath_conjunction = (Eq(networkHandle, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 425,
    "throwingLine": 427,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/Network.java"
  },
  {
    "qualifiedSignature": "android.net.InterfaceConfiguration.hasFlag(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"flag contains space: \" + flag);",
    "pathCojunction": "(flag.indexOf(' ') >= 0)",
    "symbolicPathConjunction": "(flag.indexOf(' ') >= 0)",
    "backwardsPathConjunction": "(flag.indexOf(' ') >= 0)",
    "simplifiedPathConjunction": "flag.indexOf(' ') >= 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nflag0 = String('flag0')\n\nconstraints = [\n  flag0.indexOf(' ') >= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nflag = Symbol('flag')\nflag_indexOf = Symbol('flag_indexOf')\npath_conjunction = (GreaterThan(flag_indexOf, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 57,
    "throwingLine": 58,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/InterfaceConfiguration.java"
  },
  {
    "qualifiedSignature": "android.net.InterfaceConfiguration.clearFlag(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"flag contains space: \" + flag);",
    "pathCojunction": "(flag.indexOf(' ') >= 0)",
    "symbolicPathConjunction": "(flag.indexOf(' ') >= 0)",
    "backwardsPathConjunction": "(flag.indexOf(' ') >= 0)",
    "simplifiedPathConjunction": "flag.indexOf(' ') >= 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nflag0 = String('flag0')\n\nconstraints = [\n  flag0.indexOf(' ') >= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nflag = Symbol('flag')\nflag_indexOf = Symbol('flag_indexOf')\npath_conjunction = (GreaterThan(flag_indexOf, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 63,
    "throwingLine": 64,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/InterfaceConfiguration.java"
  },
  {
    "qualifiedSignature": "android.net.InterfaceConfiguration.setFlag(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"flag contains space: \" + flag);",
    "pathCojunction": "(flag.indexOf(' ') >= 0)",
    "symbolicPathConjunction": "(flag.indexOf(' ') >= 0)",
    "backwardsPathConjunction": "(flag.indexOf(' ') >= 0)",
    "simplifiedPathConjunction": "flag.indexOf(' ') >= 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nflag0 = String('flag0')\n\nconstraints = [\n  flag0.indexOf(' ') >= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nflag = Symbol('flag')\nflag_indexOf = Symbol('flag_indexOf')\npath_conjunction = (GreaterThan(flag_indexOf, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 69,
    "throwingLine": 70,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/InterfaceConfiguration.java"
  },
  {
    "qualifiedSignature": "android.net.InterfaceConfiguration.isUp()",
    "exception": "throw new IllegalArgumentException(\"flag contains space: \" + FLAG_UP)",
    "pathCojunction": "(FLAG_UP.indexOf(' ') >= 0)",
    "symbolicPathConjunction": "(hasFlag(FLAG_UP))",
    "backwardsPathConjunction": "(FLAG_UP.indexOf(' ') >= 0)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nFLAG_UP0 = String('FLAG_UP0')\n\nconstraints = [\n  FLAG_UP0 == StringVal(\"up\"), \n  FLAG_UP0.indexOf(' ') >= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n\"up\"_indexOf = Symbol('\"up\"_indexOf')\npath_conjunction = (GreaterThan(\"up\"_indexOf, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 137,
    "throwingLine": 138,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/InterfaceConfiguration.java"
  }
]