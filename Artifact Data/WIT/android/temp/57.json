[
  {
    "qualifiedSignature": "android.util.proto.ProtoInputStream.nextField()",
    "exception": "throw new ProtoParseException(\"Unexpectedly reached end of packed field at offset 0x\" + Integer.toHexString(mPackedEnd) + dumpDebugData());",
    "pathCojunction": "(!((mState & STATE_FIELD_MISS) == STATE_FIELD_MISS)) && (!((mState & STATE_STARTED_FIELD_READ) == STATE_STARTED_FIELD_READ)) && ((mState & STATE_READING_PACKED) == STATE_READING_PACKED) && (!(getOffset() < mPackedEnd)) && (!(getOffset() == mPackedEnd))",
    "symbolicPathConjunction": "(!((mState & STATE_FIELD_MISS) == STATE_FIELD_MISS)) && (!((mState & STATE_STARTED_FIELD_READ) == STATE_STARTED_FIELD_READ)) && ((mState & STATE_READING_PACKED) == STATE_READING_PACKED) && (!(getOffset() < mPackedEnd)) && (!(getOffset() == mPackedEnd))",
    "backwardsPathConjunction": "(!((mState & STATE_FIELD_MISS) == STATE_FIELD_MISS)) && (!((mState & STATE_STARTED_FIELD_READ) == STATE_STARTED_FIELD_READ)) && ((mState & STATE_READING_PACKED) == STATE_READING_PACKED) && (!(getOffset() < mPackedEnd)) && (!(getOffset() == mPackedEnd))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmState0 = Int('mState0')\nSTATE_FIELD_MISS0 = Int('STATE_FIELD_MISS0')\nSTATE_STARTED_FIELD_READ0 = Int('STATE_STARTED_FIELD_READ0')\nSTATE_READING_PACKED0 = Int('STATE_READING_PACKED0')\nmPackedEnd0 = Int('mPackedEnd0')\n\nconstraints = [\n  STATE_FIELD_MISS0 == 2 << 1,\n  STATE_STARTED_FIELD_READ0 == 1 << 0,\n  STATE_READING_PACKED0 == 1 << 1,\n  And(And(And(And(Not(mState0 & STATE_FIELD_MISS0 == STATE_FIELD_MISS0), Not(mState0 & STATE_STARTED_FIELD_READ0 == STATE_STARTED_FIELD_READ0)), mState0 & STATE_READING_PACKED0 == STATE_READING_PACKED0), Not(getOffset() < mPackedEnd0)), Not(getOffset() == mPackedEnd0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmState = Symbol('mState', integer=True)\nmPackedEnd = Symbol('mPackedEnd', integer=True)\n_getOffset = Symbol('_getOffset')\npath_conjunction = (((((~((Eq((mState & (2 << 1)), (2 << 1))))) & (~((Eq((mState & (1 << 0)), (1 << 0)))))) & (Eq((mState & (1 << 1)), (1 << 1)))) & (~((StrictLessThan(_getOffset, mPackedEnd))))) & (~((Eq(_getOffset, mPackedEnd)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 216,
    "throwingLine": 238,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoInputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoInputStream.isNextField(long)",
    "exception": "throw new ProtoParseException(\"Unexpectedly reached end of packed field at offset 0x\" + Integer.toHexString(mPackedEnd) + dumpDebugData());",
    "pathCojunction": "(!((mState & 2 << 1) == 2 << 1)) && (!((mState & 1 << 0) == 1 << 0)) && ((mState & 1 << 1) == 1 << 1) && (!(getOffset() < mPackedEnd)) && (!(getOffset() == mPackedEnd))",
    "symbolicPathConjunction": "(nextField())",
    "backwardsPathConjunction": "(!((mState & 2 << 1) == 2 << 1)) && (!((mState & 1 << 0) == 1 << 0)) && ((mState & 1 << 1) == 1 << 1) && (!(getOffset() < mPackedEnd)) && (!(getOffset() == mPackedEnd))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nmPackedEnd0 = Int('mPackedEnd0')\nmState0 = Int('mState0')\n\nconstraints = [\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  And(And(And(And(Not(mState0 & 2 << 1 == 2 << 1), Not(mState0 & 1 << 0 == 1 << 0)), mState0 & 1 << 1 == 1 << 1), Not(getOffset() < mPackedEnd0)), Not(getOffset() == mPackedEnd0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPackedEnd = Symbol('mPackedEnd', integer=True)\nmState = Symbol('mState', integer=True)\n_getOffset = Symbol('_getOffset')\npath_conjunction = (((((~((Eq((mState & (2 << 1)), (2 << 1))))) & (~((Eq((mState & (1 << 0)), (1 << 0)))))) & (Eq((mState & (1 << 1)), (1 << 1)))) & (~((StrictLessThan(_getOffset, mPackedEnd))))) & (~((Eq(_getOffset, mPackedEnd)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 261,
    "throwingLine": 262,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoInputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoInputStream.start(long)",
    "exception": "throw new ProtoParseException(\"Embedded Object (\" + token2String(mExpectedObjectTokenStack.get(mDepth)) + \") ends after of parent Objects's (\" + token2String(mExpectedObjectTokenStack.get(mDepth - 1)) + \") end\" + dumpDebugData());",
    "pathCojunction": "(mExpectedObjectTokenStack == null) && (++mDepth == mExpectedObjectTokenStack.size()) && (mDepth > 0 && getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth)) > getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth - 1)))",
    "symbolicPathConjunction": "(mExpectedObjectTokenStack == null) && (++mDepth == mExpectedObjectTokenStack.size()) && (mDepth > 0 && getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth)) > getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth - 1)))",
    "backwardsPathConjunction": "(mExpectedObjectTokenStack == null) && (++mDepth == mExpectedObjectTokenStack.size()) && (mDepth > 0 && getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth)) > getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth - 1)))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nmessageSize0 = Int('messageSize0')\nmDepth0 = Int('mDepth0')\nmExpectedObjectTokenStack1_isNull = Bool('mExpectedObjectTokenStack1_isNull')\n\nconstraints = [\n  messageSize0 == readVarint(),\n  mExpectedObjectTokenStack1 == new ArrayList<>(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  And(And(mExpectedObjectTokenStack1_isNull, ++mDepth0 == mExpectedObjectTokenStack1.size()), And(mDepth0 > 0, getOffsetFromToken(mExpectedObjectTokenStack1.get(mDepth0)) > getOffsetFromToken(mExpectedObjectTokenStack1.get(mDepth0 - 1))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 491,
    "throwingLine": 518,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoInputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoInputStream.start(long)",
    "exception": "throw new ProtoParseException(\"Embedded Object (\" + token2String(mExpectedObjectTokenStack.get(mDepth)) + \") ends after of parent Objects's (\" + token2String(mExpectedObjectTokenStack.get(mDepth - 1)) + \") end\" + dumpDebugData());",
    "pathCojunction": "(mExpectedObjectTokenStack == null) && (!(++mDepth == mExpectedObjectTokenStack.size())) && (mDepth > 0 && getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth)) > getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth - 1)))",
    "symbolicPathConjunction": "(mExpectedObjectTokenStack == null) && (!(++mDepth == mExpectedObjectTokenStack.size())) && (mDepth > 0 && getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth)) > getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth - 1)))",
    "backwardsPathConjunction": "(mExpectedObjectTokenStack == null) && (!(++mDepth == mExpectedObjectTokenStack.size())) && (mDepth > 0 && getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth)) > getOffsetFromToken(mExpectedObjectTokenStack.get(mDepth - 1)))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nmessageSize0 = Int('messageSize0')\nmDepth0 = Int('mDepth0')\nmExpectedObjectTokenStack1_isNull = Bool('mExpectedObjectTokenStack1_isNull')\n\nconstraints = [\n  messageSize0 == readVarint(),\n  mExpectedObjectTokenStack1 == new ArrayList<>(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  And(And(mExpectedObjectTokenStack1_isNull, Not(++mDepth0 == mExpectedObjectTokenStack1.size())), And(mDepth0 > 0, getOffsetFromToken(mExpectedObjectTokenStack1.get(mDepth0)) > getOffsetFromToken(mExpectedObjectTokenStack1.get(mDepth0 - 1))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 491,
    "throwingLine": 518,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoInputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoInputStream.end(long)",
    "exception": "throw new ProtoParseException(\"end token \" + token + \" does not match current message token \" + mExpectedObjectTokenStack.get(mDepth) + dumpDebugData());",
    "pathCojunction": "(mExpectedObjectTokenStack.get(mDepth) != token)",
    "symbolicPathConjunction": "(mExpectedObjectTokenStack.get(mDepth) != token)",
    "backwardsPathConjunction": "(mExpectedObjectTokenStack.get(mDepth) != token)",
    "simplifiedPathConjunction": "mExpectedObjectTokenStack.get(mDepth) != token",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoken0 = Int('token0')\nmDepth0 = Int('mDepth0')\n\nconstraints = [\n  token0 >= -9223372036854775808, token0 <= 9223372036854775807, # implicit\n  mExpectedObjectTokenStack0.get(mDepth0) != token0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntoken = Symbol('token')\nmExpectedObjectTokenStack = Symbol('mExpectedObjectTokenStack')\nmDepth = Symbol('mDepth', integer=True)\nmExpectedObjectTokenStack_get = Symbol('mExpectedObjectTokenStack_get')\npath_conjunction = (Ne(mExpectedObjectTokenStack_get, token))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 536,
    "throwingLine": 539,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoInputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.start(long)",
    "exception": "throw new IllegalArgumentException(\"Attempt to call start(long) with \" + getFieldIdString(fieldId));",
    "pathCojunction": "(!((fieldId & FIELD_TYPE_MASK) == FIELD_TYPE_MESSAGE))",
    "symbolicPathConjunction": "(!((fieldId & FIELD_TYPE_MASK) == FIELD_TYPE_MESSAGE))",
    "backwardsPathConjunction": "(!((fieldId & FIELD_TYPE_MASK) == FIELD_TYPE_MESSAGE))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nid0 = Int('id0')\n\nconstraints = [\n  id0 == fieldId0,\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  Not(fieldId0 & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\npath_conjunction = (~((Eq((fieldId & FIELD_TYPE_MASK), FIELD_TYPE_MESSAGE))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 840,
    "throwingLine": 852,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.start(long)",
    "exception": "throw new IllegalArgumentException(\"Attempt to call start(long) with \" + getFieldIdString(fieldId));",
    "pathCojunction": "((fieldId & FIELD_TYPE_MASK) == FIELD_TYPE_MESSAGE) && (!(count == FIELD_COUNT_SINGLE)) && (!(count == FIELD_COUNT_REPEATED || count == FIELD_COUNT_PACKED))",
    "symbolicPathConjunction": "((fieldId & FIELD_TYPE_MASK) == FIELD_TYPE_MESSAGE) && (!(count == FIELD_COUNT_SINGLE)) && (!(count == FIELD_COUNT_REPEATED || count == FIELD_COUNT_PACKED))",
    "backwardsPathConjunction": "((fieldId & FIELD_TYPE_MASK) == FIELD_TYPE_MESSAGE) && (!(fieldId & FIELD_COUNT_MASK == FIELD_COUNT_SINGLE)) && (!(fieldId & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED || fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nid0 = Int('id0')\ncount0 = Int('count0')\n\nconstraints = [\n  id0 == fieldId0,\n  count0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  count0 >= -9223372036854775808, count0 <= 9223372036854775807, # implicit\n  And(And(fieldId0 & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE, Not(count0 == FIELD_COUNT_SINGLE)), Not(Or(count0 == FIELD_COUNT_REPEATED, count0 == FIELD_COUNT_PACKED)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\npath_conjunction = (((Eq((fieldId & FIELD_TYPE_MASK), FIELD_TYPE_MESSAGE)) & (~((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_SINGLE)))))) & (~(((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))) | (fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED)))))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 840,
    "throwingLine": 852,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.endObject(long)",
    "exception": "throw new IllegalArgumentException(\"write called after compact\");",
    "pathCojunction": "(mCompacted)",
    "symbolicPathConjunction": "(mCompacted)",
    "backwardsPathConjunction": "(mCompacted)",
    "simplifiedPathConjunction": "mCompacted",
    "z3Inputs": "[token0 = -9223372036854775808, mCompacted0 = True]\n[token0 = 0, mCompacted0 = True]\n[token0 = -1, mCompacted0 = True]\n[token0 = -2, mCompacted0 = True]\n[token0 = -3, mCompacted0 = True]\n[token0 = -4, mCompacted0 = True]\n[token0 = -5, mCompacted0 = True]\n[token0 = -6, mCompacted0 = True]\n[token0 = -7, mCompacted0 = True]\n[token0 = -8, mCompacted0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoken0 = Int('token0')\nmCompacted0 = Bool('mCompacted0')\n\nconstraints = [\n  token0 >= -9223372036854775808, token0 <= 9223372036854775807, # implicit\n  mCompacted0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmCompacted = Symbol('mCompacted')\npath_conjunction = mCompacted\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1959,
    "throwingLine": 1960,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.endObject(long)",
    "exception": "throw new IllegalArgumentException(\"Mismatched startObject/endObject calls.\" + \" Current depth \" + mDepth + \" token=\" + token2String(token) + \" expectedToken=\" + token2String(mExpectedObjectToken))",
    "pathCojunction": "(!(mCompacted)) && (!(false != getRepeatedFromToken(token))) && ((mDepth & 0x01ff) != getDepthFromToken(token) || mExpectedObjectToken != token)",
    "symbolicPathConjunction": "(!(mCompacted)) && ((!(repeated != getRepeatedFromToken(token))) && ((mDepth & 0x01ff) != getDepthFromToken(token) || mExpectedObjectToken != token))",
    "backwardsPathConjunction": "(!(mCompacted)) && (!(false != getRepeatedFromToken(token))) && ((mDepth & 0x01ff) != getDepthFromToken(token) || mExpectedObjectToken != token)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoken0 = Int('token0')\nmCompacted0 = Bool('mCompacted0')\nmDepth0 = Int('mDepth0')\nmExpectedObjectToken0 = Int('mExpectedObjectToken0')\n\nconstraints = [\n  token0 >= -9223372036854775808, token0 <= 9223372036854775807, # implicit\n  mExpectedObjectToken0 >= -9223372036854775808, mExpectedObjectToken0 <= 9223372036854775807, # implicit\n  And(And(Not(mCompacted0), Not(False != getRepeatedFromToken(token0))), Or(mDepth0 & 0x01ff != getDepthFromToken(token0), mExpectedObjectToken0 != token0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntoken = Symbol('token')\nmCompacted = Symbol('mCompacted')\nmDepth = Symbol('mDepth', integer=True)\nmExpectedObjectToken = Symbol('mExpectedObjectToken')\n_getRepeatedFromToken = Symbol('_getRepeatedFromToken')\n_getDepthFromToken = Symbol('_getDepthFromToken')\npath_conjunction = (((~(mCompacted)) & (~(_getRepeatedFromToken))) & ((Ne((mDepth & 0x01ff), _getDepthFromToken)) | (Ne(mExpectedObjectToken, token))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1959,
    "throwingLine": 1962,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.endObject(long)",
    "exception": "throw new IllegalArgumentException(\"endObject called where endRepeatedObject should\" + \" have been\")",
    "pathCojunction": "(!(mCompacted)) && (false != getRepeatedFromToken(token)) && (!(false))",
    "symbolicPathConjunction": "(!(mCompacted)) && ((repeated != getRepeatedFromToken(token)) && (!(repeated)))",
    "backwardsPathConjunction": "(!(mCompacted)) && (false != getRepeatedFromToken(token)) && (!(false))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoken0 = Int('token0')\nmCompacted0 = Bool('mCompacted0')\n\nconstraints = [\n  token0 >= -9223372036854775808, token0 <= 9223372036854775807, # implicit\n  And(And(Not(mCompacted0), False != getRepeatedFromToken(token0)), Not(False))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntoken = Symbol('token')\nmCompacted = Symbol('mCompacted')\n_getRepeatedFromToken = Symbol('_getRepeatedFromToken')\npath_conjunction = (((~(mCompacted)) & _getRepeatedFromToken) & (~(False)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1959,
    "throwingLine": 1962,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.endRepeatedObject(long)",
    "exception": "throw new IllegalArgumentException(\"Mismatched startObject/endObject calls.\" + \" Current depth \" + mDepth + \" token=\" + token2String(token) + \" expectedToken=\" + token2String(mExpectedObjectToken))",
    "pathCojunction": "(!(mCompacted)) && (!(true != getRepeatedFromToken(token))) && ((mDepth & 0x01ff) != getDepthFromToken(token) || mExpectedObjectToken != token)",
    "symbolicPathConjunction": "(!(mCompacted)) && ((!(repeated != getRepeatedFromToken(token))) && ((mDepth & 0x01ff) != getDepthFromToken(token) || mExpectedObjectToken != token))",
    "backwardsPathConjunction": "(!(mCompacted)) && (!(true != getRepeatedFromToken(token))) && ((mDepth & 0x01ff) != getDepthFromToken(token) || mExpectedObjectToken != token)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoken0 = Int('token0')\nmCompacted0 = Bool('mCompacted0')\nmDepth0 = Int('mDepth0')\nmExpectedObjectToken0 = Int('mExpectedObjectToken0')\n\nconstraints = [\n  token0 >= -9223372036854775808, token0 <= 9223372036854775807, # implicit\n  mExpectedObjectToken0 >= -9223372036854775808, mExpectedObjectToken0 <= 9223372036854775807, # implicit\n  And(And(Not(mCompacted0), Not(True != getRepeatedFromToken(token0))), Or(mDepth0 & 0x01ff != getDepthFromToken(token0), mExpectedObjectToken0 != token0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntoken = Symbol('token')\nmCompacted = Symbol('mCompacted')\nmDepth = Symbol('mDepth', integer=True)\nmExpectedObjectToken = Symbol('mExpectedObjectToken')\n_getRepeatedFromToken = Symbol('_getRepeatedFromToken')\n_getDepthFromToken = Symbol('_getDepthFromToken')\npath_conjunction = (((~(mCompacted)) & (~((~(_getRepeatedFromToken))))) & ((Ne((mDepth & 0x01ff), _getDepthFromToken)) | (Ne(mExpectedObjectToken, token))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1987,
    "throwingLine": 1990,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.endRepeatedObject(long)",
    "exception": "throw new IllegalArgumentException(\"endRepeatedObject called where endObject should\" + \" have been\")",
    "pathCojunction": "(!(mCompacted)) && (true != getRepeatedFromToken(token)) && (true)",
    "symbolicPathConjunction": "(!(mCompacted)) && ((repeated != getRepeatedFromToken(token)) && (repeated))",
    "backwardsPathConjunction": "(!(mCompacted)) && (true != getRepeatedFromToken(token)) && (true)",
    "simplifiedPathConjunction": "!getRepeatedFromToken(token) && !mCompacted",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoken0 = Int('token0')\nmCompacted0 = Bool('mCompacted0')\n\nconstraints = [\n  token0 >= -9223372036854775808, token0 <= 9223372036854775807, # implicit\n  And(And(Not(mCompacted0), True != getRepeatedFromToken(token0)), True)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntoken = Symbol('token')\nmCompacted = Symbol('mCompacted')\n_getRepeatedFromToken = Symbol('_getRepeatedFromToken')\npath_conjunction = (((~(mCompacted)) & (~(_getRepeatedFromToken))) & True)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1987,
    "throwingLine": 1990,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.endRepeatedObject(long)",
    "exception": "throw new IllegalArgumentException(\"endObject called where endRepeatedObject should\" + \" have been\")",
    "pathCojunction": "(!(mCompacted)) && (true != getRepeatedFromToken(token)) && (!(true))",
    "symbolicPathConjunction": "(!(mCompacted)) && ((repeated != getRepeatedFromToken(token)) && (!(repeated)))",
    "backwardsPathConjunction": "(!(mCompacted)) && (true != getRepeatedFromToken(token)) && (!(true))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoken0 = Int('token0')\nmCompacted0 = Bool('mCompacted0')\n\nconstraints = [\n  token0 >= -9223372036854775808, token0 <= 9223372036854775807, # implicit\n  And(And(Not(mCompacted0), True != getRepeatedFromToken(token0)), Not(True))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntoken = Symbol('token')\nmCompacted = Symbol('mCompacted')\n_getRepeatedFromToken = Symbol('_getRepeatedFromToken')\npath_conjunction = (((~(mCompacted)) & (~(_getRepeatedFromToken))) & (~(True)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1987,
    "throwingLine": 1990,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.endRepeatedObject(long)",
    "exception": "throw new IllegalArgumentException(\"write called after compact\");",
    "pathCojunction": "(mCompacted)",
    "symbolicPathConjunction": "(mCompacted)",
    "backwardsPathConjunction": "(mCompacted)",
    "simplifiedPathConjunction": "mCompacted",
    "z3Inputs": "[token0 = -9223372036854775808, mCompacted0 = True]\n[token0 = 0, mCompacted0 = True]\n[token0 = -1, mCompacted0 = True]\n[token0 = -2, mCompacted0 = True]\n[token0 = -3, mCompacted0 = True]\n[token0 = -4, mCompacted0 = True]\n[token0 = -5, mCompacted0 = True]\n[token0 = -6, mCompacted0 = True]\n[token0 = -7, mCompacted0 = True]\n[token0 = -8, mCompacted0 = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoken0 = Int('token0')\nmCompacted0 = Bool('mCompacted0')\n\nconstraints = [\n  token0 >= -9223372036854775808, token0 <= 9223372036854775807, # implicit\n  mCompacted0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmCompacted = Symbol('mCompacted')\npath_conjunction = mCompacted\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1987,
    "throwingLine": 1988,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(sb.toString());",
    "pathCojunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (expectedType == FIELD_TYPE_MESSAGE) && (!(fieldType == FIELD_TYPE_MESSAGE)) && (!(fieldCount == FIELD_COUNT_PACKED))",
    "symbolicPathConjunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (expectedType == FIELD_TYPE_MESSAGE) && (!(fieldType == FIELD_TYPE_MESSAGE)) && (!(fieldCount == FIELD_COUNT_PACKED))",
    "backwardsPathConjunction": "(!(((int) fieldId) == 0)) && (fieldId & FIELD_TYPE_MASK != expectedFlags & FIELD_TYPE_MASK || !((fieldId & FIELD_COUNT_MASK == expectedFlags & FIELD_COUNT_MASK) || (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED && expectedFlags & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED))) && (getFieldTypeString(fieldId & FIELD_TYPE_MASK) != null && getFieldCountString(fieldId & FIELD_COUNT_MASK) != null) && (expectedFlags & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE) && (!(fieldId & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE)) && (!(fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\ncountString0 = String('countString0')\ntypeString0 = String('typeString0')\ntypeString0_isNull = Bool('typeString0_isNull')\ncountString0_isNull = Bool('countString0_isNull')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  countString0 == getFieldCountString(fieldCount0),\n  typeString0 == getFieldTypeString(fieldType0),\n  sb0 == new StringBuilder(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(fieldId0 == 0), Or(fieldType0 != expectedType0, Not(Or(fieldCount0 == expectedCount0, And(fieldCount0 == FIELD_COUNT_PACKED, expectedCount0 == FIELD_COUNT_REPEATED))))), And(Not(typeString0_isNull), Not(countString0_isNull))), expectedType0 == FIELD_TYPE_MESSAGE), Not(fieldType0 == FIELD_TYPE_MESSAGE)), Not(fieldCount0 == FIELD_COUNT_PACKED))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\nexpectedFlags = Symbol('expectedFlags')\n_getFieldTypeString = Symbol('_getFieldTypeString')\n_getFieldCountString = Symbol('_getFieldCountString')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(fieldId, 0)))) & (((fieldId & (Ne(FIELD_TYPE_MASK, expectedFlags))) & FIELD_TYPE_MASK) | (~((((fieldId & (Eq(FIELD_COUNT_MASK, expectedFlags))) & FIELD_COUNT_MASK) | ((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))) & (expectedFlags & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))))))))) & ((Ne(_getFieldTypeString, null)) & (Ne(_getFieldCountString, null)))) & (expectedFlags & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))) & (~((fieldId & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))))) & (~((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2175,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(sb.toString());",
    "pathCojunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (expectedType == FIELD_TYPE_MESSAGE) && (!(fieldType == FIELD_TYPE_MESSAGE)) && (fieldCount == FIELD_COUNT_PACKED)",
    "symbolicPathConjunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (expectedType == FIELD_TYPE_MESSAGE) && (!(fieldType == FIELD_TYPE_MESSAGE)) && (fieldCount == FIELD_COUNT_PACKED)",
    "backwardsPathConjunction": "(!(((int) fieldId) == 0)) && (fieldId & FIELD_TYPE_MASK != expectedFlags & FIELD_TYPE_MASK || !((fieldId & FIELD_COUNT_MASK == expectedFlags & FIELD_COUNT_MASK) || (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED && expectedFlags & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED))) && (getFieldTypeString(fieldId & FIELD_TYPE_MASK) != null && getFieldCountString(fieldId & FIELD_COUNT_MASK) != null) && (expectedFlags & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE) && (!(fieldId & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE)) && (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\ncountString0 = String('countString0')\ntypeString0 = String('typeString0')\ntypeString0_isNull = Bool('typeString0_isNull')\ncountString0_isNull = Bool('countString0_isNull')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  countString0 == getFieldCountString(fieldCount0),\n  typeString0 == getFieldTypeString(fieldType0),\n  sb0 == new StringBuilder(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(fieldId0 == 0), Or(fieldType0 != expectedType0, Not(Or(fieldCount0 == expectedCount0, And(fieldCount0 == FIELD_COUNT_PACKED, expectedCount0 == FIELD_COUNT_REPEATED))))), And(Not(typeString0_isNull), Not(countString0_isNull))), expectedType0 == FIELD_TYPE_MESSAGE), Not(fieldType0 == FIELD_TYPE_MESSAGE)), fieldCount0 == FIELD_COUNT_PACKED)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\nexpectedFlags = Symbol('expectedFlags')\n_getFieldTypeString = Symbol('_getFieldTypeString')\n_getFieldCountString = Symbol('_getFieldCountString')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(fieldId, 0)))) & (((fieldId & (Ne(FIELD_TYPE_MASK, expectedFlags))) & FIELD_TYPE_MASK) | (~((((fieldId & (Eq(FIELD_COUNT_MASK, expectedFlags))) & FIELD_COUNT_MASK) | ((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))) & (expectedFlags & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))))))))) & ((Ne(_getFieldTypeString, null)) & (Ne(_getFieldCountString, null)))) & (expectedFlags & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))) & (~((fieldId & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))))) & (fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2175,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(sb.toString());",
    "pathCojunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (!(expectedType == FIELD_TYPE_MESSAGE)) && (fieldType == FIELD_TYPE_MESSAGE) && (!(fieldCount == FIELD_COUNT_PACKED))",
    "symbolicPathConjunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (!(expectedType == FIELD_TYPE_MESSAGE)) && (fieldType == FIELD_TYPE_MESSAGE) && (!(fieldCount == FIELD_COUNT_PACKED))",
    "backwardsPathConjunction": "(!(((int) fieldId) == 0)) && (fieldId & FIELD_TYPE_MASK != expectedFlags & FIELD_TYPE_MASK || !((fieldId & FIELD_COUNT_MASK == expectedFlags & FIELD_COUNT_MASK) || (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED && expectedFlags & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED))) && (getFieldTypeString(fieldId & FIELD_TYPE_MASK) != null && getFieldCountString(fieldId & FIELD_COUNT_MASK) != null) && (!(expectedFlags & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE)) && (fieldId & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE) && (!(fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\ncountString0 = String('countString0')\ntypeString0 = String('typeString0')\ntypeString0_isNull = Bool('typeString0_isNull')\ncountString0_isNull = Bool('countString0_isNull')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  countString0 == getFieldCountString(fieldCount0),\n  typeString0 == getFieldTypeString(fieldType0),\n  sb0 == new StringBuilder(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(fieldId0 == 0), Or(fieldType0 != expectedType0, Not(Or(fieldCount0 == expectedCount0, And(fieldCount0 == FIELD_COUNT_PACKED, expectedCount0 == FIELD_COUNT_REPEATED))))), And(Not(typeString0_isNull), Not(countString0_isNull))), Not(expectedType0 == FIELD_TYPE_MESSAGE)), fieldType0 == FIELD_TYPE_MESSAGE), Not(fieldCount0 == FIELD_COUNT_PACKED))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\nexpectedFlags = Symbol('expectedFlags')\n_getFieldTypeString = Symbol('_getFieldTypeString')\n_getFieldCountString = Symbol('_getFieldCountString')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(fieldId, 0)))) & (((fieldId & (Ne(FIELD_TYPE_MASK, expectedFlags))) & FIELD_TYPE_MASK) | (~((((fieldId & (Eq(FIELD_COUNT_MASK, expectedFlags))) & FIELD_COUNT_MASK) | ((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))) & (expectedFlags & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))))))))) & ((Ne(_getFieldTypeString, null)) & (Ne(_getFieldCountString, null)))) & (~((expectedFlags & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))))) & (fieldId & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))) & (~((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2175,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(sb.toString());",
    "pathCojunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (!(expectedType == FIELD_TYPE_MESSAGE)) && (!(fieldType == FIELD_TYPE_MESSAGE)) && (!(fieldCount == FIELD_COUNT_PACKED))",
    "symbolicPathConjunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (!(expectedType == FIELD_TYPE_MESSAGE)) && (!(fieldType == FIELD_TYPE_MESSAGE)) && (!(fieldCount == FIELD_COUNT_PACKED))",
    "backwardsPathConjunction": "(!(((int) fieldId) == 0)) && (fieldId & FIELD_TYPE_MASK != expectedFlags & FIELD_TYPE_MASK || !((fieldId & FIELD_COUNT_MASK == expectedFlags & FIELD_COUNT_MASK) || (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED && expectedFlags & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED))) && (getFieldTypeString(fieldId & FIELD_TYPE_MASK) != null && getFieldCountString(fieldId & FIELD_COUNT_MASK) != null) && (!(expectedFlags & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE)) && (!(fieldId & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE)) && (!(fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\ncountString0 = String('countString0')\ntypeString0 = String('typeString0')\ntypeString0_isNull = Bool('typeString0_isNull')\ncountString0_isNull = Bool('countString0_isNull')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  countString0 == getFieldCountString(fieldCount0),\n  typeString0 == getFieldTypeString(fieldType0),\n  sb0 == new StringBuilder(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(fieldId0 == 0), Or(fieldType0 != expectedType0, Not(Or(fieldCount0 == expectedCount0, And(fieldCount0 == FIELD_COUNT_PACKED, expectedCount0 == FIELD_COUNT_REPEATED))))), And(Not(typeString0_isNull), Not(countString0_isNull))), Not(expectedType0 == FIELD_TYPE_MESSAGE)), Not(fieldType0 == FIELD_TYPE_MESSAGE)), Not(fieldCount0 == FIELD_COUNT_PACKED))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\nexpectedFlags = Symbol('expectedFlags')\n_getFieldTypeString = Symbol('_getFieldTypeString')\n_getFieldCountString = Symbol('_getFieldCountString')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(fieldId, 0)))) & (((fieldId & (Ne(FIELD_TYPE_MASK, expectedFlags))) & FIELD_TYPE_MASK) | (~((((fieldId & (Eq(FIELD_COUNT_MASK, expectedFlags))) & FIELD_COUNT_MASK) | ((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))) & (expectedFlags & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))))))))) & ((Ne(_getFieldTypeString, null)) & (Ne(_getFieldCountString, null)))) & (~((expectedFlags & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))))) & (~((fieldId & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))))) & (~((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2175,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(sb.toString());",
    "pathCojunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (!(expectedType == FIELD_TYPE_MESSAGE)) && (fieldType == FIELD_TYPE_MESSAGE) && (fieldCount == FIELD_COUNT_PACKED)",
    "symbolicPathConjunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (!(expectedType == FIELD_TYPE_MESSAGE)) && (fieldType == FIELD_TYPE_MESSAGE) && (fieldCount == FIELD_COUNT_PACKED)",
    "backwardsPathConjunction": "(!(((int) fieldId) == 0)) && (fieldId & FIELD_TYPE_MASK != expectedFlags & FIELD_TYPE_MASK || !((fieldId & FIELD_COUNT_MASK == expectedFlags & FIELD_COUNT_MASK) || (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED && expectedFlags & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED))) && (getFieldTypeString(fieldId & FIELD_TYPE_MASK) != null && getFieldCountString(fieldId & FIELD_COUNT_MASK) != null) && (!(expectedFlags & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE)) && (fieldId & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE) && (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\ncountString0 = String('countString0')\ntypeString0 = String('typeString0')\ntypeString0_isNull = Bool('typeString0_isNull')\ncountString0_isNull = Bool('countString0_isNull')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  countString0 == getFieldCountString(fieldCount0),\n  typeString0 == getFieldTypeString(fieldType0),\n  sb0 == new StringBuilder(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(fieldId0 == 0), Or(fieldType0 != expectedType0, Not(Or(fieldCount0 == expectedCount0, And(fieldCount0 == FIELD_COUNT_PACKED, expectedCount0 == FIELD_COUNT_REPEATED))))), And(Not(typeString0_isNull), Not(countString0_isNull))), Not(expectedType0 == FIELD_TYPE_MESSAGE)), fieldType0 == FIELD_TYPE_MESSAGE), fieldCount0 == FIELD_COUNT_PACKED)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\nexpectedFlags = Symbol('expectedFlags')\n_getFieldTypeString = Symbol('_getFieldTypeString')\n_getFieldCountString = Symbol('_getFieldCountString')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(fieldId, 0)))) & (((fieldId & (Ne(FIELD_TYPE_MASK, expectedFlags))) & FIELD_TYPE_MASK) | (~((((fieldId & (Eq(FIELD_COUNT_MASK, expectedFlags))) & FIELD_COUNT_MASK) | ((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))) & (expectedFlags & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))))))))) & ((Ne(_getFieldTypeString, null)) & (Ne(_getFieldCountString, null)))) & (~((expectedFlags & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))))) & (fieldId & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))) & (fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2175,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(sb.toString());",
    "pathCojunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (!(expectedType == FIELD_TYPE_MESSAGE)) && (!(fieldType == FIELD_TYPE_MESSAGE)) && (fieldCount == FIELD_COUNT_PACKED)",
    "symbolicPathConjunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (!(expectedType == FIELD_TYPE_MESSAGE)) && (!(fieldType == FIELD_TYPE_MESSAGE)) && (fieldCount == FIELD_COUNT_PACKED)",
    "backwardsPathConjunction": "(!(((int) fieldId) == 0)) && (fieldId & FIELD_TYPE_MASK != expectedFlags & FIELD_TYPE_MASK || !((fieldId & FIELD_COUNT_MASK == expectedFlags & FIELD_COUNT_MASK) || (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED && expectedFlags & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED))) && (getFieldTypeString(fieldId & FIELD_TYPE_MASK) != null && getFieldCountString(fieldId & FIELD_COUNT_MASK) != null) && (!(expectedFlags & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE)) && (!(fieldId & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE)) && (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\ncountString0 = String('countString0')\ntypeString0 = String('typeString0')\ntypeString0_isNull = Bool('typeString0_isNull')\ncountString0_isNull = Bool('countString0_isNull')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  countString0 == getFieldCountString(fieldCount0),\n  typeString0 == getFieldTypeString(fieldType0),\n  sb0 == new StringBuilder(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(fieldId0 == 0), Or(fieldType0 != expectedType0, Not(Or(fieldCount0 == expectedCount0, And(fieldCount0 == FIELD_COUNT_PACKED, expectedCount0 == FIELD_COUNT_REPEATED))))), And(Not(typeString0_isNull), Not(countString0_isNull))), Not(expectedType0 == FIELD_TYPE_MESSAGE)), Not(fieldType0 == FIELD_TYPE_MESSAGE)), fieldCount0 == FIELD_COUNT_PACKED)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\nexpectedFlags = Symbol('expectedFlags')\n_getFieldTypeString = Symbol('_getFieldTypeString')\n_getFieldCountString = Symbol('_getFieldCountString')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(fieldId, 0)))) & (((fieldId & (Ne(FIELD_TYPE_MASK, expectedFlags))) & FIELD_TYPE_MASK) | (~((((fieldId & (Eq(FIELD_COUNT_MASK, expectedFlags))) & FIELD_COUNT_MASK) | ((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))) & (expectedFlags & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))))))))) & ((Ne(_getFieldTypeString, null)) & (Ne(_getFieldCountString, null)))) & (~((expectedFlags & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))))) & (~((fieldId & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))))) & (fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2175,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(sb.toString());",
    "pathCojunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (!(typeString != null && countString != null)) && (expectedType == FIELD_TYPE_MESSAGE)",
    "symbolicPathConjunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (!(typeString != null && countString != null)) && (expectedType == FIELD_TYPE_MESSAGE)",
    "backwardsPathConjunction": "(!(((int) fieldId) == 0)) && (fieldId & FIELD_TYPE_MASK != expectedFlags & FIELD_TYPE_MASK || !((fieldId & FIELD_COUNT_MASK == expectedFlags & FIELD_COUNT_MASK) || (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED && expectedFlags & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED))) && (!(getFieldTypeString(fieldId & FIELD_TYPE_MASK) != null && getFieldCountString(fieldId & FIELD_COUNT_MASK) != null)) && (expectedFlags & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\ncountString0 = String('countString0')\ntypeString0 = String('typeString0')\ntypeString0_isNull = Bool('typeString0_isNull')\ncountString0_isNull = Bool('countString0_isNull')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  countString0 == getFieldCountString(fieldCount0),\n  typeString0 == getFieldTypeString(fieldType0),\n  sb0 == new StringBuilder(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  And(And(And(Not(fieldId0 == 0), Or(fieldType0 != expectedType0, Not(Or(fieldCount0 == expectedCount0, And(fieldCount0 == FIELD_COUNT_PACKED, expectedCount0 == FIELD_COUNT_REPEATED))))), Not(And(Not(typeString0_isNull), Not(countString0_isNull)))), expectedType0 == FIELD_TYPE_MESSAGE)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\nexpectedFlags = Symbol('expectedFlags')\n_getFieldTypeString = Symbol('_getFieldTypeString')\n_getFieldCountString = Symbol('_getFieldCountString')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(fieldId, 0)))) & (((fieldId & (Ne(FIELD_TYPE_MASK, expectedFlags))) & FIELD_TYPE_MASK) | (~((((fieldId & (Eq(FIELD_COUNT_MASK, expectedFlags))) & FIELD_COUNT_MASK) | ((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))) & (expectedFlags & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))))))))) & (~(((Ne(_getFieldTypeString, null)) & (Ne(_getFieldCountString, null)))))) & (expectedFlags & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2190,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(sb.toString());",
    "pathCojunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (!(typeString != null && countString != null)) && (!(expectedType == FIELD_TYPE_MESSAGE))",
    "symbolicPathConjunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (!(typeString != null && countString != null)) && (!(expectedType == FIELD_TYPE_MESSAGE))",
    "backwardsPathConjunction": "(!(((int) fieldId) == 0)) && (fieldId & FIELD_TYPE_MASK != expectedFlags & FIELD_TYPE_MASK || !((fieldId & FIELD_COUNT_MASK == expectedFlags & FIELD_COUNT_MASK) || (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED && expectedFlags & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED))) && (!(getFieldTypeString(fieldId & FIELD_TYPE_MASK) != null && getFieldCountString(fieldId & FIELD_COUNT_MASK) != null)) && (!(expectedFlags & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\ncountString0 = String('countString0')\ntypeString0 = String('typeString0')\ntypeString0_isNull = Bool('typeString0_isNull')\ncountString0_isNull = Bool('countString0_isNull')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  countString0 == getFieldCountString(fieldCount0),\n  typeString0 == getFieldTypeString(fieldType0),\n  sb0 == new StringBuilder(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  And(And(And(Not(fieldId0 == 0), Or(fieldType0 != expectedType0, Not(Or(fieldCount0 == expectedCount0, And(fieldCount0 == FIELD_COUNT_PACKED, expectedCount0 == FIELD_COUNT_REPEATED))))), Not(And(Not(typeString0_isNull), Not(countString0_isNull)))), Not(expectedType0 == FIELD_TYPE_MESSAGE))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\nexpectedFlags = Symbol('expectedFlags')\n_getFieldTypeString = Symbol('_getFieldTypeString')\n_getFieldCountString = Symbol('_getFieldCountString')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(fieldId, 0)))) & (((fieldId & (Ne(FIELD_TYPE_MASK, expectedFlags))) & FIELD_TYPE_MASK) | (~((((fieldId & (Eq(FIELD_COUNT_MASK, expectedFlags))) & FIELD_COUNT_MASK) | ((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))) & (expectedFlags & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))))))))) & (~(((Ne(_getFieldTypeString, null)) & (Ne(_getFieldCountString, null)))))) & (~((expectedFlags & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE))))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2190,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(sb.toString());",
    "pathCojunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (expectedType == FIELD_TYPE_MESSAGE) && (fieldType == FIELD_TYPE_MESSAGE) && (fieldCount == FIELD_COUNT_PACKED)",
    "symbolicPathConjunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (expectedType == FIELD_TYPE_MESSAGE) && (fieldType == FIELD_TYPE_MESSAGE) && (fieldCount == FIELD_COUNT_PACKED)",
    "backwardsPathConjunction": "(!(((int) fieldId) == 0)) && (fieldId & FIELD_TYPE_MASK != expectedFlags & FIELD_TYPE_MASK || !((fieldId & FIELD_COUNT_MASK == expectedFlags & FIELD_COUNT_MASK) || (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED && expectedFlags & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED))) && (getFieldTypeString(fieldId & FIELD_TYPE_MASK) != null && getFieldCountString(fieldId & FIELD_COUNT_MASK) != null) && (expectedFlags & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE) && (fieldId & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE) && (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\ncountString0 = String('countString0')\ntypeString0 = String('typeString0')\ntypeString0_isNull = Bool('typeString0_isNull')\ncountString0_isNull = Bool('countString0_isNull')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  countString0 == getFieldCountString(fieldCount0),\n  typeString0 == getFieldTypeString(fieldType0),\n  sb0 == new StringBuilder(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(fieldId0 == 0), Or(fieldType0 != expectedType0, Not(Or(fieldCount0 == expectedCount0, And(fieldCount0 == FIELD_COUNT_PACKED, expectedCount0 == FIELD_COUNT_REPEATED))))), And(Not(typeString0_isNull), Not(countString0_isNull))), expectedType0 == FIELD_TYPE_MESSAGE), fieldType0 == FIELD_TYPE_MESSAGE), fieldCount0 == FIELD_COUNT_PACKED)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\nexpectedFlags = Symbol('expectedFlags')\n_getFieldTypeString = Symbol('_getFieldTypeString')\n_getFieldCountString = Symbol('_getFieldCountString')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(fieldId, 0)))) & (((fieldId & (Ne(FIELD_TYPE_MASK, expectedFlags))) & FIELD_TYPE_MASK) | (~((((fieldId & (Eq(FIELD_COUNT_MASK, expectedFlags))) & FIELD_COUNT_MASK) | ((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))) & (expectedFlags & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))))))))) & ((Ne(_getFieldTypeString, null)) & (Ne(_getFieldCountString, null)))) & (expectedFlags & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))) & (fieldId & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))) & (fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2175,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(\"Invalid proto field \" + (int) fieldId + \" fieldId=\" + Long.toHexString(fieldId));",
    "pathCojunction": "(((int) fieldId) == 0)",
    "symbolicPathConjunction": "(((int) fieldId) == 0)",
    "backwardsPathConjunction": "(((int) fieldId) == 0)",
    "simplifiedPathConjunction": "fieldId == 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  fieldId0 == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\npath_conjunction = (Eq(fieldId, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2142,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.ProtoOutputStream.checkFieldId(long, long)",
    "exception": "throw new IllegalArgumentException(sb.toString());",
    "pathCojunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (expectedType == FIELD_TYPE_MESSAGE) && (fieldType == FIELD_TYPE_MESSAGE) && (!(fieldCount == FIELD_COUNT_PACKED))",
    "symbolicPathConjunction": "(!(((int) fieldId) == 0)) && (fieldType != expectedType || !((fieldCount == expectedCount) || (fieldCount == FIELD_COUNT_PACKED && expectedCount == FIELD_COUNT_REPEATED))) && (typeString != null && countString != null) && (expectedType == FIELD_TYPE_MESSAGE) && (fieldType == FIELD_TYPE_MESSAGE) && (!(fieldCount == FIELD_COUNT_PACKED))",
    "backwardsPathConjunction": "(!(((int) fieldId) == 0)) && (fieldId & FIELD_TYPE_MASK != expectedFlags & FIELD_TYPE_MASK || !((fieldId & FIELD_COUNT_MASK == expectedFlags & FIELD_COUNT_MASK) || (fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED && expectedFlags & FIELD_COUNT_MASK == FIELD_COUNT_REPEATED))) && (getFieldTypeString(fieldId & FIELD_TYPE_MASK) != null && getFieldCountString(fieldId & FIELD_COUNT_MASK) != null) && (expectedFlags & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE) && (fieldId & FIELD_TYPE_MASK == FIELD_TYPE_MESSAGE) && (!(fieldId & FIELD_COUNT_MASK == FIELD_COUNT_PACKED))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfieldId0 = Int('fieldId0')\nexpectedFlags0 = Int('expectedFlags0')\nfieldCount0 = Int('fieldCount0')\nfieldType0 = Int('fieldType0')\nexpectedCount0 = Int('expectedCount0')\nexpectedType0 = Int('expectedType0')\ncountString0 = String('countString0')\ntypeString0 = String('typeString0')\ntypeString0_isNull = Bool('typeString0_isNull')\ncountString0_isNull = Bool('countString0_isNull')\n\nconstraints = [\n  fieldCount0 == fieldId0 & FIELD_COUNT_MASK,\n  fieldType0 == fieldId0 & FIELD_TYPE_MASK,\n  expectedCount0 == expectedFlags0 & FIELD_COUNT_MASK,\n  expectedType0 == expectedFlags0 & FIELD_TYPE_MASK,\n  countString0 == getFieldCountString(fieldCount0),\n  typeString0 == getFieldTypeString(fieldType0),\n  sb0 == new StringBuilder(),\n  fieldId0 >= -9223372036854775808, fieldId0 <= 9223372036854775807, # implicit\n  expectedFlags0 >= -9223372036854775808, expectedFlags0 <= 9223372036854775807, # implicit\n  fieldCount0 >= -9223372036854775808, fieldCount0 <= 9223372036854775807, # implicit\n  fieldType0 >= -9223372036854775808, fieldType0 <= 9223372036854775807, # implicit\n  expectedCount0 >= -9223372036854775808, expectedCount0 <= 9223372036854775807, # implicit\n  expectedType0 >= -9223372036854775808, expectedType0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(fieldId0 == 0), Or(fieldType0 != expectedType0, Not(Or(fieldCount0 == expectedCount0, And(fieldCount0 == FIELD_COUNT_PACKED, expectedCount0 == FIELD_COUNT_REPEATED))))), And(Not(typeString0_isNull), Not(countString0_isNull))), expectedType0 == FIELD_TYPE_MESSAGE), fieldType0 == FIELD_TYPE_MESSAGE), Not(fieldCount0 == FIELD_COUNT_PACKED))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfieldId = Symbol('fieldId')\nexpectedFlags = Symbol('expectedFlags')\n_getFieldTypeString = Symbol('_getFieldTypeString')\n_getFieldCountString = Symbol('_getFieldCountString')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(fieldId, 0)))) & (((fieldId & (Ne(FIELD_TYPE_MASK, expectedFlags))) & FIELD_TYPE_MASK) | (~((((fieldId & (Eq(FIELD_COUNT_MASK, expectedFlags))) & FIELD_COUNT_MASK) | ((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))) & (expectedFlags & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_REPEATED))))))))) & ((Ne(_getFieldTypeString, null)) & (Ne(_getFieldCountString, null)))) & (expectedFlags & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))) & (fieldId & (Eq(FIELD_TYPE_MASK, FIELD_TYPE_MESSAGE)))) & (~((fieldId & (Eq(FIELD_COUNT_MASK, FIELD_COUNT_PACKED))))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 2136,
    "throwingLine": 2175,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/ProtoOutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.skipRead(int)",
    "exception": "throw new RuntimeException(\"skipRead with negative amount=\" + amount);",
    "pathCojunction": "(amount < 0)",
    "symbolicPathConjunction": "(amount < 0)",
    "backwardsPathConjunction": "(amount < 0)",
    "simplifiedPathConjunction": "amount < 0",
    "z3Inputs": "[amount0 = -1]\n[amount0 = -2]\n[amount0 = -3]\n[amount0 = -4]\n[amount0 = -5]\n[amount0 = -6]\n[amount0 = -7]\n[amount0 = -8]\n[amount0 = -9]\n[amount0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\namount0 = Int('amount0')\n\nconstraints = [\n  amount0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\namount = Symbol('amount', integer=True)\npath_conjunction = (StrictLessThan(amount, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 172,
    "throwingLine": 174,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.readRawByte()",
    "exception": "throw new IndexOutOfBoundsException(\"Trying to read too much data\" + \" mReadBufIndex=\" + mReadBufIndex + \" mBufferCount=\" + mBufferCount + \" mReadIndex=\" + mReadIndex + \" mReadLimit=\" + mReadLimit);",
    "pathCojunction": "(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "symbolicPathConjunction": "(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "backwardsPathConjunction": "(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "simplifiedPathConjunction": "mBufferCount - mReadBufIndex == 1 && mReadIndex >= mReadLimit || mBufferCount < mReadBufIndex",
    "z3Inputs": "[mReadIndex0 = 0,\n mReadBufIndex0 = 0,\n mBufferCount0 = 1,\n mReadLimit0 = 0]\n[mReadBufIndex0 = -1, mBufferCount0 = -2, mReadIndex0 = -1]\n[mReadBufIndex0 = -2, mBufferCount0 = -3, mReadIndex0 = -2]\n[mReadBufIndex0 = -3, mBufferCount0 = -4, mReadIndex0 = -3]\n[mReadBufIndex0 = -4, mBufferCount0 = -5, mReadIndex0 = -4]\n[mReadBufIndex0 = -5, mBufferCount0 = -6, mReadIndex0 = -5]\n[mReadBufIndex0 = -6, mBufferCount0 = -7, mReadIndex0 = -6]\n[mReadBufIndex0 = -7, mBufferCount0 = -8, mReadIndex0 = -7]\n[mReadBufIndex0 = -8, mBufferCount0 = -9, mReadIndex0 = -8]\n[mReadBufIndex0 = -9, mBufferCount0 = -10, mReadIndex0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmReadBufIndex0 = Int('mReadBufIndex0')\nmBufferCount0 = Int('mBufferCount0')\nmReadIndex0 = Int('mReadIndex0')\nmReadLimit0 = Int('mReadLimit0')\n\nconstraints = [\n  Or(mReadBufIndex0 > mBufferCount0, And(mReadBufIndex0 == mBufferCount0 - 1, mReadIndex0 >= mReadLimit0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmReadBufIndex = Symbol('mReadBufIndex', integer=True)\nmBufferCount = Symbol('mBufferCount', integer=True)\nmReadIndex = Symbol('mReadIndex', integer=True)\nmReadLimit = Symbol('mReadLimit', integer=True)\npath_conjunction = ((StrictGreaterThan(mReadBufIndex, mBufferCount)) | ((Eq(mReadBufIndex, (mBufferCount - 1))) & (GreaterThan(mReadIndex, mReadLimit))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 200,
    "throwingLine": 203,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.readRawUnsigned()",
    "exception": "throw new IndexOutOfBoundsException(\"Trying to read too much data\" + \" mReadBufIndex=\" + mReadBufIndex + \" mBufferCount=\" + mBufferCount + \" mReadIndex=\" + mReadIndex + \" mReadLimit=\" + mReadLimit);",
    "pathCojunction": "(true) && (mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "symbolicPathConjunction": "(true) && (readRawByte())",
    "backwardsPathConjunction": "(true) && (mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "simplifiedPathConjunction": "mBufferCount - mReadBufIndex == 1 && mReadIndex >= mReadLimit || mBufferCount < mReadBufIndex",
    "z3Inputs": "[mReadIndex0 = 0,\n mReadBufIndex0 = 0,\n mBufferCount0 = 1,\n mReadLimit0 = 0,\n bits0 = 0,\n result0 = 0]\n[mReadIndex0 = -1,\n mReadBufIndex0 = -1,\n result0 = 0,\n bits0 = 0,\n mBufferCount0 = -2]\n[mReadBufIndex0 = -2,\n result0 = 0,\n bits0 = 0,\n mBufferCount0 = -3]\n[mReadBufIndex0 = -3,\n result0 = 0,\n bits0 = 0,\n mBufferCount0 = -4]\n[mReadLimit0 = -1,\n mReadBufIndex0 = -4,\n result0 = 0,\n bits0 = 0,\n mBufferCount0 = -5]\n[mReadBufIndex0 = -5,\n result0 = 0,\n bits0 = 0,\n mBufferCount0 = -6]\n[mReadIndex0 = -2,\n mReadBufIndex0 = -6,\n result0 = 0,\n bits0 = 0,\n mBufferCount0 = -7]\n[mReadIndex0 = -2,\n mReadBufIndex0 = -7,\n result0 = 0,\n bits0 = 0,\n mBufferCount0 = -8]\n[mReadBufIndex0 = -8,\n result0 = 0,\n bits0 = 0,\n mBufferCount0 = -9]\n[mReadBufIndex0 = -9,\n result0 = 0,\n bits0 = 0,\n mBufferCount0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbits0 = Int('bits0')\nresult0 = Int('result0')\nmReadLimit0 = Int('mReadLimit0')\nmReadBufIndex0 = Int('mReadBufIndex0')\nmBufferCount0 = Int('mBufferCount0')\nmReadIndex0 = Int('mReadIndex0')\n\nconstraints = [\n  bits0 == 0,\n  result0 == 0,\n  result0 >= -9223372036854775808, result0 <= 9223372036854775807, # implicit\n  And(True, Or(mReadBufIndex0 > mBufferCount0, And(mReadBufIndex0 == mBufferCount0 - 1, mReadIndex0 >= mReadLimit0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmReadLimit = Symbol('mReadLimit', integer=True)\nmReadBufIndex = Symbol('mReadBufIndex', integer=True)\nmBufferCount = Symbol('mBufferCount', integer=True)\nmReadIndex = Symbol('mReadIndex', integer=True)\npath_conjunction = (True & ((StrictGreaterThan(mReadBufIndex, mBufferCount)) | ((Eq(mReadBufIndex, (mBufferCount - 1))) & (GreaterThan(mReadIndex, mReadLimit)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 218,
    "throwingLine": 222,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.readRawUnsigned()",
    "exception": "throw new ProtoParseException(\"Varint too long -- \" + getDebugString());",
    "pathCojunction": "(true) && (!(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && 0 >= mReadLimit))) && (0 >= mChunkSize) && (!((b & 0x80) == 0)) && (bits > 64)",
    "symbolicPathConjunction": "(true) && (readRawByte()) && (!((b & 0x80) == 0)) && (bits > 64)",
    "backwardsPathConjunction": "(true) && (!(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && 0 >= mReadLimit))) && (0 >= mChunkSize) && (!((mBuffers.get(mReadBufIndex)[0++] & 0x80) == 0)) && (bits + 7 + 7 > 64)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbits0 = Int('bits0')\nresult0 = Int('result0')\nmReadLimit0 = Int('mReadLimit0')\nmChunkSize0 = Int('mChunkSize0')\nmReadBufIndex0 = Int('mReadBufIndex0')\nmBufferCount0 = Int('mBufferCount0')\nb0 = Int('b0')\nresult1 = Int('result1')\nbits1 = Int('bits1')\n\nconstraints = [\n  bits0 == 0,\n  result0 == 0,\n  b0 == mBuffers.get(mReadBufIndex0)[0++],\n  result1 == ((b0 & 0x7F)) << bits0,\n  bits1 == bits0 + 7,\n  result0 >= -9223372036854775808, result0 <= 9223372036854775807, # implicit\n  b0 >= -128, b0 <= 127, # implicit\n  result1 >= -9223372036854775808, result1 <= 9223372036854775807, # implicit\n  And(And(And(And(True, Not(Or(mReadBufIndex0 > mBufferCount0, And(mReadBufIndex0 == mBufferCount0 - 1, 0 >= mReadLimit0)))), 0 >= mChunkSize0), Not(b0 & 0x80 == 0)), bits1 > 64)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 218,
    "throwingLine": 229,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.readRawUnsigned()",
    "exception": "throw new ProtoParseException(\"Varint too long -- \" + getDebugString());",
    "pathCojunction": "(true) && (!(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))) && (!(mReadIndex >= mChunkSize)) && (!((b & 0x80) == 0)) && (bits > 64)",
    "symbolicPathConjunction": "(true) && (readRawByte()) && (!((b & 0x80) == 0)) && (bits > 64)",
    "backwardsPathConjunction": "(true) && (!(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))) && (!(mReadIndex >= mChunkSize)) && (!((mReadBuffer[mReadIndex++] & 0x80) == 0)) && (bits + 7 + 7 > 64)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbits0 = Int('bits0')\nresult0 = Int('result0')\nmReadLimit0 = Int('mReadLimit0')\nmChunkSize0 = Int('mChunkSize0')\nmReadBufIndex0 = Int('mReadBufIndex0')\nmBufferCount0 = Int('mBufferCount0')\nmReadIndex0 = Int('mReadIndex0')\nb0 = Int('b0')\nresult1 = Int('result1')\nbits1 = Int('bits1')\n\nconstraints = [\n  bits0 == 0,\n  result0 == 0,\n  b0 == mReadBuffer0[mReadIndex0++],\n  result1 == ((b0 & 0x7F)) << bits0,\n  bits1 == bits0 + 7,\n  result0 >= -9223372036854775808, result0 <= 9223372036854775807, # implicit\n  b0 >= -128, b0 <= 127, # implicit\n  result1 >= -9223372036854775808, result1 <= 9223372036854775807, # implicit\n  And(And(And(And(True, Not(Or(mReadBufIndex0 > mBufferCount0, And(mReadBufIndex0 == mBufferCount0 - 1, mReadIndex0 >= mReadLimit0)))), Not(mReadIndex0 >= mChunkSize0)), Not(b0 & 0x80 == 0)), bits1 > 64)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 218,
    "throwingLine": 229,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.readRawFixed32()",
    "exception": "throw new IndexOutOfBoundsException(\"Trying to read too much data\" + \" mReadBufIndex=\" + mReadBufIndex + \" mBufferCount=\" + mBufferCount + \" mReadIndex=\" + mReadIndex + \" mReadLimit=\" + mReadLimit);",
    "pathCojunction": "(!(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && 0 >= mReadLimit))) && (0 >= mChunkSize) && (!(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && 0 >= mReadLimit))) && (0 >= mChunkSize) && (mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "symbolicPathConjunction": "(readRawByte()) && (readRawByte()) && (readRawByte())",
    "backwardsPathConjunction": "(!(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && 0 >= mReadLimit))) && (0 >= mChunkSize) && (!(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && 0 >= mReadLimit))) && (0 >= mChunkSize) && (mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "simplifiedPathConjunction": "mBufferCount - mReadBufIndex == 1 && mBufferCount >= mReadBufIndex && mReadIndex >= mReadLimit && mChunkSize <= 0 && mReadLimit > 0",
    "z3Inputs": "[mReadLimit0 = 1,\n mReadIndex0 = 1,\n mChunkSize0 = 0,\n mReadBufIndex0 = 0,\n mBufferCount0 = 1]\n[mReadIndex0 = 2,\n mReadBufIndex0 = -1,\n mChunkSize0 = -1,\n mBufferCount0 = 0,\n mReadLimit0 = 2]\n[mReadIndex0 = 3,\n mReadBufIndex0 = -2,\n mChunkSize0 = -2,\n mBufferCount0 = -1,\n mReadLimit0 = 3]\n[mReadIndex0 = 4,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 4]\n[mReadIndex0 = 5,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 5]\n[mReadIndex0 = 6,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 6]\n[mReadIndex0 = 7,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 7]\n[mReadIndex0 = 8,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 8]\n[mReadIndex0 = 9,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 9]\n[mReadIndex0 = 10,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmReadLimit0 = Int('mReadLimit0')\nmChunkSize0 = Int('mChunkSize0')\nmReadBufIndex0 = Int('mReadBufIndex0')\nmBufferCount0 = Int('mBufferCount0')\nmReadIndex0 = Int('mReadIndex0')\n\nconstraints = [\n  And(And(And(And(Not(Or(mReadBufIndex0 > mBufferCount0, And(mReadBufIndex0 == mBufferCount0 - 1, 0 >= mReadLimit0))), 0 >= mChunkSize0), Not(Or(mReadBufIndex0 > mBufferCount0, And(mReadBufIndex0 == mBufferCount0 - 1, 0 >= mReadLimit0)))), 0 >= mChunkSize0), Or(mReadBufIndex0 > mBufferCount0, And(mReadBufIndex0 == mBufferCount0 - 1, mReadIndex0 >= mReadLimit0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmReadLimit = Symbol('mReadLimit', integer=True)\nmChunkSize = Symbol('mChunkSize', integer=True)\nmReadBufIndex = Symbol('mReadBufIndex', integer=True)\nmBufferCount = Symbol('mBufferCount', integer=True)\nmReadIndex = Symbol('mReadIndex', integer=True)\npath_conjunction = (((((~(((StrictGreaterThan(mReadBufIndex, mBufferCount)) | ((Eq(mReadBufIndex, (mBufferCount - 1))) & (GreaterThan(0, mReadLimit)))))) & (GreaterThan(0, mChunkSize))) & (~(((StrictGreaterThan(mReadBufIndex, mBufferCount)) | ((Eq(mReadBufIndex, (mBufferCount - 1))) & (GreaterThan(0, mReadLimit))))))) & (GreaterThan(0, mChunkSize))) & ((StrictGreaterThan(mReadBufIndex, mBufferCount)) | ((Eq(mReadBufIndex, (mBufferCount - 1))) & (GreaterThan(mReadIndex, mReadLimit)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 237,
    "throwingLine": 238,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.readRawFixed32()",
    "exception": "throw new IndexOutOfBoundsException(\"Trying to read too much data\" + \" mReadBufIndex=\" + mReadBufIndex + \" mBufferCount=\" + mBufferCount + \" mReadIndex=\" + mReadIndex + \" mReadLimit=\" + mReadLimit);",
    "pathCojunction": "(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "symbolicPathConjunction": "(readRawByte())",
    "backwardsPathConjunction": "(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "simplifiedPathConjunction": "mBufferCount - mReadBufIndex == 1 && mReadIndex >= mReadLimit || mBufferCount < mReadBufIndex",
    "z3Inputs": "[mReadIndex0 = 0,\n mReadBufIndex0 = 0,\n mBufferCount0 = 1,\n mReadLimit0 = 0]\n[mReadBufIndex0 = -1, mBufferCount0 = -2, mReadIndex0 = -1]\n[mReadBufIndex0 = -2, mBufferCount0 = -3, mReadIndex0 = -2]\n[mReadBufIndex0 = -3, mBufferCount0 = -4, mReadIndex0 = -3]\n[mReadBufIndex0 = -4, mBufferCount0 = -5, mReadIndex0 = -4]\n[mReadBufIndex0 = -5, mBufferCount0 = -6, mReadIndex0 = -5]\n[mReadBufIndex0 = -6, mBufferCount0 = -7, mReadIndex0 = -6]\n[mReadBufIndex0 = -7, mBufferCount0 = -8, mReadIndex0 = -7]\n[mReadBufIndex0 = -8, mBufferCount0 = -9, mReadIndex0 = -8]\n[mReadBufIndex0 = -9, mBufferCount0 = -10, mReadIndex0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmReadLimit0 = Int('mReadLimit0')\nmReadBufIndex0 = Int('mReadBufIndex0')\nmBufferCount0 = Int('mBufferCount0')\nmReadIndex0 = Int('mReadIndex0')\n\nconstraints = [\n  Or(mReadBufIndex0 > mBufferCount0, And(mReadBufIndex0 == mBufferCount0 - 1, mReadIndex0 >= mReadLimit0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmReadLimit = Symbol('mReadLimit', integer=True)\nmReadBufIndex = Symbol('mReadBufIndex', integer=True)\nmBufferCount = Symbol('mBufferCount', integer=True)\nmReadIndex = Symbol('mReadIndex', integer=True)\npath_conjunction = ((StrictGreaterThan(mReadBufIndex, mBufferCount)) | ((Eq(mReadBufIndex, (mBufferCount - 1))) & (GreaterThan(mReadIndex, mReadLimit))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 237,
    "throwingLine": 238,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.readRawFixed32()",
    "exception": "throw new IndexOutOfBoundsException(\"Trying to read too much data\" + \" mReadBufIndex=\" + mReadBufIndex + \" mBufferCount=\" + mBufferCount + \" mReadIndex=\" + mReadIndex + \" mReadLimit=\" + mReadLimit);",
    "pathCojunction": "(!(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && 0 >= mReadLimit))) && (0 >= mChunkSize) && (mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "symbolicPathConjunction": "(readRawByte()) && (readRawByte())",
    "backwardsPathConjunction": "(!(mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && 0 >= mReadLimit))) && (0 >= mChunkSize) && (mReadBufIndex > mBufferCount || (mReadBufIndex == mBufferCount - 1 && mReadIndex >= mReadLimit))",
    "simplifiedPathConjunction": "mBufferCount - mReadBufIndex == 1 && mBufferCount >= mReadBufIndex && mReadIndex >= mReadLimit && mChunkSize <= 0 && mReadLimit > 0",
    "z3Inputs": "[mReadLimit0 = 1,\n mReadIndex0 = 1,\n mChunkSize0 = 0,\n mReadBufIndex0 = 0,\n mBufferCount0 = 1]\n[mReadIndex0 = 2,\n mReadBufIndex0 = -1,\n mChunkSize0 = -1,\n mBufferCount0 = 0,\n mReadLimit0 = 2]\n[mReadIndex0 = 3,\n mReadBufIndex0 = -2,\n mChunkSize0 = -2,\n mBufferCount0 = -1,\n mReadLimit0 = 3]\n[mReadIndex0 = 4,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 4]\n[mReadIndex0 = 5,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 5]\n[mReadIndex0 = 6,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 6]\n[mReadIndex0 = 7,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 7]\n[mReadIndex0 = 8,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 8]\n[mReadIndex0 = 9,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 9]\n[mReadIndex0 = 10,\n mReadBufIndex0 = -3,\n mChunkSize0 = -2,\n mBufferCount0 = -2,\n mReadLimit0 = 10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmReadLimit0 = Int('mReadLimit0')\nmChunkSize0 = Int('mChunkSize0')\nmReadBufIndex0 = Int('mReadBufIndex0')\nmBufferCount0 = Int('mBufferCount0')\nmReadIndex0 = Int('mReadIndex0')\n\nconstraints = [\n  And(And(Not(Or(mReadBufIndex0 > mBufferCount0, And(mReadBufIndex0 == mBufferCount0 - 1, 0 >= mReadLimit0))), 0 >= mChunkSize0), Or(mReadBufIndex0 > mBufferCount0, And(mReadBufIndex0 == mBufferCount0 - 1, mReadIndex0 >= mReadLimit0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmReadLimit = Symbol('mReadLimit', integer=True)\nmChunkSize = Symbol('mChunkSize', integer=True)\nmReadBufIndex = Symbol('mReadBufIndex', integer=True)\nmBufferCount = Symbol('mBufferCount', integer=True)\nmReadIndex = Symbol('mReadIndex', integer=True)\npath_conjunction = (((~(((StrictGreaterThan(mReadBufIndex, mBufferCount)) | ((Eq(mReadBufIndex, (mBufferCount - 1))) & (GreaterThan(0, mReadLimit)))))) & (GreaterThan(0, mChunkSize))) & ((StrictGreaterThan(mReadBufIndex, mBufferCount)) | ((Eq(mReadBufIndex, (mBufferCount - 1))) & (GreaterThan(mReadIndex, mReadLimit)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 237,
    "throwingLine": 238,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.writeFromThisBuffer(int, int)",
    "exception": "throw new IllegalStateException(\"writeFromThisBuffer before startEditing\");",
    "pathCojunction": "(mReadLimit < 0)",
    "symbolicPathConjunction": "(mReadLimit < 0)",
    "backwardsPathConjunction": "(mReadLimit < 0)",
    "simplifiedPathConjunction": "mReadLimit < 0",
    "z3Inputs": "[mReadLimit0 = -1]\n[mReadLimit0 = -2]\n[mReadLimit0 = -3]\n[mReadLimit0 = -4]\n[mReadLimit0 = -5]\n[mReadLimit0 = -6]\n[mReadLimit0 = -7]\n[mReadLimit0 = -8]\n[mReadLimit0 = -9]\n[mReadLimit0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsrcOffset0 = Int('srcOffset0')\nsize0 = Int('size0')\nmReadLimit0 = Int('mReadLimit0')\n\nconstraints = [\n  mReadLimit0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmReadLimit = Symbol('mReadLimit', integer=True)\npath_conjunction = (StrictLessThan(mReadLimit, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 430,
    "throwingLine": 432,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.writeFromThisBuffer(int, int)",
    "exception": "throw new IllegalArgumentException(\"Can only move forward in the buffer --\" + \" srcOffset=\" + srcOffset + \" size=\" + size + \" \" + getDebugString());",
    "pathCojunction": "(!(mReadLimit < 0)) && (srcOffset < ((mWriteBufIndex) * mChunkSize) + mWriteIndex)",
    "symbolicPathConjunction": "(!(mReadLimit < 0)) && (getWritePos()) && (srcOffset < getWritePos())",
    "backwardsPathConjunction": "(!(mReadLimit < 0)) && (srcOffset < ((mWriteBufIndex) * mChunkSize) + mWriteIndex)",
    "simplifiedPathConjunction": "mReadLimit >= 0 && srcOffset < mChunkSize*mWriteBufIndex + mWriteIndex",
    "z3Inputs": "[mReadLimit0 = 0,\n srcOffset0 = -1,\n mWriteIndex0 = 0,\n mChunkSize0 = 0,\n mWriteBufIndex0 = 1]\n[srcOffset0 = -2,\n mChunkSize0 = -1,\n mWriteIndex0 = -1,\n mWriteBufIndex0 = 0,\n mReadLimit0 = 1]\n[srcOffset0 = -2,\n mChunkSize0 = -2,\n mWriteIndex0 = -2,\n mWriteBufIndex0 = -1,\n mReadLimit0 = 2]\n[srcOffset0 = -2,\n mChunkSize0 = -2,\n mWriteIndex0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 3]\n[srcOffset0 = -2,\n mChunkSize0 = -2,\n mWriteIndex0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 4]\n[srcOffset0 = -2,\n mChunkSize0 = -2,\n mWriteIndex0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 5]\n[srcOffset0 = -2,\n mChunkSize0 = -2,\n mWriteIndex0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 6]\n[srcOffset0 = -2,\n mChunkSize0 = -2,\n mWriteIndex0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 7]\n[srcOffset0 = -2,\n mChunkSize0 = -2,\n mWriteIndex0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 8]\n[srcOffset0 = -2,\n mChunkSize0 = -2,\n mWriteIndex0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsrcOffset0 = Int('srcOffset0')\nsize0 = Int('size0')\nmReadLimit0 = Int('mReadLimit0')\nmChunkSize0 = Int('mChunkSize0')\nmWriteBufIndex0 = Int('mWriteBufIndex0')\nmWriteIndex0 = Int('mWriteIndex0')\n\nconstraints = [\n  And(Not(mReadLimit0 < 0), srcOffset0 < mWriteBufIndex0 * mChunkSize0 + mWriteIndex0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsrcOffset = Symbol('srcOffset', integer=True)\nmReadLimit = Symbol('mReadLimit', integer=True)\nmChunkSize = Symbol('mChunkSize', integer=True)\nmWriteBufIndex = Symbol('mWriteBufIndex', integer=True)\nmWriteIndex = Symbol('mWriteIndex', integer=True)\npath_conjunction = ((~((StrictLessThan(mReadLimit, 0)))) & (StrictLessThan(srcOffset, ((mWriteBufIndex * mChunkSize) + mWriteIndex))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 430,
    "throwingLine": 435,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.writeFromThisBuffer(int, int)",
    "exception": "throw new IllegalArgumentException(\"Trying to move more data than there is --\" + \" srcOffset=\" + srcOffset + \" size=\" + size + \" \" + getDebugString());",
    "pathCojunction": "(!(mReadLimit < 0)) && (!(srcOffset < ((mWriteBufIndex) * mChunkSize) + mWriteIndex)) && (srcOffset + size > mReadableSize)",
    "symbolicPathConjunction": "(!(mReadLimit < 0)) && (!(getWritePos())) && (!(srcOffset < getWritePos())) && (srcOffset + size > mReadableSize)",
    "backwardsPathConjunction": "(!(mReadLimit < 0)) && (!(srcOffset < ((mWriteBufIndex) * mChunkSize) + mWriteIndex)) && (srcOffset + size > mReadableSize)",
    "simplifiedPathConjunction": "mReadLimit >= 0 && srcOffset >= mChunkSize*mWriteBufIndex + mWriteIndex && mReadableSize < size + srcOffset",
    "z3Inputs": "[mReadLimit0 = 0,\n mWriteIndex0 = 0,\n mReadableSize0 = -1,\n srcOffset0 = 0,\n size0 = 0,\n mChunkSize0 = 0,\n mWriteBufIndex0 = 1]\n[mReadableSize0 = -3,\n mChunkSize0 = -1,\n size0 = -1,\n srcOffset0 = -1,\n mWriteBufIndex0 = 0,\n mReadLimit0 = 1,\n mWriteIndex0 = -1]\n[mReadableSize0 = -5,\n mChunkSize0 = -2,\n size0 = -2,\n srcOffset0 = -2,\n mWriteBufIndex0 = -1,\n mReadLimit0 = 1,\n mWriteIndex0 = -4]\n[mReadableSize0 = -5,\n mChunkSize0 = -2,\n size0 = -2,\n srcOffset0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 1,\n mWriteIndex0 = -6]\n[mReadableSize0 = -5,\n mChunkSize0 = -2,\n size0 = -2,\n srcOffset0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 2,\n mWriteIndex0 = -6]\n[mReadableSize0 = -5,\n mChunkSize0 = -2,\n size0 = -2,\n srcOffset0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 3,\n mWriteIndex0 = -6]\n[mReadableSize0 = -5,\n mChunkSize0 = -2,\n size0 = -2,\n srcOffset0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 4,\n mWriteIndex0 = -6]\n[mReadableSize0 = -5,\n mChunkSize0 = -2,\n size0 = -2,\n srcOffset0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 5,\n mWriteIndex0 = -6]\n[mReadableSize0 = -5,\n mChunkSize0 = -2,\n size0 = -2,\n srcOffset0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 6,\n mWriteIndex0 = -6]\n[mReadableSize0 = -5,\n mChunkSize0 = -2,\n size0 = -2,\n srcOffset0 = -2,\n mWriteBufIndex0 = -2,\n mReadLimit0 = 7,\n mWriteIndex0 = -6]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsrcOffset0 = Int('srcOffset0')\nsize0 = Int('size0')\nmReadLimit0 = Int('mReadLimit0')\nmChunkSize0 = Int('mChunkSize0')\nmWriteBufIndex0 = Int('mWriteBufIndex0')\nmWriteIndex0 = Int('mWriteIndex0')\nmReadableSize0 = Int('mReadableSize0')\n\nconstraints = [\n  And(And(Not(mReadLimit0 < 0), Not(srcOffset0 < mWriteBufIndex0 * mChunkSize0 + mWriteIndex0)), srcOffset0 + size0 > mReadableSize0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsrcOffset = Symbol('srcOffset', integer=True)\nsize = Symbol('size', integer=True)\nmReadLimit = Symbol('mReadLimit', integer=True)\nmChunkSize = Symbol('mChunkSize', integer=True)\nmWriteBufIndex = Symbol('mWriteBufIndex', integer=True)\nmWriteIndex = Symbol('mWriteIndex', integer=True)\nmReadableSize = Symbol('mReadableSize', integer=True)\npath_conjunction = (((~((StrictLessThan(mReadLimit, 0)))) & (~((StrictLessThan(srcOffset, ((mWriteBufIndex * mChunkSize) + mWriteIndex)))))) & (StrictGreaterThan((srcOffset + size), mReadableSize)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 430,
    "throwingLine": 439,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  },
  {
    "qualifiedSignature": "android.util.proto.EncodedBuffer.rewindWriteTo(int)",
    "exception": "throw new RuntimeException(\"rewindWriteTo only can go backwards\" + writePos);",
    "pathCojunction": "(writePos > ((mWriteBufIndex) * mChunkSize) + mWriteIndex)",
    "symbolicPathConjunction": "(getWritePos()) && (writePos > getWritePos())",
    "backwardsPathConjunction": "(writePos > ((mWriteBufIndex) * mChunkSize) + mWriteIndex)",
    "simplifiedPathConjunction": "writePos > mChunkSize*mWriteBufIndex + mWriteIndex",
    "z3Inputs": "[writePos0 = 1,\n mWriteIndex0 = 0,\n mChunkSize0 = 0,\n mWriteBufIndex0 = 1]\n[mWriteIndex0 = -1,\n mChunkSize0 = -1,\n mWriteBufIndex0 = 0,\n writePos0 = 0]\n[mWriteIndex0 = -4,\n mChunkSize0 = -2,\n mWriteBufIndex0 = -1,\n writePos0 = -1]\n[mWriteIndex0 = -7,\n mChunkSize0 = -2,\n mWriteBufIndex0 = -2,\n writePos0 = -2]\n[mWriteIndex0 = -13,\n mChunkSize0 = -3,\n mWriteBufIndex0 = -3,\n writePos0 = -3]\n[mWriteIndex0 = -21,\n mChunkSize0 = -4,\n mWriteBufIndex0 = -4,\n writePos0 = -4]\n[mWriteIndex0 = -31,\n mChunkSize0 = -5,\n mWriteBufIndex0 = -5,\n writePos0 = -5]\n[mWriteIndex0 = -43,\n mChunkSize0 = -6,\n mWriteBufIndex0 = -6,\n writePos0 = -6]\n[mWriteIndex0 = -57,\n mChunkSize0 = -7,\n mWriteBufIndex0 = -7,\n writePos0 = -7]\n[mWriteIndex0 = -73,\n mChunkSize0 = -8,\n mWriteBufIndex0 = -8,\n writePos0 = -8]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwritePos0 = Int('writePos0')\nmChunkSize0 = Int('mChunkSize0')\nmWriteBufIndex0 = Int('mWriteBufIndex0')\nmWriteIndex0 = Int('mWriteIndex0')\n\nconstraints = [\n  writePos0 > mWriteBufIndex0 * mChunkSize0 + mWriteIndex0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwritePos = Symbol('writePos', integer=True)\nmChunkSize = Symbol('mChunkSize', integer=True)\nmWriteBufIndex = Symbol('mWriteBufIndex', integer=True)\nmWriteIndex = Symbol('mWriteIndex', integer=True)\npath_conjunction = (StrictGreaterThan(writePos, ((mWriteBufIndex * mChunkSize) + mWriteIndex)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 506,
    "throwingLine": 508,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/proto/EncodedBuffer.java"
  }
]