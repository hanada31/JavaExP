[
  {
    "qualifiedSignature": "android.view.ViewGroup.removeViewsInLayout(int, int)",
    "exception": "throw new IndexOutOfBoundsException();",
    "pathCojunction": "(start < 0 || count < 0 || start + count > mChildrenCount)",
    "symbolicPathConjunction": "(start < 0 || count < 0 || start + count > mChildrenCount)",
    "backwardsPathConjunction": "(start < 0 || count < 0 || start + count > mChildrenCount)",
    "simplifiedPathConjunction": "count > mChildrenCount - start || count < 0 || start < 0",
    "z3Inputs": "[start0 = -1, mChildrenCount0 = -1, count0 = 0]\n[start0 = -2, count0 = 1, mChildrenCount0 = -2]\n[start0 = -3, mChildrenCount0 = -3]\n[start0 = -4, count0 = 1, mChildrenCount0 = -4]\n[start0 = -5, mChildrenCount0 = -5]\n[start0 = -6, count0 = 1, mChildrenCount0 = -6]\n[start0 = -7, count0 = 2, mChildrenCount0 = -6]\n[start0 = -8, count0 = 3]\n[start0 = -9, count0 = 4]\n[start0 = -10, count0 = 5]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstart0 = Int('start0')\ncount0 = Int('count0')\nmChildrenCount0 = Int('mChildrenCount0')\n\nconstraints = [\n  Or(Or(start0 < 0, count0 < 0), start0 + count0 > mChildrenCount0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstart = Symbol('start', integer=True)\ncount = Symbol('count', integer=True)\nmChildrenCount = Symbol('mChildrenCount', integer=True)\npath_conjunction = (((StrictLessThan(start, 0)) | (StrictLessThan(count, 0))) | (StrictGreaterThan((start + count), mChildrenCount)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 5364,
    "throwingLine": 5365,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/ViewGroup.java"
  },
  {
    "qualifiedSignature": "android.view.ViewGroup.TouchTarget.recycle()",
    "exception": "throw new IllegalStateException(\"already recycled once\");",
    "pathCojunction": "(child == null)",
    "symbolicPathConjunction": "(child == null)",
    "backwardsPathConjunction": "(child == null)",
    "simplifiedPathConjunction": "child == null",
    "z3Inputs": "[child0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nchild0_isNull = Bool('child0_isNull')\n\nconstraints = [\n  child0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nchild = Symbol('child')\nnull = Symbol('null')\npath_conjunction = (Eq(child, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 8562,
    "throwingLine": 8564,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/ViewGroup.java"
  },
  {
    "qualifiedSignature": "android.view.ViewGroup.HoverTarget.recycle()",
    "exception": "throw new IllegalStateException(\"already recycled once\");",
    "pathCojunction": "(child == null)",
    "symbolicPathConjunction": "(child == null)",
    "backwardsPathConjunction": "(child == null)",
    "simplifiedPathConjunction": "child == null",
    "z3Inputs": "[child0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nchild0_isNull = Bool('child0_isNull')\n\nconstraints = [\n  child0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nchild = Symbol('child')\nnull = Symbol('null')\npath_conjunction = (Eq(child, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 8616,
    "throwingLine": 8618,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/ViewGroup.java"
  },
  {
    "qualifiedSignature": "android.view.VelocityTracker.getEstimator(int, android.view.VelocityTracker.Estimator)",
    "exception": "throw new IllegalArgumentException(\"outEstimator must not be null\");",
    "pathCojunction": "(outEstimator == null)",
    "symbolicPathConjunction": "(outEstimator == null)",
    "backwardsPathConjunction": "(outEstimator == null)",
    "simplifiedPathConjunction": "null == outEstimator",
    "z3Inputs": "[outEstimator0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\noutEstimator0_isNull = Bool('outEstimator0_isNull')\n\nconstraints = [\n  outEstimator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutEstimator = Symbol('outEstimator')\nnull = Symbol('null')\npath_conjunction = (Eq(outEstimator, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 214,
    "throwingLine": 216,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/VelocityTracker.java"
  }
]