[
  {
    "qualifiedSignature": "android.security.ConfirmationPrompt.Builder.build()",
    "exception": "throw new IllegalArgumentException(\"prompt text must be set and non-empty\");",
    "pathCojunction": "(TextUtils.isEmpty(mPromptText))",
    "symbolicPathConjunction": "(TextUtils.isEmpty(mPromptText))",
    "backwardsPathConjunction": "(TextUtils.isEmpty(mPromptText))",
    "simplifiedPathConjunction": "TextUtils.isEmpty(mPromptText)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  TextUtils.isEmpty(mPromptText0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPromptText = Symbol('mPromptText')\nTextUtils_isEmpty = Symbol('TextUtils_isEmpty')\npath_conjunction = TextUtils_isEmpty\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 193,
    "throwingLine": 195,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/security/ConfirmationPrompt.java"
  },
  {
    "qualifiedSignature": "android.security.ConfirmationPrompt.Builder.build()",
    "exception": "throw new IllegalArgumentException(\"extraData must be set\");",
    "pathCojunction": "(!(TextUtils.isEmpty(mPromptText))) && (mExtraData == null)",
    "symbolicPathConjunction": "(!(TextUtils.isEmpty(mPromptText))) && (mExtraData == null)",
    "backwardsPathConjunction": "(!(TextUtils.isEmpty(mPromptText))) && (mExtraData == null)",
    "simplifiedPathConjunction": "mExtraData == null && !TextUtils.isEmpty(mPromptText)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmExtraData0_isNull = Bool('mExtraData0_isNull')\n\nconstraints = [\n  And(Not(TextUtils.isEmpty(mPromptText0)), mExtraData0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPromptText = Symbol('mPromptText')\nmExtraData = Symbol('mExtraData')\nTextUtils_isEmpty = Symbol('TextUtils_isEmpty')\nnull = Symbol('null')\npath_conjunction = ((~(TextUtils_isEmpty)) & (Eq(mExtraData, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 193,
    "throwingLine": 198,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/security/ConfirmationPrompt.java"
  },
  {
    "qualifiedSignature": "android.security.net.config.Pin.getDigestLength(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"Unsupported digest algorithm: \" + algorithm);",
    "pathCojunction": "(!(\"SHA-256\".equalsIgnoreCase(algorithm)))",
    "symbolicPathConjunction": "(!(\"SHA-256\".equalsIgnoreCase(algorithm)))",
    "backwardsPathConjunction": "(!(\"SHA-256\".equalsIgnoreCase(algorithm)))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nalgorithm0 = String('algorithm0')\n\nconstraints = [\n  Not(\"SHA-256\".equalsIgnoreCase(algorithm0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nalgorithm = Symbol('algorithm')\n\"SHA-256\"_equalsIgnoreCase = Symbol('\"SHA-256\"_equalsIgnoreCase')\npath_conjunction = (~(\"SHA-256\"_equalsIgnoreCase))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 46,
    "throwingLine": 50,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/security/net/config/Pin.java"
  },
  {
    "qualifiedSignature": "android.security.net.config.RootTrustManager.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String, javax.net.ssl.SSLEngine)",
    "exception": "throw new CertificateException(\"Not in handshake; no session available\");",
    "pathCojunction": "(session == null)",
    "symbolicPathConjunction": "(session == null)",
    "backwardsPathConjunction": "(engine.getHandshakeSession() == null)",
    "simplifiedPathConjunction": "engine.getHandshakeSession() == null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nauthType0 = String('authType0')\nsession0_isNull = Bool('session0_isNull')\n\nconstraints = [\n  session0 == engine0.getHandshakeSession(),\n  session0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nengine = Symbol('engine')\nengine_getHandshakeSession = Symbol('engine_getHandshakeSession')\nnull = Symbol('null')\npath_conjunction = (Eq(engine_getHandshakeSession, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 98,
    "throwingLine": 101,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/security/net/config/RootTrustManager.java"
  },
  {
    "qualifiedSignature": "android.security.net.config.RootTrustManager.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)",
    "exception": "throw new CertificateException(\"Domain specific configurations require that hostname aware\" + \" checkServerTrusted(X509Certificate[], String, String) is used\");",
    "pathCojunction": "(mConfig.hasPerDomainConfigs())",
    "symbolicPathConjunction": "(mConfig.hasPerDomainConfigs())",
    "backwardsPathConjunction": "(mConfig.hasPerDomainConfigs())",
    "simplifiedPathConjunction": "mConfig.hasPerDomainConfigs()",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nauthType0 = String('authType0')\n\nconstraints = [\n  mConfig0.hasPerDomainConfigs()\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmConfig = Symbol('mConfig')\nmConfig_hasPerDomainConfigs = Symbol('mConfig_hasPerDomainConfigs')\npath_conjunction = mConfig_hasPerDomainConfigs\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 110,
    "throwingLine": 112,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/security/net/config/RootTrustManager.java"
  },
  {
    "qualifiedSignature": "android.security.net.config.RootTrustManager.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String, java.lang.String)",
    "exception": "throw new CertificateException(\"Domain specific configurations require that the hostname be provided\");",
    "pathCojunction": "(hostname == null && mConfig.hasPerDomainConfigs())",
    "symbolicPathConjunction": "(hostname == null && mConfig.hasPerDomainConfigs())",
    "backwardsPathConjunction": "(hostname == null && mConfig.hasPerDomainConfigs())",
    "simplifiedPathConjunction": "mConfig.hasPerDomainConfigs() && hostname == null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nauthType0 = String('authType0')\nhostname0 = String('hostname0')\nhostname0_isNull = Bool('hostname0_isNull')\n\nconstraints = [\n  And(hostname0_isNull, mConfig0.hasPerDomainConfigs())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nhostname = Symbol('hostname')\nmConfig = Symbol('mConfig')\nmConfig_hasPerDomainConfigs = Symbol('mConfig_hasPerDomainConfigs')\nnull = Symbol('null')\npath_conjunction = ((Eq(hostname, null)) & mConfig_hasPerDomainConfigs)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 127,
    "throwingLine": 129,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/security/net/config/RootTrustManager.java"
  }
]