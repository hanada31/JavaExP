[
  {
    "qualifiedSignature": "android.util.MemoryIntArray.isWritable()",
    "exception": "throw new IllegalStateException(\"cannot interact with a closed instance\");",
    "pathCojunction": "(mFd == -1)",
    "symbolicPathConjunction": "((isClosed()) && (isClosed()))",
    "backwardsPathConjunction": "(mFd == -1)",
    "simplifiedPathConjunction": "mFd == -1",
    "z3Inputs": "[mFd0 = -1]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmFd0 = Int('mFd0')\n\nconstraints = [\n  mFd0 == -1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmFd = Symbol('mFd', integer=True)\npath_conjunction = (Eq(mFd, -1))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 93,
    "throwingLine": 94,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MemoryIntArray.java"
  },
  {
    "qualifiedSignature": "android.util.MemoryIntArray.get(int)",
    "exception": "throw new IllegalStateException(\"cannot interact with a closed instance\");",
    "pathCojunction": "(mFd == -1)",
    "symbolicPathConjunction": "((isClosed()) && (isClosed()))",
    "backwardsPathConjunction": "(mFd == -1)",
    "simplifiedPathConjunction": "mFd == -1",
    "z3Inputs": "[mFd0 = -1]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nmFd0 = Int('mFd0')\n\nconstraints = [\n  mFd0 == -1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmFd = Symbol('mFd', integer=True)\npath_conjunction = (Eq(mFd, -1))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 105,
    "throwingLine": 106,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MemoryIntArray.java"
  },
  {
    "qualifiedSignature": "android.util.MemoryIntArray.set(int, int)",
    "exception": "throw new IllegalStateException(\"cannot interact with a closed instance\");",
    "pathCojunction": "(mFd == -1)",
    "symbolicPathConjunction": "((isClosed()) && (isClosed()))",
    "backwardsPathConjunction": "(mFd == -1)",
    "simplifiedPathConjunction": "mFd == -1",
    "z3Inputs": "[mFd0 = -1]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nvalue0 = Int('value0')\nmFd0 = Int('mFd0')\n\nconstraints = [\n  mFd0 == -1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmFd = Symbol('mFd', integer=True)\npath_conjunction = (Eq(mFd, -1))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 120,
    "throwingLine": 121,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MemoryIntArray.java"
  },
  {
    "qualifiedSignature": "android.util.MemoryIntArray.set(int, int)",
    "exception": "throw new UnsupportedOperationException(\"array is not writable\");",
    "pathCojunction": "(!(mFd == -1)) && (!(mFd == -1)) && (!(mIsOwner))",
    "symbolicPathConjunction": "((!(isClosed())) && (!(isClosed()))) && ((!(isWritable())) && (!isWritable()))",
    "backwardsPathConjunction": "(!(mFd == -1)) && (!(mFd == -1)) && (!(mIsOwner))",
    "simplifiedPathConjunction": "!mIsOwner && mFd != -1",
    "z3Inputs": "[mFd0 = 0, mIsOwner0 = False]\n[mFd0 = 2, mIsOwner0 = False]\n[mFd0 = 3, mIsOwner0 = False]\n[mFd0 = 4, mIsOwner0 = False]\n[mFd0 = 5, mIsOwner0 = False]\n[mFd0 = 6, mIsOwner0 = False]\n[mFd0 = 7, mIsOwner0 = False]\n[mFd0 = 8, mIsOwner0 = False]\n[mFd0 = 9, mIsOwner0 = False]\n[mFd0 = 10, mIsOwner0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nvalue0 = Int('value0')\nmFd0 = Int('mFd0')\nmIsOwner0 = Bool('mIsOwner0')\n\nconstraints = [\n  And(And(Not(mFd0 == -1), Not(mFd0 == -1)), Not(mIsOwner0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmFd = Symbol('mFd', integer=True)\nmIsOwner = Symbol('mIsOwner')\npath_conjunction = (((~((Eq(mFd, -1)))) & (~((Eq(mFd, -1))))) & (~(mIsOwner)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 120,
    "throwingLine": 122,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MemoryIntArray.java"
  },
  {
    "qualifiedSignature": "android.util.MemoryIntArray.size()",
    "exception": "throw new IllegalStateException(\"cannot interact with a closed instance\");",
    "pathCojunction": "(mFd == -1)",
    "symbolicPathConjunction": "((isClosed()) && (isClosed()))",
    "backwardsPathConjunction": "(mFd == -1)",
    "simplifiedPathConjunction": "mFd == -1",
    "z3Inputs": "[mFd0 = -1]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmFd0 = Int('mFd0')\n\nconstraints = [\n  mFd0 == -1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmFd = Symbol('mFd', integer=True)\npath_conjunction = (Eq(mFd, -1))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 132,
    "throwingLine": 133,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MemoryIntArray.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (True & (Ne(mSize, mSize))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 561,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & False) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (!(osize >= mHashes.length)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (!(osize >= mHashes.length)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (!(mSize >= mHashes.length)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "simplifiedPathConjunction": "index >= mHashes.length && mHashes.length > mSize && index < 0 && key != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), Not(osize0 >= mHashes0_length)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (~((GreaterThan(mSize, mHashes_length))))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (!(osize >= mHashes.length)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (!(osize >= mHashes.length)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (!(mSize >= mHashes.length)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "simplifiedPathConjunction": "key == null && index >= mHashes.length && mHashes.length > mSize && index < 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(key0_isNull, Not(index1 >= 0)), Not(osize0 >= mHashes0_length)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (~((GreaterThan(mSize, mHashes_length))))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & False) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (True & (Ne(mSize, mSize))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 561,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & False) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (True & (Ne(mSize, mSize))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 561,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & False) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (!(index < osize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (!(~~index < mSize)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), Not(index1 < osize0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (~((StrictLessThan(~~index, mSize))))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (!(osize >= mHashes.length)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (!(osize >= mHashes.length)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (!(mSize >= mHashes.length)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  DEBUG0 == False,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), Not(osize0 >= mHashes0_length)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (~((GreaterThan(mSize, mHashes_length))))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (!(mHashes.length > 0)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (!(mHashes.length > 0)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), Not(mHashes0_length > 0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (~((StrictGreaterThan(mHashes_length, 0))))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (True & (Ne(mSize, mSize))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 561,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (!(osize >= mHashes.length)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (!(osize >= mHashes.length)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (!(mSize >= mHashes.length)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  DEBUG0 == False,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), Not(osize0 >= mHashes0_length)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = (((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (~((GreaterThan(mSize, mHashes_length))))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (!(index >= 0)) && (osize >= mHashes.length) && (osize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (DEBUG) && (index < osize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (mSize >= (BASE_SIZE * 2)) && (!(DEBUG)) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (DEBUG) && (~~index < mSize) && (DEBUG) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == 0,\n  index1 == indexOfNull(),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 + (osize0 >> 1)),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(key0_isNull, Not(index1 >= 0)), osize0 >= mHashes0_length), osize0 >= BASE_SIZE0 * 2), Not(DEBUG0)), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), DEBUG0), index1 < osize0), DEBUG0), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((Eq(key, null)) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (GreaterThan(mSize, (4 * 2)))) & (~(False))) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & False) & (StrictLessThan(~~index, mSize))) & False) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.put(K, V)",
    "exception": "throw new ConcurrentModificationException();",
    "pathCojunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (!(index >= 0)) && (osize >= mHashes.length) && (!(osize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (index < osize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (osize != mSize || index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (!(~~index >= 0)) && (mSize >= mHashes.length) && (!(mSize >= (BASE_SIZE * 2))) && (DEBUG) && (!(CONCURRENT_MODIFICATION_EXCEPTIONS && mSize != mSize)) && (mHashes.length > 0) && (!(DEBUG)) && (~~index < mSize) && (!(DEBUG)) && (CONCURRENT_MODIFICATION_EXCEPTIONS) && (mSize != mSize || ~~index >= mHashes.length)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nosize0 = Int('osize0')\nhash0 = Int('hash0')\nindex0 = Int('index0')\nhash1 = Int('hash1')\nindex1 = Int('index1')\nindex1 = Int('index1')\nBASE_SIZE0 = Int('BASE_SIZE0')\nn0 = Int('n0')\nDEBUG0 = Bool('DEBUG0')\nCONCURRENT_MODIFICATION_EXCEPTIONS0 = Bool('CONCURRENT_MODIFICATION_EXCEPTIONS0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  osize0 == mSize0,\n  hash1 == mIdentityHashCode ? System.identityHashCode(key0) : key0.hashCode(),\n  index1 == indexOf(key0, hash1),\n  index1 == ~index1,\n  BASE_SIZE0 == 4,\n  n0 == (osize0 >= BASE_SIZE0 ? (BASE_SIZE0 * 2) : BASE_SIZE0),\n  DEBUG0 == False,\n  ohashes0 == mHashes0,\n  oarray0 == mArray0,\n  CONCURRENT_MODIFICATION_EXCEPTIONS0 == True,\n  mHashes0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(And(And(And(Not(key0_isNull), Not(index1 >= 0)), osize0 >= mHashes0_length), Not(osize0 >= BASE_SIZE0 * 2)), DEBUG0), Not(And(CONCURRENT_MODIFICATION_EXCEPTIONS0, osize0 != mSize0))), mHashes0_length > 0), Not(DEBUG0)), index1 < osize0), Not(DEBUG0)), CONCURRENT_MODIFICATION_EXCEPTIONS0), Or(osize0 != mSize0, index1 >= mHashes0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nindex = Symbol('index', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((((((((((~((Eq(key, null)))) & (~((GreaterThan(~~index, 0))))) & (GreaterThan(mSize, mHashes_length))) & (~((GreaterThan(mSize, (4 * 2)))))) & False) & (~((True & (Ne(mSize, mSize)))))) & (StrictGreaterThan(mHashes_length, 0))) & (~(False))) & (StrictLessThan(~~index, mSize))) & (~(False))) & True) & ((Ne(mSize, mSize)) | (GreaterThan(~~index, mHashes_length))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 531,
    "throwingLine": 582,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.append(K, V)",
    "exception": "throw new IllegalStateException(\"Array is full\");",
    "pathCojunction": "(key == null) && (index >= mHashes.length)",
    "symbolicPathConjunction": "(key == null) && (index >= mHashes.length)",
    "backwardsPathConjunction": "(key == null) && (mSize >= mHashes.length)",
    "simplifiedPathConjunction": "key == null && mHashes.length <= mSize",
    "z3Inputs": "[mHashes0_length = 0,\n mSize0 = 0,\n hash0 = 0,\n index0 = 0,\n key0_isNull = True]\n[key0_isNull = True,\n mHashes0_length = 1,\n index0 = 1,\n mSize0 = 1,\n hash0 = 0]\n[key0_isNull = True,\n mHashes0_length = 2,\n index0 = 2,\n mSize0 = 2,\n hash0 = 0]\n[key0_isNull = True,\n mHashes0_length = 1,\n index0 = 3,\n mSize0 = 3,\n hash0 = 0]\n[key0_isNull = True,\n mHashes0_length = 1,\n index0 = 4,\n mSize0 = 4,\n hash0 = 0]\n[key0_isNull = True,\n mHashes0_length = 1,\n index0 = 5,\n mSize0 = 5,\n hash0 = 0]\n[key0_isNull = True,\n mHashes0_length = 1,\n index0 = 6,\n mSize0 = 6,\n hash0 = 0]\n[key0_isNull = True,\n mHashes0_length = 1,\n index0 = 7,\n mSize0 = 7,\n hash0 = 0]\n[key0_isNull = True,\n mHashes0_length = 1,\n index0 = 8,\n mSize0 = 8,\n hash0 = 0]\n[key0_isNull = True,\n mHashes0_length = 1,\n index0 = 9,\n mSize0 = 9,\n hash0 = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nindex0 = Int('index0')\nhash0 = Int('hash0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  index0 == mSize0,\n  hash0 == 0,\n  mHashes0_length >= 0, # implicit\n  And(key0_isNull, index0 >= mHashes0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Eq(key, null)) & (GreaterThan(mSize, mHashes_length)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 598,
    "throwingLine": 603,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.append(K, V)",
    "exception": "throw new IllegalStateException(\"Array is full\");",
    "pathCojunction": "(!(key == null)) && (index >= mHashes.length)",
    "symbolicPathConjunction": "(!(key == null)) && (index >= mHashes.length)",
    "backwardsPathConjunction": "(!(key == null)) && (mSize >= mHashes.length)",
    "simplifiedPathConjunction": "mHashes.length <= mSize && key != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nindex0 = Int('index0')\nmIdentityHashCode0 = Bool('mIdentityHashCode0')\nhash0 = Int('hash0')\nkey0_isNull = Bool('key0_isNull')\nmHashes0_length = Int('mHashes0_length')\n\nconstraints = [\n  index0 == mSize0,\n  hash0 == (mIdentityHashCode0 ? System.identityHashCode(key0) : key0.hashCode()),\n  mHashes0_length >= 0, # implicit\n  And(Not(key0_isNull), index0 >= mHashes0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nmSize = Symbol('mSize', integer=True)\nmHashes = Symbol('mHashes')\nmHashes_length = Symbol('mHashes_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (GreaterThan(mSize, mHashes_length)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 598,
    "throwingLine": 603,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.validate()",
    "exception": "throw new IllegalArgumentException(\"Duplicate key in ArrayMap: \" + cur);",
    "pathCojunction": "(!(N <= 1)) && (i < N) && (!(hash != basehash)) && (j >= basei) && (!(cur == prev)) && (cur != null && prev != null && cur.equals(prev))",
    "symbolicPathConjunction": "(!(N <= 1)) && (i < N) && (!(hash != basehash)) && (j >= basei) && (!(cur == prev)) && (cur != null && prev != null && cur.equals(prev))",
    "backwardsPathConjunction": "(!(mSize <= 1)) && (1 < mSize) && (!(mHashes[1] != mHashes[0])) && (1 - 1 >= 0) && (!(mArray[i << 1] == mArray[j << 1])) && (mArray[i << 1] != null && mArray[j << 1] != null && mArray[i << 1].equals(mArray[j << 1]))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nN0 = Int('N0')\nbasehash0 = Int('basehash0')\nbasei0 = Int('basei0')\ni0 = Int('i0')\nhash0 = Int('hash0')\nj0 = Int('j0')\ncur0_isNull = Bool('cur0_isNull')\nprev0_isNull = Bool('prev0_isNull')\n\nconstraints = [\n  N0 == mSize0,\n  basehash0 == mHashes0[0],\n  basei0 == 0,\n  i0 == 1,\n  hash0 == mHashes0[i0],\n  cur0 == mArray0[i0 << 1],\n  j0 == i0 - 1,\n  prev0 == mArray0[j0 << 1],\n  And(And(And(And(And(Not(N0 <= 1), i0 < N0), Not(hash0 != basehash0)), j0 >= basei0), Not(cur0 == prev0)), And(And(Not(cur0_isNull), Not(prev0_isNull)), cur0.equals(prev0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 629,
    "throwingLine": 653,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  },
  {
    "qualifiedSignature": "android.util.ArrayMap.validate()",
    "exception": "throw new IllegalArgumentException(\"Duplicate key in ArrayMap: \" + cur);",
    "pathCojunction": "(!(N <= 1)) && (i < N) && (!(hash != basehash)) && (j >= basei) && (cur == prev)",
    "symbolicPathConjunction": "(!(N <= 1)) && (i < N) && (!(hash != basehash)) && (j >= basei) && (cur == prev)",
    "backwardsPathConjunction": "(!(mSize <= 1)) && (1 < mSize) && (!(mHashes[1] != mHashes[0])) && (1 - 1 >= 0) && (mArray[i << 1] == mArray[j << 1])",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmSize0 = Int('mSize0')\nN0 = Int('N0')\nbasehash0 = Int('basehash0')\nbasei0 = Int('basei0')\ni0 = Int('i0')\nhash0 = Int('hash0')\nj0 = Int('j0')\n\nconstraints = [\n  N0 == mSize0,\n  basehash0 == mHashes0[0],\n  basei0 == 0,\n  i0 == 1,\n  hash0 == mHashes0[i0],\n  cur0 == mArray0[i0 << 1],\n  j0 == i0 - 1,\n  prev0 == mArray0[j0 << 1],\n  And(And(And(And(Not(N0 <= 1), i0 < N0), Not(hash0 != basehash0)), j0 >= basei0), cur0 == prev0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 629,
    "throwingLine": 650,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/ArrayMap.java"
  }
]