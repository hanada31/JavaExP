[
  {
    "qualifiedSignature": "android.inputmethodservice.InputMethodService.setTheme(int)",
    "exception": "throw new IllegalStateException(\"Must be called before onCreate()\");",
    "pathCojunction": "(mWindow != null)",
    "symbolicPathConjunction": "(mWindow != null)",
    "backwardsPathConjunction": "(mWindow != null)",
    "simplifiedPathConjunction": "mWindow != null",
    "z3Inputs": "[mWindow0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntheme0 = Int('theme0')\nmWindow0_isNull = Bool('mWindow0_isNull')\n\nconstraints = [\n  Not(mWindow0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmWindow = Symbol('mWindow')\nnull = Symbol('null')\npath_conjunction = (Ne(mWindow, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 958,
    "throwingLine": 960,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/inputmethodservice/InputMethodService.java"
  },
  {
    "qualifiedSignature": "android.inputmethodservice.InputMethodService.enableHardwareAcceleration()",
    "exception": "throw new IllegalStateException(\"Must be called before onCreate()\");",
    "pathCojunction": "(mWindow != null)",
    "symbolicPathConjunction": "(mWindow != null)",
    "backwardsPathConjunction": "(mWindow != null)",
    "simplifiedPathConjunction": "mWindow != null",
    "z3Inputs": "[mWindow0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmWindow0_isNull = Bool('mWindow0_isNull')\n\nconstraints = [\n  Not(mWindow0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmWindow = Symbol('mWindow')\nnull = Symbol('null')\npath_conjunction = (Ne(mWindow, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 982,
    "throwingLine": 984,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/inputmethodservice/InputMethodService.java"
  }
]