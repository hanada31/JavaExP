[
  {
    "qualifiedSignature": "android.util.DataUnit.toBytes(long)",
    "exception": "throw new AbstractMethodError();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0 = Int('v0')\n\nconstraints = [\n  v0 >= -9223372036854775808, v0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 43,
    "throwingLine": 44,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/DataUnit.java"
  },
  {
    "qualifiedSignature": "android.util.DataUnit.toBytes(long)",
    "exception": "throw new AbstractMethodError();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0 = Int('v0')\n\nconstraints = [\n  v0 >= -9223372036854775808, v0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 43,
    "throwingLine": 44,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/DataUnit.java"
  },
  {
    "qualifiedSignature": "android.util.DataUnit.toBytes(long)",
    "exception": "throw new AbstractMethodError();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0 = Int('v0')\n\nconstraints = [\n  v0 >= -9223372036854775808, v0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 43,
    "throwingLine": 44,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/DataUnit.java"
  },
  {
    "qualifiedSignature": "android.util.DataUnit.toBytes(long)",
    "exception": "throw new AbstractMethodError();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0 = Int('v0')\n\nconstraints = [\n  v0 >= -9223372036854775808, v0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 43,
    "throwingLine": 44,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/DataUnit.java"
  },
  {
    "qualifiedSignature": "android.util.DataUnit.toBytes(long)",
    "exception": "throw new AbstractMethodError();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0 = Int('v0')\n\nconstraints = [\n  v0 >= -9223372036854775808, v0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 43,
    "throwingLine": 44,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/DataUnit.java"
  },
  {
    "qualifiedSignature": "android.util.DataUnit.toBytes(long)",
    "exception": "throw new AbstractMethodError();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0 = Int('v0')\n\nconstraints = [\n  v0 >= -9223372036854775808, v0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 43,
    "throwingLine": 44,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/DataUnit.java"
  },
  {
    "qualifiedSignature": "android.util.DataUnit.toBytes(long)",
    "exception": "throw new AbstractMethodError();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0 = Int('v0')\n\nconstraints = [\n  v0 >= -9223372036854775808, v0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 43,
    "throwingLine": 44,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/DataUnit.java"
  },
  {
    "qualifiedSignature": "android.util.Base64OutputStream.write(int)",
    "exception": "throw new Base64DataException(\"bad base-64\")",
    "pathCojunction": "(buffer == null) && (bpos >= buffer.length) && (!(coder.process(buffer, 0, bpos, false)))",
    "symbolicPathConjunction": "(buffer == null) && (bpos >= buffer.length) && (!coder.process(b, off, len, finish))",
    "backwardsPathConjunction": "(buffer == null) && (bpos >= buffer.length) && (!(coder.process(buffer, 0, bpos, false)))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nb0 = Int('b0')\nbpos0 = Int('bpos0')\nbuffer1_isNull = Bool('buffer1_isNull')\nbuffer1_length = Int('buffer1_length')\n\nconstraints = [\n  buffer1 == new byte[1024],\n  buffer1_length >= 0, # implicit\n  And(And(buffer1_isNull, bpos0 >= buffer1_length), Not(coder0.process(buffer1, 0, bpos0, false)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 72,
    "throwingLine": 83,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64OutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.Base64OutputStream.write(byte[], int, int)",
    "exception": "throw new Base64DataException(\"bad base-64\")",
    "pathCojunction": "(!(len <= 0)) && (bpos > 0) && (!(coder.process(buffer, 0, bpos, false)))",
    "symbolicPathConjunction": "(!(len <= 0)) && (!(bpos > 0) && (internalWrite(buffer, 0, bpos, false)))",
    "backwardsPathConjunction": "(!(len <= 0)) && (bpos > 0) && (!(coder.process(buffer, 0, bpos, false)))",
    "simplifiedPathConjunction": "!coder.process(buffer, 0, bpos, false) && bpos > 0 && len > 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nbpos0 = Int('bpos0')\n\nconstraints = [\n  And(And(Not(len0 <= 0), bpos0 > 0), Not(coder0.process(buffer, 0, bpos0, false)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlen = Symbol('len', integer=True)\ncoder = Symbol('coder')\nbpos = Symbol('bpos', integer=True)\ncoder_process = Symbol('coder_process')\npath_conjunction = (((~((LessThan(len, 0)))) & (StrictGreaterThan(bpos, 0))) & (~(coder_process)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 100,
    "throwingLine": 102,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64OutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.Base64OutputStream.write(byte[], int, int)",
    "exception": "throw new Base64DataException(\"bad base-64\")",
    "pathCojunction": "(!(len <= 0)) && (!(bpos > 0)) && (!(coder.process(b, off, len, false)))",
    "symbolicPathConjunction": "(!(len <= 0)) && (!(!(bpos > 0))) && (!(!coder.process(b, off, len, finish)))",
    "backwardsPathConjunction": "(!(len <= 0)) && (!(bpos > 0)) && (!(coder.process(b, off, len, false)))",
    "simplifiedPathConjunction": "bpos <= 0 && !coder.process(b, off, len, false) && len > 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nbpos0 = Int('bpos0')\n\nconstraints = [\n  And(And(Not(len0 <= 0), Not(bpos0 > 0)), Not(coder0.process(b0, off0, len0, false)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nb = Symbol('b')\noff = Symbol('off', integer=True)\nlen = Symbol('len', integer=True)\nbpos = Symbol('bpos', integer=True)\ncoder = Symbol('coder')\ncoder_process = Symbol('coder_process')\npath_conjunction = (((~((LessThan(len, 0)))) & (~((StrictGreaterThan(bpos, 0))))) & (~(coder_process)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 100,
    "throwingLine": 103,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64OutputStream.java"
  },
  {
    "qualifiedSignature": "android.util.JsonWriter.name(java.lang.String)",
    "exception": "throw new NullPointerException(\"name == null\");",
    "pathCojunction": "(name == null)",
    "symbolicPathConjunction": "(name == null)",
    "backwardsPathConjunction": "(name == null)",
    "simplifiedPathConjunction": "name == null",
    "z3Inputs": "[name0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\nname0_isNull = Bool('name0_isNull')\n\nconstraints = [\n  name0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nname = Symbol('name')\nnull = Symbol('null')\npath_conjunction = (Eq(name, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 284,
    "throwingLine": 286,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/JsonWriter.java"
  },
  {
    "qualifiedSignature": "android.util.JsonWriter.value(double)",
    "exception": "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
    "pathCojunction": "(!lenient && (Double.isNaN(value) || Double.isInfinite(value)))",
    "symbolicPathConjunction": "(!lenient && (Double.isNaN(value) || Double.isInfinite(value)))",
    "backwardsPathConjunction": "(!lenient && (Double.isNaN(value) || Double.isInfinite(value)))",
    "simplifiedPathConjunction": "!lenient && (Double.isInfinite(value) || Double.isNaN(value))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = Real('value0')\nlenient0 = Bool('lenient0')\n\nconstraints = [\n  And(Not(lenient0), Or(Double.isNaN(value0), Double.isInfinite(value0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value', integer=True)\nlenient = Symbol('lenient')\nDouble_isNaN = Symbol('Double_isNaN')\nDouble_isInfinite = Symbol('Double_isInfinite')\npath_conjunction = ((~(lenient)) & (Double_isNaN | Double_isInfinite))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 337,
    "throwingLine": 339,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/JsonWriter.java"
  },
  {
    "qualifiedSignature": "android.util.JsonWriter.value(java.lang.Number)",
    "exception": "throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
    "pathCojunction": "(!(value == null)) && (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")))",
    "symbolicPathConjunction": "(!(value == null)) && (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")))",
    "backwardsPathConjunction": "(!(value == null)) && (!lenient && (value.toString().equals(\"-Infinity\") || value.toString().equals(\"Infinity\") || value.toString().equals(\"NaN\")))",
    "simplifiedPathConjunction": "value.toString()_equals && !lenient && null != value",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nlenient0 = Bool('lenient0')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  string0 == value0.toString(),\n  And(Not(value0_isNull), And(Not(lenient0), Or(Or(string0 == \"-Infinity\", string0 == \"Infinity\"), string0 == \"NaN\")))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nlenient = Symbol('lenient')\nvalue_toString_equals = Symbol('value_toString_equals')\nvalue_toString = Symbol('value_toString')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(value, null)))) & ((~(lenient)) & ((value_toString_equals | value_toString_equals) | value_toString_equals)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 364,
    "throwingLine": 372,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/JsonWriter.java"
  }
]