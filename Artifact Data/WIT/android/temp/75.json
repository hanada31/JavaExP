[
  {
    "qualifiedSignature": "android.net.NetworkAgent.sendNetworkScore(int)",
    "exception": "throw new IllegalArgumentException(\"Score must be >= 0\");",
    "pathCojunction": "(score < 0)",
    "symbolicPathConjunction": "(score < 0)",
    "backwardsPathConjunction": "(score < 0)",
    "simplifiedPathConjunction": "score < 0",
    "z3Inputs": "[score0 = -1]\n[score0 = -2]\n[score0 = -3]\n[score0 = -4]\n[score0 = -5]\n[score0 = -6]\n[score0 = -7]\n[score0 = -8]\n[score0 = -9]\n[score0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nscore0 = Int('score0')\n\nconstraints = [\n  score0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nscore = Symbol('score', integer=True)\npath_conjunction = (StrictLessThan(score, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 418,
    "throwingLine": 420,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkAgent.java"
  },
  {
    "qualifiedSignature": "android.net.VpnService.Builder.setMtu(int)",
    "exception": "throw new IllegalArgumentException(\"Bad mtu\");",
    "pathCojunction": "(mtu <= 0)",
    "symbolicPathConjunction": "(mtu <= 0)",
    "backwardsPathConjunction": "(mtu <= 0)",
    "simplifiedPathConjunction": "mtu <= 0",
    "z3Inputs": "[mtu0 = 0]\n[mtu0 = -1]\n[mtu0 = -2]\n[mtu0 = -3]\n[mtu0 = -4]\n[mtu0 = -5]\n[mtu0 = -6]\n[mtu0 = -7]\n[mtu0 = -8]\n[mtu0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmtu0 = Int('mtu0')\n\nconstraints = [\n  mtu0 <= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmtu = Symbol('mtu', integer=True)\npath_conjunction = (LessThan(mtu, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 522,
    "throwingLine": 524,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/VpnService.java"
  },
  {
    "qualifiedSignature": "android.net.VpnService.Builder.addAddress(java.net.InetAddress, int)",
    "exception": "throw new IllegalArgumentException(\"Bad address\");",
    "pathCojunction": "(address.isAnyLocalAddress())",
    "symbolicPathConjunction": "(address.isAnyLocalAddress())",
    "backwardsPathConjunction": "(address.isAnyLocalAddress())",
    "simplifiedPathConjunction": "address.isAnyLocalAddress()",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nprefixLength0 = Int('prefixLength0')\n\nconstraints = [\n  address0.isAnyLocalAddress()\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\naddress = Symbol('address')\naddress_isAnyLocalAddress = Symbol('address_isAnyLocalAddress')\npath_conjunction = address_isAnyLocalAddress\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 551,
    "throwingLine": 555,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/VpnService.java"
  },
  {
    "qualifiedSignature": "android.net.VpnService.Builder.addDnsServer(java.net.InetAddress)",
    "exception": "throw new IllegalArgumentException(\"Bad address\");",
    "pathCojunction": "(address.isLoopbackAddress() || address.isAnyLocalAddress())",
    "symbolicPathConjunction": "(address.isLoopbackAddress() || address.isAnyLocalAddress())",
    "backwardsPathConjunction": "(address.isLoopbackAddress() || address.isAnyLocalAddress())",
    "simplifiedPathConjunction": "address.isAnyLocalAddress() || address.isLoopbackAddress()",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Or(address0.isLoopbackAddress(), address0.isAnyLocalAddress())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\naddress = Symbol('address')\naddress_isLoopbackAddress = Symbol('address_isLoopbackAddress')\naddress_isAnyLocalAddress = Symbol('address_isAnyLocalAddress')\npath_conjunction = (address_isLoopbackAddress | address_isAnyLocalAddress)\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 632,
    "throwingLine": 634,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/VpnService.java"
  },
  {
    "qualifiedSignature": "android.net.VpnService.Builder.allowFamily(int)",
    "exception": "throw new IllegalArgumentException(family + \" is neither \" + AF_INET + \" nor \" + AF_INET6);",
    "pathCojunction": "(!(family == AF_INET)) && (!(family == AF_INET6))",
    "symbolicPathConjunction": "(!(family == AF_INET)) && (!(family == AF_INET6))",
    "backwardsPathConjunction": "(!(family == AF_INET)) && (!(family == AF_INET6))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfamily0 = Int('family0')\n\nconstraints = [\n  And(Not(family0 == AF_INET), Not(family0 == AF_INET6))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfamily = Symbol('family', integer=True)\npath_conjunction = ((~((Eq(family, AF_INET)))) & (~((Eq(family, AF_INET6)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 690,
    "throwingLine": 696,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/VpnService.java"
  },
  {
    "qualifiedSignature": "android.net.shared.Inet4AddressUtils.prefixLengthToV4NetmaskIntHTH(int)",
    "exception": "throw new IllegalArgumentException(\"Invalid prefix length (0 <= prefix <= 32)\");",
    "pathCojunction": "(prefixLength < 0 || prefixLength > 32)",
    "symbolicPathConjunction": "(prefixLength < 0 || prefixLength > 32)",
    "backwardsPathConjunction": "(prefixLength < 0 || prefixLength > 32)",
    "simplifiedPathConjunction": "prefixLength > 32 || prefixLength < 0",
    "z3Inputs": "[prefixLength0 = 33]\n[prefixLength0 = -1]\n[prefixLength0 = -2]\n[prefixLength0 = -3]\n[prefixLength0 = -4]\n[prefixLength0 = -5]\n[prefixLength0 = -6]\n[prefixLength0 = -7]\n[prefixLength0 = -8]\n[prefixLength0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nprefixLength0 = Int('prefixLength0')\n\nconstraints = [\n  Or(prefixLength0 < 0, prefixLength0 > 32)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nprefixLength = Symbol('prefixLength', integer=True)\npath_conjunction = ((StrictLessThan(prefixLength, 0)) | (StrictGreaterThan(prefixLength, 32)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 91,
    "throwingLine": 93,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/shared/Inet4AddressUtils.java"
  },
  {
    "qualifiedSignature": "android.net.shared.Inet4AddressUtils.netmaskToPrefixLength(java.net.Inet4Address)",
    "exception": "throw new IllegalArgumentException(\"Non-contiguous netmask: \" + Integer.toHexString(i));",
    "pathCojunction": "(trailingZeros != 32 - prefixLength)",
    "symbolicPathConjunction": "(inet4AddressToIntHTH(netmask)) && (trailingZeros != 32 - prefixLength)",
    "backwardsPathConjunction": "(Integer.numberOfTrailingZeros(((inetAddr.getAddress()[0] & 0xff) << 24) | ((inetAddr.getAddress()[1] & 0xff) << 16) | ((inetAddr.getAddress()[2] & 0xff) << 8) | (inetAddr.getAddress()[3] & 0xff)) != 32 - Integer.bitCount(((inetAddr.getAddress()[0] & 0xff) << 24) | ((inetAddr.getAddress()[1] & 0xff) << 16) | ((inetAddr.getAddress()[2] & 0xff) << 8) | (inetAddr.getAddress()[3] & 0xff)))",
    "simplifiedPathConjunction": "Integer.bitCount(((inetAddr.getAddress()[0] & 0xff) << 24) | ((inetAddr.getAddress()[1] & 0xff) << 16) | ((inetAddr.getAddress()[2] & 0xff) << 8) | (inetAddr.getAddress()[3] & 0xff)) + Integer.numberOfTrailingZeros(((inetAddr.getAddress()[0] & 0xff) << 24) | ((inetAddr.getAddress()[1] & 0xff) << 16) | ((inetAddr.getAddress()[2] & 0xff) << 8) | (inetAddr.getAddress()[3] & 0xff)) != 32",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\nprefixLength0 = Int('prefixLength0')\ntrailingZeros0 = Int('trailingZeros0')\n\nconstraints = [\n  i0 == ((inetAddr0.getAddress()[0] & 0xff) << 24) | ((inetAddr0.getAddress()[1] & 0xff) << 16) | ((inetAddr0.getAddress()[2] & 0xff) << 8) | (inetAddr0.getAddress()[3] & 0xff),\n  prefixLength0 == Integer.bitCount(i0),\n  trailingZeros0 == Integer.numberOfTrailingZeros(i0),\n  trailingZeros0 != 32 - prefixLength0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninetAddr = Symbol('inetAddr')\nInteger_numberOfTrailingZeros = Symbol('Integer_numberOfTrailingZeros')\ninetAddr_getAddress = Symbol('inetAddr_getAddress')\nInteger_bitCount = Symbol('Integer_bitCount')\npath_conjunction = (Ne(Integer_numberOfTrailingZeros, (32 - Integer_bitCount)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 118,
    "throwingLine": 124,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/shared/Inet4AddressUtils.java"
  },
  {
    "qualifiedSignature": "android.net.shared.Inet4AddressUtils.getBroadcastAddress(java.net.Inet4Address, int)",
    "exception": "throw new IllegalArgumentException(\"Invalid prefix length (0 <= prefix <= 32)\");",
    "pathCojunction": "(prefixLength < 0 || prefixLength > 32)",
    "symbolicPathConjunction": "(inet4AddressToIntHTH(addr)) && (prefixLengthToV4NetmaskIntHTH(prefixLength))",
    "backwardsPathConjunction": "(prefixLength < 0 || prefixLength > 32)",
    "simplifiedPathConjunction": "prefixLength > 32 || prefixLength < 0",
    "z3Inputs": "[prefixLength0 = 33]\n[prefixLength0 = -1]\n[prefixLength0 = -2]\n[prefixLength0 = -3]\n[prefixLength0 = -4]\n[prefixLength0 = -5]\n[prefixLength0 = -6]\n[prefixLength0 = -7]\n[prefixLength0 = -8]\n[prefixLength0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nprefixLength0 = Int('prefixLength0')\n\nconstraints = [\n  Or(prefixLength0 < 0, prefixLength0 > 32)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nprefixLength = Symbol('prefixLength', integer=True)\npath_conjunction = ((StrictLessThan(prefixLength, 0)) | (StrictGreaterThan(prefixLength, 32)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 151,
    "throwingLine": 152,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/shared/Inet4AddressUtils.java"
  }
]