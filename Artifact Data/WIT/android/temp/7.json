[
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertiseSettings.Builder.setAdvertiseMode(int)",
    "exception": "throw new IllegalArgumentException(\"unknown mode \" + advertiseMode);",
    "pathCojunction": "(advertiseMode < ADVERTISE_MODE_LOW_POWER || advertiseMode > ADVERTISE_MODE_LOW_LATENCY)",
    "symbolicPathConjunction": "(advertiseMode < ADVERTISE_MODE_LOW_POWER || advertiseMode > ADVERTISE_MODE_LOW_LATENCY)",
    "backwardsPathConjunction": "(advertiseMode < ADVERTISE_MODE_LOW_POWER || advertiseMode > ADVERTISE_MODE_LOW_LATENCY)",
    "simplifiedPathConjunction": "advertiseMode > 2 || advertiseMode < 0",
    "z3Inputs": "[advertiseMode0 = 3,\n ADVERTISE_MODE_LOW_LATENCY0 = 2,\n ADVERTISE_MODE_LOW_POWER0 = 0]\n[advertiseMode0 = -1,\n ADVERTISE_MODE_LOW_POWER0 = 0,\n ADVERTISE_MODE_LOW_LATENCY0 = 2]\n[advertiseMode0 = -2,\n ADVERTISE_MODE_LOW_POWER0 = 0,\n ADVERTISE_MODE_LOW_LATENCY0 = 2]\n[advertiseMode0 = -3,\n ADVERTISE_MODE_LOW_POWER0 = 0,\n ADVERTISE_MODE_LOW_LATENCY0 = 2]\n[advertiseMode0 = -4,\n ADVERTISE_MODE_LOW_POWER0 = 0,\n ADVERTISE_MODE_LOW_LATENCY0 = 2]\n[advertiseMode0 = -5,\n ADVERTISE_MODE_LOW_POWER0 = 0,\n ADVERTISE_MODE_LOW_LATENCY0 = 2]\n[advertiseMode0 = -6,\n ADVERTISE_MODE_LOW_POWER0 = 0,\n ADVERTISE_MODE_LOW_LATENCY0 = 2]\n[advertiseMode0 = -7,\n ADVERTISE_MODE_LOW_POWER0 = 0,\n ADVERTISE_MODE_LOW_LATENCY0 = 2]\n[advertiseMode0 = -8,\n ADVERTISE_MODE_LOW_POWER0 = 0,\n ADVERTISE_MODE_LOW_LATENCY0 = 2]\n[advertiseMode0 = -9,\n ADVERTISE_MODE_LOW_POWER0 = 0,\n ADVERTISE_MODE_LOW_LATENCY0 = 2]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nadvertiseMode0 = Int('advertiseMode0')\nADVERTISE_MODE_LOW_POWER0 = Int('ADVERTISE_MODE_LOW_POWER0')\nADVERTISE_MODE_LOW_LATENCY0 = Int('ADVERTISE_MODE_LOW_LATENCY0')\n\nconstraints = [\n  ADVERTISE_MODE_LOW_POWER0 == 0,\n  ADVERTISE_MODE_LOW_LATENCY0 == 2,\n  Or(advertiseMode0 < ADVERTISE_MODE_LOW_POWER0, advertiseMode0 > ADVERTISE_MODE_LOW_LATENCY0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nadvertiseMode = Symbol('advertiseMode', integer=True)\npath_conjunction = ((StrictLessThan(advertiseMode, 0)) | (StrictGreaterThan(advertiseMode, 2)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 173,
    "throwingLine": 176,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertiseSettings.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertiseSettings.Builder.setTxPowerLevel(int)",
    "exception": "throw new IllegalArgumentException(\"unknown tx power level \" + txPowerLevel);",
    "pathCojunction": "(txPowerLevel < ADVERTISE_TX_POWER_ULTRA_LOW || txPowerLevel > ADVERTISE_TX_POWER_HIGH)",
    "symbolicPathConjunction": "(txPowerLevel < ADVERTISE_TX_POWER_ULTRA_LOW || txPowerLevel > ADVERTISE_TX_POWER_HIGH)",
    "backwardsPathConjunction": "(txPowerLevel < ADVERTISE_TX_POWER_ULTRA_LOW || txPowerLevel > ADVERTISE_TX_POWER_HIGH)",
    "simplifiedPathConjunction": "txPowerLevel > 3 || txPowerLevel < 0",
    "z3Inputs": "[txPowerLevel0 = 4,\n ADVERTISE_TX_POWER_HIGH0 = 3,\n ADVERTISE_TX_POWER_ULTRA_LOW0 = 0]\n[ADVERTISE_TX_POWER_ULTRA_LOW0 = 0,\n ADVERTISE_TX_POWER_HIGH0 = 3,\n txPowerLevel0 = -1]\n[ADVERTISE_TX_POWER_ULTRA_LOW0 = 0,\n ADVERTISE_TX_POWER_HIGH0 = 3,\n txPowerLevel0 = -2]\n[ADVERTISE_TX_POWER_ULTRA_LOW0 = 0,\n ADVERTISE_TX_POWER_HIGH0 = 3,\n txPowerLevel0 = -3]\n[ADVERTISE_TX_POWER_ULTRA_LOW0 = 0,\n ADVERTISE_TX_POWER_HIGH0 = 3,\n txPowerLevel0 = -4]\n[ADVERTISE_TX_POWER_ULTRA_LOW0 = 0,\n ADVERTISE_TX_POWER_HIGH0 = 3,\n txPowerLevel0 = -5]\n[ADVERTISE_TX_POWER_ULTRA_LOW0 = 0,\n ADVERTISE_TX_POWER_HIGH0 = 3,\n txPowerLevel0 = -6]\n[ADVERTISE_TX_POWER_ULTRA_LOW0 = 0,\n ADVERTISE_TX_POWER_HIGH0 = 3,\n txPowerLevel0 = -7]\n[ADVERTISE_TX_POWER_ULTRA_LOW0 = 0,\n ADVERTISE_TX_POWER_HIGH0 = 3,\n txPowerLevel0 = -8]\n[ADVERTISE_TX_POWER_ULTRA_LOW0 = 0,\n ADVERTISE_TX_POWER_HIGH0 = 3,\n txPowerLevel0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntxPowerLevel0 = Int('txPowerLevel0')\nADVERTISE_TX_POWER_ULTRA_LOW0 = Int('ADVERTISE_TX_POWER_ULTRA_LOW0')\nADVERTISE_TX_POWER_HIGH0 = Int('ADVERTISE_TX_POWER_HIGH0')\n\nconstraints = [\n  ADVERTISE_TX_POWER_ULTRA_LOW0 == 0,\n  ADVERTISE_TX_POWER_HIGH0 == 3,\n  Or(txPowerLevel0 < ADVERTISE_TX_POWER_ULTRA_LOW0, txPowerLevel0 > ADVERTISE_TX_POWER_HIGH0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntxPowerLevel = Symbol('txPowerLevel', integer=True)\npath_conjunction = ((StrictLessThan(txPowerLevel, 0)) | (StrictGreaterThan(txPowerLevel, 3)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 192,
    "throwingLine": 195,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertiseSettings.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.AdvertiseSettings.Builder.setTimeout(int)",
    "exception": "throw new IllegalArgumentException(\"timeoutMillis invalid (must be 0-\" + LIMITED_ADVERTISING_MAX_MILLIS + \" milliseconds)\");",
    "pathCojunction": "(timeoutMillis < 0 || timeoutMillis > LIMITED_ADVERTISING_MAX_MILLIS)",
    "symbolicPathConjunction": "(timeoutMillis < 0 || timeoutMillis > LIMITED_ADVERTISING_MAX_MILLIS)",
    "backwardsPathConjunction": "(timeoutMillis < 0 || timeoutMillis > LIMITED_ADVERTISING_MAX_MILLIS)",
    "simplifiedPathConjunction": "timeoutMillis > 180000 || timeoutMillis < 0",
    "z3Inputs": "[timeoutMillis0 = 180001,\n LIMITED_ADVERTISING_MAX_MILLIS0 = 180000]\n[LIMITED_ADVERTISING_MAX_MILLIS0 = 180000,\n timeoutMillis0 = 180002]\n[LIMITED_ADVERTISING_MAX_MILLIS0 = 180000,\n timeoutMillis0 = 180003]\n[LIMITED_ADVERTISING_MAX_MILLIS0 = 180000,\n timeoutMillis0 = 180004]\n[LIMITED_ADVERTISING_MAX_MILLIS0 = 180000,\n timeoutMillis0 = 180005]\n[LIMITED_ADVERTISING_MAX_MILLIS0 = 180000,\n timeoutMillis0 = 180006]\n[LIMITED_ADVERTISING_MAX_MILLIS0 = 180000,\n timeoutMillis0 = 180007]\n[LIMITED_ADVERTISING_MAX_MILLIS0 = 180000,\n timeoutMillis0 = 180008]\n[LIMITED_ADVERTISING_MAX_MILLIS0 = 180000,\n timeoutMillis0 = 180009]\n[LIMITED_ADVERTISING_MAX_MILLIS0 = 180000,\n timeoutMillis0 = 180010]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeoutMillis0 = Int('timeoutMillis0')\nLIMITED_ADVERTISING_MAX_MILLIS0 = Int('LIMITED_ADVERTISING_MAX_MILLIS0')\n\nconstraints = [\n  LIMITED_ADVERTISING_MAX_MILLIS0 == 180 * 1000,\n  Or(timeoutMillis0 < 0, timeoutMillis0 > LIMITED_ADVERTISING_MAX_MILLIS0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntimeoutMillis = Symbol('timeoutMillis', integer=True)\npath_conjunction = ((StrictLessThan(timeoutMillis, 0)) | (StrictGreaterThan(timeoutMillis, (180 * 1000))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 219,
    "throwingLine": 221,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/AdvertiseSettings.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanSettings.Builder.setScanMode(int)",
    "exception": "throw new IllegalArgumentException(\"invalid scan mode \" + scanMode);",
    "pathCojunction": "(scanMode < SCAN_MODE_OPPORTUNISTIC || scanMode > SCAN_MODE_LOW_LATENCY)",
    "symbolicPathConjunction": "(scanMode < SCAN_MODE_OPPORTUNISTIC || scanMode > SCAN_MODE_LOW_LATENCY)",
    "backwardsPathConjunction": "(scanMode < SCAN_MODE_OPPORTUNISTIC || scanMode > SCAN_MODE_LOW_LATENCY)",
    "simplifiedPathConjunction": "scanMode > 2 || scanMode < -1",
    "z3Inputs": "[scanMode0 = 3,\n SCAN_MODE_LOW_LATENCY0 = 2,\n SCAN_MODE_OPPORTUNISTIC0 = -1]\n[SCAN_MODE_OPPORTUNISTIC0 = -1,\n scanMode0 = -2,\n SCAN_MODE_LOW_LATENCY0 = 2]\n[SCAN_MODE_OPPORTUNISTIC0 = -1,\n scanMode0 = -3,\n SCAN_MODE_LOW_LATENCY0 = 2]\n[SCAN_MODE_OPPORTUNISTIC0 = -1,\n scanMode0 = -4,\n SCAN_MODE_LOW_LATENCY0 = 2]\n[SCAN_MODE_OPPORTUNISTIC0 = -1,\n scanMode0 = -5,\n SCAN_MODE_LOW_LATENCY0 = 2]\n[SCAN_MODE_OPPORTUNISTIC0 = -1,\n scanMode0 = -6,\n SCAN_MODE_LOW_LATENCY0 = 2]\n[SCAN_MODE_OPPORTUNISTIC0 = -1,\n scanMode0 = -7,\n SCAN_MODE_LOW_LATENCY0 = 2]\n[SCAN_MODE_OPPORTUNISTIC0 = -1,\n scanMode0 = -8,\n SCAN_MODE_LOW_LATENCY0 = 2]\n[SCAN_MODE_OPPORTUNISTIC0 = -1,\n scanMode0 = -9,\n SCAN_MODE_LOW_LATENCY0 = 2]\n[SCAN_MODE_OPPORTUNISTIC0 = -1,\n scanMode0 = -10,\n SCAN_MODE_LOW_LATENCY0 = 2]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nscanMode0 = Int('scanMode0')\nSCAN_MODE_OPPORTUNISTIC0 = Int('SCAN_MODE_OPPORTUNISTIC0')\nSCAN_MODE_LOW_LATENCY0 = Int('SCAN_MODE_LOW_LATENCY0')\n\nconstraints = [\n  SCAN_MODE_OPPORTUNISTIC0 == -1,\n  SCAN_MODE_LOW_LATENCY0 == 2,\n  Or(scanMode0 < SCAN_MODE_OPPORTUNISTIC0, scanMode0 > SCAN_MODE_LOW_LATENCY0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nscanMode = Symbol('scanMode', integer=True)\npath_conjunction = ((StrictLessThan(scanMode, -1)) | (StrictGreaterThan(scanMode, 2)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 278,
    "throwingLine": 280,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanSettings.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanSettings.Builder.setCallbackType(int)",
    "exception": "throw new IllegalArgumentException(\"invalid callback type - \" + callbackType);",
    "pathCojunction": "(!(callbackType == 1 || callbackType == 2 || callbackType == 4)) && (!(callbackType == (2 | 4)))",
    "symbolicPathConjunction": "(!(!(callbackType == 1 || callbackType == 2 || callbackType == 4))) && (!(callbackType == (2 | 4)))",
    "backwardsPathConjunction": "(!(callbackType == 1 || callbackType == 2 || callbackType == 4)) && (!(callbackType == (2 | 4)))",
    "simplifiedPathConjunction": "callbackType != 1 && callbackType != 2 && callbackType != 4 && callbackType != 6",
    "z3Inputs": "[callbackType0 = 0]\n[callbackType0 = 3]\n[callbackType0 = 5]\n[callbackType0 = 7]\n[callbackType0 = 8]\n[callbackType0 = 9]\n[callbackType0 = 10]\n[callbackType0 = 11]\n[callbackType0 = 12]\n[callbackType0 = 13]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallbackType0 = Int('callbackType0')\n\nconstraints = [\n  And(Not(Or(Or(callbackType0 == 1, callbackType0 == 2), callbackType0 == 4)), Not(callbackType0 == 2 | 4))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncallbackType = Symbol('callbackType', integer=True)\npath_conjunction = ((~((((Eq(callbackType, 1)) | (Eq(callbackType, 2))) | (Eq(callbackType, 4))))) & (~((Eq(callbackType, (2 | 4))))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 292,
    "throwingLine": 295,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanSettings.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanSettings.Builder.setScanResultType(int)",
    "exception": "throw new IllegalArgumentException(\"invalid scanResultType - \" + scanResultType);",
    "pathCojunction": "(scanResultType < SCAN_RESULT_TYPE_FULL || scanResultType > SCAN_RESULT_TYPE_ABBREVIATED)",
    "symbolicPathConjunction": "(scanResultType < SCAN_RESULT_TYPE_FULL || scanResultType > SCAN_RESULT_TYPE_ABBREVIATED)",
    "backwardsPathConjunction": "(scanResultType < SCAN_RESULT_TYPE_FULL || scanResultType > SCAN_RESULT_TYPE_ABBREVIATED)",
    "simplifiedPathConjunction": "scanResultType > 1 || scanResultType < 0",
    "z3Inputs": "[scanResultType0 = 2,\n SCAN_RESULT_TYPE_ABBREVIATED0 = 1,\n SCAN_RESULT_TYPE_FULL0 = 0]\n[SCAN_RESULT_TYPE_FULL0 = 0,\n scanResultType0 = -1,\n SCAN_RESULT_TYPE_ABBREVIATED0 = 1]\n[SCAN_RESULT_TYPE_FULL0 = 0,\n scanResultType0 = -2,\n SCAN_RESULT_TYPE_ABBREVIATED0 = 1]\n[SCAN_RESULT_TYPE_FULL0 = 0,\n scanResultType0 = -3,\n SCAN_RESULT_TYPE_ABBREVIATED0 = 1]\n[SCAN_RESULT_TYPE_FULL0 = 0,\n scanResultType0 = -4,\n SCAN_RESULT_TYPE_ABBREVIATED0 = 1]\n[SCAN_RESULT_TYPE_FULL0 = 0,\n scanResultType0 = -5,\n SCAN_RESULT_TYPE_ABBREVIATED0 = 1]\n[SCAN_RESULT_TYPE_FULL0 = 0,\n scanResultType0 = -6,\n SCAN_RESULT_TYPE_ABBREVIATED0 = 1]\n[SCAN_RESULT_TYPE_FULL0 = 0,\n scanResultType0 = -7,\n SCAN_RESULT_TYPE_ABBREVIATED0 = 1]\n[SCAN_RESULT_TYPE_FULL0 = 0,\n scanResultType0 = -8,\n SCAN_RESULT_TYPE_ABBREVIATED0 = 1]\n[SCAN_RESULT_TYPE_FULL0 = 0,\n scanResultType0 = -9,\n SCAN_RESULT_TYPE_ABBREVIATED0 = 1]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nscanResultType0 = Int('scanResultType0')\nSCAN_RESULT_TYPE_FULL0 = Int('SCAN_RESULT_TYPE_FULL0')\nSCAN_RESULT_TYPE_ABBREVIATED0 = Int('SCAN_RESULT_TYPE_ABBREVIATED0')\n\nconstraints = [\n  SCAN_RESULT_TYPE_FULL0 == 0,\n  SCAN_RESULT_TYPE_ABBREVIATED0 == 1,\n  Or(scanResultType0 < SCAN_RESULT_TYPE_FULL0, scanResultType0 > SCAN_RESULT_TYPE_ABBREVIATED0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nscanResultType = Symbol('scanResultType', integer=True)\npath_conjunction = ((StrictLessThan(scanResultType, 0)) | (StrictGreaterThan(scanResultType, 1)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 320,
    "throwingLine": 323,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanSettings.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanSettings.Builder.setReportDelay(long)",
    "exception": "throw new IllegalArgumentException(\"reportDelay must be > 0\");",
    "pathCojunction": "(reportDelayMillis < 0)",
    "symbolicPathConjunction": "(reportDelayMillis < 0)",
    "backwardsPathConjunction": "(reportDelayMillis < 0)",
    "simplifiedPathConjunction": "reportDelayMillis < 0",
    "z3Inputs": "[reportDelayMillis0 = -9223372036854775808]\n[reportDelayMillis0 = -1]\n[reportDelayMillis0 = -2]\n[reportDelayMillis0 = -3]\n[reportDelayMillis0 = -4]\n[reportDelayMillis0 = -5]\n[reportDelayMillis0 = -6]\n[reportDelayMillis0 = -7]\n[reportDelayMillis0 = -8]\n[reportDelayMillis0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreportDelayMillis0 = Int('reportDelayMillis0')\n\nconstraints = [\n  reportDelayMillis0 >= -9223372036854775808, reportDelayMillis0 <= 9223372036854775807, # implicit\n  reportDelayMillis0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreportDelayMillis = Symbol('reportDelayMillis')\npath_conjunction = (StrictLessThan(reportDelayMillis, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 338,
    "throwingLine": 340,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanSettings.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanSettings.Builder.setNumOfMatches(int)",
    "exception": "throw new IllegalArgumentException(\"invalid numOfMatches \" + numOfMatches);",
    "pathCojunction": "(numOfMatches < MATCH_NUM_ONE_ADVERTISEMENT || numOfMatches > MATCH_NUM_MAX_ADVERTISEMENT)",
    "symbolicPathConjunction": "(numOfMatches < MATCH_NUM_ONE_ADVERTISEMENT || numOfMatches > MATCH_NUM_MAX_ADVERTISEMENT)",
    "backwardsPathConjunction": "(numOfMatches < MATCH_NUM_ONE_ADVERTISEMENT || numOfMatches > MATCH_NUM_MAX_ADVERTISEMENT)",
    "simplifiedPathConjunction": "numOfMatches > 3 || numOfMatches < 1",
    "z3Inputs": "[numOfMatches0 = 4,\n MATCH_NUM_MAX_ADVERTISEMENT0 = 3,\n MATCH_NUM_ONE_ADVERTISEMENT0 = 1]\n[numOfMatches0 = 0,\n MATCH_NUM_ONE_ADVERTISEMENT0 = 1,\n MATCH_NUM_MAX_ADVERTISEMENT0 = 3]\n[numOfMatches0 = -1,\n MATCH_NUM_ONE_ADVERTISEMENT0 = 1,\n MATCH_NUM_MAX_ADVERTISEMENT0 = 3]\n[numOfMatches0 = -2,\n MATCH_NUM_ONE_ADVERTISEMENT0 = 1,\n MATCH_NUM_MAX_ADVERTISEMENT0 = 3]\n[numOfMatches0 = -3,\n MATCH_NUM_ONE_ADVERTISEMENT0 = 1,\n MATCH_NUM_MAX_ADVERTISEMENT0 = 3]\n[numOfMatches0 = -4,\n MATCH_NUM_ONE_ADVERTISEMENT0 = 1,\n MATCH_NUM_MAX_ADVERTISEMENT0 = 3]\n[numOfMatches0 = -5,\n MATCH_NUM_ONE_ADVERTISEMENT0 = 1,\n MATCH_NUM_MAX_ADVERTISEMENT0 = 3]\n[numOfMatches0 = -6,\n MATCH_NUM_ONE_ADVERTISEMENT0 = 1,\n MATCH_NUM_MAX_ADVERTISEMENT0 = 3]\n[numOfMatches0 = -7,\n MATCH_NUM_ONE_ADVERTISEMENT0 = 1,\n MATCH_NUM_MAX_ADVERTISEMENT0 = 3]\n[numOfMatches0 = -8,\n MATCH_NUM_ONE_ADVERTISEMENT0 = 1,\n MATCH_NUM_MAX_ADVERTISEMENT0 = 3]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumOfMatches0 = Int('numOfMatches0')\nMATCH_NUM_ONE_ADVERTISEMENT0 = Int('MATCH_NUM_ONE_ADVERTISEMENT0')\nMATCH_NUM_MAX_ADVERTISEMENT0 = Int('MATCH_NUM_MAX_ADVERTISEMENT0')\n\nconstraints = [\n  MATCH_NUM_ONE_ADVERTISEMENT0 == 1,\n  MATCH_NUM_MAX_ADVERTISEMENT0 == 3,\n  Or(numOfMatches0 < MATCH_NUM_ONE_ADVERTISEMENT0, numOfMatches0 > MATCH_NUM_MAX_ADVERTISEMENT0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnumOfMatches = Symbol('numOfMatches', integer=True)\npath_conjunction = ((StrictLessThan(numOfMatches, 1)) | (StrictGreaterThan(numOfMatches, 3)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 355,
    "throwingLine": 358,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanSettings.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanSettings.Builder.setMatchMode(int)",
    "exception": "throw new IllegalArgumentException(\"invalid matchMode \" + matchMode);",
    "pathCojunction": "(matchMode < MATCH_MODE_AGGRESSIVE || matchMode > MATCH_MODE_STICKY)",
    "symbolicPathConjunction": "(matchMode < MATCH_MODE_AGGRESSIVE || matchMode > MATCH_MODE_STICKY)",
    "backwardsPathConjunction": "(matchMode < MATCH_MODE_AGGRESSIVE || matchMode > MATCH_MODE_STICKY)",
    "simplifiedPathConjunction": "matchMode > 2 || matchMode < 1",
    "z3Inputs": "[matchMode0 = 3,\n MATCH_MODE_AGGRESSIVE0 = 1,\n MATCH_MODE_STICKY0 = 2]\n[matchMode0 = 0,\n MATCH_MODE_STICKY0 = 2,\n MATCH_MODE_AGGRESSIVE0 = 1]\n[matchMode0 = -1,\n MATCH_MODE_STICKY0 = 2,\n MATCH_MODE_AGGRESSIVE0 = 1]\n[matchMode0 = -2,\n MATCH_MODE_STICKY0 = 2,\n MATCH_MODE_AGGRESSIVE0 = 1]\n[matchMode0 = -3,\n MATCH_MODE_STICKY0 = 2,\n MATCH_MODE_AGGRESSIVE0 = 1]\n[matchMode0 = -4,\n MATCH_MODE_STICKY0 = 2,\n MATCH_MODE_AGGRESSIVE0 = 1]\n[matchMode0 = -5,\n MATCH_MODE_STICKY0 = 2,\n MATCH_MODE_AGGRESSIVE0 = 1]\n[matchMode0 = -6,\n MATCH_MODE_STICKY0 = 2,\n MATCH_MODE_AGGRESSIVE0 = 1]\n[matchMode0 = -7,\n MATCH_MODE_STICKY0 = 2,\n MATCH_MODE_AGGRESSIVE0 = 1]\n[matchMode0 = -8,\n MATCH_MODE_STICKY0 = 2,\n MATCH_MODE_AGGRESSIVE0 = 1]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmatchMode0 = Int('matchMode0')\nMATCH_MODE_AGGRESSIVE0 = Int('MATCH_MODE_AGGRESSIVE0')\nMATCH_MODE_STICKY0 = Int('MATCH_MODE_STICKY0')\n\nconstraints = [\n  MATCH_MODE_AGGRESSIVE0 == 1,\n  MATCH_MODE_STICKY0 == 2,\n  Or(matchMode0 < MATCH_MODE_AGGRESSIVE0, matchMode0 > MATCH_MODE_STICKY0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmatchMode = Symbol('matchMode', integer=True)\npath_conjunction = ((StrictLessThan(matchMode, 1)) | (StrictGreaterThan(matchMode, 2)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 371,
    "throwingLine": 374,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanSettings.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanFilter.Builder.setDeviceAddress(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"invalid device address \" + deviceAddress);",
    "pathCojunction": "(deviceAddress != null && !BluetoothAdapter.checkBluetoothAddress(deviceAddress))",
    "symbolicPathConjunction": "(deviceAddress != null && !BluetoothAdapter.checkBluetoothAddress(deviceAddress))",
    "backwardsPathConjunction": "(deviceAddress != null && !BluetoothAdapter.checkBluetoothAddress(deviceAddress))",
    "simplifiedPathConjunction": "!BluetoothAdapter.checkBluetoothAddress(deviceAddress) && deviceAddress != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndeviceAddress0 = String('deviceAddress0')\ndeviceAddress0_isNull = Bool('deviceAddress0_isNull')\n\nconstraints = [\n  And(Not(deviceAddress0_isNull), Not(BluetoothAdapter.checkBluetoothAddress(deviceAddress0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndeviceAddress = Symbol('deviceAddress')\nBluetoothAdapter_checkBluetoothAddress = Symbol('BluetoothAdapter_checkBluetoothAddress')\nnull = Symbol('null')\npath_conjunction = ((Ne(deviceAddress, null)) & (~(BluetoothAdapter_checkBluetoothAddress)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 552,
    "throwingLine": 554,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanFilter.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanFilter.Builder.setManufacturerData(int, byte[])",
    "exception": "throw new IllegalArgumentException(\"invalid manufacture id\");",
    "pathCojunction": "(manufacturerData != null && manufacturerId < 0)",
    "symbolicPathConjunction": "(manufacturerData != null && manufacturerId < 0)",
    "backwardsPathConjunction": "(manufacturerData != null && manufacturerId < 0)",
    "simplifiedPathConjunction": "manufacturerId < 0 && manufacturerData != null",
    "z3Inputs": "[manufacturerId0 = -1, manufacturerData0_isNull = False]\n[manufacturerData0_isNull = False, manufacturerId0 = -2]\n[manufacturerData0_isNull = False, manufacturerId0 = -3]\n[manufacturerData0_isNull = False, manufacturerId0 = -4]\n[manufacturerData0_isNull = False, manufacturerId0 = -5]\n[manufacturerData0_isNull = False, manufacturerId0 = -6]\n[manufacturerData0_isNull = False, manufacturerId0 = -7]\n[manufacturerData0_isNull = False, manufacturerId0 = -8]\n[manufacturerData0_isNull = False, manufacturerId0 = -9]\n[manufacturerData0_isNull = False, manufacturerId0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmanufacturerId0 = Int('manufacturerId0')\nmanufacturerData0_isNull = Bool('manufacturerData0_isNull')\n\nconstraints = [\n  And(Not(manufacturerData0_isNull), manufacturerId0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmanufacturerId = Symbol('manufacturerId', integer=True)\nmanufacturerData = Symbol('manufacturerData')\nnull = Symbol('null')\npath_conjunction = ((Ne(manufacturerData, null)) & (StrictLessThan(manufacturerId, 0)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 679,
    "throwingLine": 681,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanFilter.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanFilter.Builder.setManufacturerData(int, byte[], byte[])",
    "exception": "throw new IllegalArgumentException(\"size mismatch for manufacturerData and manufacturerDataMask\");",
    "pathCojunction": "(!(manufacturerData != null && manufacturerId < 0)) && (mManufacturerDataMask != null) && (!(mManufacturerData == null)) && (mManufacturerData.length != mManufacturerDataMask.length)",
    "symbolicPathConjunction": "(!(manufacturerData != null && manufacturerId < 0)) && (mManufacturerDataMask != null) && (!(mManufacturerData == null)) && (mManufacturerData.length != mManufacturerDataMask.length)",
    "backwardsPathConjunction": "(!(manufacturerData != null && manufacturerId < 0)) && (mManufacturerDataMask != null) && (!(mManufacturerData == null)) && (mManufacturerData.length != mManufacturerDataMask.length)",
    "simplifiedPathConjunction": "(manufacturerData == null || manufacturerId >= 0) && mManufacturerData != null && mManufacturerDataMask != null && mManufacturerDataMask.length != mManufacturerData.length",
    "z3Inputs": "[manufacturerData0_isNull = True,\n mManufacturerDataMask0_length = 1,\n mManufacturerData0_length = 0,\n manufacturerId0 = -1,\n mManufacturerData0_isNull = False,\n mManufacturerDataMask0_isNull = False]\n[manufacturerId0 = -2,\n mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = False,\n mManufacturerDataMask0_length = 2,\n manufacturerData0_isNull = True,\n mManufacturerData0_length = 1]\n[manufacturerId0 = -2,\n mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = False,\n mManufacturerDataMask0_length = 1,\n manufacturerData0_isNull = True,\n mManufacturerData0_length = 0]\n[manufacturerId0 = -3,\n mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = False,\n mManufacturerDataMask0_length = 1,\n manufacturerData0_isNull = True,\n mManufacturerData0_length = 0]\n[manufacturerId0 = -4,\n mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = False,\n mManufacturerDataMask0_length = 1,\n manufacturerData0_isNull = True,\n mManufacturerData0_length = 0]\n[manufacturerId0 = -5,\n mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = False,\n mManufacturerDataMask0_length = 1,\n manufacturerData0_isNull = True,\n mManufacturerData0_length = 0]\n[manufacturerId0 = -6,\n mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = False,\n mManufacturerDataMask0_length = 1,\n manufacturerData0_isNull = True,\n mManufacturerData0_length = 0]\n[manufacturerId0 = -7,\n mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = False,\n mManufacturerDataMask0_length = 1,\n manufacturerData0_isNull = True,\n mManufacturerData0_length = 0]\n[manufacturerId0 = -8,\n mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = False,\n mManufacturerDataMask0_length = 1,\n manufacturerData0_isNull = True,\n mManufacturerData0_length = 0]\n[manufacturerId0 = -9,\n mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = False,\n mManufacturerDataMask0_length = 1,\n manufacturerData0_isNull = True,\n mManufacturerData0_length = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmanufacturerId0 = Int('manufacturerId0')\nmanufacturerData0_isNull = Bool('manufacturerData0_isNull')\nmManufacturerDataMask0_isNull = Bool('mManufacturerDataMask0_isNull')\nmManufacturerData0_isNull = Bool('mManufacturerData0_isNull')\nmManufacturerData0_length = Int('mManufacturerData0_length')\nmManufacturerDataMask0_length = Int('mManufacturerDataMask0_length')\n\nconstraints = [\n  mManufacturerData0_length >= 0, # implicit\n  mManufacturerDataMask0_length >= 0, # implicit\n  And(And(And(Not(And(Not(manufacturerData0_isNull), manufacturerId0 < 0)), Not(mManufacturerDataMask0_isNull)), Not(mManufacturerData0_isNull)), mManufacturerData0_length != mManufacturerDataMask0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmanufacturerId = Symbol('manufacturerId', integer=True)\nmanufacturerData = Symbol('manufacturerData')\nmManufacturerDataMask = Symbol('mManufacturerDataMask')\nmManufacturerData = Symbol('mManufacturerData')\nmManufacturerData_length = Symbol('mManufacturerData_length', integer=True)\nmManufacturerDataMask_length = Symbol('mManufacturerDataMask_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((~(((Ne(manufacturerData, null)) & (StrictLessThan(manufacturerId, 0))))) & (Ne(mManufacturerDataMask, null))) & (~((Eq(mManufacturerData, null))))) & (Ne(mManufacturerData_length, mManufacturerDataMask_length)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 700,
    "throwingLine": 712,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanFilter.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanFilter.Builder.setManufacturerData(int, byte[], byte[])",
    "exception": "throw new IllegalArgumentException(\"invalid manufacture id\");",
    "pathCojunction": "(manufacturerData != null && manufacturerId < 0)",
    "symbolicPathConjunction": "(manufacturerData != null && manufacturerId < 0)",
    "backwardsPathConjunction": "(manufacturerData != null && manufacturerId < 0)",
    "simplifiedPathConjunction": "manufacturerId < 0 && manufacturerData != null",
    "z3Inputs": "[manufacturerId0 = -1, manufacturerData0_isNull = False]\n[manufacturerData0_isNull = False, manufacturerId0 = -2]\n[manufacturerData0_isNull = False, manufacturerId0 = -3]\n[manufacturerData0_isNull = False, manufacturerId0 = -4]\n[manufacturerData0_isNull = False, manufacturerId0 = -5]\n[manufacturerData0_isNull = False, manufacturerId0 = -6]\n[manufacturerData0_isNull = False, manufacturerId0 = -7]\n[manufacturerData0_isNull = False, manufacturerId0 = -8]\n[manufacturerData0_isNull = False, manufacturerId0 = -9]\n[manufacturerData0_isNull = False, manufacturerId0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmanufacturerId0 = Int('manufacturerId0')\nmanufacturerData0_isNull = Bool('manufacturerData0_isNull')\n\nconstraints = [\n  And(Not(manufacturerData0_isNull), manufacturerId0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmanufacturerId = Symbol('manufacturerId', integer=True)\nmanufacturerData = Symbol('manufacturerData')\nnull = Symbol('null')\npath_conjunction = ((Ne(manufacturerData, null)) & (StrictLessThan(manufacturerId, 0)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 700,
    "throwingLine": 702,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanFilter.java"
  },
  {
    "qualifiedSignature": "android.bluetooth.le.ScanFilter.Builder.setManufacturerData(int, byte[], byte[])",
    "exception": "throw new IllegalArgumentException(\"manufacturerData is null while manufacturerDataMask is not null\");",
    "pathCojunction": "(!(manufacturerData != null && manufacturerId < 0)) && (mManufacturerDataMask != null) && (mManufacturerData == null)",
    "symbolicPathConjunction": "(!(manufacturerData != null && manufacturerId < 0)) && (mManufacturerDataMask != null) && (mManufacturerData == null)",
    "backwardsPathConjunction": "(!(manufacturerData != null && manufacturerId < 0)) && (mManufacturerDataMask != null) && (mManufacturerData == null)",
    "simplifiedPathConjunction": "mManufacturerData == null && (manufacturerData == null || manufacturerId >= 0) && mManufacturerDataMask != null",
    "z3Inputs": "[manufacturerData0_isNull = True,\n manufacturerId0 = -1,\n mManufacturerData0_isNull = True,\n mManufacturerDataMask0_isNull = False]\n[mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = True,\n manufacturerData0_isNull = True,\n manufacturerId0 = -2]\n[mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = True,\n manufacturerData0_isNull = True,\n manufacturerId0 = -3]\n[mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = True,\n manufacturerData0_isNull = True,\n manufacturerId0 = -4]\n[mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = True,\n manufacturerData0_isNull = True,\n manufacturerId0 = -5]\n[mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = True,\n manufacturerData0_isNull = True,\n manufacturerId0 = -6]\n[mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = True,\n manufacturerData0_isNull = True,\n manufacturerId0 = -7]\n[mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = True,\n manufacturerData0_isNull = True,\n manufacturerId0 = -8]\n[mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = True,\n manufacturerData0_isNull = True,\n manufacturerId0 = -9]\n[mManufacturerDataMask0_isNull = False,\n mManufacturerData0_isNull = True,\n manufacturerData0_isNull = True,\n manufacturerId0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmanufacturerId0 = Int('manufacturerId0')\nmanufacturerData0_isNull = Bool('manufacturerData0_isNull')\nmManufacturerDataMask0_isNull = Bool('mManufacturerDataMask0_isNull')\nmManufacturerData0_isNull = Bool('mManufacturerData0_isNull')\n\nconstraints = [\n  And(And(Not(And(Not(manufacturerData0_isNull), manufacturerId0 < 0)), Not(mManufacturerDataMask0_isNull)), mManufacturerData0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmanufacturerId = Symbol('manufacturerId', integer=True)\nmanufacturerData = Symbol('manufacturerData')\nmManufacturerDataMask = Symbol('mManufacturerDataMask')\nmManufacturerData = Symbol('mManufacturerData')\nnull = Symbol('null')\npath_conjunction = (((~(((Ne(manufacturerData, null)) & (StrictLessThan(manufacturerId, 0))))) & (Ne(mManufacturerDataMask, null))) & (Eq(mManufacturerData, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 700,
    "throwingLine": 706,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/bluetooth/le/ScanFilter.java"
  }
]