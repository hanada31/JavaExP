[
  {
    "qualifiedSignature": "android.util.MapCollections.ArrayIterator.remove()",
    "exception": "throw new IllegalStateException();",
    "pathCojunction": "(!(mCanRemove))",
    "symbolicPathConjunction": "(!(mCanRemove))",
    "backwardsPathConjunction": "(!(mCanRemove))",
    "simplifiedPathConjunction": "!mCanRemove",
    "z3Inputs": "[mCanRemove0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmCanRemove0 = Bool('mCanRemove0')\n\nconstraints = [\n  Not(mCanRemove0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmCanRemove = Symbol('mCanRemove')\npath_conjunction = (~(mCanRemove))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 63,
    "throwingLine": 65,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.MapIterator.next()",
    "exception": "throw new NoSuchElementException();",
    "pathCojunction": "(!(mIndex < mEnd))",
    "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
    "backwardsPathConjunction": "(!(mIndex < mEnd))",
    "simplifiedPathConjunction": "mEnd <= mIndex",
    "z3Inputs": "[mEnd0 = 0, mIndex0 = 0]\n[mEnd0 = -1, mIndex0 = -1]\n[mEnd0 = -2, mIndex0 = -2]\n[mEnd0 = -3, mIndex0 = -3]\n[mEnd0 = -4, mIndex0 = -4]\n[mEnd0 = -5, mIndex0 = -5]\n[mEnd0 = -6, mIndex0 = -6]\n[mEnd0 = -7, mIndex0 = -7]\n[mEnd0 = -8, mIndex0 = -8]\n[mEnd0 = -9, mIndex0 = -9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmEnd0 = Int('mEnd0')\nmIndex0 = Int('mIndex0')\n\nconstraints = [\n  Not(mIndex0 < mEnd0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmEnd = Symbol('mEnd', integer=True)\nmIndex = Symbol('mIndex', integer=True)\npath_conjunction = (~((StrictLessThan(mIndex, mEnd))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 90,
    "throwingLine": 91,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.MapIterator.remove()",
    "exception": "throw new IllegalStateException();",
    "pathCojunction": "(!(mEntryValid))",
    "symbolicPathConjunction": "(!(mEntryValid))",
    "backwardsPathConjunction": "(!(mEntryValid))",
    "simplifiedPathConjunction": "!mEntryValid",
    "z3Inputs": "[mEntryValid0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmEntryValid0 = Bool('mEntryValid0')\n\nconstraints = [\n  Not(mEntryValid0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmEntryValid = Symbol('mEntryValid')\npath_conjunction = (~(mEntryValid))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 98,
    "throwingLine": 100,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.MapIterator.getValue()",
    "exception": "throw new IllegalStateException(\"This container does not support retaining Map.Entry objects\");",
    "pathCojunction": "(!(mEntryValid))",
    "symbolicPathConjunction": "(!(mEntryValid))",
    "backwardsPathConjunction": "(!(mEntryValid))",
    "simplifiedPathConjunction": "!mEntryValid",
    "z3Inputs": "[mEntryValid0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmEntryValid0 = Bool('mEntryValid0')\n\nconstraints = [\n  Not(mEntryValid0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmEntryValid = Symbol('mEntryValid')\npath_conjunction = (~(mEntryValid))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 118,
    "throwingLine": 120,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.MapIterator.equals(java.lang.Object)",
    "exception": "throw new IllegalStateException(\"This container does not support retaining Map.Entry objects\");",
    "pathCojunction": "(!(mEntryValid))",
    "symbolicPathConjunction": "(!(mEntryValid))",
    "backwardsPathConjunction": "(!(mEntryValid))",
    "simplifiedPathConjunction": "!mEntryValid",
    "z3Inputs": "[mEntryValid0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmEntryValid0 = Bool('mEntryValid0')\n\nconstraints = [\n  Not(mEntryValid0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmEntryValid = Symbol('mEntryValid')\npath_conjunction = (~(mEntryValid))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 136,
    "throwingLine": 138,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.MapIterator.toString()",
    "exception": "throw new IllegalStateException(\"This container does not support retaining Map.Entry objects\");",
    "pathCojunction": "(!(mEntryValid))",
    "symbolicPathConjunction": "(getValue())",
    "backwardsPathConjunction": "(!(mEntryValid))",
    "simplifiedPathConjunction": "!mEntryValid",
    "z3Inputs": "[mEntryValid0 = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmEntryValid0 = Bool('mEntryValid0')\n\nconstraints = [\n  Not(mEntryValid0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmEntryValid = Symbol('mEntryValid')\npath_conjunction = (~(mEntryValid))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 162,
    "throwingLine": 163,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.EntrySet.add(java.util.Map.Entry<K, V>)",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 169,
    "throwingLine": 170,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.EntrySet.remove(java.lang.Object)",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 222,
    "throwingLine": 223,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.EntrySet.removeAll(java.util.Collection<?>)",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 227,
    "throwingLine": 228,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.EntrySet.retainAll(java.util.Collection<?>)",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 232,
    "throwingLine": 233,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.EntrySet.toArray()",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 242,
    "throwingLine": 243,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.EntrySet.toArray(T[])",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 247,
    "throwingLine": 248,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.KeySet.add(K)",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 272,
    "throwingLine": 273,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.KeySet.addAll(java.util.Collection<? extends K>)",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 277,
    "throwingLine": 278,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.ValuesCollection.add(V)",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 360,
    "throwingLine": 361,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.MapCollections.ValuesCollection.addAll(java.util.Collection<? extends V>)",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 365,
    "throwingLine": 366,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/MapCollections.java"
  },
  {
    "qualifiedSignature": "android.util.Log.setWtfHandler(android.util.Log.TerribleFailureHandler)",
    "exception": "throw new NullPointerException(\"handler == null\");",
    "pathCojunction": "(handler == null)",
    "symbolicPathConjunction": "(handler == null)",
    "backwardsPathConjunction": "(handler == null)",
    "simplifiedPathConjunction": "handler == null",
    "z3Inputs": "[handler0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhandler0_isNull = Bool('handler0_isNull')\n\nconstraints = [\n  handler0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nhandler = Symbol('handler')\nnull = Symbol('null')\npath_conjunction = (Eq(handler, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 331,
    "throwingLine": 333,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Log.java"
  },
  {
    "qualifiedSignature": "android.util.Base64InputStream.mark(int)",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreadlimit0 = Int('readlimit0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 79,
    "throwingLine": 80,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64InputStream.java"
  },
  {
    "qualifiedSignature": "android.util.Base64InputStream.reset()",
    "exception": "throw new UnsupportedOperationException();",
    "pathCojunction": "true",
    "backwardsPathConjunction": "true",
    "simplifiedPathConjunction": "true",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 83,
    "throwingLine": 84,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64InputStream.java"
  },
  {
    "qualifiedSignature": "android.util.Base64InputStream.skip(long)",
    "exception": "throw new Base64DataException(\"bad base-64\");",
    "pathCojunction": "(outputStart >= outputEnd) && (!(true)) && (in.read(inputBuffer) == -1) && (!(coder.process(EMPTY, 0, 0, true)))",
    "symbolicPathConjunction": "(outputStart >= outputEnd) && ((!(true)) && (in.read(inputBuffer) == -1) && (!(coder.process(EMPTY, 0, 0, true))))",
    "backwardsPathConjunction": "(outputStart >= outputEnd) && (!(true)) && (in.read(inputBuffer) == -1) && (!(coder.process(EMPTY, 0, 0, true)))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\noutputStart0 = Int('outputStart0')\noutputEnd0 = Int('outputEnd0')\n\nconstraints = [\n  n0 >= -9223372036854775808, n0 <= 9223372036854775807, # implicit\n  And(And(And(outputStart0 >= outputEnd0, Not(True)), in.read(inputBuffer0) == -1), Not(coder.process(EMPTY, 0, 0, true)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutputStart = Symbol('outputStart', integer=True)\noutputEnd = Symbol('outputEnd', integer=True)\ninputBuffer = Symbol('inputBuffer')\nin_read = Symbol('in_read')\ncoder_process = Symbol('coder_process')\npath_conjunction = ((((GreaterThan(outputStart, outputEnd)) & (~(True))) & (Eq(in_read, -1))) & (~(coder_process)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 96,
    "throwingLine": 98,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64InputStream.java"
  },
  {
    "qualifiedSignature": "android.util.Base64InputStream.skip(long)",
    "exception": "throw new Base64DataException(\"bad base-64\");",
    "pathCojunction": "(outputStart >= outputEnd) && (!(eof)) && (!(in.read(inputBuffer) == -1)) && (!(coder.process(inputBuffer, 0, bytesRead, false)))",
    "symbolicPathConjunction": "(outputStart >= outputEnd) && ((!(eof)) && (!(in.read(inputBuffer) == -1)) && (!(coder.process(inputBuffer, 0, bytesRead, false))))",
    "backwardsPathConjunction": "(outputStart >= outputEnd) && (!(eof)) && (!(in.read(inputBuffer) == -1)) && (!(coder.process(inputBuffer, 0, in.read(inputBuffer), false)))",
    "simplifiedPathConjunction": "outputEnd <= outputStart && !coder.process(inputBuffer, 0, in.read(inputBuffer), false) && !eof && in.read(inputBuffer) != -1",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\noutputStart0 = Int('outputStart0')\noutputEnd0 = Int('outputEnd0')\nbytesRead0 = Int('bytesRead0')\neof0 = Bool('eof0')\n\nconstraints = [\n  bytesRead0 == in.read(inputBuffer0),\n  n0 >= -9223372036854775808, n0 <= 9223372036854775807, # implicit\n  And(And(And(outputStart0 >= outputEnd0, Not(eof0)), Not(in.read(inputBuffer0) == -1)), Not(coder.process(inputBuffer0, 0, bytesRead0, false)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutputStart = Symbol('outputStart', integer=True)\noutputEnd = Symbol('outputEnd', integer=True)\ninputBuffer = Symbol('inputBuffer')\neof = Symbol('eof')\nin_read = Symbol('in_read')\ncoder_process = Symbol('coder_process')\npath_conjunction = ((((GreaterThan(outputStart, outputEnd)) & (~(eof))) & (~((Eq(in_read, -1))))) & (~(coder_process)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 96,
    "throwingLine": 98,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64InputStream.java"
  },
  {
    "qualifiedSignature": "android.util.Base64InputStream.read()",
    "exception": "throw new Base64DataException(\"bad base-64\");",
    "pathCojunction": "(outputStart >= outputEnd) && (!(true)) && (in.read(inputBuffer) == -1) && (!(coder.process(EMPTY, 0, 0, true)))",
    "symbolicPathConjunction": "(outputStart >= outputEnd) && ((!(true)) && (in.read(inputBuffer) == -1) && (!(coder.process(EMPTY, 0, 0, true))))",
    "backwardsPathConjunction": "(outputStart >= outputEnd) && (!(true)) && (in.read(inputBuffer) == -1) && (!(coder.process(EMPTY, 0, 0, true)))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noutputStart0 = Int('outputStart0')\noutputEnd0 = Int('outputEnd0')\n\nconstraints = [\n  And(And(And(outputStart0 >= outputEnd0, Not(True)), in.read(inputBuffer0) == -1), Not(coder.process(EMPTY, 0, 0, true)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutputStart = Symbol('outputStart', integer=True)\noutputEnd = Symbol('outputEnd', integer=True)\ninputBuffer = Symbol('inputBuffer')\nin_read = Symbol('in_read')\ncoder_process = Symbol('coder_process')\npath_conjunction = ((((GreaterThan(outputStart, outputEnd)) & (~(True))) & (Eq(in_read, -1))) & (~(coder_process)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 108,
    "throwingLine": 110,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64InputStream.java"
  },
  {
    "qualifiedSignature": "android.util.Base64InputStream.read()",
    "exception": "throw new Base64DataException(\"bad base-64\");",
    "pathCojunction": "(outputStart >= outputEnd) && (!(eof)) && (!(in.read(inputBuffer) == -1)) && (!(coder.process(inputBuffer, 0, bytesRead, false)))",
    "symbolicPathConjunction": "(outputStart >= outputEnd) && ((!(eof)) && (!(in.read(inputBuffer) == -1)) && (!(coder.process(inputBuffer, 0, in.read(inputBuffer), false))))",
    "backwardsPathConjunction": "(outputStart >= outputEnd) && (!(eof)) && (!(in.read(inputBuffer) == -1)) && (!(coder.process(inputBuffer, 0, in.read(inputBuffer), false)))",
    "simplifiedPathConjunction": "outputEnd <= outputStart && !coder.process(inputBuffer, 0, in.read(inputBuffer), false) && !eof && in.read(inputBuffer) != -1",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noutputStart0 = Int('outputStart0')\noutputEnd0 = Int('outputEnd0')\nbytesRead0 = Int('bytesRead0')\neof0 = Bool('eof0')\n\nconstraints = [\n  bytesRead0 == in.read(inputBuffer0),\n  And(And(And(outputStart0 >= outputEnd0, Not(eof0)), Not(in.read(inputBuffer0) == -1)), Not(coder.process(inputBuffer0, 0, bytesRead0, false)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutputStart = Symbol('outputStart', integer=True)\noutputEnd = Symbol('outputEnd', integer=True)\ninputBuffer = Symbol('inputBuffer')\neof = Symbol('eof')\nin_read = Symbol('in_read')\ncoder_process = Symbol('coder_process')\npath_conjunction = ((((GreaterThan(outputStart, outputEnd)) & (~(eof))) & (~((Eq(in_read, -1))))) & (~(coder_process)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 108,
    "throwingLine": 110,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/util/Base64InputStream.java"
  }
]