[
  {
    "qualifiedSignature": "android.text.format.Time.clear(java.lang.String)",
    "exception": "throw new NullPointerException(\"timezone is null!\");",
    "pathCojunction": "(timezoneId == null)",
    "symbolicPathConjunction": "(timezoneId == null)",
    "backwardsPathConjunction": "(timezoneId == null)",
    "simplifiedPathConjunction": "null == timezoneId",
    "z3Inputs": "[timezoneId0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimezoneId0 = String('timezoneId0')\ntimezoneId0_isNull = Bool('timezoneId0_isNull')\n\nconstraints = [\n  timezoneId0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntimezoneId = Symbol('timezoneId')\nnull = Symbol('null')\npath_conjunction = (Eq(timezoneId, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 300,
    "throwingLine": 302,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.text.format.Time.compare(android.text.format.Time, android.text.format.Time)",
    "exception": "throw new NullPointerException(\"b == null\");",
    "pathCojunction": "(!(a == null)) && (b == null)",
    "symbolicPathConjunction": "(!(a == null)) && (b == null)",
    "backwardsPathConjunction": "(!(a == null)) && (b == null)",
    "simplifiedPathConjunction": "b == null && a != null",
    "z3Inputs": "[b0_isNull = True, a0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(a0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\nb = Symbol('b')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(a, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 336,
    "throwingLine": 340,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.text.format.Time.compare(android.text.format.Time, android.text.format.Time)",
    "exception": "throw new NullPointerException(\"a == null\");",
    "pathCojunction": "(a == null)",
    "symbolicPathConjunction": "(a == null)",
    "backwardsPathConjunction": "(a == null)",
    "simplifiedPathConjunction": "a == null",
    "z3Inputs": "[a0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\n\nconstraints = [\n  a0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\nnull = Symbol('null')\npath_conjunction = (Eq(a, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 336,
    "throwingLine": 338,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.text.format.Time.parse(java.lang.String)",
    "exception": "throw new TimeFormatException(String.format(\"Unexpected character 0x%02d at pos=%d.  Expected 0x%02d (\\'%c\\').\", (int) c, 15, (int) 'Z', 'Z'))",
    "pathCojunction": "(!(s == null)) && (!(s.length() < 8)) && (Character.isDigit(s.charAt(spos))) && (s.length() > 8) && (!(s.length() < 15)) && (!(s.charAt(spos) != 'T')) && (s.length() > 15) && (s.charAt(spos) != 'Z')",
    "symbolicPathConjunction": "(!(s == null)) && ((!(s.length() < 8)) && (getChar(s, 0, 1000)) && (s.length() > 8) && (!(s.length() < 15)) && (!(checkChar(s, 8, 'T'))) && (s.length() > 15) && (checkChar(s, 15, 'Z')))",
    "backwardsPathConjunction": "(!(s == null)) && (!(s.length() < 8)) && (Character.isDigit(s.charAt(spos))) && (s.length() > 8) && (!(s.length() < 15)) && (!(s.charAt(spos) != 'T')) && (s.length() > 15) && (s.charAt(spos) != 'Z')",
    "simplifiedPathConjunction": "Character.isDigit(s.charAt(spos)) && s.charAt(spos) == 'T' && s.length() > 15 && null != s && s.charAt(spos) != 'Z'",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nspos0 = Int('spos0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  And(And(And(And(And(And(And(Not(s0_isNull), Not(Length(s0) < 8)), Character.isDigit(s0.charAt(spos0))), Length(s0) > 8), Not(Length(s0) < 15)), Not(s0.charAt(spos0) != 'T')), Length(s0) > 15), s0.charAt(spos0) != 'Z')\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nspos = Symbol('spos', integer=True)\ns_length = Symbol('s_length')\nCharacter_isDigit = Symbol('Character_isDigit')\ns_charAt = Symbol('s_charAt')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # 'T'\nwit_str_1 = Symbol('wit_str_1') # 'Z'\npath_conjunction = ((((((((~((Eq(s, null)))) & (~((StrictLessThan(s_length, 8))))) & Character_isDigit) & (StrictGreaterThan(s_length, 8))) & (~((StrictLessThan(s_length, 15))))) & (~((Ne(s_charAt, wit_str_0))))) & (StrictGreaterThan(s_length, 15))) & (Ne(s_charAt, wit_str_1)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 408,
    "throwingLine": 412,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.text.format.Time.parse(java.lang.String)",
    "exception": "throw new NullPointerException(\"time string is null\");",
    "pathCojunction": "(s == null)",
    "symbolicPathConjunction": "(s == null)",
    "backwardsPathConjunction": "(s == null)",
    "simplifiedPathConjunction": "null == s",
    "z3Inputs": "[s0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 408,
    "throwingLine": 410,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.text.format.Time.parse(java.lang.String)",
    "exception": "throw new TimeFormatException(\"String is too short: \\\"\" + s + \"\\\" If there are more than 8 characters there must be at least\" + \" 15.\");",
    "pathCojunction": "(!(s == null)) && (!(s.length() < 8)) && (Character.isDigit(s.charAt(spos))) && (s.length() > 8) && (s.length() < 15)",
    "symbolicPathConjunction": "(!(s == null)) && (!(!(s.length() < 8)) && (getChar(s, 0, 1000)) && (s.length() > 8) && (s.length() < 15))",
    "backwardsPathConjunction": "(!(s == null)) && (!(s.length() < 8)) && (Character.isDigit(s.charAt(spos))) && (s.length() > 8) && (s.length() < 15)",
    "simplifiedPathConjunction": "Character.isDigit(s.charAt(spos)) && s.length() > 8 && s.length() < 15 && null != s",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nspos0 = Int('spos0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  And(And(And(And(Not(s0_isNull), Not(Length(s0) < 8)), Character.isDigit(s0.charAt(spos0))), Length(s0) > 8), Length(s0) < 15)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nspos = Symbol('spos', integer=True)\ns_length = Symbol('s_length')\nCharacter_isDigit = Symbol('Character_isDigit')\ns_charAt = Symbol('s_charAt')\nnull = Symbol('null')\npath_conjunction = (((((~((Eq(s, null)))) & (~((StrictLessThan(s_length, 8))))) & Character_isDigit) & (StrictGreaterThan(s_length, 8))) & (StrictLessThan(s_length, 15)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 408,
    "throwingLine": 412,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.text.format.Time.parse(java.lang.String)",
    "exception": "throw new TimeFormatException(\"String is too short: \\\"\" + s + \"\\\" Expected at least 8 characters.\");",
    "pathCojunction": "(!(s == null)) && (s.length() < 8)",
    "symbolicPathConjunction": "(!(s == null)) && (!(s.length() < 8))",
    "backwardsPathConjunction": "(!(s == null)) && (s.length() < 8)",
    "simplifiedPathConjunction": "s.length() < 8 && null != s",
    "z3Inputs": "[s0 = \"\", s0_isNull = False]\n[s0_isNull = False, s0 = \"A\"]\n[s0_isNull = False, s0 = \"B\"]\n[s0_isNull = False, s0 = \"C\"]\n[s0_isNull = False, s0 = \"D\"]\n[s0_isNull = False, s0 = \"E\"]\n[s0_isNull = False, s0 = \"F\"]\n[s0_isNull = False, s0 = \"G\"]\n[s0_isNull = False, s0 = \"H\"]\n[s0_isNull = False, s0 = \"I\"]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  And(Not(s0_isNull), Length(s0) < 8)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\ns_length = Symbol('s_length')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(s, null)))) & (StrictLessThan(s_length, 8)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 408,
    "throwingLine": 412,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.text.format.Time.parse(java.lang.String)",
    "exception": "throw new TimeFormatException(String.format(\"Unexpected character 0x%02d at pos=%d.  Expected 0x%02d (\\'%c\\').\", (int) c, 8, (int) 'T', 'T'))",
    "pathCojunction": "(!(s == null)) && (!(s.length() < 8)) && (Character.isDigit(s.charAt(spos))) && (s.length() > 8) && (!(s.length() < 15)) && (s.charAt(spos) != 'T')",
    "symbolicPathConjunction": "(!(s == null)) && (!(!(s.length() < 8)) && (getChar(s, 0, 1000)) && (s.length() > 8) && (!(s.length() < 15)) && (!(checkChar(s, 8, 'T'))))",
    "backwardsPathConjunction": "(!(s == null)) && (!(s.length() < 8)) && (Character.isDigit(s.charAt(spos))) && (s.length() > 8) && (!(s.length() < 15)) && (s.charAt(spos) != 'T')",
    "simplifiedPathConjunction": "Character.isDigit(s.charAt(spos)) && s.length() >= 15 && null != s && s.charAt(spos) != 'T'",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nspos0 = Int('spos0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  And(And(And(And(And(Not(s0_isNull), Not(Length(s0) < 8)), Character.isDigit(s0.charAt(spos0))), Length(s0) > 8), Not(Length(s0) < 15)), s0.charAt(spos0) != 'T')\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nspos = Symbol('spos', integer=True)\ns_length = Symbol('s_length')\nCharacter_isDigit = Symbol('Character_isDigit')\ns_charAt = Symbol('s_charAt')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # 'T'\npath_conjunction = ((((((~((Eq(s, null)))) & (~((StrictLessThan(s_length, 8))))) & Character_isDigit) & (StrictGreaterThan(s_length, 8))) & (~((StrictLessThan(s_length, 15))))) & (Ne(s_charAt, wit_str_0)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 408,
    "throwingLine": 412,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.text.format.Time.parse(java.lang.String)",
    "exception": "throw new TimeFormatException(\"Parse error at pos=\" + 0)",
    "pathCojunction": "(!(s == null)) && (!(s.length() < 8)) && (!(Character.isDigit(s.charAt(spos))))",
    "symbolicPathConjunction": "(!(s == null)) && (!(!(s.length() < 8)) && (getChar(s, 0, 1000)))",
    "backwardsPathConjunction": "(!(s == null)) && (!(s.length() < 8)) && (!(Character.isDigit(s.charAt(spos))))",
    "simplifiedPathConjunction": "s.length() >= 8 && !Character.isDigit(s.charAt(spos)) && null != s",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nspos0 = Int('spos0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  And(And(Not(s0_isNull), Not(Length(s0) < 8)), Not(Character.isDigit(s0.charAt(spos0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nspos = Symbol('spos', integer=True)\ns_length = Symbol('s_length')\nCharacter_isDigit = Symbol('Character_isDigit')\ns_charAt = Symbol('s_charAt')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(s, null)))) & (~((StrictLessThan(s_length, 8))))) & (~(Character_isDigit)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 408,
    "throwingLine": 412,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.text.format.Time.parse3339(java.lang.String)",
    "exception": "throw new NullPointerException(\"time string is null\");",
    "pathCojunction": "(s == null)",
    "symbolicPathConjunction": "(s == null)",
    "backwardsPathConjunction": "(s == null)",
    "simplifiedPathConjunction": "null == s",
    "z3Inputs": "[s0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 542,
    "throwingLine": 544,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.text.format.Time.TimeCalculator.copyFieldsFromTime(android.text.format.Time)",
    "exception": "throw new IllegalArgumentException(\"allDay is true but sec, min, hour are not 0.\");",
    "pathCojunction": "(time.allDay && (time.second != 0 || time.minute != 0 || time.hour != 0))",
    "symbolicPathConjunction": "(time.allDay && (time.second != 0 || time.minute != 0 || time.hour != 0))",
    "backwardsPathConjunction": "(time.allDay && (time.second != 0 || time.minute != 0 || time.hour != 0))",
    "z3Inputs": "[time_second0 = 1,\n time_hour0 = 0,\n time_minute0 = 0,\n time_allDay0 = True]\n[time_allDay0 = True, time_minute0 = 2]\n[time_second0 = 3, time_allDay0 = True, time_minute0 = 4]\n[time_allDay0 = True, time_hour0 = 6, time_minute0 = 5]\n[time_second0 = 7,\n time_allDay0 = True,\n time_hour0 = 9,\n time_minute0 = 8]\n[time_allDay0 = True, time_minute0 = 10]\n[time_second0 = 11, time_allDay0 = True, time_minute0 = 12]\n[time_second0 = 13, time_allDay0 = True, time_minute0 = 14]\n[time_second0 = 15,\n time_allDay0 = True,\n time_hour0 = 17,\n time_minute0 = 16]\n[time_allDay0 = True, time_hour0 = 19, time_minute0 = 18]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntime_allDay0 = Bool('time_allDay0')\ntime_second0 = Int('time_second0')\ntime_minute0 = Int('time_minute0')\ntime_hour0 = Int('time_hour0')\n\nconstraints = [\n  And(time_allDay0, Or(Or(time_second0 != 0, time_minute0 != 0), time_hour0 != 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 1270,
    "throwingLine": 1283,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/format/Time.java"
  },
  {
    "qualifiedSignature": "android.provider.Contacts.ContactMethods.decodeImProtocol(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"the value is not a valid encoded protocol, \" + encodedString);",
    "pathCojunction": "(!(encodedString == null)) && (!(encodedString.startsWith(\"pre:\"))) && (!(encodedString.startsWith(\"custom:\")))",
    "symbolicPathConjunction": "(!(encodedString == null)) && (!(encodedString.startsWith(\"pre:\"))) && (!(encodedString.startsWith(\"custom:\")))",
    "backwardsPathConjunction": "(!(encodedString == null)) && (!(encodedString.startsWith(\"pre:\"))) && (!(encodedString.startsWith(\"custom:\")))",
    "simplifiedPathConjunction": "!encodedString.startsWith(\"custom:\") && encodedString != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nencodedString0 = String('encodedString0')\nencodedString0_isNull = Bool('encodedString0_isNull')\n\nconstraints = [\n  And(And(Not(encodedString0_isNull), Not(encodedString0.startsWith(\"pre:\"))), Not(encodedString0.startsWith(\"custom:\")))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nencodedString = Symbol('encodedString')\nencodedString_startsWith = Symbol('encodedString_startsWith')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(encodedString, null)))) & (~(encodedString_startsWith))) & (~(encodedString_startsWith)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 1312,
    "throwingLine": 1325,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/provider/Contacts.java"
  }
]