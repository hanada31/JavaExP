[
  {
    "qualifiedSignature": "android.text.PackedIntVector.getValue(int, int)",
    "exception": "throw new IndexOutOfBoundsException(row + \", \" + column);",
    "pathCojunction": "((row | column) < 0) || (row >= mRows - mRowGapLength) || (column >= columns)",
    "symbolicPathConjunction": "(size()) && (((row | column) < 0) || (row >= size()) || (column >= columns))",
    "backwardsPathConjunction": "((row | column) < 0) || (row >= mRows - mRowGapLength) || (column >= mColumns)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrow0 = Int('row0')\ncolumn0 = Int('column0')\nmColumns0 = Int('mColumns0')\ncolumns0 = Int('columns0')\nmRows0 = Int('mRows0')\nmRowGapLength0 = Int('mRowGapLength0')\n\nconstraints = [\n  columns0 == mColumns0,\n  Or(Or(row0 | column0 < 0, row0 >= mRows0 - mRowGapLength0), column0 >= columns0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrow = Symbol('row', integer=True)\ncolumn = Symbol('column', integer=True)\nmColumns = Symbol('mColumns', integer=True)\nmRows = Symbol('mRows', integer=True)\nmRowGapLength = Symbol('mRowGapLength', integer=True)\npath_conjunction = (((StrictLessThan((row | column), 0)) | (GreaterThan(row, (mRows - mRowGapLength)))) | (GreaterThan(column, mColumns)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 71,
    "throwingLine": 75,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/PackedIntVector.java"
  },
  {
    "qualifiedSignature": "android.text.PackedIntVector.setValue(int, int, int)",
    "exception": "throw new IndexOutOfBoundsException(row + \", \" + column);",
    "pathCojunction": "((row | column) < 0) || (row >= mRows - mRowGapLength) || (column >= mColumns)",
    "symbolicPathConjunction": "(size()) && (((row | column) < 0) || (row >= size()) || (column >= mColumns))",
    "backwardsPathConjunction": "((row | column) < 0) || (row >= mRows - mRowGapLength) || (column >= mColumns)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrow0 = Int('row0')\ncolumn0 = Int('column0')\nvalue0 = Int('value0')\nmColumns0 = Int('mColumns0')\nmRows0 = Int('mRows0')\nmRowGapLength0 = Int('mRowGapLength0')\n\nconstraints = [\n  Or(Or(row0 | column0 < 0, row0 >= mRows0 - mRowGapLength0), column0 >= mColumns0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrow = Symbol('row', integer=True)\ncolumn = Symbol('column', integer=True)\nmColumns = Symbol('mColumns', integer=True)\nmRows = Symbol('mRows', integer=True)\nmRowGapLength = Symbol('mRowGapLength', integer=True)\npath_conjunction = (((StrictLessThan((row | column), 0)) | (GreaterThan(row, (mRows - mRowGapLength)))) | (GreaterThan(column, mColumns)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 102,
    "throwingLine": 104,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/PackedIntVector.java"
  },
  {
    "qualifiedSignature": "android.text.PackedIntVector.adjustValuesBelow(int, int, int)",
    "exception": "throw new IndexOutOfBoundsException(startRow + \", \" + column);",
    "pathCojunction": "((startRow | column) < 0) || (startRow > mRows - mRowGapLength) || (column >= mColumns)",
    "symbolicPathConjunction": "(size()) && (width()) && (((startRow | column) < 0) || (startRow > size()) || (column >= width()))",
    "backwardsPathConjunction": "((startRow | column) < 0) || (startRow > mRows - mRowGapLength) || (column >= mColumns)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstartRow0 = Int('startRow0')\ncolumn0 = Int('column0')\ndelta0 = Int('delta0')\nmRows0 = Int('mRows0')\nmRowGapLength0 = Int('mRowGapLength0')\nmColumns0 = Int('mColumns0')\n\nconstraints = [\n  Or(Or(startRow0 | column0 < 0, startRow0 > mRows0 - mRowGapLength0), column0 >= mColumns0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstartRow = Symbol('startRow', integer=True)\ncolumn = Symbol('column', integer=True)\nmRows = Symbol('mRows', integer=True)\nmRowGapLength = Symbol('mRowGapLength', integer=True)\nmColumns = Symbol('mColumns', integer=True)\npath_conjunction = (((StrictLessThan((startRow | column), 0)) | (StrictGreaterThan(startRow, (mRows - mRowGapLength)))) | (GreaterThan(column, mColumns)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 153,
    "throwingLine": 156,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/PackedIntVector.java"
  },
  {
    "qualifiedSignature": "android.text.PackedIntVector.insertAt(int, int[])",
    "exception": "throw new IndexOutOfBoundsException(\"row \" + row);",
    "pathCojunction": "(row < 0) || (row > mRows - mRowGapLength)",
    "symbolicPathConjunction": "(size()) && ((row < 0) || (row > size()))",
    "backwardsPathConjunction": "(row < 0) || (row > mRows - mRowGapLength)",
    "simplifiedPathConjunction": "mRowGapLength > mRows - row || row < 0",
    "z3Inputs": "[row0 = -1, mRows0 = -1, mRowGapLength0 = 0]\n[row0 = -2]\n[row0 = -3, mRows0 = -5, mRowGapLength0 = -1]\n[row0 = -4]\n[row0 = -5, mRows0 = -8, mRowGapLength0 = -2]\n[row0 = -6, mRows0 = -10, mRowGapLength0 = -3]\n[row0 = -6, mRows0 = -11, mRowGapLength0 = -4]\n[row0 = -6, mRows0 = -12, mRowGapLength0 = -5]\n[row0 = -6, mRowGapLength0 = -6]\n[row0 = -7, mRowGapLength0 = -7]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrow0 = Int('row0')\nmRows0 = Int('mRows0')\nmRowGapLength0 = Int('mRowGapLength0')\n\nconstraints = [\n  Or(row0 < 0, row0 > mRows0 - mRowGapLength0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrow = Symbol('row', integer=True)\nmRows = Symbol('mRows', integer=True)\nmRowGapLength = Symbol('mRowGapLength', integer=True)\npath_conjunction = ((StrictLessThan(row, 0)) | (StrictGreaterThan(row, (mRows - mRowGapLength))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 180,
    "throwingLine": 182,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/PackedIntVector.java"
  },
  {
    "qualifiedSignature": "android.text.PackedIntVector.insertAt(int, int[])",
    "exception": "throw new IndexOutOfBoundsException(\"value count \" + values.length);",
    "pathCojunction": "(!(row < 0) || (row > mRows - mRowGapLength)) && (values != null) && (values.length < mColumns)",
    "symbolicPathConjunction": "(size()) && (!(row < 0) || (row > size())) && (width()) && ((values != null) && (values.length < width()))",
    "backwardsPathConjunction": "(!(row < 0) || (row > mRows - mRowGapLength)) && (values != null) && (values.length < mColumns)",
    "simplifiedPathConjunction": "(row >= 0 || mRowGapLength > mRows - row) && mColumns > values.length && null != values",
    "z3Inputs": "[row0 = 0,\n mColumns0 = 1,\n values0_length = 0,\n mRows0 = 0,\n mRowGapLength0 = 0,\n values0_isNull = False]\n[row0 = 1,\n mRowGapLength0 = -1,\n values0_isNull = False,\n mColumns0 = 2,\n values0_length = 1]\n[row0 = -1,\n mRows0 = -4,\n mRowGapLength0 = -2,\n values0_isNull = False,\n mColumns0 = 2,\n values0_length = 0]\n[row0 = -2,\n mRows0 = -4,\n mRowGapLength0 = -1,\n values0_isNull = False,\n mColumns0 = 2,\n values0_length = 0]\n[row0 = -1,\n mRows0 = -3,\n mRowGapLength0 = -1,\n values0_isNull = False,\n mColumns0 = 1,\n values0_length = 0]\n[row0 = -1,\n mRows0 = -2,\n mRowGapLength0 = 0,\n values0_isNull = False,\n mColumns0 = 1,\n values0_length = 0]\n[row0 = -1,\n mRows0 = -1,\n mRowGapLength0 = 1,\n values0_isNull = False,\n mColumns0 = 1,\n values0_length = 0]\n[row0 = -1,\n mRows0 = -3,\n mRowGapLength0 = 2,\n values0_isNull = False,\n mColumns0 = 1,\n values0_length = 0]\n[row0 = -1,\n mRows0 = -4,\n mRowGapLength0 = 2,\n values0_isNull = False,\n mColumns0 = 1,\n values0_length = 0]\n[row0 = -1,\n mRows0 = -5,\n mRowGapLength0 = 2,\n values0_isNull = False,\n mColumns0 = 1,\n values0_length = 0]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrow0 = Int('row0')\nmRows0 = Int('mRows0')\nmRowGapLength0 = Int('mRowGapLength0')\nmColumns0 = Int('mColumns0')\nvalues0_isNull = Bool('values0_isNull')\nvalues0_length = Int('values0_length')\n\nconstraints = [\n  values0_length >= 0, # implicit\n  And(And(Or(Not(row0 < 0), row0 > mRows0 - mRowGapLength0), Not(values0_isNull)), values0_length < mColumns0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrow = Symbol('row', integer=True)\nvalues = Symbol('values')\nmRows = Symbol('mRows', integer=True)\nmRowGapLength = Symbol('mRowGapLength', integer=True)\nmColumns = Symbol('mColumns', integer=True)\nvalues_length = Symbol('values_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((~((StrictLessThan(row, 0)))) | (StrictGreaterThan(row, (mRows - mRowGapLength)))) & (Ne(values, null))) & (StrictLessThan(values_length, mColumns)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 180,
    "throwingLine": 186,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/PackedIntVector.java"
  },
  {
    "qualifiedSignature": "android.text.PackedIntVector.deleteAt(int, int)",
    "exception": "throw new IndexOutOfBoundsException(row + \", \" + count);",
    "pathCojunction": "((row | count) < 0) || (row + count > mRows - mRowGapLength)",
    "symbolicPathConjunction": "(size()) && (((row | count) < 0) || (row + count > size()))",
    "backwardsPathConjunction": "((row | count) < 0) || (row + count > mRows - mRowGapLength)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrow0 = Int('row0')\ncount0 = Int('count0')\nmRows0 = Int('mRows0')\nmRowGapLength0 = Int('mRowGapLength0')\n\nconstraints = [\n  Or(row0 | count0 < 0, row0 + count0 > mRows0 - mRowGapLength0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrow = Symbol('row', integer=True)\ncount = Symbol('count', integer=True)\nmRows = Symbol('mRows', integer=True)\nmRowGapLength = Symbol('mRowGapLength', integer=True)\npath_conjunction = ((StrictLessThan((row | count), 0)) | (StrictGreaterThan((row + count), (mRows - mRowGapLength))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 220,
    "throwingLine": 222,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/text/PackedIntVector.java"
  }
]