[
  {
    "qualifiedSignature": "android.view.View.getLocationInSurface(int[])",
    "exception": "throw new IllegalArgumentException(\"outLocation must be an array of two integers\")",
    "pathCojunction": "(location == null || location.length < 2)",
    "symbolicPathConjunction": "(getLocationInWindow(location))",
    "backwardsPathConjunction": "(location == null || location.length < 2)",
    "simplifiedPathConjunction": "location == null || location.length < 2",
    "z3Inputs": "[location0_length = 0, location0_isNull = False]\n[location0_length = 1]\n[location0_length = 0, location0_isNull = True]\n[location0_length = 2, location0_isNull = True]\n[location0_length = 3, location0_isNull = True]\n[location0_length = 4, location0_isNull = True]\n[location0_length = 5, location0_isNull = True]\n[location0_length = 6, location0_isNull = True]\n[location0_length = 7, location0_isNull = True]\n[location0_length = 8, location0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlocation0_isNull = Bool('location0_isNull')\nlocation0_length = Int('location0_length')\n\nconstraints = [\n  location0_length >= 0, # implicit\n  Or(location0_isNull, location0_length < 2)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlocation = Symbol('location')\nlocation_length = Symbol('location_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Eq(location, null)) | (StrictLessThan(location_length, 2)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 10652,
    "throwingLine": 10653,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.cancelPendingInputEvents()",
    "exception": "throw new SuperNotCalledException(\"View \" + getClass().getSimpleName() + \" did not call through to super.onCancelPendingInputEvents()\");",
    "pathCojunction": "(mPerformClick != null) && (mPerformClick != null) && (!(mAttachInfo != null)) && (mPendingCheckForLongPress != null) && (mPendingCheckForLongPress != null) && (!(mAttachInfo != null)) && (!(mPendingCheckForTap != null)) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "symbolicPathConjunction": "((!(onCancelPendingInputEvents())) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10))",
    "backwardsPathConjunction": "(mPerformClick != null) && (mPerformClick != null) && (!(mAttachInfo != null)) && (mPendingCheckForLongPress != null) && (mPendingCheckForLongPress != null) && (!(mAttachInfo != null)) && (!(mPendingCheckForTap != null)) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "simplifiedPathConjunction": "mAttachInfo == null && mPendingCheckForTap == null && mPendingCheckForLongPress != null && mPerformClick != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nPFLAG3_CALLED_SUPER0 = Int('PFLAG3_CALLED_SUPER0')\nmPerformClick0_isNull = Bool('mPerformClick0_isNull')\nmAttachInfo0_isNull = Bool('mAttachInfo0_isNull')\nmPendingCheckForLongPress0_isNull = Bool('mPendingCheckForLongPress0_isNull')\nmPendingCheckForTap0_isNull = Bool('mPendingCheckForTap0_isNull')\n\nconstraints = [\n  PFLAG3_CALLED_SUPER0 == 0x10,\n  And(And(And(And(And(And(And(Not(mPerformClick0_isNull), Not(mPerformClick0_isNull)), Not(Not(mAttachInfo0_isNull))), Not(mPendingCheckForLongPress0_isNull)), Not(mPendingCheckForLongPress0_isNull)), Not(Not(mAttachInfo0_isNull))), Not(Not(mPendingCheckForTap0_isNull))), ~PFLAG3_CALLED_SUPER0 & 0x10 != 0x10)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPendingCheckForTap = Symbol('mPendingCheckForTap')\nmPerformClick = Symbol('mPerformClick')\nmAttachInfo = Symbol('mAttachInfo')\nmPendingCheckForLongPress = Symbol('mPendingCheckForLongPress')\nnull = Symbol('null')\npath_conjunction = ((((((((Ne(mPerformClick, null)) & (Ne(mPerformClick, null))) & (~((Ne(mAttachInfo, null))))) & (Ne(mPendingCheckForLongPress, null))) & (Ne(mPendingCheckForLongPress, null))) & (~((Ne(mAttachInfo, null))))) & (~((Ne(mPendingCheckForTap, null))))) & (Ne((~0x10 & 0x10), 0x10)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 19677,
    "throwingLine": 19678,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.cancelPendingInputEvents()",
    "exception": "throw new SuperNotCalledException(\"View \" + getClass().getSimpleName() + \" did not call through to super.onCancelPendingInputEvents()\");",
    "pathCojunction": "(mPerformClick != null) && (mPerformClick != null) && (!(mAttachInfo != null)) && (!(mPendingCheckForLongPress != null)) && (mPendingCheckForTap != null) && (mPendingCheckForTap != null) && (!(mAttachInfo != null)) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "symbolicPathConjunction": "((!(onCancelPendingInputEvents())) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10))",
    "backwardsPathConjunction": "(mPerformClick != null) && (mPerformClick != null) && (!(mAttachInfo != null)) && (!(mPendingCheckForLongPress != null)) && (mPendingCheckForTap != null) && (mPendingCheckForTap != null) && (!(mAttachInfo != null)) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "simplifiedPathConjunction": "mAttachInfo == null && mPendingCheckForLongPress == null && mPendingCheckForTap != null && mPerformClick != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nPFLAG3_CALLED_SUPER0 = Int('PFLAG3_CALLED_SUPER0')\nmPerformClick0_isNull = Bool('mPerformClick0_isNull')\nmAttachInfo0_isNull = Bool('mAttachInfo0_isNull')\nmPendingCheckForLongPress0_isNull = Bool('mPendingCheckForLongPress0_isNull')\nmPendingCheckForTap0_isNull = Bool('mPendingCheckForTap0_isNull')\n\nconstraints = [\n  PFLAG3_CALLED_SUPER0 == 0x10,\n  And(And(And(And(And(And(And(Not(mPerformClick0_isNull), Not(mPerformClick0_isNull)), Not(Not(mAttachInfo0_isNull))), Not(Not(mPendingCheckForLongPress0_isNull))), Not(mPendingCheckForTap0_isNull)), Not(mPendingCheckForTap0_isNull)), Not(Not(mAttachInfo0_isNull))), ~PFLAG3_CALLED_SUPER0 & 0x10 != 0x10)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPendingCheckForTap = Symbol('mPendingCheckForTap')\nmPerformClick = Symbol('mPerformClick')\nmAttachInfo = Symbol('mAttachInfo')\nmPendingCheckForLongPress = Symbol('mPendingCheckForLongPress')\nnull = Symbol('null')\npath_conjunction = ((((((((Ne(mPerformClick, null)) & (Ne(mPerformClick, null))) & (~((Ne(mAttachInfo, null))))) & (~((Ne(mPendingCheckForLongPress, null))))) & (Ne(mPendingCheckForTap, null))) & (Ne(mPendingCheckForTap, null))) & (~((Ne(mAttachInfo, null))))) & (Ne((~0x10 & 0x10), 0x10)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 19677,
    "throwingLine": 19678,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.cancelPendingInputEvents()",
    "exception": "throw new SuperNotCalledException(\"View \" + getClass().getSimpleName() + \" did not call through to super.onCancelPendingInputEvents()\");",
    "pathCojunction": "(!(mPerformClick != null)) && (!(mPendingCheckForLongPress != null)) && (mPendingCheckForTap != null) && (mPendingCheckForTap != null) && (!(mAttachInfo != null)) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "symbolicPathConjunction": "((!(onCancelPendingInputEvents())) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10))",
    "backwardsPathConjunction": "(!(mPerformClick != null)) && (!(mPendingCheckForLongPress != null)) && (mPendingCheckForTap != null) && (mPendingCheckForTap != null) && (!(mAttachInfo != null)) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "simplifiedPathConjunction": "mAttachInfo == null && mPendingCheckForLongPress == null && mPerformClick == null && mPendingCheckForTap != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nPFLAG3_CALLED_SUPER0 = Int('PFLAG3_CALLED_SUPER0')\nmPerformClick0_isNull = Bool('mPerformClick0_isNull')\nmPendingCheckForLongPress0_isNull = Bool('mPendingCheckForLongPress0_isNull')\nmPendingCheckForTap0_isNull = Bool('mPendingCheckForTap0_isNull')\nmAttachInfo0_isNull = Bool('mAttachInfo0_isNull')\n\nconstraints = [\n  PFLAG3_CALLED_SUPER0 == 0x10,\n  And(And(And(And(And(Not(Not(mPerformClick0_isNull)), Not(Not(mPendingCheckForLongPress0_isNull))), Not(mPendingCheckForTap0_isNull)), Not(mPendingCheckForTap0_isNull)), Not(Not(mAttachInfo0_isNull))), ~PFLAG3_CALLED_SUPER0 & 0x10 != 0x10)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPendingCheckForTap = Symbol('mPendingCheckForTap')\nmPerformClick = Symbol('mPerformClick')\nmAttachInfo = Symbol('mAttachInfo')\nmPendingCheckForLongPress = Symbol('mPendingCheckForLongPress')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(mPerformClick, null)))) & (~((Ne(mPendingCheckForLongPress, null))))) & (Ne(mPendingCheckForTap, null))) & (Ne(mPendingCheckForTap, null))) & (~((Ne(mAttachInfo, null))))) & (Ne((~0x10 & 0x10), 0x10)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 19677,
    "throwingLine": 19678,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.cancelPendingInputEvents()",
    "exception": "throw new SuperNotCalledException(\"View \" + getClass().getSimpleName() + \" did not call through to super.onCancelPendingInputEvents()\");",
    "pathCojunction": "(!(mPerformClick != null)) && (mPendingCheckForLongPress != null) && (mPendingCheckForLongPress != null) && (!(mAttachInfo != null)) && (mPendingCheckForTap != null) && (mPendingCheckForTap != null) && (!(mAttachInfo != null)) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "symbolicPathConjunction": "((onCancelPendingInputEvents()) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10))",
    "backwardsPathConjunction": "(!(mPerformClick != null)) && (mPendingCheckForLongPress != null) && (mPendingCheckForLongPress != null) && (!(mAttachInfo != null)) && (mPendingCheckForTap != null) && (mPendingCheckForTap != null) && (!(mAttachInfo != null)) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "simplifiedPathConjunction": "mAttachInfo == null && mPerformClick == null && mPendingCheckForLongPress != null && mPendingCheckForTap != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nPFLAG3_CALLED_SUPER0 = Int('PFLAG3_CALLED_SUPER0')\nmPerformClick0_isNull = Bool('mPerformClick0_isNull')\nmPendingCheckForLongPress0_isNull = Bool('mPendingCheckForLongPress0_isNull')\nmAttachInfo0_isNull = Bool('mAttachInfo0_isNull')\nmPendingCheckForTap0_isNull = Bool('mPendingCheckForTap0_isNull')\n\nconstraints = [\n  PFLAG3_CALLED_SUPER0 == 0x10,\n  And(And(And(And(And(And(And(Not(Not(mPerformClick0_isNull)), Not(mPendingCheckForLongPress0_isNull)), Not(mPendingCheckForLongPress0_isNull)), Not(Not(mAttachInfo0_isNull))), Not(mPendingCheckForTap0_isNull)), Not(mPendingCheckForTap0_isNull)), Not(Not(mAttachInfo0_isNull))), ~PFLAG3_CALLED_SUPER0 & 0x10 != 0x10)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPendingCheckForTap = Symbol('mPendingCheckForTap')\nmPerformClick = Symbol('mPerformClick')\nmAttachInfo = Symbol('mAttachInfo')\nmPendingCheckForLongPress = Symbol('mPendingCheckForLongPress')\nnull = Symbol('null')\npath_conjunction = ((((((((~((Ne(mPerformClick, null)))) & (Ne(mPendingCheckForLongPress, null))) & (Ne(mPendingCheckForLongPress, null))) & (~((Ne(mAttachInfo, null))))) & (Ne(mPendingCheckForTap, null))) & (Ne(mPendingCheckForTap, null))) & (~((Ne(mAttachInfo, null))))) & (Ne((~0x10 & 0x10), 0x10)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 19677,
    "throwingLine": 19678,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.cancelPendingInputEvents()",
    "exception": "throw new SuperNotCalledException(\"View \" + getClass().getSimpleName() + \" did not call through to super.onCancelPendingInputEvents()\");",
    "pathCojunction": "(mPerformClick != null) && (mPerformClick != null) && (mAttachInfo != null) && (!(mPendingCheckForLongPress != null)) && (!(mPendingCheckForTap != null)) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "symbolicPathConjunction": "((!(onCancelPendingInputEvents())) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10))",
    "backwardsPathConjunction": "(mPerformClick != null) && (mPerformClick != null) && (mAttachInfo != null) && (!(mPendingCheckForLongPress != null)) && (!(mPendingCheckForTap != null)) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "simplifiedPathConjunction": "mPendingCheckForLongPress == null && mPendingCheckForTap == null && mAttachInfo != null && mPerformClick != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nPFLAG3_CALLED_SUPER0 = Int('PFLAG3_CALLED_SUPER0')\nmPerformClick0_isNull = Bool('mPerformClick0_isNull')\nmAttachInfo0_isNull = Bool('mAttachInfo0_isNull')\nmPendingCheckForLongPress0_isNull = Bool('mPendingCheckForLongPress0_isNull')\nmPendingCheckForTap0_isNull = Bool('mPendingCheckForTap0_isNull')\n\nconstraints = [\n  PFLAG3_CALLED_SUPER0 == 0x10,\n  And(And(And(And(And(Not(mPerformClick0_isNull), Not(mPerformClick0_isNull)), Not(mAttachInfo0_isNull)), Not(Not(mPendingCheckForLongPress0_isNull))), Not(Not(mPendingCheckForTap0_isNull))), ~PFLAG3_CALLED_SUPER0 & 0x10 != 0x10)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPendingCheckForTap = Symbol('mPendingCheckForTap')\nmPerformClick = Symbol('mPerformClick')\nmAttachInfo = Symbol('mAttachInfo')\nmPendingCheckForLongPress = Symbol('mPendingCheckForLongPress')\nnull = Symbol('null')\npath_conjunction = ((((((Ne(mPerformClick, null)) & (Ne(mPerformClick, null))) & (Ne(mAttachInfo, null))) & (~((Ne(mPendingCheckForLongPress, null))))) & (~((Ne(mPendingCheckForTap, null))))) & (Ne((~0x10 & 0x10), 0x10)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 19677,
    "throwingLine": 19678,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.cancelPendingInputEvents()",
    "exception": "throw new SuperNotCalledException(\"View \" + getClass().getSimpleName() + \" did not call through to super.onCancelPendingInputEvents()\");",
    "pathCojunction": "(!(mPerformClick != null)) && (!(mPendingCheckForLongPress != null)) && (mPendingCheckForTap != null) && (mPendingCheckForTap != null) && (mAttachInfo != null) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "symbolicPathConjunction": "((onCancelPendingInputEvents()) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10))",
    "backwardsPathConjunction": "(!(mPerformClick != null)) && (!(mPendingCheckForLongPress != null)) && (mPendingCheckForTap != null) && (mPendingCheckForTap != null) && (mAttachInfo != null) && ((~PFLAG3_CALLED_SUPER & 0x10) != 0x10)",
    "simplifiedPathConjunction": "mPendingCheckForLongPress == null && mPerformClick == null && mAttachInfo != null && mPendingCheckForTap != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nPFLAG3_CALLED_SUPER0 = Int('PFLAG3_CALLED_SUPER0')\nmPerformClick0_isNull = Bool('mPerformClick0_isNull')\nmPendingCheckForLongPress0_isNull = Bool('mPendingCheckForLongPress0_isNull')\nmPendingCheckForTap0_isNull = Bool('mPendingCheckForTap0_isNull')\nmAttachInfo0_isNull = Bool('mAttachInfo0_isNull')\n\nconstraints = [\n  PFLAG3_CALLED_SUPER0 == 0x10,\n  And(And(And(And(And(Not(Not(mPerformClick0_isNull)), Not(Not(mPendingCheckForLongPress0_isNull))), Not(mPendingCheckForTap0_isNull)), Not(mPendingCheckForTap0_isNull)), Not(mAttachInfo0_isNull)), ~PFLAG3_CALLED_SUPER0 & 0x10 != 0x10)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPendingCheckForTap = Symbol('mPendingCheckForTap')\nmPerformClick = Symbol('mPerformClick')\nmAttachInfo = Symbol('mAttachInfo')\nmPendingCheckForLongPress = Symbol('mPendingCheckForLongPress')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(mPerformClick, null)))) & (~((Ne(mPendingCheckForLongPress, null))))) & (Ne(mPendingCheckForTap, null))) & (Ne(mPendingCheckForTap, null))) & (Ne(mAttachInfo, null))) & (Ne((~0x10 & 0x10), 0x10)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 19677,
    "throwingLine": 19678,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.getLocationOnScreen()",
    "exception": "throw new IllegalArgumentException(\"outLocation must be an array of two integers\")",
    "pathCojunction": "(location == null || location.length < 2)",
    "symbolicPathConjunction": "(getLocationOnScreen(location))",
    "backwardsPathConjunction": "(new int[2] == null || new int[2].length < 2)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlocation0_isNull = Bool('location0_isNull')\nlocation0_length = Int('location0_length')\n\nconstraints = [\n  location0 == new int[2],\n  location0_length >= 0, # implicit\n  Or(location0_isNull, location0_length < 2)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 23869,
    "throwingLine": 23871,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.getLocationOnScreen()",
    "exception": "throw new IllegalArgumentException(\"inOutLocation must be an array of two integers\")",
    "pathCojunction": "(!(location == null || location.length < 2)) && (location == null || location.length < 2)",
    "symbolicPathConjunction": "(getLocationOnScreen(location))",
    "backwardsPathConjunction": "(!(new int[2] == null || new int[2].length < 2)) && (new int[2] == null || new int[2].length < 2)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlocation0_isNull = Bool('location0_isNull')\nlocation0_length = Int('location0_length')\n\nconstraints = [\n  location0 == new int[2],\n  location0_length >= 0, # implicit\n  And(Not(Or(location0_isNull, location0_length < 2)), Or(location0_isNull, location0_length < 2))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 23869,
    "throwingLine": 23871,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.getLocationOnScreen(int[])",
    "exception": "throw new IllegalArgumentException(\"outLocation must be an array of two integers\");",
    "pathCojunction": "(outLocation == null || outLocation.length < 2)",
    "symbolicPathConjunction": "(!(getLocationInWindow(outLocation)))",
    "backwardsPathConjunction": "(outLocation == null || outLocation.length < 2)",
    "simplifiedPathConjunction": "null == outLocation || outLocation.length < 2",
    "z3Inputs": "[outLocation0_length = 0, outLocation0_isNull = False]\n[outLocation0_length = 1]\n[outLocation0_length = 0, outLocation0_isNull = True]\n[outLocation0_length = 2, outLocation0_isNull = True]\n[outLocation0_length = 3, outLocation0_isNull = True]\n[outLocation0_length = 4, outLocation0_isNull = True]\n[outLocation0_length = 5, outLocation0_isNull = True]\n[outLocation0_length = 6, outLocation0_isNull = True]\n[outLocation0_length = 7, outLocation0_isNull = True]\n[outLocation0_length = 8, outLocation0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noutLocation0_isNull = Bool('outLocation0_isNull')\noutLocation0_length = Int('outLocation0_length')\n\nconstraints = [\n  outLocation0_length >= 0, # implicit\n  Or(outLocation0_isNull, outLocation0_length < 2)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutLocation = Symbol('outLocation')\noutLocation_length = Symbol('outLocation_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Eq(outLocation, null)) | (StrictLessThan(outLocation_length, 2)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 23882,
    "throwingLine": 23883,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.getLocationInWindow(int[])",
    "exception": "throw new IllegalArgumentException(\"outLocation must be an array of two integers\");",
    "pathCojunction": "(outLocation == null || outLocation.length < 2)",
    "symbolicPathConjunction": "(outLocation == null || outLocation.length < 2)",
    "backwardsPathConjunction": "(outLocation == null || outLocation.length < 2)",
    "simplifiedPathConjunction": "null == outLocation || outLocation.length < 2",
    "z3Inputs": "[outLocation0_length = 0, outLocation0_isNull = False]\n[outLocation0_length = 1]\n[outLocation0_length = 0, outLocation0_isNull = True]\n[outLocation0_length = 2, outLocation0_isNull = True]\n[outLocation0_length = 3, outLocation0_isNull = True]\n[outLocation0_length = 4, outLocation0_isNull = True]\n[outLocation0_length = 5, outLocation0_isNull = True]\n[outLocation0_length = 6, outLocation0_isNull = True]\n[outLocation0_length = 7, outLocation0_isNull = True]\n[outLocation0_length = 8, outLocation0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noutLocation0_isNull = Bool('outLocation0_isNull')\noutLocation0_length = Int('outLocation0_length')\n\nconstraints = [\n  outLocation0_length >= 0, # implicit\n  Or(outLocation0_isNull, outLocation0_length < 2)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutLocation = Symbol('outLocation')\noutLocation_length = Symbol('outLocation_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Eq(outLocation, null)) | (StrictLessThan(outLocation_length, 2)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 23899,
    "throwingLine": 23901,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.transformFromViewToWindowSpace(int[])",
    "exception": "throw new IllegalArgumentException(\"inOutLocation must be an array of two integers\");",
    "pathCojunction": "(inOutLocation == null || inOutLocation.length < 2)",
    "symbolicPathConjunction": "(inOutLocation == null || inOutLocation.length < 2)",
    "backwardsPathConjunction": "(inOutLocation == null || inOutLocation.length < 2)",
    "simplifiedPathConjunction": "inOutLocation == null || inOutLocation.length < 2",
    "z3Inputs": "[inOutLocation0_isNull = False, inOutLocation0_length = 0]\n[inOutLocation0_length = 1]\n[inOutLocation0_isNull = True, inOutLocation0_length = 0]\n[inOutLocation0_isNull = True, inOutLocation0_length = 2]\n[inOutLocation0_isNull = True, inOutLocation0_length = 3]\n[inOutLocation0_isNull = True, inOutLocation0_length = 4]\n[inOutLocation0_isNull = True, inOutLocation0_length = 5]\n[inOutLocation0_isNull = True, inOutLocation0_length = 6]\n[inOutLocation0_isNull = True, inOutLocation0_length = 7]\n[inOutLocation0_isNull = True, inOutLocation0_length = 8]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninOutLocation0_isNull = Bool('inOutLocation0_isNull')\ninOutLocation0_length = Int('inOutLocation0_length')\n\nconstraints = [\n  inOutLocation0_length >= 0, # implicit\n  Or(inOutLocation0_isNull, inOutLocation0_length < 2)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninOutLocation = Symbol('inOutLocation')\ninOutLocation_length = Symbol('inOutLocation_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Eq(inOutLocation, null)) | (StrictLessThan(inOutLocation_length, 2)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 23911,
    "throwingLine": 23913,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.requireViewById(int)",
    "exception": "throw new IllegalArgumentException(\"ID does not reference a View inside this View\");",
    "pathCojunction": "(id == -1) && (view == null)",
    "symbolicPathConjunction": "(findViewById(id)) && (view == null)",
    "backwardsPathConjunction": "(id == -1) && (null == null)",
    "simplifiedPathConjunction": "id == -1",
    "z3Inputs": "[view0_isNull = True, id0 = -1]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nview0_isNull = Bool('view0_isNull')\nview0_isNull = Bool('view0_isNull')\n\nconstraints = [\n  view0_isNull, \n  And(id0 == -1, view0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nid = Symbol('id', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Eq(id, -1)) & (Eq(null, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 24035,
    "throwingLine": 24038,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.requireViewById(int)",
    "exception": "throw new IllegalArgumentException(\"ID does not reference a View inside this View\");",
    "pathCojunction": "(!(id == -1)) && (!(id == mID)) && (view == null)",
    "symbolicPathConjunction": "(findViewById(id)) && (view == null)",
    "backwardsPathConjunction": "(!(id == -1)) && (!(id == mID)) && (null == null)",
    "simplifiedPathConjunction": "id != -1 && id != mID",
    "z3Inputs": "[id0 = 0, mID0 = 1, view0_isNull = True]\n[id0 = 2, mID0 = 3, view0_isNull = True]\n[id0 = 4, mID0 = 5, view0_isNull = True]\n[id0 = 6, mID0 = 7, view0_isNull = True]\n[id0 = 8, mID0 = 9, view0_isNull = True]\n[id0 = 10, mID0 = 11, view0_isNull = True]\n[id0 = 12, mID0 = 13, view0_isNull = True]\n[id0 = 14, mID0 = 15, view0_isNull = True]\n[id0 = 16, mID0 = 17, view0_isNull = True]\n[id0 = 18, mID0 = 19, view0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nmID0 = Int('mID0')\nview0_isNull = Bool('view0_isNull')\nview0_isNull = Bool('view0_isNull')\n\nconstraints = [\n  view0_isNull, \n  And(And(Not(id0 == -1), Not(id0 == mID0)), view0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nid = Symbol('id', integer=True)\nmID = Symbol('mID', integer=True)\nnull = Symbol('null')\npath_conjunction = (((~((Eq(id, -1)))) & (~((Eq(id, mID))))) & (Eq(null, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 24035,
    "throwingLine": 24038,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.requireViewById(int)",
    "exception": "throw new IllegalArgumentException(\"ID does not reference a View inside this View\");",
    "pathCojunction": "(!(id == -1)) && (id == mID) && (view == null)",
    "symbolicPathConjunction": "(findViewById(id)) && (view == null)",
    "backwardsPathConjunction": "(!(id == -1)) && (id == mID) && ((T) this == null)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nmID0 = Int('mID0')\nview0_isNull = Bool('view0_isNull')\n\nconstraints = [\n  view0 == (T) this,\n  And(And(Not(id0 == -1), id0 == mID0), view0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 24035,
    "throwingLine": 24038,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.setTag(int, java.lang.Object)",
    "exception": "throw new IllegalArgumentException(\"The key must be an application-specific \" + \"resource id.\");",
    "pathCojunction": "((key >>> 24) < 2)",
    "symbolicPathConjunction": "((key >>> 24) < 2)",
    "backwardsPathConjunction": "((key >>> 24) < 2)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = Int('key0')\n\nconstraints = [\n  key0 >>> 24 < 2\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key', integer=True)\npath_conjunction = (StrictLessThan((key >>> 24), 2))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 24281,
    "throwingLine": 24285,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.setTagInternal(int, java.lang.Object)",
    "exception": "throw new IllegalArgumentException(\"The key must be a framework-specific \" + \"resource id.\");",
    "pathCojunction": "((key >>> 24) != 0x1)",
    "symbolicPathConjunction": "((key >>> 24) != 0x1)",
    "backwardsPathConjunction": "((key >>> 24) != 0x1)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = Int('key0')\n\nconstraints = [\n  key0 >>> 24 != 0x1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key', integer=True)\npath_conjunction = (Ne((key >>> 24), 0x1))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 24299,
    "throwingLine": 24301,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(!(optical != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (!(forceLayout)) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(!(optical != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (!(forceLayout)) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(!(isLayoutModeOptical(this) != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && (!((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT)) && (!(mMeasureCache.indexOfKey((long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL) < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nvalue0 = Int('value0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  key0 == widthMeasureSpec0 << 32 | heightMeasureSpec0 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec0 != mOldWidthMeasureSpec0, heightMeasureSpec0 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec0), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec0)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == mMeasureCache0.indexOfKey(key0),\n  value0 == mMeasureCache0.valueAt(cacheIndex0),\n  mPrivateFlags30 == PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(optical0 != isLayoutModeOptical(mParent0)), Not(mMeasureCache0_isNull)), Or(forceLayout0, needsLayout0)), Not(forceLayout0)), Not(Or(cacheIndex0 < 0, sIgnoreMeasureCache0))), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nmMeasureCache_indexOfKey = Symbol('mMeasureCache_indexOfKey')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(_isLayoutModeOptical, _isLayoutModeOptical)))) & (~((Eq(mMeasureCache, null))))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (~((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))))) & (~(((StrictLessThan(mMeasureCache_indexOfKey, 0)) | sIgnoreMeasureCache)))) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(optical != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && (forceLayout || needsLayout) && (forceLayout) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(optical != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && (forceLayout || needsLayout) && (forceLayout) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(isLayoutModeOptical(this) != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT) && (-1 < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\noWidth0 = Int('oWidth0')\noHeight0 = Int('oHeight0')\nwidthMeasureSpec1 = Int('widthMeasureSpec1')\nheightMeasureSpec1 = Int('heightMeasureSpec1')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  oWidth0 == insets.left + insets.right,\n  oHeight0 == insets.top + insets.bottom,\n  widthMeasureSpec1 == MeasureSpec.adjust(widthMeasureSpec0, optical0 ? -oWidth0 : oWidth0),\n  heightMeasureSpec1 == MeasureSpec.adjust(heightMeasureSpec0, optical0 ? -oHeight0 : oHeight0),\n  key0 == widthMeasureSpec1 << 32 | heightMeasureSpec1 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec1 != mOldWidthMeasureSpec0, heightMeasureSpec1 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec1), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec1)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == -1,\n  mPrivateFlags30 == ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(optical0 != isLayoutModeOptical(mParent0), mMeasureCache0_isNull), Or(forceLayout0, needsLayout0)), forceLayout0), Or(cacheIndex0 < 0, sIgnoreMeasureCache0)), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nnull = Symbol('null')\npath_conjunction = ((((((Ne(_isLayoutModeOptical, _isLayoutModeOptical)) & (Eq(mMeasureCache, null))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))) & ((StrictLessThan(-1, 0)) | sIgnoreMeasureCache)) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(!(optical != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (forceLayout) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(!(optical != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (forceLayout) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(!(isLayoutModeOptical(this) != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT) && (-1 < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  key0 == widthMeasureSpec0 << 32 | heightMeasureSpec0 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec0 != mOldWidthMeasureSpec0, heightMeasureSpec0 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec0), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec0)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == -1,\n  mPrivateFlags30 == ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(optical0 != isLayoutModeOptical(mParent0)), Not(mMeasureCache0_isNull)), Or(forceLayout0, needsLayout0)), forceLayout0), Or(cacheIndex0 < 0, sIgnoreMeasureCache0)), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(_isLayoutModeOptical, _isLayoutModeOptical)))) & (~((Eq(mMeasureCache, null))))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))) & ((StrictLessThan(-1, 0)) | sIgnoreMeasureCache)) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(!(optical != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (forceLayout) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(!(optical != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (forceLayout) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(!(isLayoutModeOptical(this) != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT) && (!(-1 < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nvalue0 = Int('value0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  key0 == widthMeasureSpec0 << 32 | heightMeasureSpec0 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec0 != mOldWidthMeasureSpec0, heightMeasureSpec0 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec0), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec0)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == -1,\n  value0 == mMeasureCache0.valueAt(cacheIndex0),\n  mPrivateFlags30 == PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(optical0 != isLayoutModeOptical(mParent0)), Not(mMeasureCache0_isNull)), Or(forceLayout0, needsLayout0)), forceLayout0), Not(Or(cacheIndex0 < 0, sIgnoreMeasureCache0))), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(_isLayoutModeOptical, _isLayoutModeOptical)))) & (~((Eq(mMeasureCache, null))))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))) & (~(((StrictLessThan(-1, 0)) | sIgnoreMeasureCache)))) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(optical != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (!(forceLayout)) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(optical != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (!(forceLayout)) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(isLayoutModeOptical(this) != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && (!((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT)) && (!(mMeasureCache.indexOfKey((long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL) < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\noWidth0 = Int('oWidth0')\noHeight0 = Int('oHeight0')\nwidthMeasureSpec1 = Int('widthMeasureSpec1')\nheightMeasureSpec1 = Int('heightMeasureSpec1')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nvalue0 = Int('value0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  oWidth0 == insets.left + insets.right,\n  oHeight0 == insets.top + insets.bottom,\n  widthMeasureSpec1 == MeasureSpec.adjust(widthMeasureSpec0, optical0 ? -oWidth0 : oWidth0),\n  heightMeasureSpec1 == MeasureSpec.adjust(heightMeasureSpec0, optical0 ? -oHeight0 : oHeight0),\n  key0 == widthMeasureSpec1 << 32 | heightMeasureSpec1 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec1 != mOldWidthMeasureSpec0, heightMeasureSpec1 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec1), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec1)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == mMeasureCache0.indexOfKey(key0),\n  value0 == mMeasureCache0.valueAt(cacheIndex0),\n  mPrivateFlags30 == PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(optical0 != isLayoutModeOptical(mParent0), Not(mMeasureCache0_isNull)), Or(forceLayout0, needsLayout0)), Not(forceLayout0)), Not(Or(cacheIndex0 < 0, sIgnoreMeasureCache0))), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nmMeasureCache_indexOfKey = Symbol('mMeasureCache_indexOfKey')\nnull = Symbol('null')\npath_conjunction = ((((((Ne(_isLayoutModeOptical, _isLayoutModeOptical)) & (~((Eq(mMeasureCache, null))))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (~((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))))) & (~(((StrictLessThan(mMeasureCache_indexOfKey, 0)) | sIgnoreMeasureCache)))) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(!(optical != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && (forceLayout || needsLayout) && (forceLayout) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(!(optical != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && (forceLayout || needsLayout) && (forceLayout) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(!(isLayoutModeOptical(this) != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT) && (!(-1 < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nvalue0 = Int('value0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  key0 == widthMeasureSpec0 << 32 | heightMeasureSpec0 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec0 != mOldWidthMeasureSpec0, heightMeasureSpec0 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec0), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec0)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == -1,\n  value0 == mMeasureCache0.valueAt(cacheIndex0),\n  mPrivateFlags30 == PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(optical0 != isLayoutModeOptical(mParent0)), mMeasureCache0_isNull), Or(forceLayout0, needsLayout0)), forceLayout0), Not(Or(cacheIndex0 < 0, sIgnoreMeasureCache0))), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(_isLayoutModeOptical, _isLayoutModeOptical)))) & (Eq(mMeasureCache, null))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))) & (~(((StrictLessThan(-1, 0)) | sIgnoreMeasureCache)))) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(optical != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && (forceLayout || needsLayout) && (forceLayout) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(optical != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && (forceLayout || needsLayout) && (forceLayout) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(isLayoutModeOptical(this) != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT) && (!(-1 < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\noWidth0 = Int('oWidth0')\noHeight0 = Int('oHeight0')\nwidthMeasureSpec1 = Int('widthMeasureSpec1')\nheightMeasureSpec1 = Int('heightMeasureSpec1')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nvalue0 = Int('value0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  oWidth0 == insets.left + insets.right,\n  oHeight0 == insets.top + insets.bottom,\n  widthMeasureSpec1 == MeasureSpec.adjust(widthMeasureSpec0, optical0 ? -oWidth0 : oWidth0),\n  heightMeasureSpec1 == MeasureSpec.adjust(heightMeasureSpec0, optical0 ? -oHeight0 : oHeight0),\n  key0 == widthMeasureSpec1 << 32 | heightMeasureSpec1 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec1 != mOldWidthMeasureSpec0, heightMeasureSpec1 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec1), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec1)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == -1,\n  value0 == mMeasureCache0.valueAt(cacheIndex0),\n  mPrivateFlags30 == PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(optical0 != isLayoutModeOptical(mParent0), mMeasureCache0_isNull), Or(forceLayout0, needsLayout0)), forceLayout0), Not(Or(cacheIndex0 < 0, sIgnoreMeasureCache0))), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nnull = Symbol('null')\npath_conjunction = ((((((Ne(_isLayoutModeOptical, _isLayoutModeOptical)) & (Eq(mMeasureCache, null))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))) & (~(((StrictLessThan(-1, 0)) | sIgnoreMeasureCache)))) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(optical != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (!(forceLayout)) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(optical != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (!(forceLayout)) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(isLayoutModeOptical(this) != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && (!((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT)) && (mMeasureCache.indexOfKey((long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL) < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\noWidth0 = Int('oWidth0')\noHeight0 = Int('oHeight0')\nwidthMeasureSpec1 = Int('widthMeasureSpec1')\nheightMeasureSpec1 = Int('heightMeasureSpec1')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  oWidth0 == insets.left + insets.right,\n  oHeight0 == insets.top + insets.bottom,\n  widthMeasureSpec1 == MeasureSpec.adjust(widthMeasureSpec0, optical0 ? -oWidth0 : oWidth0),\n  heightMeasureSpec1 == MeasureSpec.adjust(heightMeasureSpec0, optical0 ? -oHeight0 : oHeight0),\n  key0 == widthMeasureSpec1 << 32 | heightMeasureSpec1 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec1 != mOldWidthMeasureSpec0, heightMeasureSpec1 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec1), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec1)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == mMeasureCache0.indexOfKey(key0),\n  mPrivateFlags30 == ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(optical0 != isLayoutModeOptical(mParent0), Not(mMeasureCache0_isNull)), Or(forceLayout0, needsLayout0)), Not(forceLayout0)), Or(cacheIndex0 < 0, sIgnoreMeasureCache0)), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nmMeasureCache_indexOfKey = Symbol('mMeasureCache_indexOfKey')\nnull = Symbol('null')\npath_conjunction = ((((((Ne(_isLayoutModeOptical, _isLayoutModeOptical)) & (~((Eq(mMeasureCache, null))))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (~((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))))) & ((StrictLessThan(mMeasureCache_indexOfKey, 0)) | sIgnoreMeasureCache)) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(!(optical != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && (forceLayout || needsLayout) && (forceLayout) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(!(optical != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && (forceLayout || needsLayout) && (forceLayout) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(!(isLayoutModeOptical(this) != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT) && (-1 < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  key0 == widthMeasureSpec0 << 32 | heightMeasureSpec0 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec0 != mOldWidthMeasureSpec0, heightMeasureSpec0 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec0), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec0)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == -1,\n  mPrivateFlags30 == ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(optical0 != isLayoutModeOptical(mParent0)), mMeasureCache0_isNull), Or(forceLayout0, needsLayout0)), forceLayout0), Or(cacheIndex0 < 0, sIgnoreMeasureCache0)), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(_isLayoutModeOptical, _isLayoutModeOptical)))) & (Eq(mMeasureCache, null))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))) & ((StrictLessThan(-1, 0)) | sIgnoreMeasureCache)) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(!(optical != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && (forceLayout || needsLayout) && (!(forceLayout)) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(!(optical != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && (forceLayout || needsLayout) && (!(forceLayout)) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(!(isLayoutModeOptical(this) != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && (!((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT)) && (!(mMeasureCache.indexOfKey((long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL) < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nvalue0 = Int('value0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  key0 == widthMeasureSpec0 << 32 | heightMeasureSpec0 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec0 != mOldWidthMeasureSpec0, heightMeasureSpec0 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec0), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec0)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == mMeasureCache0.indexOfKey(key0),\n  value0 == mMeasureCache0.valueAt(cacheIndex0),\n  mPrivateFlags30 == PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(optical0 != isLayoutModeOptical(mParent0)), mMeasureCache0_isNull), Or(forceLayout0, needsLayout0)), Not(forceLayout0)), Not(Or(cacheIndex0 < 0, sIgnoreMeasureCache0))), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nmMeasureCache_indexOfKey = Symbol('mMeasureCache_indexOfKey')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(_isLayoutModeOptical, _isLayoutModeOptical)))) & (Eq(mMeasureCache, null))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (~((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))))) & (~(((StrictLessThan(mMeasureCache_indexOfKey, 0)) | sIgnoreMeasureCache)))) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(optical != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && (forceLayout || needsLayout) && (!(forceLayout)) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(optical != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && (forceLayout || needsLayout) && (!(forceLayout)) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(isLayoutModeOptical(this) != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && (!((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT)) && (!(mMeasureCache.indexOfKey((long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL) < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\noWidth0 = Int('oWidth0')\noHeight0 = Int('oHeight0')\nwidthMeasureSpec1 = Int('widthMeasureSpec1')\nheightMeasureSpec1 = Int('heightMeasureSpec1')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nvalue0 = Int('value0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  oWidth0 == insets.left + insets.right,\n  oHeight0 == insets.top + insets.bottom,\n  widthMeasureSpec1 == MeasureSpec.adjust(widthMeasureSpec0, optical0 ? -oWidth0 : oWidth0),\n  heightMeasureSpec1 == MeasureSpec.adjust(heightMeasureSpec0, optical0 ? -oHeight0 : oHeight0),\n  key0 == widthMeasureSpec1 << 32 | heightMeasureSpec1 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec1 != mOldWidthMeasureSpec0, heightMeasureSpec1 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec1), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec1)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == mMeasureCache0.indexOfKey(key0),\n  value0 == mMeasureCache0.valueAt(cacheIndex0),\n  mPrivateFlags30 == PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(optical0 != isLayoutModeOptical(mParent0), mMeasureCache0_isNull), Or(forceLayout0, needsLayout0)), Not(forceLayout0)), Not(Or(cacheIndex0 < 0, sIgnoreMeasureCache0))), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nmMeasureCache_indexOfKey = Symbol('mMeasureCache_indexOfKey')\nnull = Symbol('null')\npath_conjunction = ((((((Ne(_isLayoutModeOptical, _isLayoutModeOptical)) & (Eq(mMeasureCache, null))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (~((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))))) & (~(((StrictLessThan(mMeasureCache_indexOfKey, 0)) | sIgnoreMeasureCache)))) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(!(optical != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (!(forceLayout)) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(!(optical != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (!(forceLayout)) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(!(isLayoutModeOptical(this) != isLayoutModeOptical(mParent))) && (!(mMeasureCache == null)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && (!((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT)) && (mMeasureCache.indexOfKey((long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL) < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  key0 == widthMeasureSpec0 << 32 | heightMeasureSpec0 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec0 != mOldWidthMeasureSpec0, heightMeasureSpec0 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec0), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec0)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == mMeasureCache0.indexOfKey(key0),\n  mPrivateFlags30 == ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(optical0 != isLayoutModeOptical(mParent0)), Not(mMeasureCache0_isNull)), Or(forceLayout0, needsLayout0)), Not(forceLayout0)), Or(cacheIndex0 < 0, sIgnoreMeasureCache0)), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nmMeasureCache_indexOfKey = Symbol('mMeasureCache_indexOfKey')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(_isLayoutModeOptical, _isLayoutModeOptical)))) & (~((Eq(mMeasureCache, null))))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (~((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))))) & ((StrictLessThan(mMeasureCache_indexOfKey, 0)) | sIgnoreMeasureCache)) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(optical != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && (forceLayout || needsLayout) && (!(forceLayout)) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(optical != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && (forceLayout || needsLayout) && (!(forceLayout)) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(isLayoutModeOptical(this) != isLayoutModeOptical(mParent)) && (mMeasureCache == null) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && (!((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT)) && (mMeasureCache.indexOfKey((long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL) < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\noWidth0 = Int('oWidth0')\noHeight0 = Int('oHeight0')\nwidthMeasureSpec1 = Int('widthMeasureSpec1')\nheightMeasureSpec1 = Int('heightMeasureSpec1')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  oWidth0 == insets.left + insets.right,\n  oHeight0 == insets.top + insets.bottom,\n  widthMeasureSpec1 == MeasureSpec.adjust(widthMeasureSpec0, optical0 ? -oWidth0 : oWidth0),\n  heightMeasureSpec1 == MeasureSpec.adjust(heightMeasureSpec0, optical0 ? -oHeight0 : oHeight0),\n  key0 == widthMeasureSpec1 << 32 | heightMeasureSpec1 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec1 != mOldWidthMeasureSpec0, heightMeasureSpec1 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec1), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec1)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == mMeasureCache0.indexOfKey(key0),\n  mPrivateFlags30 == ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(optical0 != isLayoutModeOptical(mParent0), mMeasureCache0_isNull), Or(forceLayout0, needsLayout0)), Not(forceLayout0)), Or(cacheIndex0 < 0, sIgnoreMeasureCache0)), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nmMeasureCache_indexOfKey = Symbol('mMeasureCache_indexOfKey')\nnull = Symbol('null')\npath_conjunction = ((((((Ne(_isLayoutModeOptical, _isLayoutModeOptical)) & (Eq(mMeasureCache, null))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (~((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))))) & ((StrictLessThan(mMeasureCache_indexOfKey, 0)) | sIgnoreMeasureCache)) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(optical != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (forceLayout) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(optical != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (forceLayout) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(isLayoutModeOptical(this) != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT) && (-1 < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\noWidth0 = Int('oWidth0')\noHeight0 = Int('oHeight0')\nwidthMeasureSpec1 = Int('widthMeasureSpec1')\nheightMeasureSpec1 = Int('heightMeasureSpec1')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  oWidth0 == insets.left + insets.right,\n  oHeight0 == insets.top + insets.bottom,\n  widthMeasureSpec1 == MeasureSpec.adjust(widthMeasureSpec0, optical0 ? -oWidth0 : oWidth0),\n  heightMeasureSpec1 == MeasureSpec.adjust(heightMeasureSpec0, optical0 ? -oHeight0 : oHeight0),\n  key0 == widthMeasureSpec1 << 32 | heightMeasureSpec1 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec1 != mOldWidthMeasureSpec0, heightMeasureSpec1 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec1), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec1)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == -1,\n  mPrivateFlags30 == ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(optical0 != isLayoutModeOptical(mParent0), Not(mMeasureCache0_isNull)), Or(forceLayout0, needsLayout0)), forceLayout0), Or(cacheIndex0 < 0, sIgnoreMeasureCache0)), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nnull = Symbol('null')\npath_conjunction = ((((((Ne(_isLayoutModeOptical, _isLayoutModeOptical)) & (~((Eq(mMeasureCache, null))))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))) & ((StrictLessThan(-1, 0)) | sIgnoreMeasureCache)) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(optical != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (forceLayout) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(optical != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && (forceLayout || needsLayout) && (forceLayout) && (!(cacheIndex < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(isLayoutModeOptical(this) != isLayoutModeOptical(mParent)) && (!(mMeasureCache == null)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT) && (!(-1 < 0 || sIgnoreMeasureCache)) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\noWidth0 = Int('oWidth0')\noHeight0 = Int('oHeight0')\nwidthMeasureSpec1 = Int('widthMeasureSpec1')\nheightMeasureSpec1 = Int('heightMeasureSpec1')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nvalue0 = Int('value0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  oWidth0 == insets.left + insets.right,\n  oHeight0 == insets.top + insets.bottom,\n  widthMeasureSpec1 == MeasureSpec.adjust(widthMeasureSpec0, optical0 ? -oWidth0 : oWidth0),\n  heightMeasureSpec1 == MeasureSpec.adjust(heightMeasureSpec0, optical0 ? -oHeight0 : oHeight0),\n  key0 == widthMeasureSpec1 << 32 | heightMeasureSpec1 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec1 != mOldWidthMeasureSpec0, heightMeasureSpec1 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec1), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec1)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == -1,\n  value0 == mMeasureCache0.valueAt(cacheIndex0),\n  mPrivateFlags30 == PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(optical0 != isLayoutModeOptical(mParent0), Not(mMeasureCache0_isNull)), Or(forceLayout0, needsLayout0)), forceLayout0), Not(Or(cacheIndex0 < 0, sIgnoreMeasureCache0))), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nnull = Symbol('null')\npath_conjunction = ((((((Ne(_isLayoutModeOptical, _isLayoutModeOptical)) & (~((Eq(mMeasureCache, null))))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))) & (~(((StrictLessThan(-1, 0)) | sIgnoreMeasureCache)))) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.measure(int, int)",
    "exception": "throw new IllegalStateException(\"View with id \" + getId() + \": \" + getClass().getName() + \"#onMeasure() did not set the\" + \" measured dimension by calling\" + \" setMeasuredDimension()\");",
    "pathCojunction": "(!(optical != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && (forceLayout || needsLayout) && (!(forceLayout)) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "symbolicPathConjunction": "(!(optical != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && (forceLayout || needsLayout) && (!(forceLayout)) && (cacheIndex < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "backwardsPathConjunction": "(!(isLayoutModeOptical(this) != isLayoutModeOptical(mParent))) && (mMeasureCache == null) && ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT || widthMeasureSpec != mOldWidthMeasureSpec || heightMeasureSpec != mOldHeightMeasureSpec && (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize)) && (!((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT)) && (mMeasureCache.indexOfKey((long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL) < 0 || sIgnoreMeasureCache) && ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nwidthMeasureSpec0 = Int('widthMeasureSpec0')\nheightMeasureSpec0 = Int('heightMeasureSpec0')\noptical0 = Bool('optical0')\nkey0 = Int('key0')\nmPrivateFlags0 = Int('mPrivateFlags0')\nPFLAG_FORCE_LAYOUT0 = Int('PFLAG_FORCE_LAYOUT0')\nforceLayout0 = Bool('forceLayout0')\nmOldWidthMeasureSpec0 = Int('mOldWidthMeasureSpec0')\nmOldHeightMeasureSpec0 = Int('mOldHeightMeasureSpec0')\nspecChanged0 = Bool('specChanged0')\nMeasureSpec_EXACTLY0 = Int('MeasureSpec_EXACTLY0')\nisSpecExactly0 = Bool('isSpecExactly0')\nmatchesSpecSize0 = Bool('matchesSpecSize0')\nsAlwaysRemeasureExactly0 = Bool('sAlwaysRemeasureExactly0')\nneedsLayout0 = Bool('needsLayout0')\nmPrivateFlags1 = Int('mPrivateFlags1')\ncacheIndex0 = Int('cacheIndex0')\nsIgnoreMeasureCache0 = Bool('sIgnoreMeasureCache0')\nmPrivateFlags30 = Int('mPrivateFlags30')\nPFLAG_MEASURED_DIMENSION_SET0 = Int('PFLAG_MEASURED_DIMENSION_SET0')\nmMeasureCache0_isNull = Bool('mMeasureCache0_isNull')\n\nconstraints = [\n  optical0 == isLayoutModeOptical(this),\n  key0 == widthMeasureSpec0 << 32 | heightMeasureSpec0 & 0xffffffffL,\n  PFLAG_FORCE_LAYOUT0 == 0x00001000,\n  forceLayout0 == mPrivateFlags0 & PFLAG_FORCE_LAYOUT0 == PFLAG_FORCE_LAYOUT0,\n  specChanged0 == Or(widthMeasureSpec0 != mOldWidthMeasureSpec0, heightMeasureSpec0 != mOldHeightMeasureSpec0),\n  matchesSpecSize0 == And(getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec0), getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec0)),\n  needsLayout0 == And(specChanged0, Or(Or(sAlwaysRemeasureExactly0, Not(isSpecExactly0)), Not(matchesSpecSize0))),\n  mPrivateFlags1 == ~PFLAG_MEASURED_DIMENSION_SET,\n  cacheIndex0 == mMeasureCache0.indexOfKey(key0),\n  mPrivateFlags30 == ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT,\n  PFLAG_MEASURED_DIMENSION_SET0 == 0x00000800,\n  key0 >= -9223372036854775808, key0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(Not(optical0 != isLayoutModeOptical(mParent0)), mMeasureCache0_isNull), Or(forceLayout0, needsLayout0)), Not(forceLayout0)), Or(cacheIndex0 < 0, sIgnoreMeasureCache0)), mPrivateFlags1 & PFLAG_MEASURED_DIMENSION_SET0 != PFLAG_MEASURED_DIMENSION_SET0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nwidthMeasureSpec = Symbol('widthMeasureSpec', integer=True)\nheightMeasureSpec = Symbol('heightMeasureSpec', integer=True)\nmParent = Symbol('mParent')\nmMeasureCache = Symbol('mMeasureCache')\nmPrivateFlags = Symbol('mPrivateFlags', integer=True)\nmOldWidthMeasureSpec = Symbol('mOldWidthMeasureSpec', integer=True)\nmOldHeightMeasureSpec = Symbol('mOldHeightMeasureSpec', integer=True)\nsAlwaysRemeasureExactly = Symbol('sAlwaysRemeasureExactly')\nsIgnoreMeasureCache = Symbol('sIgnoreMeasureCache')\n_isLayoutModeOptical = Symbol('_isLayoutModeOptical')\nmMeasureCache_indexOfKey = Symbol('mMeasureCache_indexOfKey')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(_isLayoutModeOptical, _isLayoutModeOptical)))) & (Eq(mMeasureCache, null))) & (((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000)) | (Ne(widthMeasureSpec, mOldWidthMeasureSpec))) | ((Ne(heightMeasureSpec, mOldHeightMeasureSpec)) & ((sAlwaysRemeasureExactly | (~(isSpecExactly))) | (~(matchesSpecSize)))))) & (~((Eq((mPrivateFlags & PFLAG_FORCE_LAYOUT), 0x00001000))))) & ((StrictLessThan(mMeasureCache_indexOfKey, 0)) | sIgnoreMeasureCache)) & (Ne((~0x00000800 & 0x00000800), 0x00000800)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 24508,
    "throwingLine": 24557,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.View.setOverScrollMode(int)",
    "exception": "throw new IllegalArgumentException(\"Invalid overscroll mode \" + overScrollMode);",
    "pathCojunction": "(overScrollMode != OVER_SCROLL_ALWAYS && overScrollMode != OVER_SCROLL_IF_CONTENT_SCROLLS && overScrollMode != OVER_SCROLL_NEVER)",
    "symbolicPathConjunction": "(overScrollMode != OVER_SCROLL_ALWAYS && overScrollMode != OVER_SCROLL_IF_CONTENT_SCROLLS && overScrollMode != OVER_SCROLL_NEVER)",
    "backwardsPathConjunction": "(overScrollMode != OVER_SCROLL_ALWAYS && overScrollMode != OVER_SCROLL_IF_CONTENT_SCROLLS && overScrollMode != OVER_SCROLL_NEVER)",
    "simplifiedPathConjunction": "overScrollMode != 0 && overScrollMode != 1 && overScrollMode != 2",
    "z3Inputs": "[overScrollMode0 = 3,\n OVER_SCROLL_NEVER0 = 2,\n OVER_SCROLL_IF_CONTENT_SCROLLS0 = 1,\n OVER_SCROLL_ALWAYS0 = 0]\n[OVER_SCROLL_ALWAYS0 = 0,\n overScrollMode0 = 4,\n OVER_SCROLL_IF_CONTENT_SCROLLS0 = 1,\n OVER_SCROLL_NEVER0 = 2]\n[OVER_SCROLL_ALWAYS0 = 0,\n overScrollMode0 = 5,\n OVER_SCROLL_IF_CONTENT_SCROLLS0 = 1,\n OVER_SCROLL_NEVER0 = 2]\n[OVER_SCROLL_ALWAYS0 = 0,\n overScrollMode0 = 6,\n OVER_SCROLL_IF_CONTENT_SCROLLS0 = 1,\n OVER_SCROLL_NEVER0 = 2]\n[OVER_SCROLL_ALWAYS0 = 0,\n overScrollMode0 = 7,\n OVER_SCROLL_IF_CONTENT_SCROLLS0 = 1,\n OVER_SCROLL_NEVER0 = 2]\n[OVER_SCROLL_ALWAYS0 = 0,\n overScrollMode0 = 8,\n OVER_SCROLL_IF_CONTENT_SCROLLS0 = 1,\n OVER_SCROLL_NEVER0 = 2]\n[OVER_SCROLL_ALWAYS0 = 0,\n overScrollMode0 = 9,\n OVER_SCROLL_IF_CONTENT_SCROLLS0 = 1,\n OVER_SCROLL_NEVER0 = 2]\n[OVER_SCROLL_ALWAYS0 = 0,\n overScrollMode0 = 10,\n OVER_SCROLL_IF_CONTENT_SCROLLS0 = 1,\n OVER_SCROLL_NEVER0 = 2]\n[OVER_SCROLL_ALWAYS0 = 0,\n overScrollMode0 = 11,\n OVER_SCROLL_IF_CONTENT_SCROLLS0 = 1,\n OVER_SCROLL_NEVER0 = 2]\n[OVER_SCROLL_ALWAYS0 = 0,\n overScrollMode0 = 12,\n OVER_SCROLL_IF_CONTENT_SCROLLS0 = 1,\n OVER_SCROLL_NEVER0 = 2]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noverScrollMode0 = Int('overScrollMode0')\nOVER_SCROLL_ALWAYS0 = Int('OVER_SCROLL_ALWAYS0')\nOVER_SCROLL_IF_CONTENT_SCROLLS0 = Int('OVER_SCROLL_IF_CONTENT_SCROLLS0')\nOVER_SCROLL_NEVER0 = Int('OVER_SCROLL_NEVER0')\n\nconstraints = [\n  OVER_SCROLL_ALWAYS0 == 0,\n  OVER_SCROLL_IF_CONTENT_SCROLLS0 == 1,\n  OVER_SCROLL_NEVER0 == 2,\n  And(And(overScrollMode0 != OVER_SCROLL_ALWAYS0, overScrollMode0 != OVER_SCROLL_IF_CONTENT_SCROLLS0), overScrollMode0 != OVER_SCROLL_NEVER0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noverScrollMode = Symbol('overScrollMode', integer=True)\npath_conjunction = (((Ne(overScrollMode, 0)) & (Ne(overScrollMode, 1))) & (Ne(overScrollMode, 2)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 25879,
    "throwingLine": 25883,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/View.java"
  },
  {
    "qualifiedSignature": "android.view.Choreographer.postCallback(int, java.lang.Runnable, java.lang.Object)",
    "exception": "throw new IllegalArgumentException(\"callbackType is invalid\")",
    "pathCojunction": "(!(action == null)) && (callbackType < 0 || callbackType > CALLBACK_COMMIT)",
    "symbolicPathConjunction": "(postCallbackDelayed(callbackType, action, token, 0))",
    "backwardsPathConjunction": "(!(action == null)) && (callbackType < 0 || callbackType > CALLBACK_COMMIT)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallbackType0 = Int('callbackType0')\naction0_isNull = Bool('action0_isNull')\n\nconstraints = [\n  And(Not(action0_isNull), Or(callbackType0 < 0, callbackType0 > CALLBACK_COMMIT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncallbackType = Symbol('callbackType', integer=True)\naction = Symbol('action')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(action, null)))) & ((StrictLessThan(callbackType, 0)) | (StrictGreaterThan(callbackType, CALLBACK_COMMIT))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 416,
    "throwingLine": 417,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/Choreographer.java"
  },
  {
    "qualifiedSignature": "android.view.Choreographer.postCallback(int, java.lang.Runnable, java.lang.Object)",
    "exception": "throw new IllegalArgumentException(\"action must not be null\")",
    "pathCojunction": "(action == null)",
    "symbolicPathConjunction": "(postCallbackDelayed(callbackType, action, token, 0))",
    "backwardsPathConjunction": "(action == null)",
    "simplifiedPathConjunction": "action == null",
    "z3Inputs": "[action0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallbackType0 = Int('callbackType0')\naction0_isNull = Bool('action0_isNull')\n\nconstraints = [\n  action0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\naction = Symbol('action')\nnull = Symbol('null')\npath_conjunction = (Eq(action, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 416,
    "throwingLine": 417,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/Choreographer.java"
  },
  {
    "qualifiedSignature": "android.view.Choreographer.postCallbackDelayed(int, java.lang.Runnable, java.lang.Object, long)",
    "exception": "throw new IllegalArgumentException(\"action must not be null\");",
    "pathCojunction": "(action == null)",
    "symbolicPathConjunction": "(action == null)",
    "backwardsPathConjunction": "(action == null)",
    "simplifiedPathConjunction": "action == null",
    "z3Inputs": "[delayMillis0 = -9223372036854775808, action0_isNull = True]\n[action0_isNull = True, delayMillis0 = 0]\n[action0_isNull = True, delayMillis0 = -1]\n[action0_isNull = True, delayMillis0 = -2]\n[action0_isNull = True, delayMillis0 = -3]\n[action0_isNull = True, delayMillis0 = -4]\n[action0_isNull = True, delayMillis0 = -5]\n[action0_isNull = True, delayMillis0 = -6]\n[action0_isNull = True, delayMillis0 = -7]\n[action0_isNull = True, delayMillis0 = -8]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallbackType0 = Int('callbackType0')\ndelayMillis0 = Int('delayMillis0')\naction0_isNull = Bool('action0_isNull')\n\nconstraints = [\n  delayMillis0 >= -9223372036854775808, delayMillis0 <= 9223372036854775807, # implicit\n  action0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\naction = Symbol('action')\nnull = Symbol('null')\npath_conjunction = (Eq(action, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 436,
    "throwingLine": 438,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/Choreographer.java"
  },
  {
    "qualifiedSignature": "android.view.Choreographer.postCallbackDelayed(int, java.lang.Runnable, java.lang.Object, long)",
    "exception": "throw new IllegalArgumentException(\"callbackType is invalid\");",
    "pathCojunction": "(!(action == null)) && (callbackType < 0 || callbackType > CALLBACK_LAST)",
    "symbolicPathConjunction": "(!(action == null)) && (callbackType < 0 || callbackType > CALLBACK_LAST)",
    "backwardsPathConjunction": "(!(action == null)) && (callbackType < 0 || callbackType > CALLBACK_LAST)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallbackType0 = Int('callbackType0')\ndelayMillis0 = Int('delayMillis0')\nCALLBACK_LAST0 = Int('CALLBACK_LAST0')\naction0_isNull = Bool('action0_isNull')\n\nconstraints = [\n  CALLBACK_LAST0 == CALLBACK_COMMIT,\n  delayMillis0 >= -9223372036854775808, delayMillis0 <= 9223372036854775807, # implicit\n  And(Not(action0_isNull), Or(callbackType0 < 0, callbackType0 > CALLBACK_LAST0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncallbackType = Symbol('callbackType', integer=True)\naction = Symbol('action')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(action, null)))) & ((StrictLessThan(callbackType, 0)) | (StrictGreaterThan(callbackType, CALLBACK_COMMIT))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 436,
    "throwingLine": 441,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/Choreographer.java"
  },
  {
    "qualifiedSignature": "android.view.Choreographer.removeCallbacks(int, java.lang.Runnable, java.lang.Object)",
    "exception": "throw new IllegalArgumentException(\"callbackType is invalid\");",
    "pathCojunction": "(callbackType < 0 || callbackType > CALLBACK_LAST)",
    "symbolicPathConjunction": "(callbackType < 0 || callbackType > CALLBACK_LAST)",
    "backwardsPathConjunction": "(callbackType < 0 || callbackType > CALLBACK_LAST)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallbackType0 = Int('callbackType0')\nCALLBACK_LAST0 = Int('CALLBACK_LAST0')\n\nconstraints = [\n  CALLBACK_LAST0 == CALLBACK_COMMIT,\n  Or(callbackType0 < 0, callbackType0 > CALLBACK_LAST0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncallbackType = Symbol('callbackType', integer=True)\npath_conjunction = ((StrictLessThan(callbackType, 0)) | (StrictGreaterThan(callbackType, CALLBACK_COMMIT)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 485,
    "throwingLine": 487,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/Choreographer.java"
  },
  {
    "qualifiedSignature": "android.view.Choreographer.postFrameCallback(android.view.Choreographer.FrameCallback)",
    "exception": "throw new IllegalArgumentException(\"callback must not be null\")",
    "pathCojunction": "(callback == null)",
    "symbolicPathConjunction": "(postFrameCallbackDelayed(callback, 0))",
    "backwardsPathConjunction": "(callback == null)",
    "simplifiedPathConjunction": "callback == null",
    "z3Inputs": "[callback0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncallback = Symbol('callback')\nnull = Symbol('null')\npath_conjunction = (Eq(callback, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 518,
    "throwingLine": 519,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/Choreographer.java"
  },
  {
    "qualifiedSignature": "android.view.Choreographer.postFrameCallbackDelayed(android.view.Choreographer.FrameCallback, long)",
    "exception": "throw new IllegalArgumentException(\"callback must not be null\");",
    "pathCojunction": "(callback == null)",
    "symbolicPathConjunction": "(callback == null)",
    "backwardsPathConjunction": "(callback == null)",
    "simplifiedPathConjunction": "callback == null",
    "z3Inputs": "[delayMillis0 = -9223372036854775808,\n callback0_isNull = True]\n[delayMillis0 = 0, callback0_isNull = True]\n[delayMillis0 = -1, callback0_isNull = True]\n[delayMillis0 = -2, callback0_isNull = True]\n[delayMillis0 = -3, callback0_isNull = True]\n[delayMillis0 = -4, callback0_isNull = True]\n[delayMillis0 = -5, callback0_isNull = True]\n[delayMillis0 = -6, callback0_isNull = True]\n[delayMillis0 = -7, callback0_isNull = True]\n[delayMillis0 = -8, callback0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndelayMillis0 = Int('delayMillis0')\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  delayMillis0 >= -9223372036854775808, delayMillis0 <= 9223372036854775807, # implicit\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncallback = Symbol('callback')\nnull = Symbol('null')\npath_conjunction = (Eq(callback, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 534,
    "throwingLine": 536,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/Choreographer.java"
  },
  {
    "qualifiedSignature": "android.view.Choreographer.removeFrameCallback(android.view.Choreographer.FrameCallback)",
    "exception": "throw new IllegalArgumentException(\"callback must not be null\");",
    "pathCojunction": "(callback == null)",
    "symbolicPathConjunction": "(callback == null)",
    "backwardsPathConjunction": "(callback == null)",
    "simplifiedPathConjunction": "callback == null",
    "z3Inputs": "[callback0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncallback = Symbol('callback')\nnull = Symbol('null')\npath_conjunction = (Eq(callback, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 551,
    "throwingLine": 553,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/Choreographer.java"
  },
  {
    "qualifiedSignature": "android.view.InputChannel.openInputChannelPair(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"name must not be null\");",
    "pathCojunction": "(name == null)",
    "symbolicPathConjunction": "(name == null)",
    "backwardsPathConjunction": "(name == null)",
    "simplifiedPathConjunction": "name == null",
    "z3Inputs": "[name0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\nname0_isNull = Bool('name0_isNull')\n\nconstraints = [\n  name0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nname = Symbol('name')\nnull = Symbol('null')\npath_conjunction = (Eq(name, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 93,
    "throwingLine": 95,
    "isStatic": true,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/InputChannel.java"
  },
  {
    "qualifiedSignature": "android.view.InputChannel.transferTo(android.view.InputChannel)",
    "exception": "throw new IllegalArgumentException(\"outParameter must not be null\");",
    "pathCojunction": "(outParameter == null)",
    "symbolicPathConjunction": "(outParameter == null)",
    "backwardsPathConjunction": "(outParameter == null)",
    "simplifiedPathConjunction": "null == outParameter",
    "z3Inputs": "[outParameter0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noutParameter0_isNull = Bool('outParameter0_isNull')\n\nconstraints = [\n  outParameter0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutParameter = Symbol('outParameter')\nnull = Symbol('null')\npath_conjunction = (Eq(outParameter, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 128,
    "throwingLine": 130,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/InputChannel.java"
  }
]