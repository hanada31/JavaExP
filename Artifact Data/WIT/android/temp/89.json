[
  {
    "qualifiedSignature": "android.view.ViewDebug.PictureCallbackHandler.run()",
    "exception": "throw new IllegalStateException(\"ViewDebug#startRenderingCommandsCapture must be given an executor that \" + \"invokes asynchronously\");",
    "pathCojunction": "(Thread.currentThread() == mRenderThread)",
    "symbolicPathConjunction": "(Thread.currentThread() == mRenderThread)",
    "backwardsPathConjunction": "(Thread.currentThread() == mRenderThread)",
    "simplifiedPathConjunction": "Thread.currentThread() == mRenderThread",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmStopListening0 = Bool('mStopListening0')\nisStopped0 = Bool('isStopped0')\n\nconstraints = [\n  isStopped0 == mStopListening0,\n  Thread.currentThread() == mRenderThread0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmRenderThread = Symbol('mRenderThread')\nThread_currentThread = Symbol('Thread_currentThread')\npath_conjunction = (Eq(Thread_currentThread, mRenderThread))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 803,
    "throwingLine": 810,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/view/ViewDebug.java"
  }
]