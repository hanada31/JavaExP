[
  {
    "qualifiedSignature": "android.app.Fragment.setInitialSavedState(android.app.Fragment.SavedState)",
    "exception": "throw new IllegalStateException(\"Fragment already active\");",
    "pathCojunction": "(mIndex >= 0)",
    "symbolicPathConjunction": "(mIndex >= 0)",
    "backwardsPathConjunction": "(mIndex >= 0)",
    "simplifiedPathConjunction": "mIndex >= 0",
    "z3Inputs": "[mIndex0 = 0]\n[mIndex0 = 1]\n[mIndex0 = 2]\n[mIndex0 = 3]\n[mIndex0 = 4]\n[mIndex0 = 5]\n[mIndex0 = 6]\n[mIndex0 = 7]\n[mIndex0 = 8]\n[mIndex0 = 9]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmIndex0 = Int('mIndex0')\n\nconstraints = [\n  mIndex0 >= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmIndex = Symbol('mIndex', integer=True)\npath_conjunction = (GreaterThan(mIndex, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 696,
    "throwingLine": 698,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/Fragment.java"
  },
  {
    "qualifiedSignature": "android.app.Fragment.requestPermissions(java.lang.String[], int)",
    "exception": "throw new IllegalStateException(\"Fragment \" + this + \" not attached to Activity\");",
    "pathCojunction": "(mHost == null)",
    "symbolicPathConjunction": "(mHost == null)",
    "backwardsPathConjunction": "(mHost == null)",
    "simplifiedPathConjunction": "mHost == null",
    "z3Inputs": "[mHost0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrequestCode0 = Int('requestCode0')\nmHost0_isNull = Bool('mHost0_isNull')\n\nconstraints = [\n  mHost0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmHost = Symbol('mHost')\nnull = Symbol('null')\npath_conjunction = (Eq(mHost, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1248,
    "throwingLine": 1250,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/Fragment.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.getPackageResourcePath()",
    "exception": "throw new RuntimeException(\"Not supported in system context\");",
    "pathCojunction": "(!(mPackageInfo != null))",
    "symbolicPathConjunction": "(!(mPackageInfo != null))",
    "backwardsPathConjunction": "(!(mPackageInfo != null))",
    "simplifiedPathConjunction": "mPackageInfo == null",
    "z3Inputs": "[mPackageInfo0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmPackageInfo0_isNull = Bool('mPackageInfo0_isNull')\n\nconstraints = [\n  Not(Not(mPackageInfo0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPackageInfo = Symbol('mPackageInfo')\nnull = Symbol('null')\npath_conjunction = (~((Ne(mPackageInfo, null))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 405,
    "throwingLine": 409,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.getPackageCodePath()",
    "exception": "throw new RuntimeException(\"Not supported in system context\");",
    "pathCojunction": "(!(mPackageInfo != null))",
    "symbolicPathConjunction": "(!(mPackageInfo != null))",
    "backwardsPathConjunction": "(!(mPackageInfo != null))",
    "simplifiedPathConjunction": "mPackageInfo == null",
    "z3Inputs": "[mPackageInfo0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmPackageInfo0_isNull = Bool('mPackageInfo0_isNull')\n\nconstraints = [\n  Not(Not(mPackageInfo0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPackageInfo = Symbol('mPackageInfo')\nnull = Symbol('null')\npath_conjunction = (~((Ne(mPackageInfo, null))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 413,
    "throwingLine": 417,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.openFileInput(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"File \" + name + \" contains a path separator\")",
    "pathCojunction": "(!(name.indexOf(File.separatorChar) < 0))",
    "symbolicPathConjunction": "(!(name.indexOf(File.separatorChar) < 0))",
    "backwardsPathConjunction": "(!(name.indexOf(File.separatorChar) < 0))",
    "simplifiedPathConjunction": "name.indexOf(File.separatorChar) >= 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\n\nconstraints = [\n  Not(name0.indexOf(File.separatorChar) < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nname = Symbol('name')\nname_indexOf = Symbol('name_indexOf')\npath_conjunction = (~((StrictLessThan(name_indexOf, 0))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 598,
    "throwingLine": 599,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.deleteFile(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"File \" + name + \" contains a path separator\")",
    "pathCojunction": "(!(name.indexOf(File.separatorChar) < 0))",
    "symbolicPathConjunction": "(!(name.indexOf(File.separatorChar) < 0))",
    "backwardsPathConjunction": "(!(name.indexOf(File.separatorChar) < 0))",
    "simplifiedPathConjunction": "name.indexOf(File.separatorChar) >= 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\n\nconstraints = [\n  Not(name0.indexOf(File.separatorChar) < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nname = Symbol('name')\nname_indexOf = Symbol('name_indexOf')\npath_conjunction = (~((StrictLessThan(name_indexOf, 0))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 627,
    "throwingLine": 628,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.getFileStreamPath(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"File \" + name + \" contains a path separator\")",
    "pathCojunction": "(!(name.indexOf(File.separatorChar) < 0))",
    "symbolicPathConjunction": "(!(name.indexOf(File.separatorChar) < 0))",
    "backwardsPathConjunction": "(!(name.indexOf(File.separatorChar) < 0))",
    "simplifiedPathConjunction": "name.indexOf(File.separatorChar) >= 0",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\n\nconstraints = [\n  Not(name0.indexOf(File.separatorChar) < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nname = Symbol('name')\nname_indexOf = Symbol('name_indexOf')\npath_conjunction = (~((StrictLessThan(name_indexOf, 0))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 781,
    "throwingLine": 782,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.getSharedPreferencesPath(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"File \" + name + \".xml\" + \" contains a path separator\")",
    "pathCojunction": "(!(name + \".xml\".indexOf(File.separatorChar) < 0))",
    "symbolicPathConjunction": "(!(name.indexOf(File.separatorChar) < 0))",
    "backwardsPathConjunction": "(!(name + \".xml\".indexOf(File.separatorChar) < 0))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\n\nconstraints = [\n  Not(name0 + \".xml\".indexOf(File.separatorChar) < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nname = Symbol('name')\nBUG_IN_SIMPLIFICATION\npath_conjunction = (~((StrictLessThan((name + \".xml\"_indexOf), 0))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": false,
    "maybe": true,
    "line": 786,
    "throwingLine": 787,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.checkCallingPermission(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"permission is null\");",
    "pathCojunction": "(permission == null)",
    "symbolicPathConjunction": "(permission == null)",
    "backwardsPathConjunction": "(permission == null)",
    "simplifiedPathConjunction": "null == permission",
    "z3Inputs": "[permission0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npermission0 = String('permission0')\npermission0_isNull = Bool('permission0_isNull')\n\nconstraints = [\n  permission0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npermission = Symbol('permission')\nnull = Symbol('null')\npath_conjunction = (Eq(permission, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1857,
    "throwingLine": 1859,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.checkCallingOrSelfPermission(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"permission is null\");",
    "pathCojunction": "(permission == null)",
    "symbolicPathConjunction": "(permission == null)",
    "backwardsPathConjunction": "(permission == null)",
    "simplifiedPathConjunction": "null == permission",
    "z3Inputs": "[permission0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npermission0 = String('permission0')\npermission0_isNull = Bool('permission0_isNull')\n\nconstraints = [\n  permission0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npermission = Symbol('permission')\nnull = Symbol('null')\npath_conjunction = (Eq(permission, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1870,
    "throwingLine": 1872,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.checkSelfPermission(java.lang.String)",
    "exception": "throw new IllegalArgumentException(\"permission is null\");",
    "pathCojunction": "(permission == null)",
    "symbolicPathConjunction": "(permission == null)",
    "backwardsPathConjunction": "(permission == null)",
    "simplifiedPathConjunction": "null == permission",
    "z3Inputs": "[permission0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npermission0 = String('permission0')\npermission0_isNull = Bool('permission0_isNull')\n\nconstraints = [\n  permission0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npermission = Symbol('permission')\nnull = Symbol('null')\npath_conjunction = (Eq(permission, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 1880,
    "throwingLine": 1882,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.getDataDir()",
    "exception": "throw new RuntimeException(\"No package details found for package \" + getPackageName());",
    "pathCojunction": "(!(mPackageInfo != null))",
    "symbolicPathConjunction": "(!(mPackageInfo != null))",
    "backwardsPathConjunction": "(!(mPackageInfo != null))",
    "simplifiedPathConjunction": "mPackageInfo == null",
    "z3Inputs": "[mPackageInfo0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmPackageInfo0_isNull = Bool('mPackageInfo0_isNull')\n\nconstraints = [\n  Not(Not(mPackageInfo0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPackageInfo = Symbol('mPackageInfo')\nnull = Symbol('null')\npath_conjunction = (~((Ne(mPackageInfo, null))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 2328,
    "throwingLine": 2350,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.getDataDir()",
    "exception": "throw new RuntimeException(\"No data directory found for package \" + getPackageName());",
    "pathCojunction": "(mPackageInfo != null) && (isCredentialProtectedStorage()) && (!(res != null))",
    "symbolicPathConjunction": "(mPackageInfo != null) && (isCredentialProtectedStorage()) && (!(res != null))",
    "backwardsPathConjunction": "(mPackageInfo != null) && (isCredentialProtectedStorage()) && (!(mPackageInfo.getCredentialProtectedDataDirFile() != null))",
    "simplifiedPathConjunction": "isCredentialProtectedStorage() && mPackageInfo.getCredentialProtectedDataDirFile() == null && mPackageInfo != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmPackageInfo0_isNull = Bool('mPackageInfo0_isNull')\nres1_isNull = Bool('res1_isNull')\nres0_isNull = Bool('res0_isNull')\n\nconstraints = [\n  res0_isNull, \n  res1 == mPackageInfo0.getCredentialProtectedDataDirFile(),\n  And(And(Not(mPackageInfo0_isNull), isCredentialProtectedStorage()), Not(Not(res1_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPackageInfo = Symbol('mPackageInfo')\n_isCredentialProtectedStorage = Symbol('_isCredentialProtectedStorage')\nmPackageInfo_getCredentialProtectedDataDirFile = Symbol('mPackageInfo_getCredentialProtectedDataDirFile')\nnull = Symbol('null')\npath_conjunction = (((Ne(mPackageInfo, null)) & _isCredentialProtectedStorage) & (~((Ne(mPackageInfo_getCredentialProtectedDataDirFile, null)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 2328,
    "throwingLine": 2346,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.getDataDir()",
    "exception": "throw new RuntimeException(\"No data directory found for package \" + getPackageName());",
    "pathCojunction": "(mPackageInfo != null) && (!(isCredentialProtectedStorage())) && (!(isDeviceProtectedStorage())) && (!(res != null))",
    "symbolicPathConjunction": "(mPackageInfo != null) && (!(isCredentialProtectedStorage())) && (!(isDeviceProtectedStorage())) && (!(res != null))",
    "backwardsPathConjunction": "(mPackageInfo != null) && (!(isCredentialProtectedStorage())) && (!(isDeviceProtectedStorage())) && (!(mPackageInfo.getDataDirFile() != null))",
    "simplifiedPathConjunction": "mPackageInfo.getDataDirFile() == null && !isCredentialProtectedStorage() && !isDeviceProtectedStorage() && mPackageInfo != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmPackageInfo0_isNull = Bool('mPackageInfo0_isNull')\nres1_isNull = Bool('res1_isNull')\nres0_isNull = Bool('res0_isNull')\n\nconstraints = [\n  res0_isNull, \n  res1 == mPackageInfo0.getDataDirFile(),\n  And(And(And(Not(mPackageInfo0_isNull), Not(isCredentialProtectedStorage())), Not(isDeviceProtectedStorage())), Not(Not(res1_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPackageInfo = Symbol('mPackageInfo')\n_isCredentialProtectedStorage = Symbol('_isCredentialProtectedStorage')\n_isDeviceProtectedStorage = Symbol('_isDeviceProtectedStorage')\nmPackageInfo_getDataDirFile = Symbol('mPackageInfo_getDataDirFile')\nnull = Symbol('null')\npath_conjunction = ((((Ne(mPackageInfo, null)) & (~(_isCredentialProtectedStorage))) & (~(_isDeviceProtectedStorage))) & (~((Ne(mPackageInfo_getDataDirFile, null)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 2328,
    "throwingLine": 2346,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.ContextImpl.getDataDir()",
    "exception": "throw new RuntimeException(\"No data directory found for package \" + getPackageName());",
    "pathCojunction": "(mPackageInfo != null) && (!(isCredentialProtectedStorage())) && (isDeviceProtectedStorage()) && (!(res != null))",
    "symbolicPathConjunction": "(mPackageInfo != null) && (!(isCredentialProtectedStorage())) && (isDeviceProtectedStorage()) && (!(res != null))",
    "backwardsPathConjunction": "(mPackageInfo != null) && (!(isCredentialProtectedStorage())) && (isDeviceProtectedStorage()) && (!(mPackageInfo.getDeviceProtectedDataDirFile() != null))",
    "simplifiedPathConjunction": "isDeviceProtectedStorage() && mPackageInfo.getDeviceProtectedDataDirFile() == null && !isCredentialProtectedStorage() && mPackageInfo != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmPackageInfo0_isNull = Bool('mPackageInfo0_isNull')\nres1_isNull = Bool('res1_isNull')\nres0_isNull = Bool('res0_isNull')\n\nconstraints = [\n  res0_isNull, \n  res1 == mPackageInfo0.getDeviceProtectedDataDirFile(),\n  And(And(And(Not(mPackageInfo0_isNull), Not(isCredentialProtectedStorage())), isDeviceProtectedStorage()), Not(Not(res1_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmPackageInfo = Symbol('mPackageInfo')\n_isCredentialProtectedStorage = Symbol('_isCredentialProtectedStorage')\n_isDeviceProtectedStorage = Symbol('_isDeviceProtectedStorage')\nmPackageInfo_getDeviceProtectedDataDirFile = Symbol('mPackageInfo_getDeviceProtectedDataDirFile')\nnull = Symbol('null')\npath_conjunction = ((((Ne(mPackageInfo, null)) & (~(_isCredentialProtectedStorage))) & _isDeviceProtectedStorage) & (~((Ne(mPackageInfo_getDeviceProtectedDataDirFile, null)))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 2328,
    "throwingLine": 2346,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ContextImpl.java"
  },
  {
    "qualifiedSignature": "android.app.Activity.requireViewById(int)",
    "exception": "throw new IllegalArgumentException(\"ID does not reference a View inside this Activity\");",
    "pathCojunction": "(view == null)",
    "symbolicPathConjunction": "(findViewById(id)) && (view == null)",
    "backwardsPathConjunction": "(getWindow().findViewById(id) == null)",
    "simplifiedPathConjunction": "getWindow().findViewById(id) == null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nview0_isNull = Bool('view0_isNull')\n\nconstraints = [\n  view0 == getWindow().findViewById(id0),\n  view0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nid = Symbol('id', integer=True)\n_getWindow_findViewById = Symbol('_getWindow_findViewById')\n_getWindow = Symbol('_getWindow')\nnull = Symbol('null')\npath_conjunction = (Eq(_getWindow_findViewById, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 3228,
    "throwingLine": 3231,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/Activity.java"
  },
  {
    "qualifiedSignature": "android.app.Activity.dismissDialog(int)",
    "exception": "throw missingDialog(id);",
    "pathCojunction": "(!(mManagedDialogs == null)) && (md == null)",
    "symbolicPathConjunction": "(!(mManagedDialogs == null)) && (md == null)",
    "backwardsPathConjunction": "(!(mManagedDialogs == null)) && (mManagedDialogs.get(id) == null)",
    "simplifiedPathConjunction": "mManagedDialogs.get(id) == null && mManagedDialogs != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nmManagedDialogs0_isNull = Bool('mManagedDialogs0_isNull')\nmd0_isNull = Bool('md0_isNull')\n\nconstraints = [\n  md0 == mManagedDialogs0.get(id0),\n  And(Not(mManagedDialogs0_isNull), md0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nid = Symbol('id', integer=True)\nmManagedDialogs = Symbol('mManagedDialogs')\nmManagedDialogs_get = Symbol('mManagedDialogs_get')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(mManagedDialogs, null)))) & (Eq(mManagedDialogs_get, null)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 4696,
    "throwingLine": 4703,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/Activity.java"
  },
  {
    "qualifiedSignature": "android.app.Activity.dismissDialog(int)",
    "exception": "throw missingDialog(id);",
    "pathCojunction": "(mManagedDialogs == null)",
    "symbolicPathConjunction": "(mManagedDialogs == null)",
    "backwardsPathConjunction": "(mManagedDialogs == null)",
    "simplifiedPathConjunction": "mManagedDialogs == null",
    "z3Inputs": "[mManagedDialogs0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = Int('id0')\nmManagedDialogs0_isNull = Bool('mManagedDialogs0_isNull')\n\nconstraints = [\n  mManagedDialogs0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmManagedDialogs = Symbol('mManagedDialogs')\nnull = Symbol('null')\npath_conjunction = (Eq(mManagedDialogs, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 4696,
    "throwingLine": 4698,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/Activity.java"
  },
  {
    "qualifiedSignature": "android.app.Activity.requestPermissions(java.lang.String[], int)",
    "exception": "throw new IllegalArgumentException(\"requestCode should be >= 0\");",
    "pathCojunction": "(requestCode < 0)",
    "symbolicPathConjunction": "(requestCode < 0)",
    "backwardsPathConjunction": "(requestCode < 0)",
    "simplifiedPathConjunction": "requestCode < 0",
    "z3Inputs": "[requestCode0 = -1]\n[requestCode0 = -2]\n[requestCode0 = -3]\n[requestCode0 = -4]\n[requestCode0 = -5]\n[requestCode0 = -6]\n[requestCode0 = -7]\n[requestCode0 = -8]\n[requestCode0 = -9]\n[requestCode0 = -10]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrequestCode0 = Int('requestCode0')\n\nconstraints = [\n  requestCode0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrequestCode = Symbol('requestCode', integer=True)\npath_conjunction = (StrictLessThan(requestCode, 0))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 5076,
    "throwingLine": 5078,
    "isStatic": false,
    "targetOnlyArguments": true,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/Activity.java"
  },
  {
    "qualifiedSignature": "android.app.Activity.recreate()",
    "exception": "throw new IllegalStateException(\"Can only be called on top-level activity\");",
    "pathCojunction": "(mParent != null)",
    "symbolicPathConjunction": "(mParent != null)",
    "backwardsPathConjunction": "(mParent != null)",
    "simplifiedPathConjunction": "mParent != null",
    "z3Inputs": "[mParent0_isNull = False]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmParent0_isNull = Bool('mParent0_isNull')\n\nconstraints = [\n  Not(mParent0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmParent = Symbol('mParent')\nnull = Symbol('null')\npath_conjunction = (Ne(mParent, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": false,
    "line": 6196,
    "throwingLine": 6198,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/Activity.java"
  },
  {
    "qualifiedSignature": "android.app.Activity.recreate()",
    "exception": "throw new IllegalStateException(\"Must be called from main thread\");",
    "pathCojunction": "(!(mParent != null)) && (Looper.myLooper() != mMainThread.getLooper())",
    "symbolicPathConjunction": "(!(mParent != null)) && (Looper.myLooper() != mMainThread.getLooper())",
    "backwardsPathConjunction": "(!(mParent != null)) && (Looper.myLooper() != mMainThread.getLooper())",
    "simplifiedPathConjunction": "mParent == null && Looper.myLooper() != mMainThread.getLooper()",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmParent0_isNull = Bool('mParent0_isNull')\n\nconstraints = [\n  And(Not(Not(mParent0_isNull)), Looper.myLooper() != mMainThread0.getLooper())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmParent = Symbol('mParent')\nmMainThread = Symbol('mMainThread')\nLooper_myLooper = Symbol('Looper_myLooper')\nmMainThread_getLooper = Symbol('mMainThread_getLooper')\nnull = Symbol('null')\npath_conjunction = ((~((Ne(mParent, null)))) & (Ne(Looper_myLooper, mMainThread_getLooper)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 6196,
    "throwingLine": 6201,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/Activity.java"
  },
  {
    "qualifiedSignature": "android.app.ListActivity.onContentChanged()",
    "exception": "throw new RuntimeException(\"Your content must have a ListView whose id attribute is \" + \"'android.R.id.list'\");",
    "pathCojunction": "(mList == null)",
    "symbolicPathConjunction": "(mList == null)",
    "backwardsPathConjunction": "(mList == null)",
    "simplifiedPathConjunction": "mList == null",
    "z3Inputs": "[mList0_isNull = True]\n",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmList0_isNull = Bool('mList0_isNull')\n\nconstraints = [\n  mList0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmList = Symbol('mList')\nnull = Symbol('null')\npath_conjunction = (Eq(mList, null))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": false,
    "line": 238,
    "throwingLine": 243,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/app/ListActivity.java"
  }
]