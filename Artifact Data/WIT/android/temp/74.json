[
  {
    "qualifiedSignature": "android.net.MacAddress.byteAddrFromStringAddr(java.lang.String)",
    "exception": "throw new IllegalArgumentException(addr + \"was not a valid MAC address\");",
    "pathCojunction": "(!(parts.length != ETHER_ADDR_LEN)) && (i < ETHER_ADDR_LEN) && (x < 0 || 0xff < x)",
    "symbolicPathConjunction": "(!(parts.length != ETHER_ADDR_LEN)) && (i < ETHER_ADDR_LEN) && (x < 0 || 0xff < x)",
    "backwardsPathConjunction": "(!(addr.split(\":\").length != ETHER_ADDR_LEN)) && (0 < ETHER_ADDR_LEN) && (Integer.valueOf(parts[i], 16) < 0 || 0xff < Integer.valueOf(parts[i], 16))",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\naddr0 = String('addr0')\nETHER_ADDR_LEN0 = Int('ETHER_ADDR_LEN0')\ni0 = Int('i0')\nx0 = Int('x0')\nparts0_length = Int('parts0_length')\n\nconstraints = [\n  parts0 == addr0.split(\":\"),\n  ETHER_ADDR_LEN0 == 6,\n  bytes0 == new byte[ETHER_ADDR_LEN0],\n  i0 == 0,\n  x0 == Integer.valueOf(parts0[i0], 16),\n  parts0_length >= 0, # implicit\n  And(And(Not(parts0_length != ETHER_ADDR_LEN0), i0 < ETHER_ADDR_LEN0), Or(x0 < 0, 0xff < x0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": false,
    "maybe": true,
    "line": 223,
    "throwingLine": 233,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/MacAddress.java"
  },
  {
    "qualifiedSignature": "android.net.MacAddress.byteAddrFromStringAddr(java.lang.String)",
    "exception": "throw new IllegalArgumentException(addr + \" was not a valid MAC address\");",
    "pathCojunction": "(parts.length != ETHER_ADDR_LEN)",
    "symbolicPathConjunction": "(parts.length != ETHER_ADDR_LEN)",
    "backwardsPathConjunction": "(addr.split(\":\").length != ETHER_ADDR_LEN)",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\naddr0 = String('addr0')\nETHER_ADDR_LEN0 = Int('ETHER_ADDR_LEN0')\nparts0_length = Int('parts0_length')\n\nconstraints = [\n  parts0 == addr0.split(\":\"),\n  ETHER_ADDR_LEN0 == 6,\n  parts0_length >= 0, # implicit\n  parts0_length != ETHER_ADDR_LEN0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "soundSymbolic": false,
    "soundBackwards": true,
    "maybe": true,
    "line": 223,
    "throwingLine": 227,
    "isStatic": true,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/MacAddress.java"
  },
  {
    "qualifiedSignature": "android.net.NetworkCapabilities.combineCapabilities(android.net.NetworkCapabilities)",
    "exception": "throw new IllegalStateException(\"Can't combine two TransportInfos\");",
    "pathCojunction": "(!(mNetworkSpecifier != null && !mNetworkSpecifier.equals(nc.mNetworkSpecifier))) && (mTransportInfo != null && !mTransportInfo.equals(nc.mTransportInfo))",
    "symbolicPathConjunction": "(!(mNetworkSpecifier != null && !mNetworkSpecifier.equals(nc.mNetworkSpecifier))) && (mTransportInfo != null && !mTransportInfo.equals(nc.mTransportInfo))",
    "backwardsPathConjunction": "(!(mNetworkSpecifier != null && !mNetworkSpecifier.equals(nc.mNetworkSpecifier))) && (mTransportInfo != null && !mTransportInfo.equals(nc.mTransportInfo))",
    "simplifiedPathConjunction": "!mTransportInfo.equals(nc.mTransportInfo) && (mNetworkSpecifier.equals(nc.mNetworkSpecifier) || mNetworkSpecifier == null) && mTransportInfo != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmNetworkSpecifier0_isNull = Bool('mNetworkSpecifier0_isNull')\nmTransportInfo0_isNull = Bool('mTransportInfo0_isNull')\n\nconstraints = [\n  And(Not(And(Not(mNetworkSpecifier0_isNull), Not(mNetworkSpecifier0.equals(nc0.mNetworkSpecifier)))), And(Not(mTransportInfo0_isNull), Not(mTransportInfo0.equals(nc0.mTransportInfo))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnc = Symbol('nc')\nmNetworkSpecifier = Symbol('mNetworkSpecifier')\nmTransportInfo = Symbol('mTransportInfo')\nmNetworkSpecifier_equals = Symbol('mNetworkSpecifier_equals')\nmTransportInfo_equals = Symbol('mTransportInfo_equals')\nnull = Symbol('null')\npath_conjunction = ((~(((Ne(mNetworkSpecifier, null)) & (~(mNetworkSpecifier_equals))))) & ((Ne(mTransportInfo, null)) & (~(mTransportInfo_equals))))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1327,
    "throwingLine": 1332,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkCapabilities.java"
  },
  {
    "qualifiedSignature": "android.net.NetworkCapabilities.combineCapabilities(android.net.NetworkCapabilities)",
    "exception": "throw new IllegalStateException(\"Can't combine two networkSpecifiers\");",
    "pathCojunction": "(mNetworkSpecifier != null && !mNetworkSpecifier.equals(nc.mNetworkSpecifier))",
    "symbolicPathConjunction": "(mNetworkSpecifier != null && !mNetworkSpecifier.equals(nc.mNetworkSpecifier))",
    "backwardsPathConjunction": "(mNetworkSpecifier != null && !mNetworkSpecifier.equals(nc.mNetworkSpecifier))",
    "simplifiedPathConjunction": "!mNetworkSpecifier.equals(nc.mNetworkSpecifier) && mNetworkSpecifier != null",
    "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmNetworkSpecifier0_isNull = Bool('mNetworkSpecifier0_isNull')\n\nconstraints = [\n  And(Not(mNetworkSpecifier0_isNull), Not(mNetworkSpecifier0.equals(nc0.mNetworkSpecifier)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
    "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnc = Symbol('nc')\nmNetworkSpecifier = Symbol('mNetworkSpecifier')\nmNetworkSpecifier_equals = Symbol('mNetworkSpecifier_equals')\nnull = Symbol('null')\npath_conjunction = ((Ne(mNetworkSpecifier, null)) & (~(mNetworkSpecifier_equals)))\nprint(ccode(simplify(path_conjunction)))",
    "soundSymbolic": true,
    "soundBackwards": true,
    "maybe": true,
    "line": 1327,
    "throwingLine": 1331,
    "isStatic": false,
    "targetOnlyArguments": false,
    "filePath": "/home/yanghengqin/platform_frameworks_base-android-10.0.0_r47/core/java/android/net/NetworkCapabilities.java"
  }
]