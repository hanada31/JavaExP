
<org.jgrapht.experimental.GraphSquare: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.GraphSquare: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.GraphSquare: boolean addVertex(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.GraphSquare: boolean removeAllEdges(java.util.Collection)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.GraphSquare: java.util.Set removeAllEdges(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.GraphSquare: boolean removeAllVertices(java.util.Collection)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.GraphSquare: boolean removeEdge(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.GraphSquare: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.GraphSquare: boolean removeVertex(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.GraphSquare: void addEdgesStartingAt(org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
parameter0 contains parameter1

<org.jgrapht.experimental.GraphSquare: void addSquareEdges(org.jgrapht.Graph,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"

<org.jgrapht.experimental.GraphSquare: void addSquareEdges(org.jgrapht.Graph,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
parameter0 contains parameter1

<org.jgrapht.experimental.GraphSquare: void access$000(org.jgrapht.experimental.GraphSquare,org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter3 not equals "new java.lang.Object"
parameter3 not equals "new java.lang.Object"
parameter1 contains parameter1
parameter0 contains parameter2

<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0

<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0

<org.jgrapht.graph.ClassBasedVertexFactory: java.lang.Object createVertex()>
Type:java.lang.RuntimeException
Message:\QVertex factory failed\E
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.lang.Exception is caught, when executing the statements from $r1 = r0.<org.jgrapht.graph.ClassBasedVertexFactory: java.lang.Class vertexClass> to return $r2

<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.IllegalArgumentException
Message:\QGraph may not be constructed without either of vertex-set partitions specified\E
ExceptionPreConditions:
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is null
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null

<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: boolean $assertionsDisabled> is 0
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is not null
<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: boolean $assertionsDisabled> is not 0
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null

<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: boolean $assertionsDisabled> is 0
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is not null
<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: boolean $assertionsDisabled> is 0
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null

<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is not null
<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: boolean $assertionsDisabled> is 0
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null

<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.IllegalArgumentException
Message:\QGraph may not be constructed without either of vertex-set partitions specified\E
ExceptionPreConditions:
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is null
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null

<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.IllegalArgumentException
Message:\QGraph may not be constructed without weight-matrix specified\E
ExceptionPreConditions:
@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is null
r0.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is null

<org.jgrapht.alg.GabowStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qnull not allowed for graph!\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: void computeAtoms()>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
$r37.<org.jgrapht.alg.ConnectivityInspector: boolean isGraphConnected()>() is 0
@this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.List generators> contains "null"
@this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.List generators> contains "new java.lang.Object"
r0.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.List generators> contains "null"
r0.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.List generators> contains "new java.lang.Object"
<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: boolean isClique(org.jgrapht.UndirectedGraph,java.util.Set)>($r18, $r16) is not 0
 equals 
 contains "null"
 contains "new java.lang.Object"
<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: void computeAtoms()>
Type:java.lang.RuntimeException
Message:\Qseparator did not separate the graph\E
ExceptionPreConditions:
$r37.<org.jgrapht.alg.ConnectivityInspector: boolean isGraphConnected()>() is not 0
@this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.List generators> contains "null"
@this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.List generators> contains "new java.lang.Object"
r0.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.List generators> contains "null"
r0.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.List generators> contains "new java.lang.Object"
<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: boolean isClique(org.jgrapht.UndirectedGraph,java.util.Set)>($r18, $r16) is not 0
 equals 

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.IllegalArgumentException
Message:\Qg1 is equal to g2\E
ExceptionPreConditions:
parameter1 is not null
parameter0 is parameter1
parameter0 is not null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.NullPointerException
Message:\Qg2 is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.NullPointerException
Message:\Qg1 is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg1 is equal to g2\E
ExceptionPreConditions:
parameter1 is not null
parameter0 is parameter1
parameter0 is not null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph)>
Type:java.lang.NullPointerException
Message:\Qg2 is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph)>
Type:java.lang.NullPointerException
Message:\Qg1 is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion,org.jgrapht.util.WeightCombiner)>
Type:java.lang.IllegalArgumentException
Message:\Qg1 is equal to g2\E
ExceptionPreConditions:
parameter1 is not null
parameter0 is parameter1
parameter0 is not null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion,org.jgrapht.util.WeightCombiner)>
Type:java.lang.NullPointerException
Message:\Qg2 is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion,org.jgrapht.util.WeightCombiner)>
Type:java.lang.NullPointerException
Message:\Qg1 is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion)>
Type:java.lang.IllegalArgumentException
Message:\Qg1 is equal to g2\E
ExceptionPreConditions:
parameter1 is not null
parameter0 is parameter1
parameter0 is not null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion)>
Type:java.lang.NullPointerException
Message:\Qg2 is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion)>
Type:java.lang.NullPointerException
Message:\Qg1 is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void <init>(org.jgrapht.UndirectedGraph,java.util.Set,java.util.Set)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean $assertionsDisabled> is 0
@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>() is 0

<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>
Type:java.lang.IllegalArgumentException
Message:\QThere are edges within partition 2, i.e. not a bipartite graph\E
ExceptionPreConditions:
0 equals @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching<org.jgrapht.alg.HopcroftKarpBipartiteMatching: org.jgrapht.UndirectedGraph graph>instanceof org.jgrapht.graph.Multigraph . .
@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching interSectionNotEmpty "new java.util.Set"
@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching interSectionNotEmpty "new java.util.Set", it returns 0

<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>
Type:java.lang.IllegalArgumentException
Message:\QThere are edges within partition 1, i.e. not a bipartite graph\E
ExceptionPreConditions:
0 equals @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching<org.jgrapht.alg.HopcroftKarpBipartiteMatching: org.jgrapht.UndirectedGraph graph>instanceof org.jgrapht.graph.Multigraph . .
@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching interSectionNotEmpty "new java.util.Set"

<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>
Type:java.lang.IllegalArgumentException
Message:\QMulti graphs are not allowed as input, only simple graphs!\E
ExceptionPreConditions:
r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: org.jgrapht.UndirectedGraph graph>instanceof org.jgrapht.graph.Multigraph . is not 0

<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter1 smaller than 0
parameter0 larger or equal 0

<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter1 smaller than 0
parameter0 larger or equal 0

<org.jgrapht.generate.RandomGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
@this: org.jgrapht.generate.RandomGraphGenerator.<org.jgrapht.generate.RandomGraphGenerator: org.jgrapht.generate.RandomGraphGenerator$EdgeTopologyFactory edgeTopologyFactoryChooser(org.jgrapht.Graph,int)>(r2, $i4) isNumberOfEdgesValid parameter0, it returns 0

<org.jgrapht.generate.RandomGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.IllegalArgumentException

<org.jgrapht.traverse.DepthFirstIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qgraph must contain the start vertex\E
ExceptionPreConditions:
parameter1 is not null
parameter0 not contains parameter1
parameter0 is not null

<org.jgrapht.traverse.DepthFirstIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qgraph must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.traverse.DepthFirstIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
r3 is <org.jgrapht.traverse.CrossComponentIterator$VisitColor: org.jgrapht.traverse.CrossComponentIterator$VisitColor WHITE>
r3 equals @this: org.jgrapht.traverse.DepthFirstIterator.<org.jgrapht.traverse.DepthFirstIterator: java.lang.Object getSeenData(java.lang.Object)>(r1)
@this: org.jgrapht.traverse.DepthFirstIterator.<org.jgrapht.traverse.DepthFirstIterator: java.util.Deque stack> removeLastOccurrence parameter0, it returns 0
r0.<org.jgrapht.traverse.DepthFirstIterator: java.util.Deque stack> removeLastOccurrence parameter0, it returns 0
<org.jgrapht.traverse.DepthFirstIterator: boolean $assertionsDisabled> is 0

<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qbase graph cannot be listenable\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.ListenableGraph . is not 0

<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.IllegalArgumentException
Message:\Qg1 is equal to g2\E
ExceptionPreConditions:
parameter1 is not null
parameter0 is parameter1
parameter0 is not null

<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.NullPointerException
Message:\Qg2 is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.NullPointerException
Message:\Qg1 is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg1 is equal to g2\E
ExceptionPreConditions:
parameter1 is not null
parameter0 is parameter1
parameter0 is not null

<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph)>
Type:java.lang.NullPointerException
Message:\Qg2 is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph)>
Type:java.lang.NullPointerException
Message:\Qg1 is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: boolean hasNext()>
Type:java.util.ConcurrentModificationException
Message:[\s\S]*
ExceptionPreConditions:
r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation>cmp $l1 . is not 0

<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: java.lang.Object next()>
Type:java.util.NoSuchElementException
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: java.lang.Integer nextIndex> is null
r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: java.lang.Integer nextIndex> is null
0 equals @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation>cmp $l1 . .

<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: java.lang.Object next()>
Type:java.util.ConcurrentModificationException
Message:[\s\S]*
ExceptionPreConditions:
r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation>cmp $l1 . is not 0

<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: void remove()>
Type:java.lang.IllegalStateException
Message:[\s\S]*
ExceptionPreConditions:
0 equals @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation>cmp $l1 . .

<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: void remove()>
Type:java.util.ConcurrentModificationException
Message:[\s\S]*
ExceptionPreConditions:
r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation>cmp $l1 . is not 0

<org.jgrapht.graph.SimpleGraphPath: void <init>(org.jgrapht.graph.SimpleGraph,java.util.List,double)>
Type:java.lang.IllegalArgumentException
Message:\QThe specified vertices do not form a path\E
ExceptionPreConditions:
@this: org.jgrapht.graph.SimpleGraphPath.<org.jgrapht.graph.SimpleGraphPath: java.util.List getVertexList()>() get 0, it returns 0

<org.jgrapht.graph.SimpleGraphPath: void <init>(org.jgrapht.graph.SimpleGraph,java.util.List,double)>
Type:java.lang.IllegalArgumentException
Message:\QAt least two vertices are required to form a path\E

<org.jgrapht.graph.UndirectedSubgraph: int degreeOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.UndirectedSubgraph: int degreeOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.UnmodifiableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qbase graph cannot be listenable\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.ListenableGraph . is not 0

<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter1

<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter1 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter1

<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qno such edge in base graph\E
ExceptionPreConditions:
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> not contains parameter0
r0.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> not contains parameter0

<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> contains parameter2
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> contains parameter2
parameter2 is not null

<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> contains parameter2
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> contains parameter2
parameter2 is not null

<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter1

<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter1 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter1

<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> getEdgeTarget parameter2, it returns 0
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> getEdgeTarget parameter2, it returns 0
<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is 0
<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is not 0
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> contains parameter2
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> contains parameter2
parameter2 is not null

<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> getEdgeTarget parameter2, it returns 0
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> getEdgeTarget parameter2, it returns 0
<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is 0
<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is 0
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> contains parameter2
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> contains parameter2
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> getEdgeSource parameter2, it returns 0
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> getEdgeSource parameter2, it returns 0
parameter2 is not null

<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is 0
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> contains parameter2
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> contains parameter2
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> getEdgeSource parameter2, it returns 0
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> getEdgeSource parameter2, it returns 0
parameter2 is not null

<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qno such edge in base graph\E
ExceptionPreConditions:
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> not contains parameter2
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> not contains parameter2
parameter2 is not null

<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is null

<org.jgrapht.graph.Subgraph: boolean addVertex(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qno such vertex in base graph\E
ExceptionPreConditions:
@this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> not contains parameter0
r1.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base> not contains parameter0
parameter0 is not null

<org.jgrapht.graph.Subgraph: boolean addVertex(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.Subgraph: java.util.Set edgesOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.Subgraph: java.util.Set edgesOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.alg.cycle.JohnsonSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.JohnsonSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.JohnsonSimpleCycles: java.util.List findSimpleCycles()>
Type:java.lang.IllegalArgumentException
Message:\QNull graph.\E
ExceptionPreConditions:
@this: org.jgrapht.alg.cycle.JohnsonSimpleCycles.<org.jgrapht.alg.cycle.JohnsonSimpleCycles: org.jgrapht.DirectedGraph graph> is null
r0.<org.jgrapht.alg.cycle.JohnsonSimpleCycles: org.jgrapht.DirectedGraph graph> is null

<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: java.util.List findSimpleCycles()>
Type:java.lang.IllegalArgumentException
Message:\QNull graph.\E
ExceptionPreConditions:
@this: org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles.<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: org.jgrapht.DirectedGraph graph> is null
r0.<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: org.jgrapht.DirectedGraph graph> is null

<org.jgrapht.experimental.UniformRandomGraphGenerator: void <init>(int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qillegal number of edges\E
ExceptionPreConditions:
parameter0 larger or equal 0
parameter1 smaller than 0

<org.jgrapht.experimental.UniformRandomGraphGenerator: void <init>(int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qillegal number of edges\E
ExceptionPreConditions:
parameter0 larger or equal 0
parameter1 larger or equal 0

<org.jgrapht.experimental.UniformRandomGraphGenerator: void <init>(int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElementList,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.util.ArrayList pathElements> equals ""
r0.<org.jgrapht.alg.RankingPathElementList: java.util.ArrayList pathElements> equals ""
<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElementList,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
parameter3 is not null
parameter2 is not null
parameter1 larger than 0

<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElementList,java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:\Qedge is null\E
ExceptionPreConditions:
parameter3 is null
parameter2 is not null
parameter1 larger than 0

<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElementList,java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:\QelementList is null\E
ExceptionPreConditions:
parameter2 is null
parameter1 larger than 0

<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElementList,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QmaxSize is negative or 0\E
ExceptionPreConditions:
parameter1 smaller or equal 0

<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElementList,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: int size()>() smaller than parameter1
0 smaller than parameter2.<org.jgrapht.alg.RankingPathElementList: int size()>()

<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElementList,java.lang.Object,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0
<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, $r4) not equals "new java.lang.Object"
@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: int size()>() smaller than parameter1
0 smaller than parameter2.<org.jgrapht.alg.RankingPathElementList: int size()>()

<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QmaxSize is negative or 0\E
ExceptionPreConditions:
parameter1 smaller or equal 0

<org.jgrapht.alg.RankingPathElementList: boolean addPathElements(org.jgrapht.alg.RankingPathElementList,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.RankingPathElementList: boolean addPathElements(org.jgrapht.alg.RankingPathElementList,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0
@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.lang.Object vertex> not equals <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r14, r4, $r15)
r3.<org.jgrapht.alg.RankingPathElementList: java.lang.Object vertex> not equals <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r14, r4, $r15)

<org.jgrapht.alg.RankingPathElementList: boolean isNotValidPath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"

<org.jgrapht.alg.RankingPathElementList: boolean isNotValidPath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0
<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, $r4) not equals "new java.lang.Object"

<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"

<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0
<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, $r4) not equals "new java.lang.Object"

<org.jgrapht.experimental.alg.color.GreedyColoring: void <init>(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.experimental.alg.IntArrayGraphAlgorithm.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: java.util.List _vertices> get 0, it returns 0
r0.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: java.util.List _vertices> get 0, it returns 0

<org.jgrapht.experimental.alg.color.GreedyColoring: void <init>(org.jgrapht.Graph,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.experimental.alg.IntArrayGraphAlgorithm.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: java.util.List _vertices> get 0, it returns 0
r0.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: java.util.List _vertices> get 0, it returns 0

<org.jgrapht.graph.DirectedSubgraph: int inDegreeOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.DirectedSubgraph: int inDegreeOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.DirectedSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.DirectedSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.DirectedSubgraph: int outDegreeOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.DirectedSubgraph: int outDegreeOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.DirectedSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.DirectedSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: java.util.List findSimpleCycles()>
Type:java.lang.IllegalArgumentException
Message:\QNull graph.\E
ExceptionPreConditions:
@this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null
r0.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null

<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void printSimpleCycles()>
Type:java.lang.IllegalArgumentException
Message:\QNull graph.\E
ExceptionPreConditions:
@this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null
r0.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null

<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: long countSimpleCycles()>
Type:java.lang.IllegalArgumentException
Message:\QNull graph.\E
ExceptionPreConditions:
@this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null
r0.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null

<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching: void <init>(org.jgrapht.WeightedGraph,java.util.List,java.util.List)>
Type:java.lang.IllegalArgumentException
Message:\QGraph supplied isn't complete bipartite with equally sized partitions!\E

<org.jgrapht.graph.UnmodifiableGraph: void <init>(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.UnmodifiableGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.UnmodifiableGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.UnmodifiableGraph: boolean addVertex(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.UnmodifiableGraph: boolean removeAllEdges(java.util.Collection)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.UnmodifiableGraph: java.util.Set removeAllEdges(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.UnmodifiableGraph: boolean removeAllVertices(java.util.Collection)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.UnmodifiableGraph: boolean removeEdge(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.UnmodifiableGraph: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.UnmodifiableGraph: boolean removeVertex(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl: void clearVisited(int)>
Type:java.lang.UnsupportedOperationException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Multigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.graph.Multigraph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . equals 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . is not 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Multigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.graph.Multigraph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . equals 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . is not 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Multigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.graph.Multigraph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . equals 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . is not 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Multigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.graph.Multigraph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . equals 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . is not 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.AStarShortestPath: void <init>(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\QGraph cannot be null!\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.AStarShortestPath: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object,org.jgrapht.alg.interfaces.AStarAdmissibleHeuristic)>
Type:java.lang.IllegalArgumentException
Message:\QSource or target vertex not contained in the graph!\E
ExceptionPreConditions:
@this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph> not contains parameter0
r0.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph> not contains parameter0

<org.jgrapht.alg.AStarShortestPath: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object,org.jgrapht.alg.interfaces.AStarAdmissibleHeuristic)>
Type:java.lang.IllegalArgumentException
Message:\QSource or target vertex not contained in the graph!\E
ExceptionPreConditions:
@this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph> not contains parameter1
r0.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph> not contains parameter1
@this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph> contains parameter0
r0.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph> contains parameter0

<org.jgrapht.alg.AStarShortestPath: java.util.List buildPath(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
parameter0 not equals "new java.lang.Object"
@this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: java.util.Map cameFrom> contains parameter0
r0.<org.jgrapht.alg.AStarShortestPath: java.util.Map cameFrom> contains parameter0

<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter1
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0

<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter1
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter1
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter1
 equals 

<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1

<org.jgrapht.alg.CycleDetector$ProbeIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>
Type:org.jgrapht.alg.CycleDetector$CycleDetectedException
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.alg.CycleDetector$ProbeIterator.<org.jgrapht.alg.CycleDetector$ProbeIterator: java.util.Set cycleSet> is null
r0.<org.jgrapht.alg.CycleDetector$ProbeIterator: java.util.Set cycleSet> is null
0 larger than -1

<org.jgrapht.alg.NeighborIndex: java.util.Set neighborsOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.NeighborIndex<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap> . is null

<org.jgrapht.alg.NeighborIndex: java.util.List neighborListOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.NeighborIndex<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap> . is null

<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.NeighborIndex<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap> . is null

<org.jgrapht.alg.DijkstraShortestPath: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,double)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 not equals "new java.lang.Object"
parameter1 not equals "new java.lang.Object"
r8_2 equals <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r4, $r3, r8)
r8_2 equals <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r4, $r3, r8_2)
parameter1 getSpanningTreeEdge r8, it returns 0
parameter1 getSpanningTreeEdge r8_2, it returns 0
parameter2 equals r8
parameter0 contains parameter2
$r3.<org.jgrapht.traverse.ClosestFirstIterator: boolean hasNext()>() is not 0
parameter2 equals $r3.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object next()>()

<org.jgrapht.alg.DijkstraShortestPath: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,double)>
Type:java.lang.IllegalArgumentException
Message:\Qgraph must contain the end vertex\E
ExceptionPreConditions:
parameter0 not contains parameter2

<org.jgrapht.alg.DijkstraShortestPath: void createEdgeList(org.jgrapht.Graph,org.jgrapht.traverse.ClosestFirstIterator,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
parameter3 equals r8
r8_2 equals <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r4, $r3, r8)
r8_2 equals <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r4, $r3, r8_2)
parameter1 getSpanningTreeEdge r8, it returns 0
parameter1 getSpanningTreeEdge r8_2, it returns 0

<org.jgrapht.generate.RingGraphGenerator: void <init>(int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.graph.ClassBasedEdgeFactory: java.lang.Object createEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.RuntimeException
Message:\QEdge factory failed\E
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.lang.Exception is caught, when executing the statements from $r1 = r0.<org.jgrapht.graph.ClassBasedEdgeFactory: java.lang.Class edgeClass> to return $r2

<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0
 equals 
<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
 equals 
<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0
 equals 
<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int uncovered(double[][],boolean[],boolean[])>($r13, $r12, $r11) is not 0
<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set getAllEdges(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set getAllEdges(java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.lang.Object getEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
@this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.lang.Object getEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
@this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: int degreeOf(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qno such operation in a directed graph\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set incomingEdgesOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set incomingEdgesOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set outgoingEdgesOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set outgoingEdgesOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.experimental.GraphTests: boolean isConnected(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
new java.util.LinkedList not equals ""

<org.jgrapht.experimental.GraphTests: boolean isTree(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
new java.util.LinkedList not equals ""

<org.jgrapht.experimental.GraphTests: boolean isBipartite(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
new java.util.HashSet not equals ""
0 equals <org.jgrapht.experimental.GraphTests: boolean isEmpty(org.jgrapht.Graph)>(r0)

<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qnull not allowed for graph!\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int,int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int,int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qillegal number of edges\E
ExceptionPreConditions:
parameter0 larger or equal 0
parameter2 smaller than 0
parameter1 larger or equal 0

<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int,int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qillegal number of edges\E
ExceptionPreConditions:
parameter0 larger or equal 0
parameter2 larger or equal 0
parameter1 larger or equal 0
parameter2 larger than parameter0* i1 .

<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int,int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 larger or equal 0
parameter1 smaller than 0

<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int[],int)>
Type:java.lang.IllegalArgumentException
Message:\Qillegal number of edges\E
ExceptionPreConditions:
r1[i6_1] larger or equal 0
0 smaller than parameter0.length
parameter1 larger or equal 0

<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int[],int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
r1[i6_1] smaller than 0
0 smaller than parameter0.length
parameter1 larger or equal 0

<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int[],int)>
Type:java.lang.IllegalArgumentException
Message:\Qillegal number of edges\E
ExceptionPreConditions:
parameter1 smaller than 0

<org.jgrapht.alg.AllDirectedPaths: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QGraph cannot be null!\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
new java.util.LinkedList not equals ""
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter0 not equals ""
parameter3 is not null
parameter2 is 0
parameter1 not equals ""
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
 equals 
new java.util.HashMap not contains "null"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter0 not equals ""
parameter3 is not null
parameter2 is 0
parameter1 not equals ""
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0
new java.util.LinkedList not equals ""
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() is not 0
parameter0 not equals ""
parameter3 is not null
parameter2 is 0
parameter1 not equals ""
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
 equals 
new java.util.HashMap not contains "null"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0
parameter3.<java.lang.Integer: int intValue()>() is not 0
parameter0 not equals ""
parameter3 is not null
parameter2 is 0
parameter1 not equals ""
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.IllegalArgumentException
Message:\QmaxPathLength must be non-negative if defined\E
ExceptionPreConditions:
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() smaller than 0
parameter0 not equals ""
parameter3 is not null
parameter2 is 0
parameter1 not equals ""
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
new java.util.LinkedList not equals ""

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is not 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
$r8.<java.lang.Integer: int intValue()>() larger or equal parameter3.<java.lang.Integer: int intValue()>()
 equals 
parameter3 is not null
 is not null
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() is not 0
 equals 
new java.util.LinkedList not equals ""
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
$r8.<java.lang.Integer: int intValue()>() larger or equal parameter3.<java.lang.Integer: int intValue()>()
 equals 
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() is not 0
 is not null
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() is not 0
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.IllegalArgumentException
Message:\QmaxPathLength must be non-negative if defined\E
ExceptionPreConditions:
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() smaller than 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.IllegalArgumentException
Message:\QIf search is not restricted to simple paths, a maximum path length must be set to avoid infinite cycles\E
ExceptionPreConditions:
parameter3 is null
parameter3 is null
parameter2 is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>
Type:java.lang.IllegalArgumentException
Message:\QIf search is not restricted to simple paths, a maximum path length must be set to avoid infinite cycles\E
ExceptionPreConditions:
parameter3 is not null
parameter3 is null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0
parameter2 is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
new java.util.LinkedList not equals ""
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter0 not equals ""
parameter3 is not null
parameter2 is 0
parameter1 not equals ""
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
 equals 
new java.util.HashMap not contains "null"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter0 not equals ""
parameter3 is not null
parameter2 is 0
parameter1 not equals ""
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0
new java.util.LinkedList not equals ""
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() is not 0
parameter0 not equals ""
parameter3 is not null
parameter2 is 0
parameter1 not equals ""
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
 equals 
new java.util.HashMap not contains "null"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0
parameter3.<java.lang.Integer: int intValue()>() is not 0
parameter0 not equals ""
parameter3 is not null
parameter2 is 0
parameter1 not equals ""
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.IllegalArgumentException
Message:\QmaxPathLength must be non-negative if defined\E
ExceptionPreConditions:
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() smaller than 0
parameter0 not equals ""
parameter3 is not null
parameter2 is 0
parameter1 not equals ""
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
new java.util.LinkedList not equals ""

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is not 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
$r8.<java.lang.Integer: int intValue()>() larger or equal parameter3.<java.lang.Integer: int intValue()>()
 equals 
parameter3 is not null
 is not null
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() is not 0
 equals 
new java.util.LinkedList not equals ""
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
$r8.<java.lang.Integer: int intValue()>() larger or equal parameter3.<java.lang.Integer: int intValue()>()
 equals 
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() is not 0
 is not null
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() is not 0
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.IllegalArgumentException
Message:\QmaxPathLength must be non-negative if defined\E
ExceptionPreConditions:
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() smaller than 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.IllegalArgumentException
Message:\QIf search is not restricted to simple paths, a maximum path length must be set to avoid infinite cycles\E
ExceptionPreConditions:
parameter3 is null
parameter3 is null
parameter2 is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>
Type:java.lang.IllegalArgumentException
Message:\QIf search is not restricted to simple paths, a maximum path length must be set to avoid infinite cycles\E
ExceptionPreConditions:
parameter3 is not null
parameter3 is null
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0
parameter2 is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter1 is null
new java.util.LinkedList not equals ""
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter1 is null
 equals 
new java.util.HashMap not contains "null"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter1 is not null
parameter1.<java.lang.Integer: int intValue()>() larger or equal 0
new java.util.LinkedList not equals ""
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter1.<java.lang.Integer: int intValue()>() is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter1 is not null
 equals 
new java.util.HashMap not contains "null"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter1.<java.lang.Integer: int intValue()>() larger or equal 0
parameter1.<java.lang.Integer: int intValue()>() is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>
Type:java.lang.IllegalArgumentException
Message:\QmaxPathLength must be non-negative if defined\E
ExceptionPreConditions:
parameter1 is not null
parameter1.<java.lang.Integer: int intValue()>() smaller than 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
new java.util.LinkedList not equals ""

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is not 0
parameter3 is null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is not 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3 is not null
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"
parameter2 is not 0
 equals 
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 larger than 0
 equals 
 equals 
 equals 
 equals 
 equals 
new java.util.HashSet not contains "new java.lang.Object"
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter2 is not 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter1 not contains "new java.lang.Object"
 equals 
parameter0 contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is not 0
parameter3 is not null
 equals 
 equals 
 equals 
 equals 
parameter1 contains "new java.lang.Object"
 equals 
parameter0 not contains "new java.lang.Object"
 equals 
new java.util.HashSet not contains "new java.lang.Object"
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
 equals 
parameter4 contains "null"
parameter4 contains "new java.lang.Object"

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
$r8.<java.lang.Integer: int intValue()>() larger or equal parameter3.<java.lang.Integer: int intValue()>()
 equals 
parameter3 is not null
 is not null
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() is not 0
 equals 
new java.util.LinkedList not equals ""
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
$r8.<java.lang.Integer: int intValue()>() larger or equal parameter3.<java.lang.Integer: int intValue()>()
 equals 
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() is not 0
 is not null
 equals 
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter3 is not null
<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0
parameter3.<java.lang.Integer: int intValue()>() is not 0
parameter3.<java.lang.Integer: int intValue()>() larger or equal 0

<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>
Type:java.lang.IllegalArgumentException
Message:\QmaxPathLength must be non-negative if defined\E
ExceptionPreConditions:
parameter3 is not null
parameter3.<java.lang.Integer: int intValue()>() smaller than 0

<org.jgrapht.alg.TransitiveClosure: int computeBinaryLog(int)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.TransitiveClosure: boolean $assertionsDisabled> is 0
parameter0 smaller than 0

<org.jgrapht.graph.AsWeightedDirectedGraph: void <init>(org.jgrapht.DirectedGraph,java.util.Map)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.AsWeightedDirectedGraph: void <init>(org.jgrapht.DirectedGraph,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter1 is null
<org.jgrapht.graph.AsWeightedGraph: boolean $assertionsDisabled> is 0

<org.jgrapht.traverse.ClosestFirstIterator: void setCrossComponentTraversal(boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qradius may not be specified for cross-component traversal\E
ExceptionPreConditions:
parameter0 is not 0
r0.<org.jgrapht.traverse.ClosestFirstIterator: double radius>cmpl #Infinity . is not 0
@this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: boolean initialized> is not 0
r0.<org.jgrapht.traverse.ClosestFirstIterator: boolean initialized> is not 0

<org.jgrapht.traverse.ClosestFirstIterator: void encounterVertex(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
parameter0 not equals "new java.lang.Object"
parameter1 is not null

<org.jgrapht.traverse.ClosestFirstIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
parameter0 not equals "new java.lang.Object"
r3 equals @this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object getSeenData(java.lang.Object)>(r1)

<org.jgrapht.traverse.ClosestFirstIterator: void assertNonNegativeEdge(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qnegative edge weights not allowed\E

<org.jgrapht.traverse.ClosestFirstIterator: double calculatePathLength(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
parameter0 not equals "new java.lang.Object"

<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qradius may not be specified for cross-component traversal\E
ExceptionPreConditions:
parameter0 is not 0
r0.<org.jgrapht.traverse.ClosestFirstIterator: double radius>cmpl #Infinity . is not 0

<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter1 is null
<org.jgrapht.graph.AsWeightedGraph: boolean $assertionsDisabled> is 0

<org.jgrapht.generate.GridGraphGenerator: void <init>(int,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 larger or equal 2
parameter1 smaller than 2

<org.jgrapht.generate.GridGraphGenerator: void <init>(int,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 smaller than 2

<org.jgrapht.graph.DefaultEdge: java.lang.Object clone()>
Type:java.lang.InternalError
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.alg.BellmanFordIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>
Type:java.lang.IllegalArgumentException
Message:\QGraph must contain the start vertex!\E
ExceptionPreConditions:
parameter0 not contains parameter1

<org.jgrapht.alg.BellmanFordIterator: java.util.List next()>
Type:java.util.NoSuchElementException
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: boolean hasNext()>() is 0

<org.jgrapht.alg.BellmanFordIterator: void remove()>
Type:java.lang.UnsupportedOperationException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QNegativeedge-weights are not allowed in an unidrected graph!\E
ExceptionPreConditions:
r0.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>instanceof org.jgrapht.UndirectedGraph . is not 0
@this: org.jgrapht.alg.BellmanFordIterator<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> . smaller than 0
@this: org.jgrapht.alg.BellmanFordIterator<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> . equals 
@this: org.jgrapht.alg.BellmanFordIterator<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> . equals 

<org.jgrapht.alg.BellmanFordIterator: double calculatePathCost(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
parameter0 not equals "new java.lang.Object"

<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QGraph must contain the start vertex!\E
ExceptionPreConditions:
parameter0 not contains parameter1

<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.alg.BellmanFordPathElement createSeenData(java.lang.Object,java.lang.Object,double)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
parameter0 not equals "new java.lang.Object"

<org.jgrapht.alg.BellmanFordIterator: void relaxVertex(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QNegativeedge-weights are not allowed in an unidrected graph!\E
ExceptionPreConditions:
r0.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>instanceof org.jgrapht.UndirectedGraph . is not 0
@this: org.jgrapht.alg.BellmanFordIterator<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> . smaller than 0
@this: org.jgrapht.alg.BellmanFordIterator<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> . equals 
@this: org.jgrapht.alg.BellmanFordIterator<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> . equals 

<org.jgrapht.alg.BellmanFordIterator: void relaxVertex(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
parameter0 not equals "new java.lang.Object"

<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QNegativeedge-weights are not allowed in an unidrected graph!\E
ExceptionPreConditions:
r0.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>instanceof org.jgrapht.UndirectedGraph . is not 0
@this: org.jgrapht.alg.BellmanFordIterator<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> . smaller than 0
@this: org.jgrapht.alg.BellmanFordIterator<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> . equals 
@this: org.jgrapht.alg.BellmanFordIterator<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> . equals 

<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
parameter0 not equals "new java.lang.Object"

<org.jgrapht.alg.cycle.TiernanSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.TiernanSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.TiernanSimpleCycles: java.util.List findSimpleCycles()>
Type:java.lang.IllegalArgumentException
Message:\QNull graph.\E
ExceptionPreConditions:
@this: org.jgrapht.alg.cycle.TiernanSimpleCycles.<org.jgrapht.alg.cycle.TiernanSimpleCycles: org.jgrapht.DirectedGraph graph> is null
r0.<org.jgrapht.alg.cycle.TiernanSimpleCycles: org.jgrapht.DirectedGraph graph> is null

<org.jgrapht.alg.BellmanFordShortestPath: double getCost(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QGraph must contain the end vertex!\E
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph> not contains parameter0
r1.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph> not contains parameter0

<org.jgrapht.alg.BellmanFordShortestPath: double getCost(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QThe end vertex is the same as the start vertex!\E
ExceptionPreConditions:
parameter0 equals "new java.lang.Object"

<org.jgrapht.alg.BellmanFordShortestPath: java.util.List getPathEdgeList(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QGraph must contain the end vertex!\E
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph> not contains parameter0
r1.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph> not contains parameter0

<org.jgrapht.alg.BellmanFordShortestPath: java.util.List getPathEdgeList(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QThe end vertex is the same as the start vertex!\E
ExceptionPreConditions:
parameter0 equals "new java.lang.Object"

<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QGraph must contain the end vertex!\E
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph> not contains parameter0
r1.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph> not contains parameter0

<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QThe end vertex is the same as the start vertex!\E
ExceptionPreConditions:
parameter0 equals "new java.lang.Object"

<org.jgrapht.alg.BellmanFordShortestPath: java.util.List findPathBetween(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QGraph must contain the end vertex!\E
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph> not contains parameter2
r1.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph> not contains parameter2

<org.jgrapht.alg.BellmanFordShortestPath: java.util.List findPathBetween(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QThe end vertex is the same as the start vertex!\E
ExceptionPreConditions:
parameter2 equals "new java.lang.Object"

<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.IllegalArgumentException
Message:\Qg1 is equal to g2\E
ExceptionPreConditions:
parameter1 is not null
parameter0 is parameter1
parameter0 is not null

<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.NullPointerException
Message:\Qg2 is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.NullPointerException
Message:\Qg1 is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg1 is equal to g2\E
ExceptionPreConditions:
parameter1 is not null
parameter0 is parameter1
parameter0 is not null

<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph)>
Type:java.lang.NullPointerException
Message:\Qg2 is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph)>
Type:java.lang.NullPointerException
Message:\Qg1 is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void relabel(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is not 0
$r7.<java.lang.Integer: int intValue()>() smaller or equal 0
@this: org.jgrapht.alg.flow.PushRelabelMaximumFlow<org.jgrapht.alg.flow.PushRelabelMaximumFlow: java.util.Map labeling> . equals 
<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void relabel(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: boolean access$100(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>(r0) is not 0
<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0
$r7.<java.lang.Integer: int intValue()>() smaller or equal 0
@this: org.jgrapht.alg.flow.PushRelabelMaximumFlow<org.jgrapht.alg.flow.PushRelabelMaximumFlow: java.util.Map labeling> . equals 
<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void relabel(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
0 equals <org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: boolean access$100(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>(r0)
<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase compareFlowTo "new double"
<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: boolean $assertionsDisabled> is 0
@this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase compareFlowTo "new double"
<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase compareFlowTo "new double"
<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: boolean $assertionsDisabled> is 0
@this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase compareFlowTo "new double"
<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0

<org.jgrapht.graph.DirectedMultigraph: void <init>(org.jgrapht.EdgeFactory)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>
Type:java.lang.NullPointerException
Message:\QstartVertex is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>
Type:java.lang.NullPointerException
Message:\Qgraph is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.KShortestPathsIterator: java.util.Set next()>
Type:java.util.NoSuchElementException
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: boolean hasNext()>() is 0

<org.jgrapht.alg.KShortestPathsIterator: void remove()>
Type:java.lang.UnsupportedOperationException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>
Type:java.lang.NullPointerException
Message:\QstartVertex is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>
Type:java.lang.NullPointerException
Message:\Qgraph is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.KShortestPathsIterator: org.jgrapht.alg.RankingPathElementList createSeenData(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
parameter0 not equals "new java.lang.Object"

<org.jgrapht.alg.KShortestPathsIterator: boolean tryToAddNewPaths(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals "new java.lang.Object"
parameter0 not equals "new java.lang.Object"

<org.jgrapht.alg.KShortestPathsIterator: boolean tryToAddNewPaths(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.KShortestPathsIterator: boolean tryToAddNewPaths(java.lang.Object,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0
@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.lang.Object vertex> not equals <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r14, r4, $r15)
r3.<org.jgrapht.alg.RankingPathElementList: java.lang.Object vertex> not equals <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r14, r4, $r15)

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Multigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.graph.Multigraph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . equals 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . is not 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Multigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.graph.Multigraph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . equals 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . is not 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Multigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.graph.Multigraph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . equals 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . is not 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Multigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.graph.Multigraph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . is not 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . equals 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . is not 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qcan not match directed with undirected graphs\E
ExceptionPreConditions:
parameter1instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.DirectedGraph . is not 0
parameter0instanceof org.jgrapht.UndirectedGraph . is not 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter1instanceof org.jgrapht.UndirectedGraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0

<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.UnsupportedOperationException
Message:\Qgraphs with multiple edges are not supported\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter1instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.Pseudograph . equals 0
parameter0instanceof org.jgrapht.graph.Multigraph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedMultigraph . equals 0
parameter0instanceof org.jgrapht.graph.DirectedPseudograph . equals 0
parameter1instanceof org.jgrapht.graph.DirectedPseudograph . is not 0

<org.jgrapht.graph.AsUndirectedGraph: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.AsUndirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph does not support edge addition\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AsUndirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph does not support edge addition\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AsUndirectedGraph: int inDegreeOf(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph only supports undirected operations\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AsUndirectedGraph: java.util.Set incomingEdgesOf(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph only supports undirected operations\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AsUndirectedGraph: int outDegreeOf(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph only supports undirected operations\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AsUndirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph only supports undirected operations\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.ParanoidGraph: void <init>(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.ParanoidGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
$r2.<java.lang.Object: int hashCode()>() is not parameter2.<java.lang.Object: int hashCode()>()

<org.jgrapht.graph.ParanoidGraph: boolean addVertex(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
$r2.<java.lang.Object: int hashCode()>() is not parameter0.<java.lang.Object: int hashCode()>()

<org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
$r2.<java.lang.Object: int hashCode()>() is not parameter1.<java.lang.Object: int hashCode()>()

<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0

<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter1
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0

<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1

<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter0

<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qelements must be contained in given set\E
ExceptionPreConditions:
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> not contains parameter1
@this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0
r0.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap> contains parameter0

<org.jgrapht.graph.DefaultDirectedGraph: void <init>(org.jgrapht.EdgeFactory)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.UnmodifiableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.DirectedNeighborIndex: java.util.Set predecessorsOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.DirectedNeighborIndex<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap> . is null

<org.jgrapht.alg.DirectedNeighborIndex: java.util.List predecessorListOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.DirectedNeighborIndex<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap> . is null

<org.jgrapht.alg.DirectedNeighborIndex: java.util.Set successorsOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.DirectedNeighborIndex<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map successorMap> . is null

<org.jgrapht.alg.DirectedNeighborIndex: java.util.List successorListOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.DirectedNeighborIndex<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map successorMap> . is null

<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.DirectedNeighborIndex<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap> . is null

<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getSuccessors(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.alg.DirectedNeighborIndex<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map successorMap> . is null

<org.jgrapht.generate.WheelGraphGenerator: void <init>(int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.generate.WheelGraphGenerator: void <init>(int,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
 larger than 0
 equals 
 equals 

<org.jgrapht.util.FibonacciHeap: void delete(org.jgrapht.util.FibonacciHeapNode)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
 larger than 0
 equals 
 equals 

<org.jgrapht.generate.ScaleFreeGraphGenerator: void <init>(int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.generate.ScaleFreeGraphGenerator: void <init>(int,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.graph.Pseudograph: void <init>(org.jgrapht.EdgeFactory)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: java.util.Set vertexSet()>() not contains "null"
<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph getBlock(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QNo such vertex in the graph!\E

<org.jgrapht.alg.BlockCutpointGraph: boolean isCutpoint(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QNo such vertex in the graph!\E

<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0
parameter1 is null

<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0
parameter0 is null
@this: org.jgrapht.alg.BlockCutpointGraph getNumOrder <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, $r5, r1), it returns 0

<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0
parameter1 is null
@this: org.jgrapht.alg.BlockCutpointGraph dfsVisit <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, $r5, r1), it returns 0
@this: org.jgrapht.alg.BlockCutpointGraph getNumOrder <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, $r5, r1), it returns 0

<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0
parameter0 is null

<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0
parameter0 is null

<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid capacity (must be non-negative)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . larger than 0

<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid epsilon (must be positive)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . smaller or equal 0

<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.NullPointerException
Message:\Qnetwork is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph,double)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid capacity (must be non-negative)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . larger than 0

<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph,double)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid epsilon (must be positive)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . smaller or equal 0

<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph,double)>
Type:java.lang.NullPointerException
Message:\Qnetwork is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.AsUnweightedGraph: void <init>(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.AsUnweightedGraph: double getEdgeWeight(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qbase graph cannot be listenable\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.ListenableGraph . is not 0

<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>
Type:java.lang.IllegalArgumentException
Message:\Qbase graph cannot be listenable\E
ExceptionPreConditions:
parameter0instanceof org.jgrapht.ListenableGraph . is not 0

<org.jgrapht.graph.DefaultListenableGraph: java.lang.Object clone()>
Type:java.lang.RuntimeException
Message:\Qinternal error\E
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.lang.CloneNotSupportedException is caught, when executing the statements from $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() to return r3

<org.jgrapht.generate.EmptyGraphGenerator: void <init>(int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.alg.ConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.util.PrefetchIterator: void remove()>
Type:java.lang.UnsupportedOperationException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.generate.CompleteBipartiteGraphGenerator: void <init>(int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.generate.CompleteBipartiteGraphGenerator: void <init>(int,int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 larger or equal 0
parameter1 smaller than 0

<org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedHashSetImpl: void clearVisited(int)>
Type:java.lang.UnsupportedOperationException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid capacity (must be non-negative)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . larger than 0

<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid epsilon (must be positive)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . smaller or equal 0

<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.NullPointerException
Message:\Qnetwork is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid capacity (must be non-negative)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . larger than 0

<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid epsilon (must be positive)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . smaller or equal 0

<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>
Type:java.lang.NullPointerException
Message:\Qnetwork is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.PatonCycleBase: void <init>(org.jgrapht.UndirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.PatonCycleBase: void setGraph(org.jgrapht.UndirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.PatonCycleBase: java.util.List findCycleBase()>
Type:java.lang.IllegalArgumentException
Message:\QNull graph.\E
ExceptionPreConditions:
@this: org.jgrapht.alg.cycle.PatonCycleBase.<org.jgrapht.alg.cycle.PatonCycleBase: org.jgrapht.UndirectedGraph graph> is null
r0.<org.jgrapht.alg.cycle.PatonCycleBase: org.jgrapht.UndirectedGraph graph> is null

<org.jgrapht.alg.StoerWagnerMinimumCut: void <init>(org.jgrapht.UndirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNegative edge weights not allowed\E

<org.jgrapht.alg.StoerWagnerMinimumCut: void <init>(org.jgrapht.UndirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QGraph has less than 2 vertices\E

<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
 smaller or equal 0
 equals 
l11 equals 9223372036854775807L
 equals 
 equals 
<org.jgrapht.alg.MaximumWeightBipartiteMatching: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.alg.MaximumWeightBipartiteMatching<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph> . smaller or equal 0
@this: org.jgrapht.alg.MaximumWeightBipartiteMatching<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph> . equals 
l12 equals 9223372036854775807L
@this: org.jgrapht.alg.MaximumWeightBipartiteMatching<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph> . equals 
 larger than 0
 equals 
l11 equals 9223372036854775807L
 equals 
 equals 
<org.jgrapht.alg.MaximumWeightBipartiteMatching: boolean $assertionsDisabled> is 0

<org.jgrapht.alg.cycle.TarjanSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.TarjanSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\QNull graph argument.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.cycle.TarjanSimpleCycles: java.util.List findSimpleCycles()>
Type:java.lang.IllegalArgumentException
Message:\QNull graph.\E
ExceptionPreConditions:
@this: org.jgrapht.alg.cycle.TarjanSimpleCycles.<org.jgrapht.alg.cycle.TarjanSimpleCycles: org.jgrapht.DirectedGraph graph> is null
r0.<org.jgrapht.alg.cycle.TarjanSimpleCycles: org.jgrapht.DirectedGraph graph> is null

<org.jgrapht.alg.StrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qnull not allowed for graph!\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.generate.LinearGraphGenerator: void <init>(int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.traverse.TopologicalOrderIterator: void <init>(org.jgrapht.DirectedGraph,java.util.Queue)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter1 equals ""
<org.jgrapht.traverse.TopologicalOrderIterator: boolean $assertionsDisabled> is 0

<org.jgrapht.traverse.TopologicalOrderIterator: void <init>(org.jgrapht.DirectedGraph,java.util.Queue,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
parameter1 equals ""
<org.jgrapht.traverse.TopologicalOrderIterator: boolean $assertionsDisabled> is 0

<org.jgrapht.traverse.TopologicalOrderIterator: void <init>(org.jgrapht.DirectedGraph,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qgraph must contain the start vertex\E
ExceptionPreConditions:
parameter1 is not null
parameter0 not contains parameter1
parameter0 is not null

<org.jgrapht.traverse.TopologicalOrderIterator: void <init>(org.jgrapht.DirectedGraph,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qgraph must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.EdgeReversedGraph: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.AsUnweightedDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qg must not be null.\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.IllegalArgumentException
Message:\Qg1 is equal to g2\E
ExceptionPreConditions:
parameter1 is not null
parameter0 is parameter1
parameter0 is not null

<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.NullPointerException
Message:\Qg2 is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>
Type:java.lang.NullPointerException
Message:\Qg1 is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
Message:\Qg1 is equal to g2\E
ExceptionPreConditions:
parameter1 is not null
parameter0 is parameter1
parameter0 is not null

<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.NullPointerException
Message:\Qg2 is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>
Type:java.lang.NullPointerException
Message:\Qg1 is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.graph.GraphUnion: org.jgrapht.EdgeFactory getEdgeFactory()>
Type:java.lang.UnsupportedOperationException
Message:\Qunion of graphs is read-only\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.GraphUnion: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qunion of graphs is read-only\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.GraphUnion: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qunion of graphs is read-only\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.GraphUnion: boolean addVertex(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qunion of graphs is read-only\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.GraphUnion: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qunion of graphs is read-only\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.GraphUnion: boolean removeEdge(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qunion of graphs is read-only\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.GraphUnion: boolean removeVertex(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qunion of graphs is read-only\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.GraphUnion: double getEdgeWeight(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qno such edge in the union\E
ExceptionPreConditions:
@this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g2> not contains parameter0
r0.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g2> not contains parameter0
@this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1> not contains parameter0
r0.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1> not contains parameter0
@this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1> not contains parameter0
r0.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1> not contains parameter0

<org.jgrapht.graph.GraphUnion: double getEdgeWeight(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qno such edge in the union\E
ExceptionPreConditions:
@this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g2> not contains parameter0
r0.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g2> not contains parameter0
@this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1> contains parameter0
r0.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1> contains parameter0
@this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g2> not contains parameter0
r0.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g2> not contains parameter0
@this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1> not contains parameter0
r0.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1> not contains parameter0

<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid capacity (must be non-negative)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . larger than 0

<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid epsilon (must be positive)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . smaller or equal 0

<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>
Type:java.lang.NullPointerException
Message:\Qnetwork is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid capacity (must be non-negative)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . larger than 0

<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid epsilon (must be positive)\E
ExceptionPreConditions:
parameter0 is not null
parameter1cmpg 0.0 . smaller or equal 0

<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>
Type:java.lang.NullPointerException
Message:\Qnetwork is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qsource is equal to sink\E
ExceptionPreConditions:
@this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network> contains parameter1
r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network> contains parameter1
@this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network> contains parameter0
r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network> contains parameter0
parameter0 equals parameter1

<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid sink (null or not from this network)\E
ExceptionPreConditions:
@this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network> not contains parameter1
r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network> not contains parameter1
@this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network> contains parameter0
r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network> contains parameter0

<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qinvalid source (null or not from this network)\E
ExceptionPreConditions:
@this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network> not contains parameter0
r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network> not contains parameter0

<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: void <init>(int,int)>
Type:java.lang.IllegalArgumentException
Message:\Q(start > finish): invariant broken\E
ExceptionPreConditions:
parameter0 larger than parameter1

<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int)>
Type:java.lang.NullPointerException
Message:\QnMaxHops is negative or 0\E
ExceptionPreConditions:
parameter2 larger than 0
parameter0 is not null
parameter3 smaller or equal 0
parameter1 is not null

<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int)>
Type:java.lang.NullPointerException
Message:\QnPaths is negative or 0\E
ExceptionPreConditions:
parameter2 smaller or equal 0
parameter0 is not null
parameter1 is not null

<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int)>
Type:java.lang.NullPointerException
Message:\QstartVertex is null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int)>
Type:java.lang.NullPointerException
Message:\Qgraph is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>
Type:java.lang.NullPointerException
Message:\QnMaxHops is negative or 0\E
ExceptionPreConditions:
parameter2 larger than 0
parameter0 is not null
parameter3 smaller or equal 0
parameter1 is not null

<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>
Type:java.lang.NullPointerException
Message:\QnPaths is negative or 0\E
ExceptionPreConditions:
parameter2 smaller or equal 0
parameter0 is not null
parameter1 is not null

<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>
Type:java.lang.NullPointerException
Message:\QstartVertex is null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>
Type:java.lang.NullPointerException
Message:\Qgraph is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QGraph must contain the end vertex!\E
ExceptionPreConditions:
parameter0 is not null
parameter0 not equals "new java.lang.Object"

<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QThe end vertex is the same as the start vertex!\E
ExceptionPreConditions:
parameter0 is not null
parameter0 equals "new java.lang.Object"

<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>
Type:java.lang.NullPointerException
Message:\QendVertex is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>
Type:java.lang.NullPointerException
Message:\QstartVertex is null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>
Type:java.lang.NullPointerException
Message:\Qgraph is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QGraph must contain the end vertex!\E
ExceptionPreConditions:
parameter0 is not null
parameter0 not equals "new java.lang.Object"

<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QThe end vertex is the same as the start vertex!\E
ExceptionPreConditions:
parameter0 is not null
parameter0 equals "new java.lang.Object"

<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>
Type:java.lang.NullPointerException
Message:\QendVertex is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>
Type:java.lang.NullPointerException
Message:\QnMaxHops is negative or 0\E
ExceptionPreConditions:
parameter2 larger than 0
parameter0 is not null
parameter3 smaller or equal 0
parameter1 is not null

<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>
Type:java.lang.NullPointerException
Message:\QnPaths is negative or 0\E
ExceptionPreConditions:
parameter2 smaller or equal 0
parameter0 is not null
parameter1 is not null

<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>
Type:java.lang.NullPointerException
Message:\QstartVertex is null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>
Type:java.lang.NullPointerException
Message:\Qgraph is null\E
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: boolean $assertionsDisabled> is not 0
<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: boolean $assertionsDisabled> is 0
@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null
r0.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null
@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is not null
r0.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is not null

<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: boolean $assertionsDisabled> is 0
<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: boolean $assertionsDisabled> is 0
@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null
r0.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null
@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is not null
r0.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is not null

<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: boolean $assertionsDisabled> is 0
@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null
r0.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null
@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is not null
r0.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is not null

<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.IllegalArgumentException
Message:\QGraph may not be constructed without vertex-set specified\E
ExceptionPreConditions:
@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null
r0.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null
@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is null
r0.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is null

<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>
Type:java.lang.IllegalArgumentException
Message:\QGraph may not be constructed without weight-matrix specified\E
ExceptionPreConditions:
@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is null
r0.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is null

<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\QAttempting to remove a neighbor that wasn't present\E
ExceptionPreConditions:
@this: org.jgrapht.alg.NeighborIndex$Neighbors<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts> . is null

<org.jgrapht.graph.MaskSubgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.MaskSubgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.MaskSubgraph: boolean addVertex(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.MaskSubgraph: int degreeOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.MaskSubgraph: int degreeOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.MaskSubgraph: java.util.Set edgesOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.MaskSubgraph: java.util.Set edgesOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.MaskSubgraph: java.lang.Object getEdgeSource(java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.graph.MaskSubgraph: boolean $assertionsDisabled> is 0
@this: org.jgrapht.graph.MaskSubgraph.<org.jgrapht.graph.MaskSubgraph: java.util.Set edgeSet()>() not contains parameter0

<org.jgrapht.graph.MaskSubgraph: java.lang.Object getEdgeTarget(java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
@this: org.jgrapht.graph.MaskSubgraph.<org.jgrapht.graph.MaskSubgraph: java.util.Set edgeSet()>() not contains parameter0
<org.jgrapht.graph.MaskSubgraph: boolean $assertionsDisabled> is 0

<org.jgrapht.graph.MaskSubgraph: double getEdgeWeight(java.lang.Object)>
Type:java.lang.AssertionError
Message:[\s\S]*
ExceptionPreConditions:
<org.jgrapht.graph.MaskSubgraph: boolean $assertionsDisabled> is 0
@this: org.jgrapht.graph.MaskSubgraph.<org.jgrapht.graph.MaskSubgraph: java.util.Set edgeSet()>() not contains parameter0

<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.MaskSubgraph: boolean removeAllEdges(java.util.Collection)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.MaskSubgraph: java.util.Set removeAllEdges(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.MaskSubgraph: boolean removeAllVertices(java.util.Collection)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.MaskSubgraph: boolean removeEdge(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.MaskSubgraph: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.MaskSubgraph: boolean removeVertex(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qthis graph is unmodifiable\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set getAllEdges(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set getAllEdges(java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.lang.Object getEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
@this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.lang.Object getEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter1
@this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0> contains parameter0

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: int degreeOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is not 0

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: int degreeOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is not 0

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: int degreeOf(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is 0

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: int degreeOf(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is 0

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: int inDegreeOf(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qno such operation in an undirected graph\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set incomingEdgesOf(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qno such operation in an undirected graph\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: int outDegreeOf(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qno such operation in an undirected graph\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set outgoingEdgesOf(java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\Qno such operation in an undirected graph\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addVertex(java.lang.Object,boolean)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:[\s\S]*
ExceptionPreConditions:
This is a rethrow exception after an exception with type org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException is caught, when executing the statements from $r3 = virtualinvoke r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addDagEdge(java.lang.Object,java.lang.Object)>(r1, r2) to goto [?= return $r3]

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException
ExceptionPreConditions:
@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph not contains parameter2
parameter2 is not null

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qvertices must be in the graph already!\E
ExceptionPreConditions:
@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter1, it returns 0
r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter1, it returns 0
@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph not contains parameter2
parameter2 is not null

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qvertices must be in the graph already!\E
ExceptionPreConditions:
@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter0, it returns 0
r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter0, it returns 0
@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter1, it returns 0
r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter1, it returns 0
@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph not contains parameter2
parameter2 is not null

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph not contains parameter2
parameter2 is not null

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph not contains parameter2
parameter2 is not null

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 is not null
@this: org.jgrapht.graph.AbstractGraph not contains parameter1

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter1 is null
@this: org.jgrapht.graph.AbstractGraph not contains parameter1

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qloops not allowed\E
ExceptionPreConditions:
parameter0 equals parameter1
@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingMultipleEdges> is not 0
r1.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingMultipleEdges> is not 0
@this: org.jgrapht.graph.AbstractBaseGraph not contains parameter2
@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is 0
r1.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is 0
parameter2 is not null

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qloops not allowed\E
ExceptionPreConditions:
parameter0 equals parameter1
@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingMultipleEdges> is 0
r1.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingMultipleEdges> is 0
@this: org.jgrapht.graph.AbstractBaseGraph not contains parameter0
@this: org.jgrapht.graph.AbstractBaseGraph not contains parameter2
@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is 0
r1.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is 0
parameter2 is not null

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter2 is null

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>
Type:org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qvertices must be in the graph already!\E
ExceptionPreConditions:
@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter1, it returns 0
r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter1, it returns 0

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:\Qvertices must be in the graph already!\E
ExceptionPreConditions:
@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter0, it returns 0
r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter0, it returns 0
@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter1, it returns 0
r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap> getTopologicalIndex parameter1, it returns 0

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
Type:java.lang.IllegalArgumentException
Message:[\s\S]*
ExceptionPreConditions:
This is a rethrow exception after an exception with type org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException is caught, when executing the statements from $z0 = virtualinvoke r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3) to goto [?= return $z0]

<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>
Type:org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException
Message:[\s\S]*
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.lang.UnsupportedOperationException is caught, when executing the statements from $r13 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>() to goto [?= $r14 = new org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException]

<org.jgrapht.generate.CompleteGraphGenerator: void <init>(int)>
Type:java.lang.IllegalArgumentException
Message:\Qmust be non-negative\E
ExceptionPreConditions:
parameter0 smaller than 0

<org.jgrapht.graph.IntrusiveEdge: java.lang.Object clone()>
Type:java.lang.InternalError
Message:[\s\S]*
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.lang.CloneNotSupportedException is caught, when executing the statements from $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() to return $r1

<org.jgrapht.experimental.alg.color.BrownBacktrackColoring: void <init>(org.jgrapht.Graph)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2 not equals "new java.lang.Object"
parameter2 not equals "new java.lang.Object"
@this: org.jgrapht.experimental.alg.IntArrayGraphAlgorithm.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: java.util.List _vertices> get 0, it returns 0
r0.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: java.util.List _vertices> get 0, it returns 0

<org.jgrapht.alg.NaiveLcaFinder: java.util.Set findLcas(java.lang.Object,java.lang.Object)>
Type:java.lang.UnsupportedOperationException
Message:\QfindLcas has not yet been implemented\E
ExceptionPreConditions:
Direct Throw Without Any Condition
