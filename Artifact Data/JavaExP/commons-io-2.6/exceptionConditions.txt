
<org.apache.commons.io.TaggedIOException: void throwCauseIfTaggedWith(java.lang.Throwable,java.lang.Object)>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
<org.apache.commons.io.TaggedIOException: boolean isTaggedWith(java.lang.Throwable,java.lang.Object)>(r0, r1) is not 0

<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter5 smaller than 0

<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,int,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 smaller than 0

<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,int,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QInitial buffer size must be atleast 0.\E
ExceptionPreConditions:
parameter1 smaller than 0

<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.lang.String,java.lang.String,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter5 smaller than 0

<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.lang.String,java.lang.String,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QTemporary file prefix is missing\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,int,java.lang.String,java.lang.String,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 smaller than 0

<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,int,java.lang.String,java.lang.String,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QInitial buffer size must be atleast 0.\E
ExceptionPreConditions:
parameter1 smaller than 0
parameter2 is not null

<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,int,java.lang.String,java.lang.String,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QTemporary file prefix is missing\E
ExceptionPreConditions:
parameter2 is null

<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File,java.lang.String,java.lang.String,java.io.File,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter5 smaller than 0

<org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)>
Type:java.io.IOException
Message:\QStream not closed\E
ExceptionPreConditions:
@this: org.apache.commons.io.output.DeferredFileOutputStream.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed> is 0
r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed> is 0

<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: void <init>(org.apache.commons.io.input.ReversedLinesFileReader,long,int,byte[])>
Type:java.lang.IllegalStateException
Message:\QCount of requested bytes and actually read bytes don't match\E
ExceptionPreConditions:
parameter1cmp 0L . larger than 0
<org.apache.commons.io.input.ReversedLinesFileReader: java.io.RandomAccessFile access$400(org.apache.commons.io.input.ReversedLinesFileReader)>(r1) read "new byte[]", it returns 0

<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: org.apache.commons.io.input.ReversedLinesFileReader$FilePart rollOver()>
Type:java.lang.IllegalStateException
ExceptionPreConditions:
 equals 
 equals 
r0.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: long no>cmp 1L . smaller or equal 0
@this: org.apache.commons.io.input.ReversedLinesFileReader$FilePart.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: int currentLastBytePos> smaller or equal -1
r0.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: int currentLastBytePos> smaller or equal -1
@this: org.apache.commons.io.input.ReversedLinesFileReader$FilePart.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: byte[] leftOver> is not null
r0.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: byte[] leftOver> is not null

<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: org.apache.commons.io.input.ReversedLinesFileReader$FilePart rollOver()>
Type:java.lang.IllegalStateException
ExceptionPreConditions:
@this: org.apache.commons.io.input.ReversedLinesFileReader$FilePart.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: int currentLastBytePos> larger than -1
r0.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: int currentLastBytePos> larger than -1

<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: java.lang.String readLine()>
Type:java.lang.IllegalStateException
ExceptionPreConditions:
@this: org.apache.commons.io.input.ReversedLinesFileReader$FilePart getNewLineMatchByteCount "new byte[]", it returns 0
@this: org.apache.commons.io.input.ReversedLinesFileReader$FilePart.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: int currentLastBytePos> larger than -1
r0.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: int currentLastBytePos> larger than -1
z0 is not 0

<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: java.lang.String readLine()>
Type:java.lang.IllegalStateException
ExceptionPreConditions:
@this: org.apache.commons.io.input.ReversedLinesFileReader$FilePart getNewLineMatchByteCount "new byte[]", it returns 0
@this: org.apache.commons.io.input.ReversedLinesFileReader$FilePart.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: int currentLastBytePos> larger than -1
r0.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: int currentLastBytePos> larger than -1
@this: org.apache.commons.io.input.ReversedLinesFileReader$FilePart.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: int currentLastBytePos> larger or equal <org.apache.commons.io.input.ReversedLinesFileReader: int access$600(org.apache.commons.io.input.ReversedLinesFileReader)>($r18)
r0.<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: int currentLastBytePos> larger or equal <org.apache.commons.io.input.ReversedLinesFileReader: int access$600(org.apache.commons.io.input.ReversedLinesFileReader)>($r18)
z0 is 0

<org.apache.commons.io.input.ReversedLinesFileReader$FilePart: void <init>(org.apache.commons.io.input.ReversedLinesFileReader,long,int,byte[],org.apache.commons.io.input.ReversedLinesFileReader$1)>
Type:java.lang.IllegalStateException
Message:\QCount of requested bytes and actually read bytes don't match\E
ExceptionPreConditions:
parameter1cmp 0L . larger than 0
<org.apache.commons.io.input.ReversedLinesFileReader: java.io.RandomAccessFile access$400(org.apache.commons.io.input.ReversedLinesFileReader)>(r1) read "new byte[]", it returns 0

<org.apache.commons.io.output.ChunkedWriter: void <init>(java.io.Writer,int)>
Type:java.lang.IllegalArgumentException
Message:[\s\S]*
ExceptionPreConditions:
parameter1 smaller or equal 0

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[])>
Type:java.lang.IllegalArgumentException
Message:\QThe offset cannot be negative\E
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0
parameter0.length is not 0
parameter0 is not null

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[])>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number must contain at least one byte\E
ExceptionPreConditions:
parameter0.length equals 0
parameter0 is not null

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[])>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number cannot be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe offset cannot be negative\E
ExceptionPreConditions:
parameter0 is not null
parameter0 not equals ""
parameter1cmp 0L . smaller than 0

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number must contain at least one byte\E
ExceptionPreConditions:
parameter0 is not null
parameter0 equals ""

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number cannot be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QThe offset cannot be negative\E
ExceptionPreConditions:
parameter0 is not null
parameter0 not equals ""
parameter1cmp 0L . smaller than 0

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number must contain at least one byte\E
ExceptionPreConditions:
parameter0 is not null
parameter0 equals ""

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number cannot be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>
Type:java.lang.IllegalArgumentException
Message:\QThe offset cannot be negative\E
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0
parameter0.length is not 0
parameter0 is not null

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number must contain at least one byte\E
ExceptionPreConditions:
parameter0.length equals 0
parameter0 is not null

<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number cannot be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.MagicNumberFileFilter: boolean accept(java.io.File)>
Type:java.lang.NullPointerException
Message:\QThis statement would have triggered an Exception: virtualinvoke l3#2_2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($stack29)\E
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.lang.Throwable is caught, when executing the statements from virtualinvoke $r1.<java.io.RandomAccessFile: void close()>() to goto [?= return $z2]

<org.apache.commons.io.FileUtils: java.io.File getFile(java.io.File,java.lang.String[])>
Type:java.lang.NullPointerException
Message:\Qnames must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: java.io.File getFile(java.io.File,java.lang.String[])>
Type:java.lang.NullPointerException
Message:\Qdirectory must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: java.io.File getFile(java.lang.String[])>
Type:java.lang.NullPointerException
Message:\Qnames must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean canRead()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void touch(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: void touch(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: void touch(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: void touch(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 setLastModified <java.lang.System: long currentTimeMillis()>(), it returns 0

<org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.NullPointerException
Message:\QParameter 'fileFilter' is null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.NullPointerException
Message:\QParameter 'fileFilter' is null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.util.Collection listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.NullPointerException
Message:\QParameter 'fileFilter' is null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.util.Collection listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.NullPointerException
Message:\QParameter 'fileFilter' is null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.util.Iterator iterateFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.NullPointerException
Message:\QParameter 'fileFilter' is null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.util.Iterator iterateFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>
Type:java.lang.NullPointerException
Message:\QParameter 'fileFilter' is null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,java.lang.String[],boolean)>
Type:java.lang.NullPointerException
Message:\QParameter 'fileFilter' is null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,java.lang.String[],boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>
Type:java.io.IOException
Message:\QCan't compare directories, only files\E
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is parameter1.<java.io.File: boolean exists()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>
Type:java.io.IOException
Message:\QCan't compare directories, only files\E
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is parameter1.<java.io.File: boolean exists()>()
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>
Type:java.io.IOException
Message:\QCan't compare directories, only files\E
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is parameter1.<java.io.File: boolean exists()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>
Type:java.io.IOException
Message:\QCan't compare directories, only files\E
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is parameter1.<java.io.File: boolean exists()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
r3 equals r0[i3_1]
r3.<java.net.URL: java.lang.String getProtocol()>() not equals "file"
0 smaller than parameter0.length
r3 is not null
r3 equals r0[i3_1]
parameter0.length is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null

<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream

<org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream

<org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null

<org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null

<org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream

<org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream

<org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null

<org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void checkFileRequirements(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null

<org.apache.commons.io.FileUtils: void checkFileRequirements(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: void checkFileRequirements(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is null

<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File,int,int)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File,int,int)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File,int,int)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyToFile(java.io.InputStream,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void copyToFile(java.io.InputStream,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void copyToFile(java.io.InputStream,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is not 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter0.<java.io.File: boolean isFile()>() is 0

<org.apache.commons.io.FileUtils: void copyToDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void copyToDirectory(java.lang.Iterable,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSources must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>
Type:java.lang.NullPointerException
Message:\QFile must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean delete()>() is 0

<org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: boolean directoryContains(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: boolean directoryContains(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QDirectory must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.io.File[] verifiedListFiles(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: java.io.File[] verifiedListFiles(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: java.io.File[] verifiedListFiles(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean canRead()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean canRead()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean canRead()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean canRead()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.nio.charset.Charset)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean canRead()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean canRead()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean canRead()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean canRead()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean canRead()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
$r1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.io.File getParentFile()>() is not null

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean canWrite()>() is 0

<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>
Type:java.lang.NullPointerException
Message:\QFile must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean delete()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean delete()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)>
Type:java.lang.NullPointerException
Message:\QFile must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)>
Type:java.lang.NullPointerException
Message:\QFile must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean mkdirs()>() is 0

<org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: long sizeOf(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfAsBigInteger(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: void checkDirectory(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void checkDirectory(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified file\E
ExceptionPreConditions:
parameter0 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null

<org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is 0
parameter1 is not null

<org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified reference file\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.util.Date)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified file\E
ExceptionPreConditions:
parameter0 is null
parameter1 is not null

<org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.util.Date)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified date\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified file\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified file\E
ExceptionPreConditions:
parameter0 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null

<org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is 0
parameter1 is not null

<org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified reference file\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.util.Date)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified file\E
ExceptionPreConditions:
parameter0 is null
parameter1 is not null

<org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.util.Date)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified date\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified file\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: long checksumCRC32(java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QChecksums can't be computed on directories\E
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>
Type:java.lang.IllegalArgumentException
Message:\QChecksums can't be computed on directories\E
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QFile must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean delete()>() is 0

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:org.apache.commons.io.FileExistsException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is 0
parameter1 is not null

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QFile must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:org.apache.commons.io.FileExistsException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is 0
parameter1 is not null
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination directory must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: java.io.File[] listFiles()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:org.apache.commons.io.FileExistsException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: java.io.File[] listFiles()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:org.apache.commons.io.FileExistsException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination directory must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
r4.<java.io.File: boolean isDirectory()>() is 0
r4 equals r2[i2_1]
0 smaller than lengthof r2
parameter4 is not null
r4 equals r2[i2_1]
parameter4 not contains r4.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QFile must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() not startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter1 is not null
parameter1.<java.io.File: java.lang.String getCanonicalPath()>() startsWith $r7.<java.lang.StringBuilder: java.lang.String toString()>()
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:org.apache.commons.io.FileExistsException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is 0
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0 is not null
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is 0
parameter1 is not null
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination directory must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
null equals new java.io.FileOutputStream
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
$r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() is not null
$r45.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() is not null
new java.io.FileOutputStream is not null
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean canWrite()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is not 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean canWrite()>() is 0
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: java.io.File getParentFile()>() is not null
$r4.<java.io.File: boolean isDirectory()>() is 0
$r4.<java.io.File: boolean mkdirs()>() is 0
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() not equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: java.lang.String getCanonicalPath()>() equals parameter1.<java.io.File: java.lang.String getCanonicalPath()>()
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter1.<java.io.File: java.io.File[] listFiles()>() is null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0 renameTo parameter1, it returns 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:org.apache.commons.io.FileExistsException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter0.<java.io.File: boolean exists()>() is 0
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
parameter1.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination directory must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter1 is not null
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter1 is not null
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QDestination must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>
Type:java.lang.NullPointerException
Message:\QSource must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>
Type:java.lang.NullPointerException
Message:\QFile must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileEntry: void <init>(java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileEntry: void <init>(org.apache.commons.io.monitor.FileEntry,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry newChildInstance(java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileCleaner: void track(java.io.File,java.lang.Object)>
Type:java.lang.IllegalStateException
Message:\QNo new trackers can be added once exitWhenFinished() is called\E
ExceptionPreConditions:
@this: org.apache.commons.io.FileCleaningTracker.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
parameter0 is not null

<org.apache.commons.io.FileCleaner: void track(java.io.File,java.lang.Object)>
Type:java.lang.NullPointerException
Message:\QThe file must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileCleaner: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
Type:java.lang.IllegalStateException
Message:\QNo new trackers can be added once exitWhenFinished() is called\E
ExceptionPreConditions:
@this: org.apache.commons.io.FileCleaningTracker.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
parameter0 is not null

<org.apache.commons.io.FileCleaner: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
Type:java.lang.NullPointerException
Message:\QThe file must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileCleaner: void track(java.lang.String,java.lang.Object)>
Type:java.lang.IllegalStateException
Message:\QNo new trackers can be added once exitWhenFinished() is called\E
ExceptionPreConditions:
@this: org.apache.commons.io.FileCleaningTracker.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
parameter0 is not null

<org.apache.commons.io.FileCleaner: void track(java.lang.String,java.lang.Object)>
Type:java.lang.NullPointerException
Message:\QThe path must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileCleaner: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
Type:java.lang.IllegalStateException
Message:\QNo new trackers can be added once exitWhenFinished() is called\E
ExceptionPreConditions:
@this: org.apache.commons.io.FileCleaningTracker.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
parameter0 is not null

<org.apache.commons.io.FileCleaner: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
Type:java.lang.NullPointerException
Message:\QThe path must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.CountingOutputStream: int getCount()>
Type:java.lang.ArithmeticException

<org.apache.commons.io.output.CountingOutputStream: int resetCount()>
Type:java.lang.ArithmeticException

<org.apache.commons.io.ByteOrderParser: java.nio.ByteOrder parseByteOrder(java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 not equals <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>.<java.nio.ByteOrder: java.lang.String toString()>()
parameter0 not equals <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>.<java.nio.ByteOrder: java.lang.String toString()>()

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.lang.String,java.io.FileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.lang.String,java.io.FileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QRoot directory is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter0.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>() is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.lang.String,java.io.FileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QRoot entry is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.lang.String,java.io.FileFilter,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.lang.String,java.io.FileFilter,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QRoot directory is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter0.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>() is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.lang.String,java.io.FileFilter,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QRoot entry is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QRoot directory is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter0.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>() is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QRoot entry is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QRoot directory is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter0.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>() is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QRoot entry is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QRoot directory is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter0.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>() is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QRoot entry is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QRoot directory is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter0.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>() is null

<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QRoot entry is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter1 is null
r8 equals r2[i9_1]
@this: org.apache.commons.io.monitor.FileAlterationObserver.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator> compare "new java.io.File", it returns 0
r4.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator> compare "new java.io.File", it returns 0
0 smaller than parameter1.length

<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.input.ReversedLinesFileReader: void <init>(java.io.File)>
Type:java.io.UnsupportedEncodingException
ExceptionPreConditions:
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-949")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Shift_JIS")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-950")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("gbk")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("windows-31j")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>

<org.apache.commons.io.input.ReversedLinesFileReader: void <init>(java.io.File)>
Type:java.io.UnsupportedEncodingException
Message:\QFor UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)\E
ExceptionPreConditions:
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-949")
<java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16> equals <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1)
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Shift_JIS")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-950")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("gbk")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("windows-31j")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>

<org.apache.commons.io.input.ReversedLinesFileReader: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.io.UnsupportedEncodingException
ExceptionPreConditions:
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-949")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Shift_JIS")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-950")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("gbk")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("windows-31j")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>

<org.apache.commons.io.input.ReversedLinesFileReader: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.io.UnsupportedEncodingException
Message:\QFor UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)\E
ExceptionPreConditions:
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-949")
<java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16> equals <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1)
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Shift_JIS")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-950")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("gbk")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("windows-31j")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>

<org.apache.commons.io.input.ReversedLinesFileReader: void <init>(java.io.File,int,java.nio.charset.Charset)>
Type:java.io.UnsupportedEncodingException
ExceptionPreConditions:
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-949")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Shift_JIS")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-950")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("gbk")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("windows-31j")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>

<org.apache.commons.io.input.ReversedLinesFileReader: void <init>(java.io.File,int,java.nio.charset.Charset)>
Type:java.io.UnsupportedEncodingException
Message:\QFor UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)\E
ExceptionPreConditions:
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-949")
<java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16> equals <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1)
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Shift_JIS")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-950")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("gbk")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("windows-31j")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>

<org.apache.commons.io.input.ReversedLinesFileReader: void <init>(java.io.File,int,java.lang.String)>
Type:java.io.UnsupportedEncodingException
ExceptionPreConditions:
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-949")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Shift_JIS")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-950")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("gbk")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("windows-31j")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>

<org.apache.commons.io.input.ReversedLinesFileReader: void <init>(java.io.File,int,java.lang.String)>
Type:java.io.UnsupportedEncodingException
Message:\QFor UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)\E
ExceptionPreConditions:
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-949")
<java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16> equals <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1)
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Shift_JIS")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("x-windows-950")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("gbk")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("windows-31j")
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>
<org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1) is not <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>

<org.apache.commons.io.output.BrokenOutputStream: void write(int)>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.BrokenOutputStream: void flush()>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.BrokenOutputStream: void close()>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.NullReader: void mark(int)>
Type:java.lang.UnsupportedOperationException
Message:\QMark not supported\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullReader.<org.apache.commons.io.input.NullReader: boolean markSupported> is 0
r0.<org.apache.commons.io.input.NullReader: boolean markSupported> is 0

<org.apache.commons.io.input.NullReader: int read()>
Type:java.io.IOException
Message:\QRead after end of file\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullReader.<org.apache.commons.io.input.NullReader: boolean eof> is not 0
r0.<org.apache.commons.io.input.NullReader: boolean eof> is not 0

<org.apache.commons.io.input.NullReader: int read(char[])>
Type:java.io.IOException
Message:\QRead after end of file\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullReader.<org.apache.commons.io.input.NullReader: boolean eof> is not 0
r0.<org.apache.commons.io.input.NullReader: boolean eof> is not 0

<org.apache.commons.io.input.NullReader: int read(char[],int,int)>
Type:java.io.IOException
Message:\QRead after end of file\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullReader.<org.apache.commons.io.input.NullReader: boolean eof> is not 0
r0.<org.apache.commons.io.input.NullReader: boolean eof> is not 0

<org.apache.commons.io.input.NullReader: void reset()>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullReader.<org.apache.commons.io.input.NullReader: boolean markSupported> is not 0
r0.<org.apache.commons.io.input.NullReader: boolean markSupported> is not 0
 equals 
 equals 
r0.<org.apache.commons.io.input.NullReader: long position>cmp $l4 . larger than 0
 equals 
 equals 
r0.<org.apache.commons.io.input.NullReader: long mark>cmp 0L . larger or equal 0

<org.apache.commons.io.input.NullReader: void reset()>
Type:java.io.IOException
Message:\QNo position has been marked\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullReader.<org.apache.commons.io.input.NullReader: boolean markSupported> is not 0
r0.<org.apache.commons.io.input.NullReader: boolean markSupported> is not 0
 equals 
 equals 
r0.<org.apache.commons.io.input.NullReader: long mark>cmp 0L . smaller than 0

<org.apache.commons.io.input.NullReader: void reset()>
Type:java.lang.UnsupportedOperationException
Message:\QMark not supported\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullReader.<org.apache.commons.io.input.NullReader: boolean markSupported> is 0
r0.<org.apache.commons.io.input.NullReader: boolean markSupported> is 0

<org.apache.commons.io.input.NullReader: long skip(long)>
Type:java.io.IOException
Message:\QSkip after end of file\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullReader.<org.apache.commons.io.input.NullReader: boolean eof> is not 0
r0.<org.apache.commons.io.input.NullReader: boolean eof> is not 0

<org.apache.commons.io.input.NullReader: int doEndOfFile()>
Type:java.io.EOFException
Message:[\s\S]*
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullReader.<org.apache.commons.io.input.NullReader: boolean throwEofException> is not 0
r0.<org.apache.commons.io.input.NullReader: boolean throwEofException> is not 0

<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long)>
Type:java.lang.IllegalArgumentException
Message:\QThe size must be non-negative\E
ExceptionPreConditions:
parameter0cmp 0L . smaller than 0

<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>
Type:java.lang.IllegalArgumentException
Message:\QThe size must be non-negative\E
ExceptionPreConditions:
parameter0cmp 0L . smaller than 0

<org.apache.commons.io.input.ObservableInputStream: int read()>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.ObservableInputStream: int read(byte[])>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.ObservableInputStream: void noteError(java.io.IOException)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.monitor.FileAlterationMonitor: void start()>
Type:java.lang.IllegalStateException
Message:\QMonitor is already running\E
ExceptionPreConditions:
@this: org.apache.commons.io.monitor.FileAlterationMonitor.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running> is not 0
r0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running> is not 0

<org.apache.commons.io.monitor.FileAlterationMonitor: void stop(long)>
Type:java.lang.IllegalStateException
Message:\QMonitor is not running\E
ExceptionPreConditions:
@this: org.apache.commons.io.monitor.FileAlterationMonitor.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running> is 0
r0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running> is 0

<org.apache.commons.io.comparator.SizeFileComparator: int compare(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
@this: org.apache.commons.io.comparator.SizeFileComparator.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> is not 0
r2.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> is not 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.comparator.SizeFileComparator: int compare(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
@this: org.apache.commons.io.comparator.SizeFileComparator.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> is not 0
r2.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> is not 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.comparator.SizeFileComparator: int compare(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean isDirectory()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
@this: org.apache.commons.io.comparator.SizeFileComparator.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> is not 0
r2.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> is not 0

<org.apache.commons.io.comparator.SizeFileComparator: int compare(java.io.File,java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1.<java.io.File: boolean exists()>() is 0
parameter1.<java.io.File: boolean exists()>() is not 0
parameter1.<java.io.File: boolean isDirectory()>() is not 0
@this: org.apache.commons.io.comparator.SizeFileComparator.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> is not 0
r2.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> is not 0

<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.lang.String,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.lang.String,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.lang.String,boolean)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.lang.String,boolean)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.Charset)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.Charset)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.Charset)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.Charset)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.Charset,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.Charset,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.Charset,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.Charset,boolean)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.Charset,boolean)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.CharsetEncoder)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.CharsetEncoder)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.CharsetEncoder)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.CharsetEncoder)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.CharsetEncoder)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.CharsetEncoder,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.CharsetEncoder,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.CharsetEncoder,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.CharsetEncoder,boolean)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.lang.String,java.nio.charset.CharsetEncoder,boolean)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.lang.String,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.lang.String,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.lang.String,boolean)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.lang.String,boolean)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.Charset,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.Charset,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.Charset,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.Charset,boolean)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.Charset,boolean)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.CharsetEncoder)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.CharsetEncoder)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.CharsetEncoder)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.CharsetEncoder)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.CharsetEncoder)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.CharsetEncoder,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.CharsetEncoder,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.CharsetEncoder,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.CharsetEncoder,boolean)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: void <init>(java.io.File,java.nio.charset.CharsetEncoder,boolean)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.FileWriterWithEncoding: java.io.Writer initWriter(java.io.File,java.lang.Object,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: java.io.Writer initWriter(java.io.File,java.lang.Object,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: java.io.Writer initWriter(java.io.File,java.lang.Object,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.FileWriterWithEncoding: java.io.Writer initWriter(java.io.File,java.lang.Object,boolean)>
Type:java.lang.NullPointerException
Message:\QEncoding is missing\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.output.FileWriterWithEncoding: java.io.Writer initWriter(java.io.File,java.lang.Object,boolean)>
Type:java.lang.NullPointerException
Message:\QFile is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream)>
Type:java.io.IOException
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream)>
Type:java.io.IOException
Message:\QUnexpected end of XML stream\E
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,boolean)>
Type:java.io.IOException
Message:\QUnexpected end of XML stream\E
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,boolean,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,boolean,java.lang.String)>
Type:java.io.IOException
Message:\QUnexpected end of XML stream\E
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:java.io.IOException
Message:\QUnexpected end of XML stream\E
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 equals parameter1
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is not null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter1 is not null
parameter1 not equals "UTF-8"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is null
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 equals parameter1
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 not equals parameter1
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals "UTF-32LE"
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is null
parameter1 equals "UTF-32LE"
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 equals "UTF-32LE"
parameter1 equals parameter1
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 equals "UTF-32LE"
parameter1 not equals parameter1
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter1 equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 equals parameter1
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is not null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter1 equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter1 is not null
parameter1 not equals "UTF-8"
parameter1 equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 is not null
parameter1 equals "UTF-8"
parameter1 is null
parameter2 not equals "UTF-8"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter1 equals "UTF-8"
parameter2 is not null
parameter1 equals "UTF-8"
parameter1 is not null
parameter2 not equals "UTF-8"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter1 not equals "UTF-8"
parameter1 equals "UTF-8"
parameter1 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1)

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1)

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:java.io.IOException
Message:\QUnexpected end of XML stream\E
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 equals parameter1
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is not null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter1 is not null
parameter1 not equals "UTF-8"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is null
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 equals parameter1
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 not equals parameter1
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals "UTF-32LE"
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is null
parameter1 equals "UTF-32LE"
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 equals "UTF-32LE"
parameter1 equals parameter1
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 equals "UTF-32LE"
parameter1 not equals parameter1
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter1 equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 equals parameter1
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is not null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter1 equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter1 is not null
parameter1 not equals "UTF-8"
parameter1 equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 is not null
parameter1 equals "UTF-8"
parameter1 is null
parameter2 not equals "UTF-8"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter1 equals "UTF-8"
parameter2 is not null
parameter1 equals "UTF-8"
parameter1 is not null
parameter2 not equals "UTF-8"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter1 not equals "UTF-8"
parameter1 equals "UTF-8"
parameter1 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1)

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1)

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:java.io.IOException
Message:\QUnexpected end of XML stream\E
ExceptionPreConditions:
r1 equals newarray (byte)[4096]

parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 equals parameter1
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is not null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter1 is not null
parameter1 not equals "UTF-8"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is null
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 equals parameter1
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 not equals parameter1
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals "UTF-32LE"
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is null
parameter1 equals "UTF-32LE"
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 equals "UTF-32LE"
parameter1 equals parameter1
parameter2 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter2 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 is not null
parameter1 equals "UTF-32LE"
parameter1 not equals parameter1
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter1 equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 equals parameter1
parameter1 not equals parameter1
parameter3 not equals parameter1
parameter2 not equals parameter2
parameter1 is not null
parameter1 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter1 equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter1 is not null
parameter1 not equals "UTF-8"
parameter1 equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 is not null
parameter1 equals "UTF-8"
parameter1 is null
parameter2 not equals "UTF-8"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter1 equals "UTF-8"
parameter2 is not null
parameter1 equals "UTF-8"
parameter1 is not null
parameter2 not equals "UTF-8"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter1 not equals "UTF-8"
parameter1 equals "UTF-8"
parameter1 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter2 is null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1)

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter2 is null
parameter2 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1)

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
r1 equals newarray (byte)[4096]
parameter1 read "newarray (byte)[4096]", it returns 0
parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)>
Type:java.io.IOException
Message:\QUnexpected end of XML stream\E
ExceptionPreConditions:
r1 equals newarray (byte)[4096]
parameter1 read "newarray (byte)[4096]", it returns 0
parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
r1 equals newarray (byte)[4096]
parameter1 read "newarray (byte)[4096]", it returns 0
parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:java.io.IOException
Message:\QUnexpected end of XML stream\E
ExceptionPreConditions:
r1 equals newarray (byte)[4096]
parameter1 read "newarray (byte)[4096]", it returns 0
parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter2 not equals parameter1
parameter3 not equals parameter2
parameter2 is null
parameter1 not equals "UTF-8"
parameter3 is not null
parameter3 not equals "UTF-16"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 equals parameter1
parameter2 equals parameter2
parameter2 not equals parameter1
parameter3 not equals parameter2
parameter2 is not null
parameter1 not equals "UTF-8"
parameter3 is not null
parameter3 not equals "UTF-16"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter2 not equals parameter2
parameter2 is not null
parameter1 not equals "UTF-8"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is null
parameter3 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter2 not equals parameter1
parameter3 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter3 is not null
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is not null
parameter1 equals parameter1
parameter2 equals parameter2
parameter3 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter2 not equals parameter1
parameter3 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter3 is not null
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is not null
parameter1 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals "UTF-32LE"
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is null
parameter1 equals "UTF-32LE"
parameter3 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter2 not equals parameter1
parameter3 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter3 is not null
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is not null
parameter1 equals "UTF-32LE"
parameter1 equals parameter1
parameter2 equals parameter2
parameter3 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter2 not equals parameter1
parameter3 not equals parameter2
parameter1 not equals "UTF-16LE"
parameter3 is not null
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is not null
parameter1 equals "UTF-32LE"
parameter1 not equals parameter1
parameter2 not equals parameter2
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 not equals parameter1
parameter3 not equals parameter2
parameter2 is null
parameter1 not equals "UTF-8"
parameter3 is not null
parameter3 not equals "UTF-16"
parameter1 equals "UTF-16LE"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 equals parameter1
parameter2 equals parameter2
parameter2 not equals parameter1
parameter3 not equals parameter2
parameter2 is not null
parameter1 not equals "UTF-8"
parameter3 is not null
parameter3 not equals "UTF-16"
parameter1 equals "UTF-16LE"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter2 not equals parameter2
parameter2 is not null
parameter1 not equals "UTF-8"
parameter1 equals "UTF-16LE"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter3 is not null
parameter1 equals "UTF-8"
parameter2 is null
parameter3 not equals "UTF-8"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 equals "UTF-8"
parameter3 is not null
parameter1 equals "UTF-8"
parameter2 is not null
parameter3 not equals "UTF-8"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 not equals "UTF-8"
parameter1 equals "UTF-8"
parameter2 is not null
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter3 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter3 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter3 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter3 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter3 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter3 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter3 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter3 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1)

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
parameter3 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter3 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is not 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter3 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter3 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter3 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is not 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
parameter3 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1)

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 equals "UTF-16BE"
parameter0 is not null
parameter2 not equals parameter0
parameter1 is null
parameter0 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 equals "UTF-16BE"
parameter0 is not null
parameter1 equals parameter0
parameter2 not equals parameter0
parameter1 is not null
parameter0 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 equals "UTF-16BE"
parameter0 is not null
parameter1 not equals parameter0
parameter1 is not null
parameter0 not equals "UTF-8"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 equals "UTF-32BE"
parameter0 not equals "UTF-16BE"
parameter0 is not null
parameter1 is null
parameter2 not equals "UTF-32"
parameter0 not equals "UTF-8"
parameter2 not equals parameter0
parameter0 not equals "UTF-16LE"
parameter2 is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 equals "UTF-32BE"
parameter0 not equals "UTF-16BE"
parameter0 is not null
parameter1 is not null
parameter1 equals parameter0
parameter2 not equals "UTF-32"
parameter0 not equals "UTF-8"
parameter2 not equals parameter0
parameter0 not equals "UTF-16LE"
parameter2 is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 equals "UTF-32BE"
parameter0 not equals "UTF-16BE"
parameter0 is not null
parameter1 is not null
parameter1 not equals parameter0
parameter0 not equals "UTF-8"
parameter0 not equals "UTF-16LE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 not equals "UTF-32BE"
parameter0 not equals "UTF-16BE"
parameter0 is not null
parameter0 not equals "UTF-32LE"
parameter0 not equals "UTF-8"
parameter0 not equals "UTF-16LE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 not equals "UTF-32BE"
parameter0 not equals "UTF-16BE"
parameter0 is not null
parameter1 is null
parameter0 equals "UTF-32LE"
parameter2 not equals "UTF-32"
parameter0 not equals "UTF-8"
parameter2 not equals parameter0
parameter0 not equals "UTF-16LE"
parameter2 is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 not equals "UTF-32BE"
parameter0 not equals "UTF-16BE"
parameter0 is not null
parameter1 is not null
parameter0 equals "UTF-32LE"
parameter1 equals parameter0
parameter2 not equals "UTF-32"
parameter0 not equals "UTF-8"
parameter2 not equals parameter0
parameter0 not equals "UTF-16LE"
parameter2 is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 not equals "UTF-32BE"
parameter0 not equals "UTF-16BE"
parameter0 is not null
parameter1 is not null
parameter0 equals "UTF-32LE"
parameter1 not equals parameter0
parameter0 not equals "UTF-8"
parameter0 not equals "UTF-16LE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 not equals "UTF-16BE"
parameter0 is not null
parameter2 not equals parameter0
parameter1 is null
parameter0 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter0 equals "UTF-16LE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 not equals "UTF-16BE"
parameter0 is not null
parameter1 equals parameter0
parameter2 not equals parameter0
parameter1 is not null
parameter0 not equals "UTF-8"
parameter2 is not null
parameter2 not equals "UTF-16"
parameter0 equals "UTF-16LE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 not equals "UTF-16BE"
parameter0 is not null
parameter1 not equals parameter0
parameter1 is not null
parameter0 not equals "UTF-8"
parameter0 equals "UTF-16LE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 is not null
parameter2 is not null
parameter0 equals "UTF-8"
parameter1 is null
parameter2 not equals "UTF-8"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 is not null
parameter1 equals "UTF-8"
parameter2 is not null
parameter0 equals "UTF-8"
parameter1 is not null
parameter2 not equals "UTF-8"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter0 is not null
parameter1 not equals "UTF-8"
parameter0 equals "UTF-8"
parameter1 is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter2 not equals parameter1
parameter3 not equals parameter0
parameter2 is null
parameter1 not equals "UTF-8"
parameter3 is not null
parameter3 not equals "UTF-16"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 equals parameter1
parameter2 equals parameter0
parameter2 not equals parameter1
parameter3 not equals parameter0
parameter2 is not null
parameter1 not equals "UTF-8"
parameter3 is not null
parameter3 not equals "UTF-16"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter2 not equals parameter0
parameter2 is not null
parameter1 not equals "UTF-8"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is null
parameter3 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter2 not equals parameter1
parameter3 not equals parameter0
parameter1 not equals "UTF-16LE"
parameter3 is not null
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is not null
parameter1 equals parameter1
parameter2 equals parameter0
parameter3 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter2 not equals parameter1
parameter3 not equals parameter0
parameter1 not equals "UTF-16LE"
parameter3 is not null
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is not null
parameter1 not equals parameter1
parameter2 not equals parameter0
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals "UTF-32LE"
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is null
parameter1 equals "UTF-32LE"
parameter3 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter2 not equals parameter1
parameter3 not equals parameter0
parameter1 not equals "UTF-16LE"
parameter3 is not null
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is not null
parameter1 equals "UTF-32LE"
parameter1 equals parameter1
parameter2 equals parameter0
parameter3 not equals "UTF-32"
parameter1 not equals "UTF-8"
parameter2 not equals parameter1
parameter3 not equals parameter0
parameter1 not equals "UTF-16LE"
parameter3 is not null
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-32BE"
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 is not null
parameter1 equals "UTF-32LE"
parameter1 not equals parameter1
parameter2 not equals parameter0
parameter1 not equals "UTF-8"
parameter1 not equals "UTF-16LE"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter2 not equals parameter1
parameter3 not equals parameter0
parameter2 is null
parameter1 not equals "UTF-8"
parameter3 is not null
parameter3 not equals "UTF-16"
parameter1 equals "UTF-16LE"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 equals parameter1
parameter2 equals parameter0
parameter2 not equals parameter1
parameter3 not equals parameter0
parameter2 is not null
parameter1 not equals "UTF-8"
parameter3 is not null
parameter3 not equals "UTF-16"
parameter1 equals "UTF-16LE"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not equals "UTF-16BE"
parameter1 is not null
parameter1 not equals parameter1
parameter2 not equals parameter0
parameter2 is not null
parameter1 not equals "UTF-8"
parameter1 equals "UTF-16LE"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter3 is not null
parameter1 equals "UTF-8"
parameter2 is null
parameter3 not equals "UTF-8"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 equals "UTF-8"
parameter3 is not null
parameter1 equals "UTF-8"
parameter2 is not null
parameter3 not equals "UTF-8"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter2 not equals "UTF-8"
parameter1 equals "UTF-8"
parameter2 is not null
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
null equals <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0)
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
parameter3 is null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter4 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter4 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter4 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter4 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter4 is 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter4 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter4 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter4 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter4 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter4 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter4 is 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1)

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
parameter4 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter4 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is not 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter4 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter4 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter4 is not 0
<org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32BE"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is null
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter1 is not null
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32"
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is not 0
parameter1 not startsWith "UTF-32"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-32LE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-32BE"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is null
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
parameter1 not startsWith "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16LE"
parameter1 is not null
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16"
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) equals "UTF-16LE"
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) not equals "UTF-16BE"
parameter1 is not null
<org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1) is not 0
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0) is not null

<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
Type:org.apache.commons.io.input.XmlStreamReaderException
ExceptionPreConditions:
parameter3 is null
parameter4 is not 0
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1)
0 equals <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1)

<org.apache.commons.io.input.XmlStreamReader: java.lang.String getXmlProlog(java.io.InputStream,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
r1 equals newarray (byte)[4096]
parameter0 read "newarray (byte)[4096]", it returns 0
parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.XmlStreamReader: java.lang.String getXmlProlog(java.io.InputStream,java.lang.String)>
Type:java.io.IOException
Message:\QUnexpected end of XML stream\E
ExceptionPreConditions:
r1 equals newarray (byte)[4096]
parameter0 read "newarray (byte)[4096]", it returns 0
parameter1 is not null
-1 is -1
r1 equals newarray (byte)[4096]

<org.apache.commons.io.input.TaggedInputStream: void throwIfCauseOf(java.lang.Throwable)>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
<org.apache.commons.io.TaggedIOException: boolean isTaggedWith(java.lang.Throwable,java.lang.Object)>(r0, r1) is not 0

<org.apache.commons.io.input.TaggedInputStream: void handleIOException(java.io.IOException)>
Type:org.apache.commons.io.TaggedIOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.filefilter.AgeFileFilter: boolean accept(java.io.File)>
Type:java.lang.IllegalArgumentException
Message:\QNo specified file\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FilenameFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe FilenameFilter must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe FileFilter must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object)>
Type:java.lang.IllegalStateException
Message:\QNo new trackers can be added once exitWhenFinished() is called\E
ExceptionPreConditions:
@this: org.apache.commons.io.FileCleaningTracker.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
parameter0 is not null

<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object)>
Type:java.lang.NullPointerException
Message:\QThe file must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
Type:java.lang.IllegalStateException
Message:\QNo new trackers can be added once exitWhenFinished() is called\E
ExceptionPreConditions:
@this: org.apache.commons.io.FileCleaningTracker.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
parameter0 is not null

<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
Type:java.lang.NullPointerException
Message:\QThe file must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object)>
Type:java.lang.IllegalStateException
Message:\QNo new trackers can be added once exitWhenFinished() is called\E
ExceptionPreConditions:
@this: org.apache.commons.io.FileCleaningTracker.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
parameter0 is not null

<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object)>
Type:java.lang.NullPointerException
Message:\QThe path must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
Type:java.lang.IllegalStateException
Message:\QNo new trackers can be added once exitWhenFinished() is called\E
ExceptionPreConditions:
@this: org.apache.commons.io.FileCleaningTracker.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
parameter0 is not null

<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
Type:java.lang.NullPointerException
Message:\QThe path must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
Type:java.lang.IllegalStateException
Message:\QNo new trackers can be added once exitWhenFinished() is called\E
ExceptionPreConditions:
@this: org.apache.commons.io.FileCleaningTracker.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0
r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> is not 0

<org.apache.commons.io.input.NullInputStream: void mark(int)>
Type:java.lang.UnsupportedOperationException
Message:\QMark not supported\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullInputStream.<org.apache.commons.io.input.NullInputStream: boolean markSupported> is 0
r0.<org.apache.commons.io.input.NullInputStream: boolean markSupported> is 0

<org.apache.commons.io.input.NullInputStream: int read()>
Type:java.io.IOException
Message:\QRead after end of file\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullInputStream.<org.apache.commons.io.input.NullInputStream: boolean eof> is not 0
r0.<org.apache.commons.io.input.NullInputStream: boolean eof> is not 0

<org.apache.commons.io.input.NullInputStream: int read(byte[])>
Type:java.io.IOException
Message:\QRead after end of file\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullInputStream.<org.apache.commons.io.input.NullInputStream: boolean eof> is not 0
r0.<org.apache.commons.io.input.NullInputStream: boolean eof> is not 0

<org.apache.commons.io.input.NullInputStream: int read(byte[],int,int)>
Type:java.io.IOException
Message:\QRead after end of file\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullInputStream.<org.apache.commons.io.input.NullInputStream: boolean eof> is not 0
r0.<org.apache.commons.io.input.NullInputStream: boolean eof> is not 0

<org.apache.commons.io.input.NullInputStream: void reset()>
Type:java.io.IOException
ExceptionPreConditions:
 equals 
 equals 
r0.<org.apache.commons.io.input.NullInputStream: long mark>cmp 0L . larger or equal 0
@this: org.apache.commons.io.input.NullInputStream.<org.apache.commons.io.input.NullInputStream: boolean markSupported> is not 0
r0.<org.apache.commons.io.input.NullInputStream: boolean markSupported> is not 0
 equals 
 equals 
r0.<org.apache.commons.io.input.NullInputStream: long position>cmp $l4 . larger than 0

<org.apache.commons.io.input.NullInputStream: void reset()>
Type:java.io.IOException
Message:\QNo position has been marked\E
ExceptionPreConditions:
 equals 
 equals 
r0.<org.apache.commons.io.input.NullInputStream: long mark>cmp 0L . smaller than 0
@this: org.apache.commons.io.input.NullInputStream.<org.apache.commons.io.input.NullInputStream: boolean markSupported> is not 0
r0.<org.apache.commons.io.input.NullInputStream: boolean markSupported> is not 0

<org.apache.commons.io.input.NullInputStream: void reset()>
Type:java.lang.UnsupportedOperationException
Message:\QMark not supported\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullInputStream.<org.apache.commons.io.input.NullInputStream: boolean markSupported> is 0
r0.<org.apache.commons.io.input.NullInputStream: boolean markSupported> is 0

<org.apache.commons.io.input.NullInputStream: long skip(long)>
Type:java.io.IOException
Message:\QSkip after end of file\E
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullInputStream.<org.apache.commons.io.input.NullInputStream: boolean eof> is not 0
r0.<org.apache.commons.io.input.NullInputStream: boolean eof> is not 0

<org.apache.commons.io.input.NullInputStream: int doEndOfFile()>
Type:java.io.EOFException
Message:[\s\S]*
ExceptionPreConditions:
@this: org.apache.commons.io.input.NullInputStream.<org.apache.commons.io.input.NullInputStream: boolean throwEofException> is not 0
r0.<org.apache.commons.io.input.NullInputStream: boolean throwEofException> is not 0

<org.apache.commons.io.ByteOrderMark: void <init>(java.lang.String,int[])>
Type:java.lang.IllegalArgumentException
Message:\QNo charsetName specified\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.ByteOrderMark: void <init>(java.lang.String,int[])>
Type:java.lang.IllegalArgumentException
Message:\QNo bytes specified\E
ExceptionPreConditions:
parameter0 not equals ""
parameter1 is null
parameter0 is not null

<org.apache.commons.io.ByteOrderMark: void <init>(java.lang.String,int[])>
Type:java.lang.IllegalArgumentException
Message:\QNo bytes specified\E
ExceptionPreConditions:
parameter1.length equals 0
parameter0 not equals ""
parameter1 is not null
parameter0 is not null

<org.apache.commons.io.ByteOrderMark: void <init>(java.lang.String,int[])>
Type:java.lang.IllegalArgumentException
Message:\QNo charsetName specified\E
ExceptionPreConditions:
parameter0 equals ""
parameter0 is not null

<org.apache.commons.io.input.WindowsLineEndingInputStream: void mark(int)>
Type:java.lang.UnsupportedOperationException
Message:\QMark not supported\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.CharsetDecoder)>
Type:java.lang.UnsupportedOperationException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)>
Type:java.lang.UnsupportedOperationException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset,int,boolean)>
Type:java.lang.UnsupportedOperationException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset)>
Type:java.lang.UnsupportedOperationException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.lang.String,int,boolean)>
Type:java.lang.UnsupportedOperationException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.lang.String)>
Type:java.lang.UnsupportedOperationException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer)>
Type:java.lang.UnsupportedOperationException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.WriterOutputStream: void processInput(boolean)>
Type:java.io.IOException
Message:\QUnexpected coder result\E
ExceptionPreConditions:
$r5.<java.nio.charset.CoderResult: boolean isUnderflow()>() is 0

<org.apache.commons.io.output.WriterOutputStream: void checkIbmJdkWithBrokenUTF16(java.nio.charset.Charset)>
Type:java.lang.UnsupportedOperationException
Message:\QUTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\E
ExceptionPreConditions:
"v\u00e9s" not equals $r8.<java.nio.CharBuffer: java.lang.String toString()>()
0 larger or equal lengthof $r4
parameter0.<java.nio.charset.Charset: java.lang.String name()>() equals "UTF-16"

<org.apache.commons.io.output.WriterOutputStream: void checkIbmJdkWithBrokenUTF16(java.nio.charset.Charset)>
Type:java.lang.UnsupportedOperationException
Message:\QUTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\E
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.lang.IllegalArgumentException is caught, when executing the statements from $i3 = i1 - 1 to goto [?= virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>()]

<org.apache.commons.io.EndianUtils: short readSwappedShort(java.io.InputStream)>
Type:java.io.EOFException
Message:\QUnexpected EOF reached\E
ExceptionPreConditions:
EOF is parameter0.<java.io.InputStream: int read()>()

<org.apache.commons.io.EndianUtils: int readSwappedUnsignedShort(java.io.InputStream)>
Type:java.io.EOFException
Message:\QUnexpected EOF reached\E
ExceptionPreConditions:
EOF is parameter0.<java.io.InputStream: int read()>()

<org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)>
Type:java.io.EOFException
Message:\QUnexpected EOF reached\E
ExceptionPreConditions:
EOF is parameter0.<java.io.InputStream: int read()>()

<org.apache.commons.io.EndianUtils: long readSwappedUnsignedInteger(java.io.InputStream)>
Type:java.io.EOFException
Message:\QUnexpected EOF reached\E
ExceptionPreConditions:
EOF is parameter0.<java.io.InputStream: int read()>()

<org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)>
Type:java.io.EOFException
Message:\QUnexpected EOF reached\E
ExceptionPreConditions:
EOF is parameter0.<java.io.InputStream: int read()>()
0 smaller than 8

<org.apache.commons.io.EndianUtils: float readSwappedFloat(java.io.InputStream)>
Type:java.io.EOFException
Message:\QUnexpected EOF reached\E
ExceptionPreConditions:
EOF is parameter0.<java.io.InputStream: int read()>()

<org.apache.commons.io.EndianUtils: double readSwappedDouble(java.io.InputStream)>
Type:java.io.EOFException
Message:\QUnexpected EOF reached\E
ExceptionPreConditions:
EOF is parameter0.<java.io.InputStream: int read()>()
0 smaller than 8

<org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
Type:java.io.EOFException
Message:\QUnexpected EOF reached\E
ExceptionPreConditions:
EOF is parameter0.<java.io.InputStream: int read()>()

<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.nio.charset.Charset,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . smaller than 0
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . equals 
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . equals 

<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . smaller than 0
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . equals 
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . equals 

<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.nio.charset.Charset)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . smaller than 0
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . equals 
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . equals 

<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . smaller than 0
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . equals 
@this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> . equals 

<org.apache.commons.io.input.CharSequenceInputStream: int read(byte[],int,int)>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter0 is not null
parameter2 smaller than 0

<org.apache.commons.io.input.CharSequenceInputStream: int read(byte[],int,int)>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter0 is not null
parameter1+ i6 . larger than parameter0.length
parameter2 larger or equal 0

<org.apache.commons.io.input.CharSequenceInputStream: int read(byte[],int,int)>
Type:java.lang.NullPointerException
Message:\QByte array is null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.input.CharSequenceInputStream: int read(byte[])>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter0 is not null
parameter2 smaller than 0

<org.apache.commons.io.input.CharSequenceInputStream: int read(byte[])>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter0 is not null
parameter1+ i6 . larger than parameter0.length
parameter2 larger or equal 0

<org.apache.commons.io.input.CharSequenceInputStream: int read(byte[])>
Type:java.lang.NullPointerException
Message:\QByte array is null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.input.CharSequenceInputStream: void reset()>
Type:java.lang.IllegalStateException
ExceptionPreConditions:
r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>.<java.nio.CharBuffer: int position()>() is not @this: org.apache.commons.io.input.CharSequenceInputStream<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf> .
@this: org.apache.commons.io.input.CharSequenceInputStream.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf> is not -1
r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf> is not -1

<org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ChunkedOutputStream: void <init>(java.io.OutputStream,int)>
Type:java.lang.IllegalArgumentException
Message:[\s\S]*
ExceptionPreConditions:
parameter1 smaller or equal 0

<org.apache.commons.io.output.ChunkedOutputStream: void <init>(java.io.OutputStream)>
Type:java.lang.IllegalArgumentException
Message:[\s\S]*
ExceptionPreConditions:
parameter1 smaller or equal 0

<org.apache.commons.io.input.CharSequenceReader: int read(char[],int,int)>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter2 smaller than 0
parameter0 is not null

<org.apache.commons.io.input.CharSequenceReader: int read(char[],int,int)>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter1 smaller than 0
parameter2 larger or equal 0
parameter0 is not null

<org.apache.commons.io.input.CharSequenceReader: int read(char[],int,int)>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter1+ i2 . larger than parameter0.length
parameter1 larger or equal 0
parameter2 larger or equal 0
parameter0 is not null

<org.apache.commons.io.input.CharSequenceReader: int read(char[],int,int)>
Type:java.lang.NullPointerException
Message:\QCharacter array is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.input.CharSequenceReader: long skip(long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0cmp 0L . smaller than 0

<org.apache.commons.io.output.TaggedOutputStream: void throwIfCauseOf(java.lang.Exception)>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
<org.apache.commons.io.TaggedIOException: boolean isTaggedWith(java.lang.Throwable,java.lang.Object)>(r0, r1) is not 0

<org.apache.commons.io.output.TaggedOutputStream: void handleIOException(java.io.IOException)>
Type:org.apache.commons.io.TaggedIOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>
Type:java.lang.IllegalArgumentException
Message:\Qfile array contains null\E
ExceptionPreConditions:
0 smaller than parameter1.length
parameter0 is not null
parameter1 is not null
r6 is null
r6 equals r1[i2_1]

<org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>
Type:java.lang.IllegalArgumentException
Message:\Qfile filter is null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>
Type:java.lang.IllegalArgumentException
Message:\Qfile collection contains null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
r5 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>
Type:java.lang.IllegalArgumentException
Message:\Qfile filter is null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>
Type:java.lang.IllegalArgumentException
Message:\Qfile collection contains null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
r5 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>
Type:java.lang.IllegalArgumentException
Message:\Qfile filter is null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>
Type:java.lang.IllegalArgumentException
Message:\Qfile array contains null\E
ExceptionPreConditions:
0 smaller than parameter1.length
parameter0 is not null
parameter1 is not null
r6 is null
r6 equals r1[i2_1]

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>
Type:java.lang.IllegalArgumentException
Message:\Qfile filter is null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>
Type:java.lang.IllegalArgumentException
Message:\Qfile array contains null\E
ExceptionPreConditions:
0 smaller than parameter1.length
parameter0 is not null
parameter1 is not null
r6 is null
r6 equals r1[i2_1]

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>
Type:java.lang.IllegalArgumentException
Message:\Qfile filter is null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>
Type:java.lang.IllegalArgumentException
Message:\Qfile collection contains null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
r5 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>
Type:java.lang.IllegalArgumentException
Message:\Qfile filter is null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.Collection filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,java.util.Collection)>
Type:java.lang.IllegalArgumentException
Message:\Qfile collection contains null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is not null
r5 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.Collection filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable,java.util.Collection)>
Type:java.lang.IllegalArgumentException
Message:\Qfile filter is null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe prefix must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe prefix must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe suffix must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe suffix must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
null equals r0[i2_1]
0 smaller than parameter0.length

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
null equals r0[i2_1]
0 smaller than parameter0.length

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.List toList(org.apache.commons.io.filefilter.IOFileFilter[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 is not null
null equals r0[i2_1]
0 smaller than parameter0.length

<org.apache.commons.io.filefilter.FileFilterUtils: java.util.List toList(org.apache.commons.io.filefilter.IOFileFilter[])>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filter must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe FileFilter must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe FilenameFilter must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long)>
Type:java.lang.IllegalArgumentException
Message:\QThe size must be non-negative\E
ExceptionPreConditions:
parameter0cmp 0L . smaller than 0

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long,boolean)>
Type:java.lang.IllegalArgumentException
Message:\QThe size must be non-negative\E
ExceptionPreConditions:
parameter0cmp 0L . smaller than 0

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long,long)>
Type:java.lang.IllegalArgumentException
Message:\QThe size must be non-negative\E
ExceptionPreConditions:
parameter0cmp 0L . smaller than 0

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe offset cannot be negative\E
ExceptionPreConditions:
parameter0 is not null
parameter0 not equals ""
parameter1cmp 0L . smaller than 0

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number must contain at least one byte\E
ExceptionPreConditions:
parameter0 is not null
parameter0 equals ""

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number cannot be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QThe offset cannot be negative\E
ExceptionPreConditions:
parameter0 is not null
parameter0 not equals ""
parameter1cmp 0L . smaller than 0

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number must contain at least one byte\E
ExceptionPreConditions:
parameter0 is not null
parameter0 equals ""

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number cannot be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[])>
Type:java.lang.IllegalArgumentException
Message:\QThe offset cannot be negative\E
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0
parameter0.length is not 0
parameter0 is not null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[])>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number must contain at least one byte\E
ExceptionPreConditions:
parameter0.length equals 0
parameter0 is not null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[])>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number cannot be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[],long)>
Type:java.lang.IllegalArgumentException
Message:\QThe offset cannot be negative\E
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0
parameter0.length is not 0
parameter0 is not null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[],long)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number must contain at least one byte\E
ExceptionPreConditions:
parameter0.length equals 0
parameter0 is not null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[],long)>
Type:java.lang.IllegalArgumentException
Message:\QThe magic number cannot be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0 is not null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0 is not null
parameter0 is not null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0 is not null

<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0 is not null
parameter0 is not null

<org.apache.commons.io.output.ProxyWriter: java.io.Writer append(char)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: java.io.Writer append(java.lang.CharSequence,int,int)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: java.io.Writer append(java.lang.CharSequence)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.ProxyWriter: void write(int)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: void write(char[])>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: void flush()>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: void close()>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: void handleIOException(java.io.IOException)>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: java.lang.Appendable append(char)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyWriter: java.lang.Appendable append(java.lang.CharSequence)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is not 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be empty\E
ExceptionPreConditions:
parameter0 equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.lang.IllegalStateException
Message:\QException caught when determining operating system\E
ExceptionPreConditions:
parameter0 is not null

<org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is not 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be empty\E
ExceptionPreConditions:
parameter0 equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.lang.IllegalStateException
Message:\QException caught when determining operating system\E
ExceptionPreConditions:
parameter0 is not null

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is not 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be empty\E
ExceptionPreConditions:
parameter0 equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.lang.IllegalStateException
Message:\QException caught when determining operating system\E
ExceptionPreConditions:
parameter0 is not null

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb()>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is not 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be empty\E
ExceptionPreConditions:
parameter0 equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.lang.IllegalStateException
Message:\QException caught when determining operating system\E
ExceptionPreConditions:
parameter0 is not null

<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)
parameter0 is not null
parameter2 is not 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)
parameter0 is not null
parameter2 is 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is not 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be empty\E
ExceptionPreConditions:
parameter0 equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.lang.IllegalStateException
Message:\QException caught when determining operating system\E
ExceptionPreConditions:
parameter0 is not null

<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String,long)>
Type:java.io.IOException
ExceptionPreConditions:
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0) is not null

<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>(r0, 0)

<org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
 larger or equal 0

<org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
 smaller than 0

<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,long)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is not 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() is 1
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
$r6.<java.util.StringTokenizer: int countTokens()>() smaller than 4
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,long)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[3], it returns 0
@this: org.apache.commons.io.FileSystemUtils performCommand newarray (java.lang.String)[2], it returns 0
parameter0 not equals ""

<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,long)>
Type:java.lang.IllegalArgumentException
Message:\QPath must not be empty\E
ExceptionPreConditions:
parameter0 equals ""

<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.lang.NumberFormatException is caught, when executing the statements from $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) to return $l0

<org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
0 larger or equal lengthof $r0

<org.apache.commons.io.IOCase: int checkCompareTo(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QThe strings must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.IOCase: int checkCompareTo(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QThe strings must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QThe strings must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QThe strings must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null

<org.apache.commons.io.IOUtils: java.io.InputStream toBufferedInputStream(java.io.InputStream)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 smaller than 0

<org.apache.commons.io.IOUtils: java.io.InputStream toBufferedInputStream(java.io.InputStream,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 smaller than 0

<org.apache.commons.io.IOUtils: java.io.BufferedOutputStream buffer(java.io.OutputStream)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.IOUtils: java.io.BufferedOutputStream buffer(java.io.OutputStream,int)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.IOUtils: java.io.BufferedInputStream buffer(java.io.InputStream)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.IOUtils: java.io.BufferedInputStream buffer(java.io.InputStream,int)>
Type:java.lang.NullPointerException
Message:[\s\S]*
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,long)>
Type:java.io.IOException
ExceptionPreConditions:
0 is not parameter1
r0 equals newarray (byte)[i0]
parameter0 read "newarray (byte)[i0]", it returns 0
parameter1 larger or equal 0
parameter1 is not 0
parameter1cmp 2147483647L . smaller or equal 0

<org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 smaller than 0
parameter1cmp 2147483647L . smaller or equal 0

<org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1cmp 2147483647L . larger than 0

<org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,int)>
Type:java.io.IOException
ExceptionPreConditions:
0 is not parameter1
r0 equals newarray (byte)[i0]
parameter0 read "newarray (byte)[i0]", it returns 0
parameter1 larger or equal 0
parameter1 is not 0

<org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 smaller than 0

<org.apache.commons.io.IOUtils: java.lang.String resourceToString(java.lang.String,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
class "Lorg/apache/commons/io/IOUtils;" getResource parameter0, it returns 0

<org.apache.commons.io.IOUtils: java.lang.String resourceToString(java.lang.String,java.nio.charset.Charset,java.lang.ClassLoader)>
Type:java.io.IOException
ExceptionPreConditions:
class "Lorg/apache/commons/io/IOUtils;" getResource parameter0, it returns 0

<org.apache.commons.io.IOUtils: byte[] resourceToByteArray(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
class "Lorg/apache/commons/io/IOUtils;" getResource parameter0, it returns 0

<org.apache.commons.io.IOUtils: byte[] resourceToByteArray(java.lang.String,java.lang.ClassLoader)>
Type:java.io.IOException
ExceptionPreConditions:
class "Lorg/apache/commons/io/IOUtils;" getResource parameter0, it returns 0

<org.apache.commons.io.IOUtils: java.net.URL resourceToURL(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
class "Lorg/apache/commons/io/IOUtils;" getResource parameter0, it returns 0

<org.apache.commons.io.IOUtils: java.net.URL resourceToURL(java.lang.String,java.lang.ClassLoader)>
Type:java.io.IOException
ExceptionPreConditions:
class "Lorg/apache/commons/io/IOUtils;" getResource parameter0, it returns 0

<org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.Reader)>
Type:java.lang.IllegalArgumentException
Message:\QReader must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,long,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2cmp 0L . smaller than 0
parameter2cmp 0L . larger or equal 0
parameter2cmp 0L . larger than 0

<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,long,long)>
Type:java.io.EOFException
ExceptionPreConditions:
parameter2cmp 0L . larger or equal 0
parameter2cmp 0L . larger than 0

<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,long,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2cmp 0L . smaller than 0
parameter2cmp 0L . larger than 0

<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2cmp 0L . smaller than 0
parameter2cmp 0L . larger or equal 0
parameter2cmp 0L . larger than 0

<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])>
Type:java.io.EOFException
ExceptionPreConditions:
parameter2cmp 0L . larger or equal 0
parameter2cmp 0L . larger than 0

<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2cmp 0L . smaller than 0
parameter2cmp 0L . larger than 0

<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer,long,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2cmp 0L . smaller than 0
parameter2cmp 0L . larger than 0

<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer,long,long)>
Type:java.io.EOFException
ExceptionPreConditions:
parameter2cmp 0L . larger than 0

<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer,long,long,char[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter2cmp 0L . smaller than 0
parameter2cmp 0L . larger than 0

<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer,long,long,char[])>
Type:java.io.EOFException
ExceptionPreConditions:
parameter2cmp 0L . larger than 0

<org.apache.commons.io.IOUtils: long skip(java.io.InputStream,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0

<org.apache.commons.io.IOUtils: long skip(java.nio.channels.ReadableByteChannel,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0

<org.apache.commons.io.IOUtils: long skip(java.io.Reader,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0

<org.apache.commons.io.IOUtils: void skipFully(java.io.InputStream,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0
parameter1cmp 0L . larger or equal 0

<org.apache.commons.io.IOUtils: void skipFully(java.io.InputStream,long)>
Type:java.io.EOFException
ExceptionPreConditions:
parameter1cmp 0L . larger or equal 0

<org.apache.commons.io.IOUtils: void skipFully(java.io.InputStream,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0

<org.apache.commons.io.IOUtils: void skipFully(java.nio.channels.ReadableByteChannel,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0
parameter1cmp 0L . larger or equal 0

<org.apache.commons.io.IOUtils: void skipFully(java.nio.channels.ReadableByteChannel,long)>
Type:java.io.EOFException
ExceptionPreConditions:
parameter1cmp 0L . larger or equal 0

<org.apache.commons.io.IOUtils: void skipFully(java.nio.channels.ReadableByteChannel,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0

<org.apache.commons.io.IOUtils: void skipFully(java.io.Reader,long)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1cmp 0L . smaller than 0

<org.apache.commons.io.IOUtils: void skipFully(java.io.Reader,long)>
Type:java.io.EOFException

<org.apache.commons.io.IOUtils: int read(java.io.Reader,char[],int,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter3 smaller than 0

<org.apache.commons.io.IOUtils: int read(java.io.Reader,char[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter3 smaller than 0

<org.apache.commons.io.IOUtils: int read(java.io.InputStream,byte[],int,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter3 smaller than 0

<org.apache.commons.io.IOUtils: int read(java.io.InputStream,byte[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter3 smaller than 0

<org.apache.commons.io.IOUtils: void readFully(java.io.Reader,char[],int,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter3 smaller than 0

<org.apache.commons.io.IOUtils: void readFully(java.io.Reader,char[],int,int)>
Type:java.io.EOFException
ExceptionPreConditions:
<org.apache.commons.io.IOUtils: int read(java.io.Reader,char[],int,int)>(r0, r1, i0, i1) is not parameter3

<org.apache.commons.io.IOUtils: void readFully(java.io.Reader,char[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter3 smaller than 0

<org.apache.commons.io.IOUtils: void readFully(java.io.Reader,char[])>
Type:java.io.EOFException
ExceptionPreConditions:
<org.apache.commons.io.IOUtils: int read(java.io.Reader,char[],int,int)>(r0, r1, i0, i1) is not parameter3

<org.apache.commons.io.IOUtils: void readFully(java.io.InputStream,byte[],int,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter3 smaller than 0

<org.apache.commons.io.IOUtils: void readFully(java.io.InputStream,byte[],int,int)>
Type:java.io.EOFException
ExceptionPreConditions:
<org.apache.commons.io.IOUtils: int read(java.io.InputStream,byte[],int,int)>(r0, r1, i0, i1) is not parameter3

<org.apache.commons.io.IOUtils: void readFully(java.io.InputStream,byte[])>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter3 smaller than 0

<org.apache.commons.io.IOUtils: void readFully(java.io.InputStream,byte[])>
Type:java.io.EOFException
ExceptionPreConditions:
<org.apache.commons.io.IOUtils: int read(java.io.InputStream,byte[],int,int)>(r0, r1, i0, i1) is not parameter3

<org.apache.commons.io.IOUtils: byte[] readFully(java.io.InputStream,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter3 smaller than 0

<org.apache.commons.io.IOUtils: byte[] readFully(java.io.InputStream,int)>
Type:java.io.EOFException
ExceptionPreConditions:
<org.apache.commons.io.IOUtils: int read(java.io.InputStream,byte[],int,int)>(r0, r1, i0, i1) is not parameter3

<org.apache.commons.io.IOUtils: void readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)>
Type:java.io.EOFException
ExceptionPreConditions:
<org.apache.commons.io.IOUtils: int read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)>(r1, r0) is not parameter1.<java.nio.ByteBuffer: int remaining()>()

<org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: boolean doDelete(java.io.File)>
Type:java.lang.NullPointerException
Message:\QFile must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: boolean doDelete(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean delete()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: boolean doDelete(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean delete()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: boolean doDelete(java.io.File)>
Type:java.io.FileNotFoundException
ExceptionPreConditions:
parameter0.<java.io.File: boolean delete()>() is 0
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is 0

<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean)>
Type:java.lang.IllegalArgumentException
Message:\QNo BOMs specified\E
ExceptionPreConditions:
parameter2 is null

<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean)>
Type:java.lang.IllegalArgumentException
Message:\QNo BOMs specified\E
ExceptionPreConditions:
parameter2 is not null
parameter2.length equals 0

<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>
Type:java.lang.IllegalArgumentException
Message:\QNo BOMs specified\E
ExceptionPreConditions:
parameter1 is null

<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>
Type:java.lang.IllegalArgumentException
Message:\QNo BOMs specified\E
ExceptionPreConditions:
parameter1 is not null
parameter1.length equals 0

<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])>
Type:java.lang.IllegalArgumentException
Message:\QNo BOMs specified\E
ExceptionPreConditions:
parameter2 is null

<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])>
Type:java.lang.IllegalArgumentException
Message:\QNo BOMs specified\E
ExceptionPreConditions:
parameter2 is not null
parameter2.length equals 0

<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
@this: org.apache.commons.io.input.BOMInputStream.<org.apache.commons.io.input.BOMInputStream: java.util.List boms> not contains parameter0
r0.<org.apache.commons.io.input.BOMInputStream: java.util.List boms> not contains parameter0

<org.apache.commons.io.output.ProxyOutputStream: void write(int)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyOutputStream: void flush()>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyOutputStream: void close()>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ProxyOutputStream: void handleIOException(java.io.IOException)>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.TeeInputStream: int read(byte[])>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>
Type:java.lang.IllegalArgumentException
Message:\QReader must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.LineIterator: boolean hasNext()>
Type:java.lang.IllegalStateException
Message:[\s\S]*
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.io.IOException is caught, when executing the statements from goto [?= $r2 = r0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader>] to $r6 := @caughtexception

<org.apache.commons.io.LineIterator: boolean hasNext()>
Type:java.lang.IllegalStateException
Message:[\s\S]*
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.io.IOException is caught, when executing the statements from goto [?= $r2 = r0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader>] to $r6 := @caughtexception
r0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader>.<java.io.BufferedReader: java.lang.String readLine()>() is null

<org.apache.commons.io.LineIterator: boolean hasNext()>
Type:java.lang.IllegalStateException
Message:[\s\S]*
ExceptionPreConditions:
This is a rethrow exception after an exception with type java.io.IOException is caught, when executing the statements from goto [?= $r2 = r0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader>] to $r6 := @caughtexception
r0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader>.<java.io.BufferedReader: java.lang.String readLine()>() is not null

<org.apache.commons.io.LineIterator: java.lang.String next()>
Type:java.lang.IllegalStateException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.LineIterator: java.lang.String nextLine()>
Type:java.lang.IllegalStateException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.LineIterator: java.lang.String nextLine()>
Type:java.util.NoSuchElementException
Message:\QNo more lines\E
ExceptionPreConditions:
@this: org.apache.commons.io.LineIterator.<org.apache.commons.io.LineIterator: boolean hasNext()>() is 0

<org.apache.commons.io.LineIterator: void remove()>
Type:java.lang.UnsupportedOperationException
Message:\QRemove unsupported on LineIterator\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.LineIterator: java.lang.Object next()>
Type:java.lang.IllegalStateException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.comparator.ReverseComparator: void <init>(java.util.Comparator)>
Type:java.lang.IllegalArgumentException
Message:\QDelegate comparator is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.output.ClosedOutputStream: void write(int)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.ClosedOutputStream: void flush()>
Type:java.io.IOException
Message:\Qflush() failed: stream is closed\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.ReaderInputStream: int read(byte[],int,int)>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter2 smaller than 0
parameter0 is not null

<org.apache.commons.io.input.ReaderInputStream: int read(byte[],int,int)>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter2 larger or equal 0
parameter0 is not null
parameter1 smaller than 0

<org.apache.commons.io.input.ReaderInputStream: int read(byte[],int,int)>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter2 larger or equal 0
parameter0 is not null
parameter1+ i5 . larger than parameter0.length
parameter1 larger or equal 0

<org.apache.commons.io.input.ReaderInputStream: int read(byte[],int,int)>
Type:java.lang.NullPointerException
Message:\QByte array must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.input.ReaderInputStream: int read(byte[])>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter2 smaller than 0
parameter0 is not null

<org.apache.commons.io.input.ReaderInputStream: int read(byte[])>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter2 larger or equal 0
parameter0 is not null
parameter1 smaller than 0

<org.apache.commons.io.input.ReaderInputStream: int read(byte[])>
Type:java.lang.IndexOutOfBoundsException
ExceptionPreConditions:
parameter2 larger or equal 0
parameter0 is not null
parameter1+ i5 . larger than parameter0.length
parameter1 larger or equal 0

<org.apache.commons.io.input.ReaderInputStream: int read(byte[])>
Type:java.lang.NullPointerException
Message:\QByte array must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filters must not be null\E
ExceptionPreConditions:
parameter0 is not null
parameter1 is null

<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[])>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard array must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard array must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard list must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard list must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[])>
Type:java.lang.IllegalArgumentException
Message:\QThe array of names must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe array of names must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List)>
Type:java.lang.IllegalArgumentException
Message:\QThe list of names must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe list of names must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QThe strings must not be null\E
ExceptionPreConditions:
parameter1 is null
0 smaller than @this: org.apache.commons.io.filefilter.NameFileFilter<org.apache.commons.io.filefilter.NameFileFilter: java.lang.String[] names>.length .

<org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QThe strings must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter1 is not null
0 smaller than @this: org.apache.commons.io.filefilter.NameFileFilter<org.apache.commons.io.filefilter.NameFileFilter: java.lang.String[] names>.length .

<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String,boolean)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,char,boolean)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter1 charAt 0, it returns 0
0 smaller than parameter1.<java.lang.String: int length()>()
parameter1 is not null
<org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) larger than 0
<org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) larger or equal 0

<org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter1 charAt 0, it returns 0
0 smaller than parameter1.<java.lang.String: int length()>()
parameter1 is not null
parameter0 is not null
<org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) smaller or equal 0
parameter0.<java.lang.String: int length()>() is 0
<org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) larger or equal 0

<org.apache.commons.io.FilenameUtils: boolean directoryContains(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QThe strings must not be null\E
ExceptionPreConditions:
parameter0 is null
parameter1 is not null
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean directoryContains(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QThe strings must not be null\E
ExceptionPreConditions:
parameter1 is null
parameter0 is not null
parameter1 is not null
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean directoryContains(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QDirectory must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.FilenameUtils: java.lang.String getName(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FilenameUtils: void failIfNullBytePresent(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()

<org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter2 is not 0
parameter1 is not null
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
0 smaller than parameter1.<java.lang.String: int length()>()
parameter1 is not null

<org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QError normalizing one or both of the file names\E
ExceptionPreConditions:
parameter2 is not 0
parameter1 is not null
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r3)
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QError normalizing one or both of the file names\E
ExceptionPreConditions:
parameter2 is not 0
parameter1 is not null
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r3) is not null
parameter0 is not null
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r4)

<org.apache.commons.io.FilenameUtils: boolean equalsOnSystem(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter2 is not 0
parameter1 is not null
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equalsOnSystem(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
0 smaller than parameter1.<java.lang.String: int length()>()
parameter1 is not null

<org.apache.commons.io.FilenameUtils: boolean equalsOnSystem(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QError normalizing one or both of the file names\E
ExceptionPreConditions:
parameter2 is not 0
parameter1 is not null
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r3)
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equalsOnSystem(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QError normalizing one or both of the file names\E
ExceptionPreConditions:
parameter2 is not 0
parameter1 is not null
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r3) is not null
parameter0 is not null
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r4)

<org.apache.commons.io.FilenameUtils: boolean equalsNormalized(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter2 is not 0
parameter1 is not null
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equalsNormalized(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
0 smaller than parameter1.<java.lang.String: int length()>()
parameter1 is not null

<org.apache.commons.io.FilenameUtils: boolean equalsNormalized(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QError normalizing one or both of the file names\E
ExceptionPreConditions:
parameter2 is not 0
parameter1 is not null
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r3)
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equalsNormalized(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QError normalizing one or both of the file names\E
ExceptionPreConditions:
parameter2 is not 0
parameter1 is not null
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r3) is not null
parameter0 is not null
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r4)

<org.apache.commons.io.FilenameUtils: boolean equalsNormalizedOnSystem(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter2 is not 0
parameter1 is not null
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equalsNormalizedOnSystem(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
0 smaller than parameter1.<java.lang.String: int length()>()
parameter1 is not null

<org.apache.commons.io.FilenameUtils: boolean equalsNormalizedOnSystem(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QError normalizing one or both of the file names\E
ExceptionPreConditions:
parameter2 is not 0
parameter1 is not null
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r3)
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equalsNormalizedOnSystem(java.lang.String,java.lang.String)>
Type:java.lang.NullPointerException
Message:\QError normalizing one or both of the file names\E
ExceptionPreConditions:
parameter2 is not 0
parameter1 is not null
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r3) is not null
parameter0 is not null
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r4)

<org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null
parameter2 is not 0
parameter1 is not null
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter1 charAt 0, it returns 0
0 smaller than parameter1.<java.lang.String: int length()>()
parameter1 is not null

<org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>
Type:java.lang.NullPointerException
Message:\QError normalizing one or both of the file names\E
ExceptionPreConditions:
parameter2 is not 0
parameter1 is not null
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r3)
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>
Type:java.lang.NullPointerException
Message:\QError normalizing one or both of the file names\E
ExceptionPreConditions:
parameter2 is not 0
parameter1 is not null
<org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r3) is not null
parameter0 is not null
null equals <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r4)

<org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String[])>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)>
Type:java.lang.IllegalArgumentException
Message:\QNull byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\E
ExceptionPreConditions:
parameter0 charAt 0, it returns 0
0 smaller than parameter0.<java.lang.String: int length()>()
parameter0 is not null

<org.apache.commons.io.input.BrokenInputStream: int read()>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.BrokenInputStream: int available()>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.BrokenInputStream: long skip(long)>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.BrokenInputStream: void reset()>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.BrokenInputStream: void close()>
Type:java.io.IOException
Message:[\s\S]*
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
@this: org.apache.commons.io.FileDeleteStrategy doDelete parameter0, it returns 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe suffix must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe suffix must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[])>
Type:java.lang.IllegalArgumentException
Message:\QThe array of suffixes must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe array of suffixes must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)>
Type:java.lang.IllegalArgumentException
Message:\QThe list of suffixes must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe list of suffixes must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.input.CountingInputStream: long skip(long)>
Type:java.io.IOException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.CountingInputStream: int getCount()>
Type:java.lang.ArithmeticException

<org.apache.commons.io.input.CountingInputStream: int resetCount()>
Type:java.lang.ArithmeticException

<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0 smaller than 0

<org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
Type:java.lang.IndexOutOfBoundsException
Message:[\s\S]*
ExceptionPreConditions:
parameter1 smaller than 0

<org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
Type:java.lang.IndexOutOfBoundsException
Message:[\s\S]*
ExceptionPreConditions:
parameter1 larger than parameter0.length
parameter1 larger or equal 0

<org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
Type:java.lang.IndexOutOfBoundsException
Message:[\s\S]*
ExceptionPreConditions:
parameter2 smaller than 0
parameter1 smaller or equal parameter0.length
parameter1 larger or equal 0

<org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
Type:java.lang.IndexOutOfBoundsException
Message:[\s\S]*
ExceptionPreConditions:
parameter2 larger or equal 0
parameter1+ i2 . larger than parameter0.length
parameter1 smaller or equal parameter0.length
parameter1 larger or equal 0

<org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
Type:java.lang.IndexOutOfBoundsException
Message:[\s\S]*
ExceptionPreConditions:
parameter2 larger or equal 0
parameter1+ i2 . smaller or equal parameter0.length
parameter1 smaller or equal parameter0.length
parameter1+ i2 . smaller than 0
parameter1 larger or equal 0

<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toBufferedInputStream(java.io.InputStream)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 smaller than 0

<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toBufferedInputStream(java.io.InputStream,int)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter1 smaller than 0

<org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)>
Type:java.lang.IllegalArgumentException
Message:\QThe filter must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.serialization.RegexpClassNameMatcher: void <init>(java.util.regex.Pattern)>
Type:java.lang.IllegalArgumentException
Message:\QNull pattern\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.serialization.ValidatingObjectInputStream: void validateClassName(java.lang.String)>
Type:java.io.InvalidClassException
ExceptionPreConditions:
@this: org.apache.commons.io.serialization.ValidatingObjectInputStream<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List rejectMatchers> . matches parameter0

<org.apache.commons.io.serialization.ValidatingObjectInputStream: void validateClassName(java.lang.String)>
Type:java.io.InvalidClassException
ExceptionPreConditions:
z4 is 0
z4 equals 0
z4_1 equals 1

<org.apache.commons.io.serialization.ValidatingObjectInputStream: void invalidClassNameFound(java.lang.String)>
Type:java.io.InvalidClassException
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.serialization.ValidatingObjectInputStream: org.apache.commons.io.serialization.ValidatingObjectInputStream accept(java.util.regex.Pattern)>
Type:java.lang.IllegalArgumentException
Message:\QNull pattern\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.serialization.ValidatingObjectInputStream: org.apache.commons.io.serialization.ValidatingObjectInputStream reject(java.util.regex.Pattern)>
Type:java.lang.IllegalArgumentException
Message:\QNull pattern\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)>
Type:java.lang.ArrayIndexOutOfBoundsException
ExceptionPreConditions:
parameter3 smaller than 0

<org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)>
Type:java.lang.IllegalArgumentException
Message:\Qcannot write to nullstream\E
ExceptionPreConditions:
parameter2 is null
parameter3 smaller than parameter0.length
parameter3 larger or equal 0

<org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)>
Type:java.lang.ArrayIndexOutOfBoundsException
ExceptionPreConditions:
parameter3 larger or equal parameter0.length
parameter3 larger or equal 0

<org.apache.commons.io.input.UnixLineEndingInputStream: void mark(int)>
Type:java.lang.UnsupportedOperationException
Message:\QMark notsupported\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String[])>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard array must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)>
Type:java.lang.IllegalArgumentException
Message:\QThe wildcard list must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QPattern is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QPattern is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String,int)>
Type:java.lang.IllegalArgumentException
Message:\QPattern is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.util.regex.Pattern)>
Type:java.lang.IllegalArgumentException
Message:\QPattern is missing\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.input.SwappedDataInputStream: void readFully(byte[])>
Type:java.io.EOFException
Message:[\s\S]*
ExceptionPreConditions:
parameter2 larger than 0
@this: org.apache.commons.io.input.SwappedDataInputStream read parameter0, it returns 0
@this: org.apache.commons.io.input.SwappedDataInputStream read parameter0, it returns 0

<org.apache.commons.io.input.SwappedDataInputStream: void readFully(byte[],int,int)>
Type:java.io.EOFException
Message:[\s\S]*
ExceptionPreConditions:
parameter2 larger than 0
@this: org.apache.commons.io.input.SwappedDataInputStream read parameter0, it returns 0
@this: org.apache.commons.io.input.SwappedDataInputStream read parameter0, it returns 0

<org.apache.commons.io.input.SwappedDataInputStream: java.lang.String readLine()>
Type:java.lang.UnsupportedOperationException
Message:\QOperation not supported: readLine()\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.input.SwappedDataInputStream: java.lang.String readUTF()>
Type:java.lang.UnsupportedOperationException
Message:\QOperation not supported: readUTF()\E
ExceptionPreConditions:
Direct Throw Without Any Condition

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String)>
Type:java.io.IOException
Message:\QFile specified is a directory\E
ExceptionPreConditions:
$r1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean)>
Type:java.io.IOException
Message:\QFile specified is a directory\E
ExceptionPreConditions:
$r1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)>
Type:java.io.IOException
Message:\QFile specified is a directory\E
ExceptionPreConditions:
$r1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File)>
Type:java.io.IOException
Message:\QFile specified is a directory\E
ExceptionPreConditions:
$r1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean)>
Type:java.io.IOException
Message:\QFile specified is a directory\E
ExceptionPreConditions:
$r1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>
Type:java.io.IOException
Message:\QFile specified is a directory\E
ExceptionPreConditions:
$r1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset)>
Type:java.io.IOException
Message:\QFile specified is a directory\E
ExceptionPreConditions:
$r1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String)>
Type:java.io.IOException
Message:\QFile specified is a directory\E
ExceptionPreConditions:
$r1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)>
Type:java.io.IOException
Message:\QFile specified is a directory\E
ExceptionPreConditions:
$r1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)>
Type:java.io.IOException
Message:\QFile specified is a directory\E
ExceptionPreConditions:
$r1.<java.io.File: boolean isDirectory()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean canWrite()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0

<org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.nio.charset.Charset,boolean)>
Type:java.io.IOException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: java.io.File[] listFiles()>() is null
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.nio.charset.Charset,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean isDirectory()>() is 0
parameter0.<java.io.File: boolean exists()>() is not 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.nio.charset.Charset,boolean)>
Type:java.lang.IllegalArgumentException
ExceptionPreConditions:
parameter0.<java.io.File: boolean exists()>() is 0
parameter0.<java.io.File: boolean isDirectory()>() is not 0
parameter0.<java.io.File: boolean exists()>() is 0

<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)>
Type:java.lang.IllegalArgumentException
Message:\QThe prefix must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe prefix must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String[])>
Type:java.lang.IllegalArgumentException
Message:\QThe array of prefixes must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe array of prefixes must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)>
Type:java.lang.IllegalArgumentException
Message:\QThe list of prefixes must not be null\E
ExceptionPreConditions:
parameter0 is null

<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>
Type:java.lang.IllegalArgumentException
Message:\QThe list of prefixes must not be null\E
ExceptionPreConditions:
parameter0 is null
