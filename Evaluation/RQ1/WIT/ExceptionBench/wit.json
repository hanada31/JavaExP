{
  "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/",
  "classes": [
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/Basic.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_without_condition(int)",
          "exception": "throw new RuntimeException(\"throw_without_condition\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Int('x0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 12,
          "throwingLine": 14,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_null_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_null_condition\");",
          "pathCojunction": "(x == null)",
          "symbolicPathConjunction": "(x == null)",
          "backwardsPathConjunction": "(x == null)",
          "simplifiedPathConjunction": "null == x",
          "z3Inputs": "[x0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nx0_isNull = Bool('x0_isNull')\n\nconstraints = [\n  x0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nnull = Symbol('null')\npath_conjunction = (Eq(x, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 20,
          "throwingLine": 22,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_value_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_value_condition\");",
          "pathCojunction": "(x.equals(\"value\"))",
          "symbolicPathConjunction": "(x.equals(\"value\"))",
          "backwardsPathConjunction": "(x.equals(\"value\"))",
          "simplifiedPathConjunction": "x.equals(\"value\")",
          "z3Inputs": "[x0 = \"value\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\n\nconstraints = [\n  x0 == \"value\"\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_equals = Symbol('x_equals')\npath_conjunction = x_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 28,
          "throwingLine": 30,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_value_condition_not_equal(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_value_condition_not_equal\");",
          "pathCojunction": "(!(z))",
          "symbolicPathConjunction": "(!(z))",
          "backwardsPathConjunction": "(!(x.equals(\"value\")))",
          "simplifiedPathConjunction": "!x.equals(\"value\")",
          "z3Inputs": "[z0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nz0 = Bool('z0')\n\nconstraints = [\n  Not(z0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_equals = Symbol('x_equals')\npath_conjunction = (~(x_equals))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 36,
          "throwingLine": 39,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_modified_var_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_modified_var_condition\");",
          "pathCojunction": "(y.equals(\"value\"))",
          "symbolicPathConjunction": "(y.equals(\"value\"))",
          "backwardsPathConjunction": "(x.equals(\"value\"))",
          "simplifiedPathConjunction": "x.equals(\"value\")",
          "z3Inputs": "[x0 = \"value\", y1 = \"value\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\ny1 = String('y1')\n\nconstraints = [\n  y1 == x0,\n  y1 == \"value\"\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_equals = Symbol('x_equals')\npath_conjunction = x_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 45,
          "throwingLine": 49,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_modified_value_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_modified_value_condition\");",
          "pathCojunction": "(x.equals(y.substring(0, 5)))",
          "symbolicPathConjunction": "(x.equals(y.substring(0, 5)))",
          "backwardsPathConjunction": "(x.equals(\"value123\".substring(0, 5)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\n\nconstraints = [\n  y0 == StringVal(\"value123\"), \n  x0 == y0.substring(0, 5)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_equals = Symbol('x_equals')\n\"value123\"_substring = Symbol('\"value123\"_substring')\npath_conjunction = x_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 55,
          "throwingLine": 58,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_modified_value_condition2(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_modified_value_condition2\");",
          "pathCojunction": "(z.equals(y.substring(0, 5)))",
          "symbolicPathConjunction": "(z.equals(y.substring(0, 5)))",
          "backwardsPathConjunction": "(x.equals(\"value123\".substring(0, 5)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nz0 = String('z0')\n\nconstraints = [\n  y0 == StringVal(\"value123\"), \n  z0 == x0,\n  z0 == y0.substring(0, 5)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_equals = Symbol('x_equals')\n\"value123\"_substring = Symbol('\"value123\"_substring')\npath_conjunction = x_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 64,
          "throwingLine": 68,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_modified_value_condition3(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_modified_value_condition3\");",
          "pathCojunction": "(y.length() > 2) && (x.equals(y))",
          "symbolicPathConjunction": "(y.length() > 2) && (x.equals(y))",
          "backwardsPathConjunction": "(y.length() > 2) && (x.equals(y))",
          "simplifiedPathConjunction": "x.equals(y) && y.length() > 2",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\ny1 = String('y1')\n\nconstraints = [\n  y1 == y0.substring(0, 5),\n  And(Length(y1) > 2, x0 == y1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\ny_length = Symbol('y_length')\nx_equals = Symbol('x_equals')\npath_conjunction = ((StrictGreaterThan(y_length, 2)) & x_equals)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 76,
          "throwingLine": 80,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_modified_value_condition3(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_modified_value_condition3\");",
          "pathCojunction": "(!(y.length() > 2)) && (x.equals(y))",
          "symbolicPathConjunction": "(!(y.length() > 2)) && (x.equals(y))",
          "backwardsPathConjunction": "(!(y.length() > 2)) && (x.equals(y))",
          "simplifiedPathConjunction": "x.equals(y) && y.length() <= 2",
          "z3Inputs": "[y0 = \"\", x0 = \"\"]\n[x0 = \"A\", y0 = \"A\"]\n[x0 = \"B\", y0 = \"B\"]\n[x0 = \"C\", y0 = \"C\"]\n[x0 = \"D\", y0 = \"D\"]\n[x0 = \"E\", y0 = \"E\"]\n[x0 = \"F\", y0 = \"F\"]\n[x0 = \"G\", y0 = \"G\"]\n[x0 = \"H\", y0 = \"H\"]\n[x0 = \"I\", y0 = \"I\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\n\nconstraints = [\n  And(Not(Length(y0) > 2), x0 == y0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\ny_length = Symbol('y_length')\nx_equals = Symbol('x_equals')\npath_conjunction = ((~((StrictGreaterThan(y_length, 2)))) & x_equals)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 76,
          "throwingLine": 80,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition\");",
          "pathCojunction": "(x != null && y == null)",
          "symbolicPathConjunction": "(x != null && y == null)",
          "backwardsPathConjunction": "(x != null && y == null)",
          "simplifiedPathConjunction": "null == y && null != x",
          "z3Inputs": "[x0_isNull = False, y0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(Not(x0_isNull), y0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nnull = Symbol('null')\npath_conjunction = ((Ne(x, null)) & (Eq(y, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 86,
          "throwingLine": 88,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition2(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition2\");",
          "pathCojunction": "(x != null || y != null)",
          "symbolicPathConjunction": "(x != null || y != null)",
          "backwardsPathConjunction": "(x != null || y != null)",
          "simplifiedPathConjunction": "null != x || null != y",
          "z3Inputs": "[x0_isNull = False, y0_isNull = False]\n[x0_isNull = True, y0_isNull = False]\n[x0_isNull = False, y0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  Or(Not(x0_isNull), Not(y0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nnull = Symbol('null')\npath_conjunction = ((Ne(x, null)) | (Ne(y, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 96,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition3(java.lang.String, java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition3\");",
          "pathCojunction": "(x == null || y == null || z == null)",
          "symbolicPathConjunction": "(x == null || y == null || z == null)",
          "backwardsPathConjunction": "(x == null || y == null || z == null)",
          "simplifiedPathConjunction": "null == x || null == y || null == z",
          "z3Inputs": "[z0_isNull = False, x0_isNull = True, y0_isNull = False]\n[y0_isNull = True]\n[z0_isNull = True, y0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nz0 = String('z0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\nz0_isNull = Bool('z0_isNull')\n\nconstraints = [\n  Or(Or(x0_isNull, y0_isNull), z0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\nnull = Symbol('null')\npath_conjunction = (((Eq(x, null)) | (Eq(y, null))) | (Eq(z, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 102,
          "throwingLine": 104,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition4(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition4\");",
          "pathCojunction": "(x != null) && (y == null)",
          "symbolicPathConjunction": "(x != null) && (y == null)",
          "backwardsPathConjunction": "(x != null) && (y == null)",
          "simplifiedPathConjunction": "null == y && null != x",
          "z3Inputs": "[x0_isNull = False, y0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(Not(x0_isNull), y0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nnull = Symbol('null')\npath_conjunction = ((Ne(x, null)) & (Eq(y, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 110,
          "throwingLine": 113,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition5(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition5\");",
          "pathCojunction": "(x == null) && (!(y == null))",
          "symbolicPathConjunction": "(x == null) && (!(y == null))",
          "backwardsPathConjunction": "(x == null) && (!(y == null))",
          "simplifiedPathConjunction": "null == x && null != y",
          "z3Inputs": "[x0_isNull = True, y0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(x0_isNull, Not(y0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nnull = Symbol('null')\npath_conjunction = ((Eq(x, null)) & (~((Eq(y, null)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 119,
          "throwingLine": 124,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition6(java.lang.String, java.lang.String, int)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition6\");",
          "pathCojunction": "(x == null) && (z > 0) && (y == null)",
          "symbolicPathConjunction": "(x == null) && (z > 0) && (y == null)",
          "backwardsPathConjunction": "(x == null) && (z > 0) && (y == null)",
          "simplifiedPathConjunction": "null == x && null == y && z > 0",
          "z3Inputs": "[z0 = 1, y0_isNull = True, x0_isNull = True]\n[z0 = 2, x0_isNull = True, y0_isNull = True]\n[z0 = 3, x0_isNull = True, y0_isNull = True]\n[z0 = 4, x0_isNull = True, y0_isNull = True]\n[z0 = 5, x0_isNull = True, y0_isNull = True]\n[z0 = 6, x0_isNull = True, y0_isNull = True]\n[z0 = 7, x0_isNull = True, y0_isNull = True]\n[z0 = 8, x0_isNull = True, y0_isNull = True]\n[z0 = 9, x0_isNull = True, y0_isNull = True]\n[z0 = 10, x0_isNull = True, y0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nz0 = Int('z0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(And(x0_isNull, z0 > 0), y0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z', integer=True)\nnull = Symbol('null')\npath_conjunction = (((Eq(x, null)) & (StrictGreaterThan(z, 0))) & (Eq(y, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 131,
          "throwingLine": 136,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Basic.throw_with_combined_condition6(java.lang.String, java.lang.String, int)",
          "exception": "throw new RuntimeException(\"throw_with_combined_condition6\");",
          "pathCojunction": "(x == null) && (!(z > 0)) && (y == null)",
          "symbolicPathConjunction": "(x == null) && (!(z > 0)) && (y == null)",
          "backwardsPathConjunction": "(x == null) && (!(z > 0)) && (y == null)",
          "simplifiedPathConjunction": "null == x && null == y && z <= 0",
          "z3Inputs": "[z0 = 0, y0_isNull = True, x0_isNull = True]\n[z0 = -1, x0_isNull = True, y0_isNull = True]\n[z0 = -2, x0_isNull = True, y0_isNull = True]\n[z0 = -3, x0_isNull = True, y0_isNull = True]\n[z0 = -4, x0_isNull = True, y0_isNull = True]\n[z0 = -5, x0_isNull = True, y0_isNull = True]\n[z0 = -6, x0_isNull = True, y0_isNull = True]\n[z0 = -7, x0_isNull = True, y0_isNull = True]\n[z0 = -8, x0_isNull = True, y0_isNull = True]\n[z0 = -9, x0_isNull = True, y0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nz0 = Int('z0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(And(x0_isNull, Not(z0 > 0)), y0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z', integer=True)\nnull = Symbol('null')\npath_conjunction = (((Eq(x, null)) & (~((StrictGreaterThan(z, 0))))) & (Eq(y, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 131,
          "throwingLine": 136,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/MultiplePath.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths1(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths1\");",
          "pathCojunction": "(!(n > 2)) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(!(n > 2)) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(!(n > 2)) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && n <= 2",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\n\nconstraints = [\n  And(Not(n0 > 2), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nx_startsWith = Symbol('x_startsWith')\npath_conjunction = ((~((StrictGreaterThan(n, 2)))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 26,
          "throwingLine": 35,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths1(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths1\");",
          "pathCojunction": "(n > 2) && (!(list.get(0).equals(\"ab\"))) && (!(list.get(0).equals(\"bc\"))) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(n > 2) && (!(list.get(0).equals(\"ab\"))) && (!(list.get(0).equals(\"bc\"))) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(n > 2) && (!(list.get(0).equals(\"ab\"))) && (!(list.get(0).equals(\"bc\"))) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && !list.get(0).equals(\"bc\") && n > 2",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\n\nconstraints = [\n  And(And(And(n0 > 2, Not(list0.get(0).equals(\"ab\"))), Not(list0.get(0).equals(\"bc\"))), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nlist = Symbol('list')\nlist_get_equals = Symbol('list_get_equals')\nlist_get = Symbol('list_get')\nx_startsWith = Symbol('x_startsWith')\npath_conjunction = ((((StrictGreaterThan(n, 2)) & (~(list_get_equals))) & (~(list_get_equals))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 26,
          "throwingLine": 35,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths1(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths1\");",
          "pathCojunction": "(n > 2) && (list.get(0).equals(\"ab\")) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(n > 2) && (list.get(0).equals(\"ab\")) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(n > 2) && (list.get(0).equals(\"ab\")) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "list.get(0)_equals && x.startsWith(\"123\") && n > 2",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\n\nconstraints = [\n  And(And(n0 > 2, list0.get(0).equals(\"ab\")), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nlist = Symbol('list')\nlist_get_equals = Symbol('list_get_equals')\nlist_get = Symbol('list_get')\nx_startsWith = Symbol('x_startsWith')\npath_conjunction = (((StrictGreaterThan(n, 2)) & list_get_equals) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 26,
          "throwingLine": 35,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths2(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths2\");",
          "pathCojunction": "(!(n > 2 && list != null && !list.isEmpty())) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(!(n > 2 && list != null && !list.isEmpty())) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(!(n > 2 && list != null && !list.isEmpty())) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && (list.isEmpty() || list == null || n <= 2)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  And(Not(And(And(n0 > 2, Not(list0_isNull)), Not(list0.isEmpty()))), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nlist = Symbol('list')\nlist_isEmpty = Symbol('list_isEmpty')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = ((~((((StrictGreaterThan(n, 2)) & (Ne(list, null))) & (~(list_isEmpty))))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 41,
          "throwingLine": 46,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths2(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths2\");",
          "pathCojunction": "(n > 2 && list != null && !list.isEmpty()) && (list.get(0).equals(\"a\")) && (list.get(0).equals(\"ab\")) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(n > 2 && list != null && !list.isEmpty()) && ((s.equals(\"a\")) && (s.equals(\"ab\"))) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(n > 2 && list != null && !list.isEmpty()) && (list.get(0).equals(\"a\")) && (list.get(0).equals(\"ab\")) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "list.get(0).equals(\"a\") && x.startsWith(\"123\") && !list.isEmpty() && n > 2 && list != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  And(And(And(And(And(n0 > 2, Not(list0_isNull)), Not(list0.isEmpty())), list0.get(0).equals(\"a\")), list0.get(0).equals(\"ab\")), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nlist = Symbol('list')\nlist_isEmpty = Symbol('list_isEmpty')\nlist_get_equals = Symbol('list_get_equals')\nlist_get = Symbol('list_get')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = ((((((StrictGreaterThan(n, 2)) & (Ne(list, null))) & (~(list_isEmpty))) & list_get_equals) & list_get_equals) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 41,
          "throwingLine": 46,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultiplePath.throw_with_multiple_paths2(java.lang.String, int, java.util.List<java.lang.String>)",
          "exception": "throw new NullPointerException(\"throw_with_multiple_paths2\");",
          "pathCojunction": "(n > 2 && list != null && !list.isEmpty()) && (!(list.get(0).equals(\"a\"))) && (!(list.get(0).equals(\"b\"))) && (!(list.get(0).equals(\"c\"))) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(n > 2 && list != null && !list.isEmpty()) && ((!(s.equals(\"a\"))) && (!(s.equals(\"b\"))) && (!(s.equals(\"c\")))) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(n > 2 && list != null && !list.isEmpty()) && (!(list.get(0).equals(\"a\"))) && (!(list.get(0).equals(\"b\"))) && (!(list.get(0).equals(\"c\"))) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && !list.get(0).equals(\"b\") && !list.isEmpty() && n > 2 && list != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nn0 = Int('n0')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  And(And(And(And(And(And(n0 > 2, Not(list0_isNull)), Not(list0.isEmpty())), Not(list0.get(0).equals(\"a\"))), Not(list0.get(0).equals(\"b\"))), Not(list0.get(0).equals(\"c\"))), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nn = Symbol('n', integer=True)\nlist = Symbol('list')\nlist_isEmpty = Symbol('list_isEmpty')\nlist_get_equals = Symbol('list_get_equals')\nlist_get = Symbol('list_get')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = (((((((StrictGreaterThan(n, 2)) & (Ne(list, null))) & (~(list_isEmpty))) & (~(list_get_equals))) & (~(list_get_equals))) & (~(list_get_equals))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 41,
          "throwingLine": 46,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/MultipleCall.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.throw_exception_caller_with_arg(int)",
          "exception": "throw new RuntimeException(\"throw_exception_in_callee\")",
          "pathCojunction": "(x < 1000)",
          "symbolicPathConjunction": "(callee_with_arg(x))",
          "backwardsPathConjunction": "(x < 1000)",
          "simplifiedPathConjunction": "x < 1000",
          "z3Inputs": "[x0 = 999]\n[x0 = 0]\n[x0 = -1]\n[x0 = -2]\n[x0 = -3]\n[x0 = -4]\n[x0 = -5]\n[x0 = -6]\n[x0 = -7]\n[x0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Int('x0')\n\nconstraints = [\n  x0 < 1000\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x', integer=True)\npath_conjunction = (StrictLessThan(x, 1000))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 22,
          "throwingLine": 23,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.callee_with_arg(int)",
          "exception": "throw new RuntimeException(\"throw_exception_in_callee\");",
          "pathCojunction": "(m < 1000)",
          "symbolicPathConjunction": "(m < 1000)",
          "backwardsPathConjunction": "(m < 1000)",
          "simplifiedPathConjunction": "m < 1000",
          "z3Inputs": "[m0 = 999]\n[m0 = 0]\n[m0 = -1]\n[m0 = -2]\n[m0 = -3]\n[m0 = -4]\n[m0 = -5]\n[m0 = -6]\n[m0 = -7]\n[m0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nm0 = Int('m0')\n\nconstraints = [\n  m0 < 1000\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nm = Symbol('m', integer=True)\npath_conjunction = (StrictLessThan(m, 1000))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 39,
          "throwingLine": 41,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.callee_without_arg()",
          "exception": "throw new RuntimeException(\"throw_exception_in_callee_directly\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 47,
          "throwingLine": 48,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.throw_message_callee_require(java.lang.String, java.lang.String)",
          "exception": "throw new NullPointerException(msg)",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(Objects.requireNonNull(s, msg))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nmsg0 = String('msg0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 54,
          "throwingLine": 55,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.deepCall(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_exception_in_deepCall2\");",
          "pathCojunction": "(!(s == null)) && (!(msg == null)) && (msg.length() > 3)",
          "symbolicPathConjunction": "(Objects.requireNonNull(s)) && (calleeNullInDeepCall(msg)) && (calleeSizeInDeepCall(msg))",
          "backwardsPathConjunction": "(!(s == null)) && (!(msg == null)) && (msg.length() > 3)",
          "simplifiedPathConjunction": "msg.length() > 3 && msg != null && null != s",
          "z3Inputs": "[msg0 = \"ABCD\", s0_isNull = False, msg0_isNull = False]\n[msg0_isNull = False, msg0 = \"EFGH\", s0_isNull = False]\n[msg0_isNull = False, msg0 = \"IJKL\", s0_isNull = False]\n[msg0_isNull = False, msg0 = \"MNOP\", s0_isNull = False]\n[msg0_isNull = False, msg0 = \"QRST\", s0_isNull = False]\n[msg0_isNull = False, msg0 = \"UVWX\", s0_isNull = False]\n[msg0_isNull = False, msg0 = \"YZ[\\\", s0_isNull = False]\n[msg0_isNull = False, msg0 = \"]^_`\", s0_isNull = False]\n[msg0_isNull = False, msg0 = \"abcd\", s0_isNull = False]\n[msg0_isNull = False, msg0 = \"efgh\", s0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nmsg0 = String('msg0')\ns0_isNull = Bool('s0_isNull')\nmsg0_isNull = Bool('msg0_isNull')\n\nconstraints = [\n  And(And(Not(s0_isNull), Not(msg0_isNull)), Length(msg0) > 3)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nmsg = Symbol('msg')\nmsg_length = Symbol('msg_length')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(s, null)))) & (~((Eq(msg, null))))) & (StrictGreaterThan(msg_length, 3)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 63,
          "throwingLine": 66,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.deepCall(java.lang.String, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(Objects.requireNonNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nmsg0 = String('msg0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 63,
          "throwingLine": 64,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.deepCall(java.lang.String, java.lang.String)",
          "exception": "throw new IllegalAccessException(\"throw_exception_in_deepCall\");",
          "pathCojunction": "(!(s == null)) && (!(msg == null)) && (!(msg.length() > 3)) && (s.startsWith(\"deepCall\"))",
          "symbolicPathConjunction": "(Objects.requireNonNull(s)) && (calleeNullInDeepCall(msg)) && (calleeSizeInDeepCall(msg)) && (s.startsWith(\"deepCall\"))",
          "backwardsPathConjunction": "(!(s == null)) && (!(msg == null)) && (!(msg.length() > 3)) && (s.startsWith(\"deepCall\"))",
          "simplifiedPathConjunction": "s.startsWith(\"deepCall\") && msg.length() <= 3 && msg != null && null != s",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nmsg0 = String('msg0')\ns0_isNull = Bool('s0_isNull')\nmsg0_isNull = Bool('msg0_isNull')\n\nconstraints = [\n  And(And(And(Not(s0_isNull), Not(msg0_isNull)), Not(Length(msg0) > 3)), s0.startsWith(\"deepCall\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nmsg = Symbol('msg')\nmsg_length = Symbol('msg_length')\ns_startsWith = Symbol('s_startsWith')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(s, null)))) & (~((Eq(msg, null))))) & (~((StrictGreaterThan(msg_length, 3))))) & s_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 63,
          "throwingLine": 68,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.deepCall(java.lang.String, java.lang.String)",
          "exception": "throw new IllegalArgumentException(\"throw_exception_in_deepCall1\");",
          "pathCojunction": "(!(s == null)) && (msg == null)",
          "symbolicPathConjunction": "(Objects.requireNonNull(s)) && (calleeNullInDeepCall(msg))",
          "backwardsPathConjunction": "(!(s == null)) && (msg == null)",
          "simplifiedPathConjunction": "msg == null && null != s",
          "z3Inputs": "[msg0_isNull = True, s0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nmsg0 = String('msg0')\ns0_isNull = Bool('s0_isNull')\nmsg0_isNull = Bool('msg0_isNull')\n\nconstraints = [\n  And(Not(s0_isNull), msg0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nmsg = Symbol('msg')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(s, null)))) & (Eq(msg, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 63,
          "throwingLine": 65,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.calleeNullInDeepCall(java.lang.String)",
          "exception": "throw new IllegalArgumentException(\"throw_exception_in_deepCall1\");",
          "pathCojunction": "(msg == null)",
          "symbolicPathConjunction": "(msg == null)",
          "backwardsPathConjunction": "(msg == null)",
          "simplifiedPathConjunction": "msg == null",
          "z3Inputs": "[msg0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmsg0 = String('msg0')\nmsg0_isNull = Bool('msg0_isNull')\n\nconstraints = [\n  msg0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmsg = Symbol('msg')\nnull = Symbol('null')\npath_conjunction = (Eq(msg, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 74,
          "throwingLine": 76,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleCall.calleeSizeInDeepCall(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_exception_in_deepCall2\");",
          "pathCojunction": "(msg.length() > 3)",
          "symbolicPathConjunction": "(msg.length() > 3)",
          "backwardsPathConjunction": "(msg.length() > 3)",
          "simplifiedPathConjunction": "msg.length() > 3",
          "z3Inputs": "[msg0 = \"ABCD\"]\n[msg0 = \"EFGH\"]\n[msg0 = \"IJKL\"]\n[msg0 = \"MNOP\"]\n[msg0 = \"QRST\"]\n[msg0 = \"UVWX\"]\n[msg0 = \"YZ[\\\"]\n[msg0 = \"]^_`\"]\n[msg0 = \"abcd\"]\n[msg0 = \"efgh\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmsg0 = String('msg0')\n\nconstraints = [\n  Length(msg0) > 3\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmsg = Symbol('msg')\nmsg_length = Symbol('msg_length')\npath_conjunction = (StrictGreaterThan(msg_length, 3))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 84,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/MultipleThrow.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleThrow.throw_two_exception(java.lang.String)",
          "exception": "throw new NullPointerException(\"throw_two_exception\");",
          "pathCojunction": "(!(x == null)) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(!(x == null)) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(!(x == null)) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && null != x",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nx0_isNull = Bool('x0_isNull')\n\nconstraints = [\n  And(Not(x0_isNull), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(x, null)))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 14,
          "throwingLine": 19,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleThrow.throw_two_exception(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_two_exception\");",
          "pathCojunction": "(x == null)",
          "symbolicPathConjunction": "(x == null)",
          "backwardsPathConjunction": "(x == null)",
          "simplifiedPathConjunction": "null == x",
          "z3Inputs": "[x0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\nx0_isNull = Bool('x0_isNull')\n\nconstraints = [\n  x0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nnull = Symbol('null')\npath_conjunction = (Eq(x, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 14,
          "throwingLine": 16,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleThrow.throw_two_exception2(java.lang.String, java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_two_exception2\");",
          "pathCojunction": "(x == null)",
          "symbolicPathConjunction": "(x == null)",
          "backwardsPathConjunction": "(x == null)",
          "simplifiedPathConjunction": "null == x",
          "z3Inputs": "[x0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\n\nconstraints = [\n  x0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nnull = Symbol('null')\npath_conjunction = (Eq(x, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 26,
          "throwingLine": 28,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleThrow.throw_two_exception2(java.lang.String, java.lang.String)",
          "exception": "throw new NullPointerException(\"throw_two_exception2\");",
          "pathCojunction": "(!(x == null)) && (y == null) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(!(x == null)) && (y == null) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(!(x == null)) && (y == null) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && null == y && null != x",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(And(Not(x0_isNull), y0_isNull), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(x, null)))) & (Eq(y, null))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 26,
          "throwingLine": 34,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.MultipleThrow.throw_two_exception2(java.lang.String, java.lang.String)",
          "exception": "throw new NullPointerException(\"throw_two_exception2\");",
          "pathCojunction": "(!(x == null)) && (!(y == null)) && (x.startsWith(\"123\"))",
          "symbolicPathConjunction": "(!(x == null)) && (!(y == null)) && (x.startsWith(\"123\"))",
          "backwardsPathConjunction": "(!(x == null)) && (!(y == null)) && (x.startsWith(\"123\"))",
          "simplifiedPathConjunction": "x.startsWith(\"123\") && null != x && null != y",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\ny0 = String('y0')\nx0_isNull = Bool('x0_isNull')\ny0_isNull = Bool('y0_isNull')\n\nconstraints = [\n  And(And(Not(x0_isNull), Not(y0_isNull)), x0.startsWith(\"123\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\ny = Symbol('y')\nx_startsWith = Symbol('x_startsWith')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(x, null)))) & (~((Eq(y, null))))) & x_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 26,
          "throwingLine": 34,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/Motivation.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Motivation.caller2(java.lang.String, java.lang.String, int)",
          "exception": "throw new RuntimeException(\"bug2!\")",
          "pathCojunction": "(num < 3) && (input == null) && (!(num < 0)) && (!(0 < new ArrayList<>().size())) && (errStr.startsWith(\"Error\"))",
          "symbolicPathConjunction": "(num < 3) && (callee2(input, errStr, num))",
          "backwardsPathConjunction": "(num < 3) && (input == null) && (!(num < 0)) && (!(0 < new ArrayList<>().size())) && (errStr.startsWith(\"Error\"))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nerrStr0 = String('errStr0')\ninput0 = String('input0')\nnum0 = Int('num0')\ninput0_isNull = Bool('input0_isNull')\n\nconstraints = [\n  And(And(And(And(num0 < 3, input0_isNull), Not(num0 < 0)), Not(0 < new ArrayList<>().size())), errStr0.startsWith(\"Error\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerrStr = Symbol('errStr')\ninput = Symbol('input')\nnum = Symbol('num', integer=True)\nnew ArrayList<>()_size = Symbol('new ArrayList<>()_size')\nerrStr_startsWith = Symbol('errStr_startsWith')\nnull = Symbol('null')\npath_conjunction = (((((StrictLessThan(num, 3)) & (Eq(input, null))) & (~((StrictLessThan(num, 0))))) & (~((StrictLessThan(0, new ArrayList<>()_size))))) & errStr_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 43,
          "throwingLine": 45,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Motivation.caller2(java.lang.String, java.lang.String, int)",
          "exception": "throw new RuntimeException(\"bug2!\")",
          "pathCojunction": "(num < 3) && (input == null) && (!(num < 0)) && (0 < new ArrayList<>().size()) && (errStr.startsWith(\"Error\"))",
          "symbolicPathConjunction": "(num < 3) && (callee2(input, errStr, num))",
          "backwardsPathConjunction": "(num < 3) && (input == null) && (!(num < 0)) && (0 < new ArrayList<>().size()) && (errStr.startsWith(\"Error\"))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nerrStr0 = String('errStr0')\ninput0 = String('input0')\nnum0 = Int('num0')\ninput0_isNull = Bool('input0_isNull')\n\nconstraints = [\n  And(And(And(And(num0 < 3, input0_isNull), Not(num0 < 0)), 0 < new ArrayList<>().size()), errStr0.startsWith(\"Error\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerrStr = Symbol('errStr')\ninput = Symbol('input')\nnum = Symbol('num', integer=True)\nnew ArrayList<>()_size = Symbol('new ArrayList<>()_size')\nerrStr_startsWith = Symbol('errStr_startsWith')\nnull = Symbol('null')\npath_conjunction = (((((StrictLessThan(num, 3)) & (Eq(input, null))) & (~((StrictLessThan(num, 0))))) & (StrictLessThan(0, new ArrayList<>()_size))) & errStr_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 43,
          "throwingLine": 45,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Motivation.caller2(java.lang.String, java.lang.String, int)",
          "exception": "throw new RuntimeException(\"bug2!\")",
          "pathCojunction": "(num < 3) && (input == null) && (num < 0) && (errStr.startsWith(\"Error\"))",
          "symbolicPathConjunction": "(num < 3) && (callee2(input, errStr, num))",
          "backwardsPathConjunction": "(num < 3) && (input == null) && (num < 0) && (errStr.startsWith(\"Error\"))",
          "simplifiedPathConjunction": "errStr.startsWith(\"Error\") && input == null && num < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nerrStr0 = String('errStr0')\ninput0 = String('input0')\nnum0 = Int('num0')\ninput0_isNull = Bool('input0_isNull')\n\nconstraints = [\n  And(And(And(num0 < 3, input0_isNull), num0 < 0), errStr0.startsWith(\"Error\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerrStr = Symbol('errStr')\ninput = Symbol('input')\nnum = Symbol('num', integer=True)\nerrStr_startsWith = Symbol('errStr_startsWith')\nnull = Symbol('null')\npath_conjunction = ((((StrictLessThan(num, 3)) & (Eq(input, null))) & (StrictLessThan(num, 0))) & errStr_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 43,
          "throwingLine": 45,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Motivation.callee2(java.lang.String, java.lang.String, int)",
          "exception": "throw new RuntimeException(\"bug2!\");",
          "pathCojunction": "(first == null) && (!(key < 0)) && (i < values.size()) && (errStr.startsWith(\"Error\"))",
          "symbolicPathConjunction": "(first == null) && (!(key < 0)) && (i < values.size()) && (errStr.startsWith(\"Error\"))",
          "backwardsPathConjunction": "(first == null) && (!(key < 0)) && (0 < new ArrayList<>().size()) && (second.startsWith(\"Error\"))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfirst0 = String('first0')\nsecond0 = String('second0')\nkey0 = Int('key0')\nerrStr0 = String('errStr0')\ni0 = Int('i0')\nerrStr1 = String('errStr1')\nfirst0_isNull = Bool('first0_isNull')\n\nconstraints = [\n  errStr0 == StringVal(\"NoError\"), \n  i0 == 0,\n  values0 == new ArrayList<>(),\n  errStr1 == second0,\n  And(And(And(first0_isNull, Not(key0 < 0)), i0 < values0.size()), errStr1.startsWith(\"Error\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfirst = Symbol('first')\nsecond = Symbol('second')\nkey = Symbol('key', integer=True)\nnew ArrayList<>()_size = Symbol('new ArrayList<>()_size')\nsecond_startsWith = Symbol('second_startsWith')\nnull = Symbol('null')\npath_conjunction = ((((Eq(first, null)) & (~((StrictLessThan(key, 0))))) & (StrictLessThan(0, new ArrayList<>()_size))) & second_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 51,
          "throwingLine": 63,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Motivation.callee2(java.lang.String, java.lang.String, int)",
          "exception": "throw new RuntimeException(\"bug2!\");",
          "pathCojunction": "(first == null) && (!(key < 0)) && (!(i < values.size())) && (errStr.startsWith(\"Error\"))",
          "symbolicPathConjunction": "(first == null) && (!(key < 0)) && (!(i < values.size())) && (errStr.startsWith(\"Error\"))",
          "backwardsPathConjunction": "(first == null) && (!(key < 0)) && (!(0 < new ArrayList<>().size())) && (second.startsWith(\"Error\"))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfirst0 = String('first0')\nsecond0 = String('second0')\nkey0 = Int('key0')\nerrStr0 = String('errStr0')\ni0 = Int('i0')\nerrStr1 = String('errStr1')\nfirst0_isNull = Bool('first0_isNull')\n\nconstraints = [\n  errStr0 == StringVal(\"NoError\"), \n  i0 == 0,\n  values0 == new ArrayList<>(),\n  errStr1 == second0,\n  And(And(And(first0_isNull, Not(key0 < 0)), Not(i0 < values0.size())), errStr1.startsWith(\"Error\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfirst = Symbol('first')\nsecond = Symbol('second')\nkey = Symbol('key', integer=True)\nnew ArrayList<>()_size = Symbol('new ArrayList<>()_size')\nsecond_startsWith = Symbol('second_startsWith')\nnull = Symbol('null')\npath_conjunction = ((((Eq(first, null)) & (~((StrictLessThan(key, 0))))) & (~((StrictLessThan(0, new ArrayList<>()_size))))) & second_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 51,
          "throwingLine": 63,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Motivation.callee2(java.lang.String, java.lang.String, int)",
          "exception": "throw new RuntimeException(\"bug2!\");",
          "pathCojunction": "(first == null) && (key < 0) && (errStr.startsWith(\"Error\"))",
          "symbolicPathConjunction": "(first == null) && (key < 0) && (errStr.startsWith(\"Error\"))",
          "backwardsPathConjunction": "(first == null) && (key < 0) && (second.startsWith(\"Error\"))",
          "simplifiedPathConjunction": "second.startsWith(\"Error\") && first == null && key < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfirst0 = String('first0')\nsecond0 = String('second0')\nkey0 = Int('key0')\nerrStr0 = String('errStr0')\nerrStr1 = String('errStr1')\nfirst0_isNull = Bool('first0_isNull')\n\nconstraints = [\n  errStr0 == StringVal(\"NoError\"), \n  errStr1 == second0,\n  And(And(first0_isNull, key0 < 0), errStr1.startsWith(\"Error\"))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfirst = Symbol('first')\nsecond = Symbol('second')\nkey = Symbol('key', integer=True)\nsecond_startsWith = Symbol('second_startsWith')\nnull = Symbol('null')\npath_conjunction = (((Eq(first, null)) & (StrictLessThan(key, 0))) & second_startsWith)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 51,
          "throwingLine": 63,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "testcase.ExceptionCondition.Motivation.detectInvalidKey(int)",
          "exception": "throw new IllegalArgumentException();",
          "pathCojunction": "(key > -100)",
          "symbolicPathConjunction": "(key > -100)",
          "backwardsPathConjunction": "(key > -100)",
          "simplifiedPathConjunction": "key > -100",
          "z3Inputs": "[key0 = -99]\n[key0 = 0]\n[key0 = -1]\n[key0 = -2]\n[key0 = -3]\n[key0 = -4]\n[key0 = -5]\n[key0 = -6]\n[key0 = -7]\n[key0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = Int('key0')\n\nconstraints = [\n  key0 > -100\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key', integer=True)\npath_conjunction = (StrictGreaterThan(key, -100))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 71,
          "throwingLine": 73,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/FiledValueInfluenced.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.FiledValueInfluenced.throw_with_outVar_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_outVar_condition\");",
          "pathCojunction": "(outVar == 0)",
          "symbolicPathConjunction": "(outVar == 0)",
          "backwardsPathConjunction": "(outVar == 0)",
          "simplifiedPathConjunction": "outVar == 0",
          "z3Inputs": "[outVar0 = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\noutVar0 = Int('outVar0')\n\nconstraints = [\n  outVar0 == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutVar = Symbol('outVar', integer=True)\npath_conjunction = (Eq(outVar, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 14,
          "throwingLine": 16,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanjw/state-of-art-tools/wit-replication-package/benchmark/handmade/testcase1.0/testcase/ExceptionCondition/FiledValue.java",
      "methods": [
        {
          "qualifiedSignature": "testcase.ExceptionCondition.FiledValue.throw_with_outVar_condition(java.lang.String)",
          "exception": "throw new RuntimeException(\"throw_with_outVar_condition\");",
          "pathCojunction": "(outVar == 0)",
          "symbolicPathConjunction": "(outVar == 0)",
          "backwardsPathConjunction": "(outVar == 0)",
          "simplifiedPathConjunction": "outVar == 0",
          "z3Inputs": "[outVar0 = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = String('x0')\noutVar0 = Int('outVar0')\n\nconstraints = [\n  outVar0 == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutVar = Symbol('outVar', integer=True)\npath_conjunction = (Eq(outVar, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 14,
          "throwingLine": 16,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    }
  ]
}