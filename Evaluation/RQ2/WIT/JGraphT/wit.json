{
  "path": "/home/yanghengqin/jgrapht-core/",
  "classes": [
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/BlockCutpointGraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.BlockCutpointGraph.isCutpoint(V)",
          "exception": "throw new IllegalArgumentException(\"No such vertex in the graph!\");",
          "pathCojunction": "(!(this.graph.vertexSet().contains(vertex)))",
          "symbolicPathConjunction": "(!this.graph.vertexSet().contains(vertex))",
          "backwardsPathConjunction": "(!(this.graph.vertexSet().contains(vertex)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(this_graph0.vertexSet().contains(vertex0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvertex = Symbol('vertex')\nBUG_IN_SIMPLIFICATION\npath_conjunction = (~(this.graph_vertexSet_contains))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 169,
          "throwingLine": 171,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/experimental/dag/DirectedAcyclicGraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.addVertex(V, boolean)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(v == null)",
          "symbolicPathConjunction": "(super.addVertex(v))",
          "backwardsPathConjunction": "(v == null)",
          "simplifiedPathConjunction": "null == v",
          "z3Inputs": "[v0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\naddToTop0 = Bool('addToTop0')\nv0_isNull = Bool('v0_isNull')\n\nconstraints = [\n  v0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nv = Symbol('v')\nnull = Symbol('null')\npath_conjunction = (Eq(v, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 178,
          "throwingLine": 179,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.addDagEdge(V, V)",
          "exception": "throw new IllegalArgumentException(LOOPS_NOT_ALLOWED)",
          "pathCojunction": "(!(!allowingMultipleEdges && containsEdge(fromVertex, toVertex))) && (!allowingLoops && fromVertex.equals(toVertex))",
          "symbolicPathConjunction": "(super.addEdge(fromVertex, toVertex))",
          "backwardsPathConjunction": "(!(!allowingMultipleEdges && containsEdge(fromVertex, toVertex))) && (!allowingLoops && fromVertex.equals(toVertex))",
          "simplifiedPathConjunction": "fromVertex.equals(toVertex) && !allowingLoops && (allowingMultipleEdges || !containsEdge(fromVertex, toVertex))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nallowingMultipleEdges0 = Bool('allowingMultipleEdges0')\nallowingLoops0 = Bool('allowingLoops0')\n\nconstraints = [\n  And(Not(And(Not(allowingMultipleEdges0), containsEdge(fromVertex0, toVertex0))), And(Not(allowingLoops0), fromVertex0.equals(toVertex0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromVertex = Symbol('fromVertex')\ntoVertex = Symbol('toVertex')\nallowingMultipleEdges = Symbol('allowingMultipleEdges')\nallowingLoops = Symbol('allowingLoops')\n_containsEdge = Symbol('_containsEdge')\nfromVertex_equals = Symbol('fromVertex_equals')\npath_conjunction = ((~(((~(allowingMultipleEdges)) & _containsEdge))) & ((~(allowingLoops)) & fromVertex_equals))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 217,
          "throwingLine": 220,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.addDagEdge(V, V, E)",
          "exception": "throw new IllegalArgumentException(LOOPS_NOT_ALLOWED)",
          "pathCojunction": "(!(e == null)) && (!(edgeMap.containsKey(e))) && (!(e == null)) && (!(edgeMap.containsKey(e))) && (!(!allowingMultipleEdges && containsEdge(fromVertex, toVertex))) && (!allowingLoops && fromVertex.equals(toVertex))",
          "symbolicPathConjunction": "(!(e == null)) && (!(containsEdge(e))) && (!(containsEdge(e))) && (super.addEdge(fromVertex, toVertex, e))",
          "backwardsPathConjunction": "(!(e == null)) && (!(edgeMap.containsKey(e))) && (!(e == null)) && (!(edgeMap.containsKey(e))) && (!(!allowingMultipleEdges && containsEdge(fromVertex, toVertex))) && (!allowingLoops && fromVertex.equals(toVertex))",
          "simplifiedPathConjunction": "fromVertex.equals(toVertex) && !allowingLoops && !edgeMap.containsKey(e) && (allowingMultipleEdges || !containsEdge(fromVertex, toVertex)) && e != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nallowingMultipleEdges0 = Bool('allowingMultipleEdges0')\nallowingLoops0 = Bool('allowingLoops0')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  And(And(And(And(And(Not(e0_isNull), Not(edgeMap0.containsKey(e0))), Not(e0_isNull)), Not(edgeMap0.containsKey(e0))), Not(And(Not(allowingMultipleEdges0), containsEdge(fromVertex0, toVertex0)))), And(Not(allowingLoops0), fromVertex0.equals(toVertex0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromVertex = Symbol('fromVertex')\ntoVertex = Symbol('toVertex')\ne = Symbol('e')\nedgeMap = Symbol('edgeMap')\nallowingMultipleEdges = Symbol('allowingMultipleEdges')\nallowingLoops = Symbol('allowingLoops')\nedgeMap_containsKey = Symbol('edgeMap_containsKey')\n_containsEdge = Symbol('_containsEdge')\nfromVertex_equals = Symbol('fromVertex_equals')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(e, null)))) & (~(edgeMap_containsKey))) & (~((Eq(e, null))))) & (~(edgeMap_containsKey))) & (~(((~(allowingMultipleEdges)) & _containsEdge)))) & ((~(allowingLoops)) & fromVertex_equals))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 258,
          "throwingLine": 267,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.addDagEdge(V, V, E)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(e == null)",
          "backwardsPathConjunction": "(e == null)",
          "simplifiedPathConjunction": "e == null",
          "z3Inputs": "[e0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nnull = Symbol('null')\npath_conjunction = (Eq(e, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 258,
          "throwingLine": 260,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedHashSetImpl.clearVisited(int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1002,
          "throwingLine": 1003,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedArrayImpl.clearVisited(int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1078,
          "throwingLine": 1079,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.TopoIterator.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(updateCountAtCreation != topologyUpdateCount)",
          "symbolicPathConjunction": "(updateCountAtCreation != topologyUpdateCount)",
          "backwardsPathConjunction": "(updateCountAtCreation != topologyUpdateCount)",
          "simplifiedPathConjunction": "topologyUpdateCount != updateCountAtCreation",
          "z3Inputs": "[topologyUpdateCount0 = -9223372036854775807,\n updateCountAtCreation0 = -9223372036854775808]\n[updateCountAtCreation0 = 0, topologyUpdateCount0 = 2]\n[updateCountAtCreation0 = 0, topologyUpdateCount0 = 3]\n[updateCountAtCreation0 = 0, topologyUpdateCount0 = 4]\n[updateCountAtCreation0 = -1, topologyUpdateCount0 = 5]\n[updateCountAtCreation0 = -1, topologyUpdateCount0 = 6]\n[updateCountAtCreation0 = -1, topologyUpdateCount0 = 7]\n[updateCountAtCreation0 = -1, topologyUpdateCount0 = 8]\n[updateCountAtCreation0 = -1, topologyUpdateCount0 = 9]\n[updateCountAtCreation0 = -1, topologyUpdateCount0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nupdateCountAtCreation0 = Int('updateCountAtCreation0')\ntopologyUpdateCount0 = Int('topologyUpdateCount0')\n\nconstraints = [\n  updateCountAtCreation0 >= -9223372036854775808, updateCountAtCreation0 <= 9223372036854775807, # implicit\n  updateCountAtCreation0 != topologyUpdateCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nupdateCountAtCreation = Symbol('updateCountAtCreation')\ntopologyUpdateCount = Symbol('topologyUpdateCount', integer=True)\npath_conjunction = (Ne(updateCountAtCreation, topologyUpdateCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1113,
          "throwingLine": 1115,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/traverse/AbstractGraphIterator.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.traverse.AbstractGraphIterator.remove()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 125,
          "throwingLine": 126,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/KShortestPathsIterator.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.KShortestPathsIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(!this.startVertexEncountered)) && (!(!this.startVertexEncountered)) && (!(!(this.prevImprovedVertices.isEmpty())))",
          "symbolicPathConjunction": "(!(!this.startVertexEncountered)) && (!(hasNext())) && (!(hasNext()))",
          "backwardsPathConjunction": "(!(!this.startVertexEncountered)) && (!(!this.startVertexEncountered)) && (!(!(this.prevImprovedVertices.isEmpty())))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthis_startVertexEncountered0 = Bool('this_startVertexEncountered0')\n\nconstraints = [\n  And(And(Not(Not(this_startVertexEncountered0)), Not(Not(this_startVertexEncountered0))), Not(Not(this.prevImprovedVertices.isEmpty())))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 153,
          "throwingLine": 177,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.KShortestPathsIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(this.startVertexEncountered)) && (!(this.startVertexEncountered)) && (!(!(this.prevImprovedVertices.isEmpty())))",
          "symbolicPathConjunction": "(!(this.startVertexEncountered)) && (!(hasNext())) && (!(hasNext()))",
          "backwardsPathConjunction": "(!(this.startVertexEncountered)) && (!(this.startVertexEncountered)) && (!(!(this.prevImprovedVertices.isEmpty())))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthis_startVertexEncountered0 = Bool('this_startVertexEncountered0')\n\nconstraints = [\n  And(And(Not(this_startVertexEncountered0), Not(this_startVertexEncountered0)), Not(Not(this.prevImprovedVertices.isEmpty())))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 153,
          "throwingLine": 177,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.KShortestPathsIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(!this.startVertexEncountered)) && (!(this.startVertexEncountered)) && (!(!(this.prevImprovedVertices.isEmpty())))",
          "symbolicPathConjunction": "(!(!this.startVertexEncountered)) && (!(hasNext())) && (!(hasNext()))",
          "backwardsPathConjunction": "(!(!this.startVertexEncountered)) && (!(this.startVertexEncountered)) && (!(!(this.prevImprovedVertices.isEmpty())))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthis_startVertexEncountered0 = Bool('this_startVertexEncountered0')\n\nconstraints = [\n  And(And(Not(Not(this_startVertexEncountered0)), Not(this_startVertexEncountered0)), Not(Not(this.prevImprovedVertices.isEmpty())))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 153,
          "throwingLine": 177,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.KShortestPathsIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(this.startVertexEncountered)) && (!(!this.startVertexEncountered)) && (!(!(this.prevImprovedVertices.isEmpty())))",
          "symbolicPathConjunction": "(!(this.startVertexEncountered)) && (!(hasNext())) && (!(hasNext()))",
          "backwardsPathConjunction": "(!(this.startVertexEncountered)) && (!(!this.startVertexEncountered)) && (!(!(this.prevImprovedVertices.isEmpty())))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthis_startVertexEncountered0 = Bool('this_startVertexEncountered0')\n\nconstraints = [\n  And(And(Not(this_startVertexEncountered0), Not(Not(this_startVertexEncountered0))), Not(Not(this.prevImprovedVertices.isEmpty())))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 153,
          "throwingLine": 177,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.KShortestPathsIterator.remove()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 186,
          "throwingLine": 187,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/cycle/TiernanSimpleCycles.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.cycle.TiernanSimpleCycles.setGraph(org.jgrapht.DirectedGraph<V, E>)",
          "exception": "throw new IllegalArgumentException(\"Null graph argument.\");",
          "pathCojunction": "(graph == null)",
          "symbolicPathConjunction": "(graph == null)",
          "backwardsPathConjunction": "(graph == null)",
          "z3Inputs": "[graph0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ngraph0_isNull = Bool('graph0_isNull')\n\nconstraints = [\n  graph0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nE> = Symbol('E>')\nnull = Symbol('null')\npath_conjunction = (Eq(graph, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 95,
          "throwingLine": 97,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/graph/UnmodifiableGraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.graph.UnmodifiableGraph.addEdge(V, V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 86,
          "throwingLine": 87,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.UnmodifiableGraph.addEdge(V, V, E)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.UnmodifiableGraph.addVertex(V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 102,
          "throwingLine": 103,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.UnmodifiableGraph.removeAllEdges(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 110,
          "throwingLine": 111,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.UnmodifiableGraph.removeAllEdges(V, V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 118,
          "throwingLine": 119,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.UnmodifiableGraph.removeAllVertices(java.util.Collection<? extends V>)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 126,
          "throwingLine": 127,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.UnmodifiableGraph.removeEdge(E)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 134,
          "throwingLine": 135,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.UnmodifiableGraph.removeEdge(V, V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 142,
          "throwingLine": 143,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.UnmodifiableGraph.removeVertex(V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 150,
          "throwingLine": 151,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/experimental/GraphSquare.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.experimental.GraphSquare.addEdge(V, V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 113,
          "throwingLine": 114,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.GraphSquare.addEdge(V, V, E)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 121,
          "throwingLine": 122,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.GraphSquare.addVertex(V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 129,
          "throwingLine": 130,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.GraphSquare.removeAllEdges(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 137,
          "throwingLine": 138,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.GraphSquare.removeAllEdges(V, V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 145,
          "throwingLine": 146,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.GraphSquare.removeAllVertices(java.util.Collection<? extends V>)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 153,
          "throwingLine": 154,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.GraphSquare.removeEdge(E)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 161,
          "throwingLine": 162,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.GraphSquare.removeEdge(V, V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.experimental.GraphSquare.removeVertex(V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/graph/GraphUnion.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.graph.GraphUnion.getEdgeFactory()",
          "exception": "throw new UnsupportedOperationException(READ_ONLY);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 128,
          "throwingLine": 129,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.GraphUnion.addEdge(V, V)",
          "exception": "throw new UnsupportedOperationException(READ_ONLY);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 137,
          "throwingLine": 138,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.GraphUnion.addEdge(V, V, E)",
          "exception": "throw new UnsupportedOperationException(READ_ONLY);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 146,
          "throwingLine": 147,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.GraphUnion.addVertex(V)",
          "exception": "throw new UnsupportedOperationException(READ_ONLY);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 155,
          "throwingLine": 156,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.GraphUnion.removeEdge(V, V)",
          "exception": "throw new UnsupportedOperationException(READ_ONLY);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 194,
          "throwingLine": 195,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.GraphUnion.removeEdge(E)",
          "exception": "throw new UnsupportedOperationException(READ_ONLY);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 203,
          "throwingLine": 204,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.GraphUnion.removeVertex(V)",
          "exception": "throw new UnsupportedOperationException(READ_ONLY);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 212,
          "throwingLine": 213,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/isomorphism/VF2MappingIterator.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.isomorphism.VF2MappingIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(nextMapping != null)) && (rel == null)",
          "symbolicPathConjunction": "(!(nextMapping != null)) && (rel == null)",
          "backwardsPathConjunction": "(!(nextMapping != null)) && (matchAndCheck() == null)",
          "simplifiedPathConjunction": "matchAndCheck() == null && nextMapping == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnextMapping0_isNull = Bool('nextMapping0_isNull')\nrel0_isNull = Bool('rel0_isNull')\n\nconstraints = [\n  E > rel0 == matchAndCheck(),\n  And(Not(Not(nextMapping0_isNull)), rel0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnextMapping = Symbol('nextMapping')\n_matchAndCheck = Symbol('_matchAndCheck')\nnull = Symbol('null')\npath_conjunction = ((~((Ne(nextMapping, null)))) & (Eq(_matchAndCheck, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 97,
          "throwingLine": 106,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.isomorphism.VF2MappingIterator.remove()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 112,
          "throwingLine": 113,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/util/PrefetchIterator.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.util.PrefetchIterator.remove()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 198,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/AllDirectedPaths.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.AllDirectedPaths.getAllPaths(V, V, boolean, java.lang.Integer)",
          "exception": "throw new IllegalArgumentException(\"maxPathLength must be non-negative if defined\")",
          "pathCojunction": "(maxPathLength != null) && (maxPathLength < 0)",
          "symbolicPathConjunction": "(getAllPaths(Collections.singleton(sourceVertex), Collections.singleton(targetVertex), simplePathsOnly, maxPathLength))",
          "backwardsPathConjunction": "(maxPathLength != null) && (maxPathLength < 0)",
          "simplifiedPathConjunction": "maxPathLength < 0 && maxPathLength != null",
          "z3Inputs": "[maxPathLength0 = -1, maxPathLength0_isNull = False]\n[maxPathLength0_isNull = False, maxPathLength0 = -2]\n[maxPathLength0_isNull = False, maxPathLength0 = -3]\n[maxPathLength0_isNull = False, maxPathLength0 = -4]\n[maxPathLength0_isNull = False, maxPathLength0 = -5]\n[maxPathLength0_isNull = False, maxPathLength0 = -6]\n[maxPathLength0_isNull = False, maxPathLength0 = -7]\n[maxPathLength0_isNull = False, maxPathLength0 = -8]\n[maxPathLength0_isNull = False, maxPathLength0 = -9]\n[maxPathLength0_isNull = False, maxPathLength0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsimplePathsOnly0 = Bool('simplePathsOnly0')\nmaxPathLength0 = Int('maxPathLength0')\nmaxPathLength0_isNull = Bool('maxPathLength0_isNull')\n\nconstraints = [\n  And(Not(maxPathLength0_isNull), maxPathLength0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmaxPathLength = Symbol('maxPathLength', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Ne(maxPathLength, null)) & (StrictLessThan(maxPathLength, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 83,
          "throwingLine": 84,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.AllDirectedPaths.getAllPaths(V, V, boolean, java.lang.Integer)",
          "exception": "throw new IllegalArgumentException(\"If search is not restricted to simple paths, a maximum path length must be set to avoid infinite cycles\")",
          "pathCojunction": "(!(maxPathLength != null) && (maxPathLength < 0)) && (!simplePathsOnly && (maxPathLength == null))",
          "symbolicPathConjunction": "(getAllPaths(Collections.singleton(sourceVertex), Collections.singleton(targetVertex), simplePathsOnly, maxPathLength))",
          "backwardsPathConjunction": "(!(maxPathLength != null) && (maxPathLength < 0)) && (!simplePathsOnly && (maxPathLength == null))",
          "simplifiedPathConjunction": "maxPathLength == null && !simplePathsOnly && maxPathLength < 0",
          "z3Inputs": "[maxPathLength0 = -1,\n simplePathsOnly0 = False,\n maxPathLength0_isNull = True]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -2]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -3]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -4]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -5]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -6]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -7]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -8]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -9]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsimplePathsOnly0 = Bool('simplePathsOnly0')\nmaxPathLength0 = Int('maxPathLength0')\nmaxPathLength0_isNull = Bool('maxPathLength0_isNull')\nmaxPathLength0_isNull = Bool('maxPathLength0_isNull')\n\nconstraints = [\n  And(And(Not(Not(maxPathLength0_isNull)), maxPathLength0 < 0), And(Not(simplePathsOnly0), maxPathLength0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsimplePathsOnly = Symbol('simplePathsOnly')\nmaxPathLength = Symbol('maxPathLength', integer=True)\nnull = Symbol('null')\npath_conjunction = (((~((Ne(maxPathLength, null)))) & (StrictLessThan(maxPathLength, 0))) & ((~(simplePathsOnly)) & (Eq(maxPathLength, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 83,
          "throwingLine": 84,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.AllDirectedPaths.getAllPaths(java.util.Set<V>, java.util.Set<V>, boolean, java.lang.Integer)",
          "exception": "throw new IllegalArgumentException(\"maxPathLength must be non-negative if defined\");",
          "pathCojunction": "(maxPathLength != null) && (maxPathLength < 0)",
          "symbolicPathConjunction": "((maxPathLength != null) && (maxPathLength < 0))",
          "backwardsPathConjunction": "(maxPathLength != null) && (maxPathLength < 0)",
          "simplifiedPathConjunction": "maxPathLength < 0 && maxPathLength != null",
          "z3Inputs": "[maxPathLength0 = -1, maxPathLength0_isNull = False]\n[maxPathLength0_isNull = False, maxPathLength0 = -2]\n[maxPathLength0_isNull = False, maxPathLength0 = -3]\n[maxPathLength0_isNull = False, maxPathLength0 = -4]\n[maxPathLength0_isNull = False, maxPathLength0 = -5]\n[maxPathLength0_isNull = False, maxPathLength0 = -6]\n[maxPathLength0_isNull = False, maxPathLength0 = -7]\n[maxPathLength0_isNull = False, maxPathLength0 = -8]\n[maxPathLength0_isNull = False, maxPathLength0 = -9]\n[maxPathLength0_isNull = False, maxPathLength0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsimplePathsOnly0 = Bool('simplePathsOnly0')\nmaxPathLength0 = Int('maxPathLength0')\nmaxPathLength0_isNull = Bool('maxPathLength0_isNull')\n\nconstraints = [\n  And(Not(maxPathLength0_isNull), maxPathLength0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmaxPathLength = Symbol('maxPathLength', integer=True)\nnull = Symbol('null')\npath_conjunction = ((Ne(maxPathLength, null)) & (StrictLessThan(maxPathLength, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 111,
          "throwingLine": 113,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.AllDirectedPaths.getAllPaths(java.util.Set<V>, java.util.Set<V>, boolean, java.lang.Integer)",
          "exception": "throw new IllegalArgumentException(\"If search is not restricted to simple paths, a maximum path length must be set to avoid infinite cycles\");",
          "pathCojunction": "(!(maxPathLength != null) && (maxPathLength < 0)) && (!simplePathsOnly && (maxPathLength == null))",
          "symbolicPathConjunction": "(!(maxPathLength != null) && (maxPathLength < 0)) && (!simplePathsOnly && (maxPathLength == null))",
          "backwardsPathConjunction": "(!(maxPathLength != null) && (maxPathLength < 0)) && (!simplePathsOnly && (maxPathLength == null))",
          "simplifiedPathConjunction": "maxPathLength == null && !simplePathsOnly && maxPathLength < 0",
          "z3Inputs": "[maxPathLength0 = -1,\n simplePathsOnly0 = False,\n maxPathLength0_isNull = True]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -2]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -3]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -4]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -5]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -6]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -7]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -8]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -9]\n[maxPathLength0_isNull = True,\n simplePathsOnly0 = False,\n maxPathLength0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsimplePathsOnly0 = Bool('simplePathsOnly0')\nmaxPathLength0 = Int('maxPathLength0')\nmaxPathLength0_isNull = Bool('maxPathLength0_isNull')\nmaxPathLength0_isNull = Bool('maxPathLength0_isNull')\n\nconstraints = [\n  And(And(Not(Not(maxPathLength0_isNull)), maxPathLength0 < 0), And(Not(simplePathsOnly0), maxPathLength0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsimplePathsOnly = Symbol('simplePathsOnly')\nmaxPathLength = Symbol('maxPathLength', integer=True)\nnull = Symbol('null')\npath_conjunction = (((~((Ne(maxPathLength, null)))) & (StrictLessThan(maxPathLength, 0))) & ((~(simplePathsOnly)) & (Eq(maxPathLength, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 111,
          "throwingLine": 118,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/NaiveLcaFinder.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.NaiveLcaFinder.findLcas(V, V)",
          "exception": "throw new UnsupportedOperationException(\"findLcas has not yet been implemented\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 112,
          "throwingLine": 113,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/cycle/JohnsonSimpleCycles.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.cycle.JohnsonSimpleCycles.setGraph(org.jgrapht.DirectedGraph<V, E>)",
          "exception": "throw new IllegalArgumentException(\"Null graph argument.\");",
          "pathCojunction": "(graph == null)",
          "symbolicPathConjunction": "(graph == null)",
          "backwardsPathConjunction": "(graph == null)",
          "z3Inputs": "[graph0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ngraph0_isNull = Bool('graph0_isNull')\n\nconstraints = [\n  graph0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nE> = Symbol('E>')\nnull = Symbol('null')\npath_conjunction = (Eq(graph, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 113,
          "throwingLine": 115,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/util/FibonacciHeap.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.util.FibonacciHeap.decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>, double)",
          "exception": "throw new IllegalArgumentException(\"decreaseKey() got larger key value. Current key: \" + x.key + \" new key: \" + k);",
          "pathCojunction": "(k > x.key)",
          "symbolicPathConjunction": "(k > x.key)",
          "backwardsPathConjunction": "(k > x.key)",
          "z3Inputs": "[k0 = 0, x_key0 = -1]\n[x_key0 = -3/2, k0 = -1/2]\n[x_key0 = -5/4, k0 = -3/4]\n[x_key0 = -9/8, k0 = -7/8]\n[x_key0 = -29/16, k0 = -19/16]\n[x_key0 = -53/32, k0 = -43/32]\n[x_key0 = -101/64, k0 = -91/64]\n[x_key0 = -257/128, k0 = -207/128]\n[x_key0 = -489/256, k0 = -439/256]\n[x_key0 = -953/512, k0 = -903/512]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk0 = Real('k0')\nx_key0 = Real('x_key0')\n\nconstraints = [\n  k0 > x_key0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 137,
          "throwingLine": 139,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/cycle/SzwarcfiterLauerSimpleCycles.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles.setGraph(org.jgrapht.DirectedGraph<V, E>)",
          "exception": "throw new IllegalArgumentException(\"Null graph argument.\");",
          "pathCojunction": "(graph == null)",
          "symbolicPathConjunction": "(graph == null)",
          "backwardsPathConjunction": "(graph == null)",
          "z3Inputs": "[graph0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ngraph0_isNull = Bool('graph0_isNull')\n\nconstraints = [\n  graph0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nE> = Symbol('E>')\nnull = Symbol('null')\npath_conjunction = (Eq(graph, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 111,
          "throwingLine": 113,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/graph/AsUnweightedGraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.graph.AsUnweightedGraph.getEdgeWeight(E)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(e == null)",
          "backwardsPathConjunction": "(e == null)",
          "simplifiedPathConjunction": "e == null",
          "z3Inputs": "[e0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nnull = Symbol('null')\npath_conjunction = (Eq(e, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 87,
          "throwingLine": 89,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/cycle/PatonCycleBase.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.cycle.PatonCycleBase.setGraph(org.jgrapht.UndirectedGraph<V, E>)",
          "exception": "throw new IllegalArgumentException(\"Null graph argument.\");",
          "pathCojunction": "(graph == null)",
          "symbolicPathConjunction": "(graph == null)",
          "backwardsPathConjunction": "(graph == null)",
          "z3Inputs": "[graph0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ngraph0_isNull = Bool('graph0_isNull')\n\nconstraints = [\n  graph0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nE> = Symbol('E>')\nnull = Symbol('null')\npath_conjunction = (Eq(graph, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 95,
          "throwingLine": 97,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.cycle.HawickJamesSimpleCycles.setGraph(org.jgrapht.DirectedGraph<V, E>)",
          "exception": "throw new IllegalArgumentException(\"Null graph argument.\");",
          "pathCojunction": "(graph == null)",
          "symbolicPathConjunction": "(graph == null)",
          "backwardsPathConjunction": "(graph == null)",
          "z3Inputs": "[graph0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ngraph0_isNull = Bool('graph0_isNull')\n\nconstraints = [\n  graph0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nE> = Symbol('E>')\nnull = Symbol('null')\npath_conjunction = (Eq(graph, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 293,
          "throwingLine": 295,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.cycle.HawickJamesSimpleCycles.findSimpleCycles()",
          "exception": "throw new IllegalArgumentException(\"Null graph.\");",
          "pathCojunction": "(graph == null)",
          "symbolicPathConjunction": "(graph == null)",
          "backwardsPathConjunction": "(graph == null)",
          "simplifiedPathConjunction": "graph == null",
          "z3Inputs": "[graph0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ngraph0_isNull = Bool('graph0_isNull')\n\nconstraints = [\n  graph0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ngraph = Symbol('graph')\nnull = Symbol('null')\npath_conjunction = (Eq(graph, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 305,
          "throwingLine": 307,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.cycle.HawickJamesSimpleCycles.printSimpleCycles()",
          "exception": "throw new IllegalArgumentException(\"Null graph.\");",
          "pathCojunction": "(graph == null)",
          "symbolicPathConjunction": "(graph == null)",
          "backwardsPathConjunction": "(graph == null)",
          "simplifiedPathConjunction": "graph == null",
          "z3Inputs": "[graph0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ngraph0_isNull = Bool('graph0_isNull')\n\nconstraints = [\n  graph0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ngraph = Symbol('graph')\nnull = Symbol('null')\npath_conjunction = (Eq(graph, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 333,
          "throwingLine": 335,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.cycle.HawickJamesSimpleCycles.countSimpleCycles()",
          "exception": "throw new IllegalArgumentException(\"Null graph.\");",
          "pathCojunction": "(graph == null)",
          "symbolicPathConjunction": "(graph == null)",
          "backwardsPathConjunction": "(graph == null)",
          "simplifiedPathConjunction": "graph == null",
          "z3Inputs": "[graph0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ngraph0_isNull = Bool('graph0_isNull')\n\nconstraints = [\n  graph0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ngraph = Symbol('graph')\nnull = Symbol('null')\npath_conjunction = (Eq(graph, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 358,
          "throwingLine": 360,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/graph/AbstractBaseGraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.graph.AbstractBaseGraph.addEdge(V, V, E)",
          "exception": "throw new IllegalArgumentException(LOOPS_NOT_ALLOWED);",
          "pathCojunction": "(!(e == null)) && (!(edgeMap.containsKey(e))) && (!(!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex))) && (!allowingLoops && sourceVertex.equals(targetVertex))",
          "symbolicPathConjunction": "(!(e == null)) && (!(containsEdge(e))) && (!(containsEdge(e))) && (!(!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex))) && (!allowingLoops && sourceVertex.equals(targetVertex))",
          "backwardsPathConjunction": "(!(e == null)) && (!(edgeMap.containsKey(e))) && (!(!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex))) && (!allowingLoops && sourceVertex.equals(targetVertex))",
          "simplifiedPathConjunction": "sourceVertex.equals(targetVertex) && !allowingLoops && !edgeMap.containsKey(e) && (allowingMultipleEdges || !containsEdge(sourceVertex, targetVertex)) && e != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nallowingMultipleEdges0 = Bool('allowingMultipleEdges0')\nallowingLoops0 = Bool('allowingLoops0')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  And(And(And(Not(e0_isNull), Not(edgeMap0.containsKey(e0))), Not(And(Not(allowingMultipleEdges0), containsEdge(sourceVertex0, targetVertex0)))), And(Not(allowingLoops0), sourceVertex0.equals(targetVertex0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsourceVertex = Symbol('sourceVertex')\ntargetVertex = Symbol('targetVertex')\ne = Symbol('e')\nedgeMap = Symbol('edgeMap')\nallowingMultipleEdges = Symbol('allowingMultipleEdges')\nallowingLoops = Symbol('allowingLoops')\nedgeMap_containsKey = Symbol('edgeMap_containsKey')\n_containsEdge = Symbol('_containsEdge')\nsourceVertex_equals = Symbol('sourceVertex_equals')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(e, null)))) & (~(edgeMap_containsKey))) & (~(((~(allowingMultipleEdges)) & _containsEdge)))) & ((~(allowingLoops)) & sourceVertex_equals))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 218,
          "throwingLine": 235,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AbstractBaseGraph.addEdge(V, V, E)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(e == null)",
          "backwardsPathConjunction": "(e == null)",
          "simplifiedPathConjunction": "e == null",
          "z3Inputs": "[e0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nnull = Symbol('null')\npath_conjunction = (Eq(e, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 218,
          "throwingLine": 220,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AbstractBaseGraph.addVertex(V)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(v == null)",
          "symbolicPathConjunction": "(v == null)",
          "backwardsPathConjunction": "(v == null)",
          "simplifiedPathConjunction": "null == v",
          "z3Inputs": "[v0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0_isNull = Bool('v0_isNull')\n\nconstraints = [\n  v0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nv = Symbol('v')\nnull = Symbol('null')\npath_conjunction = (Eq(v, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 267,
          "throwingLine": 269,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AbstractBaseGraph.DirectedSpecifics.degreeOf(V)",
          "exception": "throw new UnsupportedOperationException(NOT_IN_DIRECTED_GRAPH);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 848,
          "throwingLine": 849,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AbstractBaseGraph.UndirectedSpecifics.inDegreeOf(V)",
          "exception": "throw new UnsupportedOperationException(NOT_IN_UNDIRECTED_GRAPH);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1171,
          "throwingLine": 1172,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AbstractBaseGraph.UndirectedSpecifics.incomingEdgesOf(V)",
          "exception": "throw new UnsupportedOperationException(NOT_IN_UNDIRECTED_GRAPH);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1179,
          "throwingLine": 1180,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AbstractBaseGraph.UndirectedSpecifics.outDegreeOf(V)",
          "exception": "throw new UnsupportedOperationException(NOT_IN_UNDIRECTED_GRAPH);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1187,
          "throwingLine": 1188,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AbstractBaseGraph.UndirectedSpecifics.outgoingEdgesOf(V)",
          "exception": "throw new UnsupportedOperationException(NOT_IN_UNDIRECTED_GRAPH);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1195,
          "throwingLine": 1196,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/graph/MaskSubgraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.graph.MaskSubgraph.addEdge(V, V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 88,
          "throwingLine": 89,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.MaskSubgraph.addEdge(V, V, E)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 93,
          "throwingLine": 94,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.MaskSubgraph.addVertex(V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 101,
          "throwingLine": 102,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.MaskSubgraph.removeAllEdges(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 237,
          "throwingLine": 238,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.MaskSubgraph.removeAllEdges(V, V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 245,
          "throwingLine": 246,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.MaskSubgraph.removeAllVertices(java.util.Collection<? extends V>)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 253,
          "throwingLine": 254,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.MaskSubgraph.removeEdge(E)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 261,
          "throwingLine": 262,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.MaskSubgraph.removeEdge(V, V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 269,
          "throwingLine": 270,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.MaskSubgraph.removeVertex(V)",
          "exception": "throw new UnsupportedOperationException(UNMODIFIABLE);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 277,
          "throwingLine": 278,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/cycle/TarjanSimpleCycles.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.cycle.TarjanSimpleCycles.setGraph(org.jgrapht.DirectedGraph<V, E>)",
          "exception": "throw new IllegalArgumentException(\"Null graph argument.\");",
          "pathCojunction": "(graph == null)",
          "symbolicPathConjunction": "(graph == null)",
          "backwardsPathConjunction": "(graph == null)",
          "z3Inputs": "[graph0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ngraph0_isNull = Bool('graph0_isNull')\n\nconstraints = [\n  graph0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nE> = Symbol('E>')\nnull = Symbol('null')\npath_conjunction = (Eq(graph, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 102,
          "throwingLine": 104,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/util/UnionFind.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.util.UnionFind.find(T)",
          "exception": "throw new IllegalArgumentException(\"elements must be contained in given set\");",
          "pathCojunction": "(!(parentMap.containsKey(element)))",
          "symbolicPathConjunction": "(!parentMap.containsKey(element))",
          "backwardsPathConjunction": "(!(parentMap.containsKey(element)))",
          "simplifiedPathConjunction": "!parentMap.containsKey(element)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(parentMap0.containsKey(element0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nparentMap = Symbol('parentMap')\nparentMap_containsKey = Symbol('parentMap_containsKey')\npath_conjunction = (~(parentMap_containsKey))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 107,
          "throwingLine": 109,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.util.UnionFind.union(T, T)",
          "exception": "throw new IllegalArgumentException(\"elements must be contained in given set\");",
          "pathCojunction": "(!parentMap.containsKey(element1) || !parentMap.containsKey(element2))",
          "symbolicPathConjunction": "(!parentMap.containsKey(element1) || !parentMap.containsKey(element2))",
          "backwardsPathConjunction": "(!parentMap.containsKey(element1) || !parentMap.containsKey(element2))",
          "simplifiedPathConjunction": "!parentMap.containsKey(element2)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Or(Not(parentMap0.containsKey(element10)), Not(parentMap0.containsKey(element20)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement1 = Symbol('element1')\nelement2 = Symbol('element2')\nparentMap = Symbol('parentMap')\nparentMap_containsKey = Symbol('parentMap_containsKey')\npath_conjunction = ((~(parentMap_containsKey)) | (~(parentMap_containsKey)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 130,
          "throwingLine": 134,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/BellmanFordIterator.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.BellmanFordIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(!this.startVertexEncountered)) && (!(!this.startVertexEncountered)) && (!(!(this.prevImprovedVertices.isEmpty())))",
          "symbolicPathConjunction": "(!(!this.startVertexEncountered)) && (!(hasNext())) && (!(hasNext()))",
          "backwardsPathConjunction": "(!(!this.startVertexEncountered)) && (!(!this.startVertexEncountered)) && (!(!(this.prevImprovedVertices.isEmpty())))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthis_startVertexEncountered0 = Bool('this_startVertexEncountered0')\n\nconstraints = [\n  And(And(Not(Not(this_startVertexEncountered0)), Not(Not(this_startVertexEncountered0))), Not(Not(this.prevImprovedVertices.isEmpty())))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 137,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.alg.BellmanFordIterator.remove()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 183,
          "throwingLine": 184,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/graph/AsUndirectedGraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.graph.AsUndirectedGraph.addEdge(V, V)",
          "exception": "throw new UnsupportedOperationException(NO_EDGE_ADD);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 138,
          "throwingLine": 139,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AsUndirectedGraph.addEdge(V, V, E)",
          "exception": "throw new UnsupportedOperationException(NO_EDGE_ADD);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 146,
          "throwingLine": 147,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AsUndirectedGraph.inDegreeOf(V)",
          "exception": "throw new UnsupportedOperationException(UNDIRECTED);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 163,
          "throwingLine": 164,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AsUndirectedGraph.incomingEdgesOf(V)",
          "exception": "throw new UnsupportedOperationException(UNDIRECTED);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 171,
          "throwingLine": 172,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AsUndirectedGraph.outDegreeOf(V)",
          "exception": "throw new UnsupportedOperationException(UNDIRECTED);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 179,
          "throwingLine": 180,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.AsUndirectedGraph.outgoingEdgesOf(V)",
          "exception": "throw new UnsupportedOperationException(UNDIRECTED);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 187,
          "throwingLine": 188,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/graph/Subgraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.graph.Subgraph.addEdge(V, V, E)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(e == null)",
          "backwardsPathConjunction": "(e == null)",
          "simplifiedPathConjunction": "e == null",
          "z3Inputs": "[e0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nnull = Symbol('null')\npath_conjunction = (Eq(e, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 249,
          "throwingLine": 251,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.jgrapht.graph.Subgraph.BaseGraphListener.edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V, E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(isInduced) && (vertexSet.contains(source) && vertexSet.contains(target)) && (edge == null)",
          "symbolicPathConjunction": "(isInduced) && (e.getEdge()) && (e.getEdgeSource()) && (e.getEdgeTarget()) && (containsVertex(source)) && (containsVertex(target)) && (containsVertex(source) && containsVertex(target)) && (addEdge(source, target, edge))",
          "backwardsPathConjunction": "(isInduced) && (vertexSet.contains(edgeSource) && vertexSet.contains(edgeTarget)) && (edge == null)",
          "simplifiedPathConjunction": "isInduced && vertexSet.contains(edgeTarget) && edge == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nisInduced0 = Bool('isInduced0')\nedge1_isNull = Bool('edge1_isNull')\n\nconstraints = [\n  edge1 == edge0,\n  source0 == edgeSource0,\n  target0 == edgeTarget0,\n  And(And(isInduced0, And(vertexSet0.contains(source0), vertexSet0.contains(target0))), edge1_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nisInduced = Symbol('isInduced')\nedge = Symbol('edge')\nedgeSource = Symbol('edgeSource')\nedgeTarget = Symbol('edgeTarget')\nvertexSet = Symbol('vertexSet')\nvertexSet_contains = Symbol('vertexSet_contains')\nnull = Symbol('null')\npath_conjunction = ((isInduced & (vertexSet_contains & vertexSet_contains)) & (Eq(edge, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 489,
          "throwingLine": 495,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/jgrapht-core/org/jgrapht/alg/NeighborIndex.java",
      "methods": [
        {
          "qualifiedSignature": "org.jgrapht.alg.NeighborIndex.Neighbors.removeNeighbor(V)",
          "exception": "throw new IllegalArgumentException(\"Attempting to remove a neighbor that wasn't present\");",
          "pathCojunction": "(count == null)",
          "symbolicPathConjunction": "(count == null)",
          "backwardsPathConjunction": "(neighborCounts.get(v) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0_isNull = Bool('count0_isNull')\n\nconstraints = [\n  count0 == neighborCounts0.get(v0),\n  count0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 215,
          "throwingLine": 218,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    }
  ]
}