{
  "path": "/home/yanghengqin/guava-19.0/",
  "classes": [
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MapConstraintsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MapConstraintsTest.TestConstraint.checkKeyValue(java.lang.String, java.lang.Integer)",
          "exception": "throw new TestKeyException();",
          "pathCojunction": "(TEST_KEY.equals(key))",
          "symbolicPathConjunction": "(TEST_KEY.equals(key))",
          "backwardsPathConjunction": "(TEST_KEY.equals(key))",
          "z3Inputs": "[key0 = \"test\", TEST_KEY0 = \"test\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Int('value0')\nTEST_KEY0 = String('TEST_KEY0')\n\nconstraints = [\n  TEST_KEY0 == StringVal(\"test\"), \n  TEST_KEY0 == key0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\n\"test\"_equals = Symbol('\"test\"_equals')\npath_conjunction = \"test\"_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 70,
          "throwingLine": 72,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapConstraintsTest.Anonymous-e0e389d7-cc87-470c-aea6-6693c98f3d65.keySet()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 656,
          "throwingLine": 657,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapConstraintsTest.Anonymous-1eb675a3-6b66-48b0-84c1-33b56c4fda2d.values()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 659,
          "throwingLine": 660,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/JdkFutureAdaptersTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.JdkFutureAdaptersTest.RuntimeExceptionThrowingFuture.cancel(boolean)",
          "exception": "throw new AssertionFailedError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmayInterruptIfRunning0 = Bool('mayInterruptIfRunning0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.JdkFutureAdaptersTest.RuntimeExceptionThrowingFuture.get()",
          "exception": "throw new RuntimeException(\"expected, should be caught\");",
          "pathCojunction": "(!(count > 0))",
          "symbolicPathConjunction": "(allowGetToComplete.await(1, SECONDS))",
          "backwardsPathConjunction": "(!(count > 0))",
          "simplifiedPathConjunction": "count <= 0",
          "z3Inputs": "[count0 = 0]\n[count0 = -1]\n[count0 = -2]\n[count0 = -3]\n[count0 = -4]\n[count0 = -5]\n[count0 = -6]\n[count0 = -7]\n[count0 = -8]\n[count0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  Not(count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (~((StrictGreaterThan(count, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 178,
          "throwingLine": 184,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.JdkFutureAdaptersTest.RuntimeExceptionThrowingFuture.get()",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count)",
          "pathCojunction": "(count > 0)",
          "symbolicPathConjunction": "(allowGetToComplete.await(1, SECONDS))",
          "backwardsPathConjunction": "(count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  count0 > 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictGreaterThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 178,
          "throwingLine": 183,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.JdkFutureAdaptersTest.RuntimeExceptionThrowingFuture.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionFailedError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 188,
          "throwingLine": 189,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.JdkFutureAdaptersTest.RuntimeExceptionThrowingFuture.isCancelled()",
          "exception": "throw new AssertionFailedError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 193,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/AbstractBiMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractBiMap.EntrySet.iterator()",
          "exception": "throw new IllegalStateException(String.valueOf(\"entry no longer in map\"))",
          "pathCojunction": "(!(contains(this)))",
          "symbolicPathConjunction": "(checkState(contains(this), \"entry no longer in map\"))",
          "backwardsPathConjunction": "(!(contains(this)))",
          "simplifiedPathConjunction": "!contains(this)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  V >> esDelegate0 == delegate.entrySet(),\n  V >> iterator0 == esDelegate0.iterator(),\n  Not(contains(this))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_contains = Symbol('_contains')\npath_conjunction = (~(_contains))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 312,
          "throwingLine": 314,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractBiMap.EntrySet.Anonymous-be6a0944-822f-489e-aea5-3ecd5b59df65.next()",
          "exception": "throw new IllegalStateException(String.valueOf(\"entry no longer in map\"))",
          "pathCojunction": "(!(contains(this)))",
          "symbolicPathConjunction": "(checkState(contains(this), \"entry no longer in map\"))",
          "backwardsPathConjunction": "(!(contains(this)))",
          "simplifiedPathConjunction": "!contains(this)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  V > entry0 == iterator.next(),\n  V > finalEntry0 == entry0,\n  Not(contains(this))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_contains = Symbol('_contains')\npath_conjunction = (~(_contains))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 323,
          "throwingLine": 327,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractBiMap.EntrySet.Anonymous-484c1eb8-bd8f-4710-80e4-88d01d81b867.setValue(V)",
          "exception": "throw new IllegalStateException(String.valueOf(\"entry no longer in map\"))",
          "pathCojunction": "(!(contains(this)))",
          "symbolicPathConjunction": "(checkState(contains(this), \"entry no longer in map\"))",
          "backwardsPathConjunction": "(!(contains(this)))",
          "simplifiedPathConjunction": "!contains(this)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(contains(this))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_contains = Symbol('_contains')\npath_conjunction = (~(_contains))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 334,
          "throwingLine": 336,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractBiMap.EntrySet.Anonymous-484c1eb8-bd8f-4710-80e4-88d01d81b867.setValue(V)",
          "exception": "throw new IllegalStateException(String.valueOf(\"entry no longer in map\"))",
          "pathCojunction": "(!(!(contains(this)))) && (!(value == getValue() || (value != null && value.equals(getValue())))) && (!(Objects.equal(value, get(getKey()))))",
          "symbolicPathConjunction": "(checkState(contains(this), \"entry no longer in map\")) && (!(Objects.equal(value, getValue()))) && (!(Objects.equal(value, getValue()))) && (checkState(Objects.equal(value, get(getKey())), \"entry no longer in map\"))",
          "backwardsPathConjunction": "(!(!(contains(this)))) && (!(value == getValue() || (value != null && value.equals(getValue())))) && (!(Objects.equal(value, get(getKey()))))",
          "simplifiedPathConjunction": "contains(this) && !Objects.equal(value, get(getKey())) && (null == value || !value.equals(getValue())) && get(getKey())Value != value",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  oldValue0 == finalEntry.setValue(value0),\n  And(And(Not(Not(contains(this))), Not(Or(value0 == getValue(), And(Not(value0_isNull), value0.equals(getValue()))))), Not(Objects.equal(value0, get(getKey()))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\n_contains = Symbol('_contains')\n_getValue = Symbol('_getValue')\nvalue_equals = Symbol('value_equals')\nObjects_equal = Symbol('Objects_equal')\n_get = Symbol('_get')\n_getKey = Symbol('_getKey')\nnull = Symbol('null')\npath_conjunction = (((~((~(_contains)))) & (~(((Eq(value, _getValue)) | ((Ne(value, null)) & value_equals))))) & (~(Objects_equal)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 334,
          "throwingLine": 343,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Range.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Range.range(C, com.google.common.collect.BoundType, C, com.google.common.collect.BoundType)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(lowerType == null)) && (upperType == null)",
          "symbolicPathConjunction": "(checkNotNull(lowerType)) && (checkNotNull(upperType))",
          "backwardsPathConjunction": "(!(lowerType == null)) && (upperType == null)",
          "simplifiedPathConjunction": "null == upperType && lowerType != null",
          "z3Inputs": "[upperType0_isNull = True, lowerType0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlowerType0_isNull = Bool('lowerType0_isNull')\nupperType0_isNull = Bool('upperType0_isNull')\n\nconstraints = [\n  And(Not(lowerType0_isNull), upperType0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlowerType = Symbol('lowerType')\nupperType = Symbol('upperType')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(lowerType, null)))) & (Eq(upperType, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 207,
          "throwingLine": 209,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Range.range(C, com.google.common.collect.BoundType, C, com.google.common.collect.BoundType)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(lowerType == null)",
          "symbolicPathConjunction": "(checkNotNull(lowerType))",
          "backwardsPathConjunction": "(lowerType == null)",
          "simplifiedPathConjunction": "lowerType == null",
          "z3Inputs": "[lowerType0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlowerType0_isNull = Bool('lowerType0_isNull')\n\nconstraints = [\n  lowerType0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlowerType = Symbol('lowerType')\nnull = Symbol('null')\npath_conjunction = (Eq(lowerType, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 207,
          "throwingLine": 208,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Range.encloseAll(java.lang.Iterable<C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(values == null)",
          "symbolicPathConjunction": "(checkNotNull(values))",
          "backwardsPathConjunction": "(values == null)",
          "simplifiedPathConjunction": "null == values",
          "z3Inputs": "[values0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalues0_isNull = Bool('values0_isNull')\n\nconstraints = [\n  values0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nnull = Symbol('null')\npath_conjunction = (Eq(values, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 327,
          "throwingLine": 328,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Range.canonical(com.google.common.collect.DiscreteDomain<C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(domain == null)",
          "symbolicPathConjunction": "(checkNotNull(domain))",
          "backwardsPathConjunction": "(domain == null)",
          "simplifiedPathConjunction": "domain == null",
          "z3Inputs": "[domain0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndomain0_isNull = Bool('domain0_isNull')\n\nconstraints = [\n  domain0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndomain = Symbol('domain')\nnull = Symbol('null')\npath_conjunction = (Eq(domain, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 609,
          "throwingLine": 610,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/Primitives.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Primitives.wrap(java.lang.Class<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(type == null)",
          "symbolicPathConjunction": "(checkNotNull(type))",
          "backwardsPathConjunction": "(type == null)",
          "simplifiedPathConjunction": "null == type",
          "z3Inputs": "[type0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\n\nconstraints = [\n  type0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nnull = Symbol('null')\npath_conjunction = (Eq(type, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 114,
          "throwingLine": 115,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Primitives.unwrap(java.lang.Class<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(type == null)",
          "symbolicPathConjunction": "(checkNotNull(type))",
          "backwardsPathConjunction": "(type == null)",
          "simplifiedPathConjunction": "null == type",
          "z3Inputs": "[type0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\n\nconstraints = [\n  type0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nnull = Symbol('null')\npath_conjunction = (Eq(type, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 132,
          "throwingLine": 133,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Ints.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.indexOf(int[], int[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 183,
          "throwingLine": 185,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.indexOf(int[], int[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 183,
          "throwingLine": 184,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.min(int...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 233,
          "throwingLine": 234,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.max(int...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 252,
          "throwingLine": 253,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.join(java.lang.String, int...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 363,
          "throwingLine": 364,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.IntArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 492,
          "throwingLine": 493,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.IntArrayAsList.set(int, java.lang.Integer)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nelement0 = Int('element0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 528,
          "throwingLine": 529,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.IntArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 537,
          "throwingLine": 539,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractBiMap.EntrySet.Anonymous-c1b3f7d4-096e-4220-853c-c896b7e487ec.setValue(V)",
          "exception": "throw new IllegalStateException(String.valueOf(\"entry no longer in map\"))",
          "pathCojunction": "(!(!(contains(this)))) && (!(value == getValue() || (value != null && value.equals(getValue())))) && (!(Objects.equal(value, get(getKey()))))",
          "symbolicPathConjunction": "(checkState(contains(this), \"entry no longer in map\")) && (!(Objects.equal(value, getValue()))) && (!(Objects.equal(value, getValue()))) && (checkState(Objects.equal(value, get(getKey())), \"entry no longer in map\"))",
          "backwardsPathConjunction": "(!(!(contains(this)))) && (!(value == getValue() || (value != null && value.equals(getValue())))) && (!(Objects.equal(value, get(getKey()))))",
          "simplifiedPathConjunction": "contains(this) && !Objects.equal(value, get(getKey())) && (null == value || !value.equals(getValue())) && get(getKey())Value != value",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  oldValue0 == finalEntry.setValue(value0),\n  And(And(Not(Not(contains(this))), Not(Or(value0 == getValue(), And(Not(value0_isNull), value0.equals(getValue()))))), Not(Objects.equal(value0, get(getKey()))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\n_contains = Symbol('_contains')\n_getValue = Symbol('_getValue')\nvalue_equals = Symbol('value_equals')\nObjects_equal = Symbol('Objects_equal')\n_get = Symbol('_get')\n_getKey = Symbol('_getKey')\nnull = Symbol('null')\npath_conjunction = (((~((~(_contains)))) & (~(((Eq(value, _getValue)) | ((Ne(value, null)) & value_equals))))) & (~(Objects_equal)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 330,
          "throwingLine": 339,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractBiMap.EntrySet.Anonymous-c1b3f7d4-096e-4220-853c-c896b7e487ec.setValue(V)",
          "exception": "throw new IllegalStateException(String.valueOf(\"entry no longer in map\"))",
          "pathCojunction": "(!(contains(this)))",
          "symbolicPathConjunction": "(checkState(contains(this), \"entry no longer in map\"))",
          "backwardsPathConjunction": "(!(contains(this)))",
          "simplifiedPathConjunction": "!contains(this)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(contains(this))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_contains = Symbol('_contains')\npath_conjunction = (~(_contains))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 330,
          "throwingLine": 332,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableSortedMultisetFauxverideShim.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.builder()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 44,
          "throwingLine": 45,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 58,
          "throwingLine": 59,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 72,
          "throwingLine": 73,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 86,
          "throwingLine": 87,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 100,
          "throwingLine": 101,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 115,
          "throwingLine": 116,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E, E, E, E...)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 131,
          "throwingLine": 132,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.copyOf(E[])",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 145,
          "throwingLine": 146,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayList(E...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "simplifiedPathConjunction": "elements == null",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 108,
          "throwingLine": 109,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayList(java.lang.Iterable<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 141,
          "throwingLine": 142,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayList(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(list == null)",
          "symbolicPathConjunction": "(newArrayList()) && (Iterators.addAll(list, elements))",
          "backwardsPathConjunction": "(list == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  list0 == new ArrayList<E>(),\n  list0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 158,
          "throwingLine": 160,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayList(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(list == null)) && (elements == null)",
          "symbolicPathConjunction": "(newArrayList()) && (Iterators.addAll(list, elements))",
          "backwardsPathConjunction": "(!(list == null)) && (elements == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlist0_isNull = Bool('list0_isNull')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  list0 == new ArrayList<E>(),\n  And(Not(list0_isNull), elements0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 158,
          "throwingLine": 160,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayListWithCapacity(int)",
          "exception": "throw new IllegalArgumentException(\"initialArraySize\" + \" cannot be negative but was: \" + initialArraySize)",
          "pathCojunction": "(initialArraySize < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(initialArraySize < 0)",
          "simplifiedPathConjunction": "initialArraySize < 0",
          "z3Inputs": "[initialArraySize0 = -1]\n[initialArraySize0 = -2]\n[initialArraySize0 = -3]\n[initialArraySize0 = -4]\n[initialArraySize0 = -5]\n[initialArraySize0 = -6]\n[initialArraySize0 = -7]\n[initialArraySize0 = -8]\n[initialArraySize0 = -9]\n[initialArraySize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninitialArraySize0 = Int('initialArraySize0')\n\nconstraints = [\n  initialArraySize0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninitialArraySize = Symbol('initialArraySize', integer=True)\npath_conjunction = (StrictLessThan(initialArraySize, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 183,
          "throwingLine": 184,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayListWithExpectedSize(int)",
          "exception": "throw new IllegalArgumentException(\"arraySize\" + \" cannot be negative but was: \" + estimatedSize)",
          "pathCojunction": "(estimatedSize < 0)",
          "symbolicPathConjunction": "(checkNonnegative(arraySize, \"arraySize\"))",
          "backwardsPathConjunction": "(estimatedSize < 0)",
          "simplifiedPathConjunction": "estimatedSize < 0",
          "z3Inputs": "[estimatedSize0 = -1]\n[estimatedSize0 = -2]\n[estimatedSize0 = -3]\n[estimatedSize0 = -4]\n[estimatedSize0 = -5]\n[estimatedSize0 = -6]\n[estimatedSize0 = -7]\n[estimatedSize0 = -8]\n[estimatedSize0 = -9]\n[estimatedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nestimatedSize0 = Int('estimatedSize0')\n\nconstraints = [\n  estimatedSize0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nestimatedSize = Symbol('estimatedSize', integer=True)\npath_conjunction = (StrictLessThan(estimatedSize, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 205,
          "throwingLine": 206,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.OnePlusArrayList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 297,
          "throwingLine": 299,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.partition(java.util.List<T>, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(list == null)) && (!(size > 0))",
          "symbolicPathConjunction": "(checkNotNull(list)) && (checkArgument(size > 0))",
          "backwardsPathConjunction": "(!(list == null)) && (!(size > 0))",
          "simplifiedPathConjunction": "size <= 0 && list != null",
          "z3Inputs": "[size0 = 0, list0_isNull = False]\n[size0 = -1, list0_isNull = False]\n[size0 = -2, list0_isNull = False]\n[size0 = -3, list0_isNull = False]\n[size0 = -4, list0_isNull = False]\n[size0 = -5, list0_isNull = False]\n[size0 = -6, list0_isNull = False]\n[size0 = -7, list0_isNull = False]\n[size0 = -8, list0_isNull = False]\n[size0 = -9, list0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  And(Not(list0_isNull), Not(size0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlist = Symbol('list')\nsize = Symbol('size', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(list, null)))) & (~((StrictGreaterThan(size, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 646,
          "throwingLine": 648,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.partition(java.util.List<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(list == null)",
          "symbolicPathConjunction": "(checkNotNull(list))",
          "backwardsPathConjunction": "(list == null)",
          "simplifiedPathConjunction": "list == null",
          "z3Inputs": "[list0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  list0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlist = Symbol('list')\nnull = Symbol('null')\npath_conjunction = (Eq(list, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 646,
          "throwingLine": 647,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.Partition.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 664,
          "throwingLine": 665,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.charactersOf(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 695,
          "throwingLine": 696,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.StringAsImmutableList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size()))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size())",
          "symbolicPathConjunction": "(checkPositionIndexes(fromIndex, toIndex, size()))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size())",
          "simplifiedPathConjunction": "fromIndex > toIndex || size() < toIndex || fromIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\n\nconstraints = [\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\n_size = Symbol('_size')\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 719,
          "throwingLine": 720,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.StringAsImmutableList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 730,
          "throwingLine": 731,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.charactersOf(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 753,
          "throwingLine": 754,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.CharSequenceAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 765,
          "throwingLine": 766,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size()))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size())",
          "symbolicPathConjunction": "(checkPositionIndexes(fromIndex, toIndex, size()))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size())",
          "simplifiedPathConjunction": "fromIndex > toIndex || size() < toIndex || fromIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\n\nconstraints = [\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\n_size = Symbol('_size')\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 860,
          "throwingLine": 861,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.listIterator(int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(forwardIterator.nextIndex(), size, \"index\"))",
          "pathCojunction": "(!(index < 0 || index > forwardList.size())) && (forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())",
          "symbolicPathConjunction": "((size()) && (checkPositionIndex(index, size))) && (hasNext()) && ((size()) && (checkPositionIndex(index, size)))",
          "backwardsPathConjunction": "(!(index < 0 || index > forwardList.size())) && (forwardList.listIterator(forwardList.size() - index).nextIndex() < 0 || forwardList.listIterator(forwardList.size() - index).nextIndex() > forwardList.size())",
          "simplifiedPathConjunction": "forwardList.size() >= index && index >= 0 && (forwardList.listIterator(forwardList.size() - index).nextIndex() > forwardList.size() || forwardList.listIterator(forwardList.size() - index).nextIndex() < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nstart0 = Int('start0')\ncanRemoveOrSet0 = Bool('canRemoveOrSet0')\n\nconstraints = [\n  start0 == forwardList0.size() - index0,\n  forwardIterator0 == forwardList0.listIterator(start0),\n  And(Not(Or(index0 < 0, index0 > forwardList0.size())), Or(forwardIterator0.nextIndex() < 0, forwardIterator0.nextIndex() > forwardList0.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nforwardList = Symbol('forwardList')\nforwardList_size = Symbol('forwardList_size')\nforwardList_listIterator_nextIndex = Symbol('forwardList_listIterator_nextIndex')\nforwardList_listIterator = Symbol('forwardList_listIterator')\npath_conjunction = ((~(((StrictLessThan(index, 0)) | (StrictGreaterThan(index, forwardList_size))))) & ((StrictLessThan(forwardList_listIterator_nextIndex, 0)) | (StrictGreaterThan(forwardList_listIterator_nextIndex, forwardList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 871,
          "throwingLine": 874,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.listIterator(int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(index, size, \"index\"))",
          "pathCojunction": "(index < 0 || index > forwardList.size())",
          "symbolicPathConjunction": "((size()) && (checkPositionIndex(index, size)))",
          "backwardsPathConjunction": "(index < 0 || index > forwardList.size())",
          "simplifiedPathConjunction": "forwardList.size() < index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 > forwardList0.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nforwardList = Symbol('forwardList')\nforwardList_size = Symbol('forwardList_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (StrictGreaterThan(index, forwardList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 871,
          "throwingLine": 872,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.listIterator(int)",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(index < 0 || index > forwardList.size())) && (!(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())) && (!(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())) && (!(canRemoveOrSet))",
          "symbolicPathConjunction": "((size()) && (checkPositionIndex(index, size))) && (hasNext()) && ((size()) && (checkPositionIndex(index, size))) && (hasPrevious()) && (nextIndex()) && (checkState(canRemove, \"no calls to next() since the last call to remove()\"))",
          "backwardsPathConjunction": "(!(index < 0 || index > forwardList.size())) && (!(forwardList.listIterator(forwardList.size() - index).nextIndex() < 0 || forwardList.listIterator(forwardList.size() - index).nextIndex() > forwardList.size())) && (!(forwardList.listIterator(forwardList.size() - index).nextIndex() < 0 || forwardList.listIterator(forwardList.size() - index).nextIndex() > forwardList.size())) && (!(canRemoveOrSet))",
          "simplifiedPathConjunction": "forwardList.listIterator(forwardList.size() - index).nextIndex() >= 0 && forwardList.size() >= index && index >= 0 && forwardList.listIterator(forwardList.size() - index).nextIndex() <= forwardList.size() && !canRemoveOrSet",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nstart0 = Int('start0')\ncanRemoveOrSet0 = Bool('canRemoveOrSet0')\n\nconstraints = [\n  start0 == forwardList0.size() - index0,\n  forwardIterator0 == forwardList0.listIterator(start0),\n  And(And(And(Not(Or(index0 < 0, index0 > forwardList0.size())), Not(Or(forwardIterator0.nextIndex() < 0, forwardIterator0.nextIndex() > forwardList0.size()))), Not(Or(forwardIterator0.nextIndex() < 0, forwardIterator0.nextIndex() > forwardList0.size()))), Not(canRemoveOrSet0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nforwardList = Symbol('forwardList')\ncanRemoveOrSet = Symbol('canRemoveOrSet')\nforwardList_size = Symbol('forwardList_size')\nforwardList_listIterator_nextIndex = Symbol('forwardList_listIterator_nextIndex')\nforwardList_listIterator = Symbol('forwardList_listIterator')\npath_conjunction = ((((~(((StrictLessThan(index, 0)) | (StrictGreaterThan(index, forwardList_size))))) & (~(((StrictLessThan(forwardList_listIterator_nextIndex, 0)) | (StrictGreaterThan(forwardList_listIterator_nextIndex, forwardList_size)))))) & (~(((StrictLessThan(forwardList_listIterator_nextIndex, 0)) | (StrictGreaterThan(forwardList_listIterator_nextIndex, forwardList_size)))))) & (~(canRemoveOrSet)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 871,
          "throwingLine": 874,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.Anonymous-ef396c29-6456-4483-a111-855938c98f89.nextIndex()",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(forwardIterator.nextIndex(), size, \"index\"))",
          "pathCojunction": "(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())",
          "symbolicPathConjunction": "((size()) && (checkPositionIndex(index, size)))",
          "backwardsPathConjunction": "(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())",
          "simplifiedPathConjunction": "forwardIterator.nextIndex() > forwardList.size() || forwardIterator.nextIndex() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Or(forwardIterator.nextIndex() < 0, forwardIterator.nextIndex() > forwardList0.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nforwardList = Symbol('forwardList')\nforwardIterator_nextIndex = Symbol('forwardIterator_nextIndex')\nforwardList_size = Symbol('forwardList_size')\npath_conjunction = ((StrictLessThan(forwardIterator_nextIndex, 0)) | (StrictGreaterThan(forwardIterator_nextIndex, forwardList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 905,
          "throwingLine": 906,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.Anonymous-2ec0b6c9-4568-4efd-9a10-6530daee6635.previousIndex()",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(forwardIterator.nextIndex(), size, \"index\"))",
          "pathCojunction": "(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())",
          "symbolicPathConjunction": "(nextIndex())",
          "backwardsPathConjunction": "(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())",
          "simplifiedPathConjunction": "forwardIterator.nextIndex() > forwardList.size() || forwardIterator.nextIndex() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Or(forwardIterator.nextIndex() < 0, forwardIterator.nextIndex() > forwardList0.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nforwardList = Symbol('forwardList')\nforwardIterator_nextIndex = Symbol('forwardIterator_nextIndex')\nforwardList_size = Symbol('forwardList_size')\npath_conjunction = ((StrictLessThan(forwardIterator_nextIndex, 0)) | (StrictGreaterThan(forwardIterator_nextIndex, forwardList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 919,
          "throwingLine": 920,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.Anonymous-5264cca8-0c64-48a4-b478-65ef2a3e4101.set(T)",
          "exception": "throw new IllegalStateException()",
          "pathCojunction": "(!(canRemoveOrSet))",
          "symbolicPathConjunction": "(checkState(canRemoveOrSet))",
          "backwardsPathConjunction": "(!(canRemoveOrSet))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(canRemoveOrSet)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~(canRemoveOrSet))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 931,
          "throwingLine": 932,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ReverseNaturalOrdering.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ReverseNaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(left == null)",
          "symbolicPathConjunction": "(checkNotNull(left))",
          "backwardsPathConjunction": "(left == null)",
          "simplifiedPathConjunction": "left == null",
          "z3Inputs": "[left0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\n\nconstraints = [\n  left0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nleft = Symbol('left')\nnull = Symbol('null')\npath_conjunction = (Eq(left, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 33,
          "throwingLine": 34,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/base/PredicatesTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.PredicatesTest.Anonymous-0be4f9e2-860e-413c-8b5d-38ee85321c52.apply(java.lang.Integer)",
          "exception": "throw new AssertionFailedError(\"This predicate should never have been evaluated\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 54,
          "throwingLine": 55,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.PredicatesTest.CollectionThatThrowsNPE.contains(java.lang.Object)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(element == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(element))",
          "backwardsPathConjunction": "(element == null)",
          "simplifiedPathConjunction": "element == null",
          "z3Inputs": "[element0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  element0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nnull = Symbol('null')\npath_conjunction = (Eq(element, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 727,
          "throwingLine": 728,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.PredicatesTest.CollectionThatThrowsCCE.contains(java.lang.Object)",
          "exception": "throw new ClassCastException(\"\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 741,
          "throwingLine": 742,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/LinkedListMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 348,
          "throwingLine": 349,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 354,
          "throwingLine": 355,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 364,
          "throwingLine": 365,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.hasPrevious()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 379,
          "throwingLine": 380,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.previous()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 385,
          "throwingLine": 386,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.set(java.util.Map.Entry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 405,
          "throwingLine": 406,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.add(java.util.Map.Entry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 410,
          "throwingLine": 411,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.DistinctKeyIterator.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 434,
          "throwingLine": 435,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.DistinctKeyIterator.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 440,
          "throwingLine": 441,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.DistinctKeyIterator.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 452,
          "throwingLine": 453,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFutureBenchmarks.OldAbstractFuture.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new TimeoutException(\"Timeout waiting for task.\")",
          "pathCojunction": "(!(tryAcquireSharedNanos(-1, unit.toNanos(timeout))))",
          "symbolicPathConjunction": "(!tryAcquireSharedNanos(-1, nanos))",
          "backwardsPathConjunction": "(!(tryAcquireSharedNanos(-1, unit.toNanos(timeout))))",
          "simplifiedPathConjunction": "!tryAcquireSharedNanos(-1, unit.toNanos(timeout))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  sync0 == new Sync<V>(),\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  Not(tryAcquireSharedNanos(-1, unit0.toNanos(timeout0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntimeout = Symbol('timeout')\nunit = Symbol('unit')\n_tryAcquireSharedNanos = Symbol('_tryAcquireSharedNanos')\nunit_toNanos = Symbol('unit_toNanos')\npath_conjunction = (~(_tryAcquireSharedNanos))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 121,
          "throwingLine": 122,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFutureBenchmarks.OldAbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Executor was null.\"))",
          "pathCojunction": "(!(listener == null)) && (exec == null)",
          "symbolicPathConjunction": "(executionList.add(listener, exec))",
          "backwardsPathConjunction": "(!(listener == null)) && (exec == null)",
          "simplifiedPathConjunction": "exec == null && listener != null",
          "z3Inputs": "[exec0_isNull = True, listener0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlistener0_isNull = Bool('listener0_isNull')\nexec0_isNull = Bool('exec0_isNull')\n\nconstraints = [\n  And(Not(listener0_isNull), exec0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlistener = Symbol('listener')\nexec = Symbol('exec')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(listener, null)))) & (Eq(exec, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 195,
          "throwingLine": 196,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFutureBenchmarks.OldAbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Runnable was null.\"))",
          "pathCojunction": "(listener == null)",
          "symbolicPathConjunction": "(executionList.add(listener, exec))",
          "backwardsPathConjunction": "(listener == null)",
          "simplifiedPathConjunction": "listener == null",
          "z3Inputs": "[listener0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlistener0_isNull = Bool('listener0_isNull')\n\nconstraints = [\n  listener0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlistener = Symbol('listener')\nnull = Symbol('null')\npath_conjunction = (Eq(listener, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 195,
          "throwingLine": 196,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/ListenableFutureTask.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ListenableFutureTask.addListener(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Runnable was null.\"))",
          "pathCojunction": "(listener == null)",
          "symbolicPathConjunction": "(executionList.add(listener, exec))",
          "backwardsPathConjunction": "(listener == null)",
          "simplifiedPathConjunction": "listener == null",
          "z3Inputs": "[listener0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlistener0_isNull = Bool('listener0_isNull')\n\nconstraints = [\n  listener0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlistener = Symbol('listener')\nnull = Symbol('null')\npath_conjunction = (Eq(listener, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ListenableFutureTask.addListener(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Executor was null.\"))",
          "pathCojunction": "(!(listener == null)) && (exec == null)",
          "symbolicPathConjunction": "(executionList.add(listener, exec))",
          "backwardsPathConjunction": "(!(listener == null)) && (exec == null)",
          "simplifiedPathConjunction": "exec == null && listener != null",
          "z3Inputs": "[exec0_isNull = True, listener0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlistener0_isNull = Bool('listener0_isNull')\nexec0_isNull = Bool('exec0_isNull')\n\nconstraints = [\n  And(Not(listener0_isNull), exec0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlistener = Symbol('listener')\nexec = Symbol('exec')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(listener, null)))) & (Eq(exec, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/collect/testing/features/CollectionSize.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.features.CollectionSize.getNumElements()",
          "exception": "throw new IllegalStateException(\"A compound CollectionSize doesn't specify a number of elements.\");",
          "pathCojunction": "(numElements == null)",
          "symbolicPathConjunction": "(numElements == null)",
          "backwardsPathConjunction": "(numElements == null)",
          "simplifiedPathConjunction": "null == numElements",
          "z3Inputs": "[numElements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumElements0_isNull = Bool('numElements0_isNull')\n\nconstraints = [\n  numElements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnumElements = Symbol('numElements')\nnull = Symbol('null')\npath_conjunction = (Eq(numElements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 89,
          "throwingLine": 91,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/CacheExpirationTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testExpiration_expireAfterWrite()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 49,
          "throwingLine": 53,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testExpiration_expireAfterWrite()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 49,
          "throwingLine": 53,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testExpiration_expireAfterAccess()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 61,
          "throwingLine": 65,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testExpiration_expireAfterAccess()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 61,
          "throwingLine": 65,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testExpiringGet_expireAfterWrite()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 98,
          "throwingLine": 102,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testExpiringGet_expireAfterWrite()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 98,
          "throwingLine": 102,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testExpiringGet_expireAfterAccess()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 110,
          "throwingLine": 114,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testExpiringGet_expireAfterAccess()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 110,
          "throwingLine": 114,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testRemovalScheduler_expireAfterWrite()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 212,
          "throwingLine": 216,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testRemovalScheduler_expireAfterWrite()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 212,
          "throwingLine": 216,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testRemovalScheduler_expireAfterAccess()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 224,
          "throwingLine": 228,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testRemovalScheduler_expireAfterAccess()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 224,
          "throwingLine": 228,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testRemovalScheduler_expireAfterBoth()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(EXPIRING_TIME, MILLISECONDS).expireAfterWrite(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 236,
          "throwingLine": 240,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheExpirationTest.testRemovalScheduler_expireAfterBoth()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(EXPIRING_TIME, MILLISECONDS).expireAfterWrite(EXPIRING_TIME, MILLISECONDS).removalListener(removalListener).ticker(ticker).build(loader))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nEXPIRING_TIME0 = Int('EXPIRING_TIME0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  ticker0 == new FakeTicker(),\n  java.lang.Integer > removalListener0 == new CountingRemovalListener<K, V>(),\n  loader0 == new WatchedCreatorLoader(),\n  EXPIRING_TIME0 == 1000,\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 236,
          "throwingLine": 240,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/CacheBuilderTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToLive_small()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 271,
          "throwingLine": 272,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToLive_small()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 271,
          "throwingLine": 272,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToIdle_small()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 296,
          "throwingLine": 297,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToIdle_small()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 296,
          "throwingLine": 297,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToIdleAndToLive()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).expireAfterAccess(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 313,
          "throwingLine": 314,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToIdleAndToLive()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).expireAfterAccess(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 313,
          "throwingLine": 314,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.Anonymous-20761715-c9e0-4b75-8ee5-f7007ca58fd0.load(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(value) && (count > 0)",
          "symbolicPathConjunction": "(shouldWait.get()) && (shouldWait.get()) && (computingLatch.await())",
          "backwardsPathConjunction": "(value) && (count > 0)",
          "simplifiedPathConjunction": "value && count > 0",
          "z3Inputs": "[count0 = 1, value0 = True]\n[value0 = True, count0 = 2]\n[value0 = True, count0 = 3]\n[value0 = True, count0 = 4]\n[value0 = True, count0 = 5]\n[value0 = True, count0 = 6]\n[value0 = True, count0 = 7]\n[value0 = True, count0 = 8]\n[value0 = True, count0 = 9]\n[value0 = True, count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Bool('value0')\ncount0 = Int('count0')\n\nconstraints = [\n  And(value0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\ncount = Symbol('count', integer=True)\npath_conjunction = (value & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 392,
          "throwingLine": 394,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.Anonymous-7ee87e8e-168e-4e8c-9e23-bda92f9f72d3.load(java.lang.String)",
          "exception": "throw new RuntimeException(\"fake exception for test\");",
          "pathCojunction": "(behavior == 0)",
          "symbolicPathConjunction": "(behavior == 0) && (exceptionCount.incrementAndGet())",
          "backwardsPathConjunction": "(random.nextInt(4) == 0)",
          "simplifiedPathConjunction": "random.nextInt(4) == 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nbehavior0 = Int('behavior0')\nvalue0 = Int('value0')\n\nconstraints = [\n  behavior0 == random.nextInt(4),\n  behavior0 == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrandom_nextInt = Symbol('random_nextInt')\npath_conjunction = (Eq(random_nextInt, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 541,
          "throwingLine": 545,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.DelayingIdentityLoader.load(T)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(value) && (count > 0)",
          "symbolicPathConjunction": "(shouldWait.get()) && (shouldWait.get()) && (delayLatch.await())",
          "backwardsPathConjunction": "(value) && (count > 0)",
          "simplifiedPathConjunction": "value && count > 0",
          "z3Inputs": "[count0 = 1, value0 = True]\n[value0 = True, count0 = 2]\n[value0 = True, count0 = 3]\n[value0 = True, count0 = 4]\n[value0 = True, count0 = 5]\n[value0 = True, count0 = 6]\n[value0 = True, count0 = 7]\n[value0 = True, count0 = 8]\n[value0 = True, count0 = 9]\n[value0 = True, count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = Bool('value0')\ncount0 = Int('count0')\n\nconstraints = [\n  And(value0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\ncount = Symbol('count', integer=True)\npath_conjunction = (value & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 625,
          "throwingLine": 627,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/MapConstraints.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MapConstraints.NotNullMapConstraint.checkKeyValue(java.lang.Object, java.lang.Object)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 69,
          "throwingLine": 70,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapConstraints.NotNullMapConstraint.checkKeyValue(java.lang.Object, java.lang.Object)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 69,
          "throwingLine": 71,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Chars.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.indexOf(char[], char[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 176,
          "throwingLine": 178,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.indexOf(char[], char[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 176,
          "throwingLine": 177,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.min(char...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 226,
          "throwingLine": 227,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.max(char...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 245,
          "throwingLine": 246,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.join(java.lang.String, char...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 319,
          "throwingLine": 320,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.CharArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 448,
          "throwingLine": 449,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.CharArrayAsList.set(int, java.lang.Character)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 485,
          "throwingLine": 486,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.CharArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 494,
          "throwingLine": 496,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableEntry.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableEntry.setValue(V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 51,
          "throwingLine": 52,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/MoreExecutors.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.MoreExecutors.DirectExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError()",
          "pathCojunction": "(true)",
          "symbolicPathConjunction": "(unit.toNanos(timeout))",
          "backwardsPathConjunction": "(true)",
          "simplifiedPathConjunction": "true",
          "z3Inputs": "[timeout0 = -9223372036854775808]\n[timeout0 = 0]\n[timeout0 = -1]\n[timeout0 = -2]\n[timeout0 = -3]\n[timeout0 = -4]\n[timeout0 = -5]\n[timeout0 = -6]\n[timeout0 = -7]\n[timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = True\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 349,
          "throwingLine": 350,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/UnmodifiableSortedMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.UnmodifiableSortedMultiset.pollFirstEntry()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 83,
          "throwingLine": 84,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.UnmodifiableSortedMultiset.pollLastEntry()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 88,
          "throwingLine": 89,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/EmptyCachesTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.EmptyCachesTest.Anonymous-b2499c49-353b-4aa1-ab7d-d09a493d894d.apply(com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>)",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(builder.build(identityLoader()))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 356,
          "throwingLine": 357,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.EmptyCachesTest.Anonymous-b2499c49-353b-4aa1-ab7d-d09a493d894d.apply(com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>)",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(builder.build(identityLoader()))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 356,
          "throwingLine": 357,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/cache/super/com/google/common/cache/TestingCacheLoaders.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.TestingCacheLoaders.Anonymous-5828556d-236b-4b4e-b489-757d1e613707.load(K)",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 79,
          "throwingLine": 80,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.TestingCacheLoaders.Anonymous-738d87f2-430a-4517-8900-80f4d822b402.load(K)",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 92,
          "throwingLine": 93,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/SingletonImmutableTable.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.SingletonImmutableTable.column(C)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(columnKey == null)",
          "symbolicPathConjunction": "(checkNotNull(columnKey))",
          "backwardsPathConjunction": "(columnKey == null)",
          "simplifiedPathConjunction": "columnKey == null",
          "z3Inputs": "[columnKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  columnKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncolumnKey = Symbol('columnKey')\nnull = Symbol('null')\npath_conjunction = (Eq(columnKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 47,
          "throwingLine": 48,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/CacheEvictionTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheEvictionTest.testUpdateRecency_onGet()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().maximumSize(MAX_SIZE).build(loader))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nMAX_SIZE0 = Int('MAX_SIZE0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  loader0 == new IdentityLoader<T>(),\n  MAX_SIZE0 == 100,\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 260,
          "throwingLine": 262,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheEvictionTest.testUpdateRecency_onGet()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().maximumSize(MAX_SIZE).build(loader))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nMAX_SIZE0 = Int('MAX_SIZE0')\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  loader0 == new IdentityLoader<T>(),\n  MAX_SIZE0 == 100,\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 260,
          "throwingLine": 262,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheEvictionTest.testUpdateRecency_onInvalidate()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().maximumSize(MAX_SIZE).concurrencyLevel(1).build(loader))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nMAX_SIZE0 = Int('MAX_SIZE0')\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  loader0 == new IdentityLoader<T>(),\n  MAX_SIZE0 == 100,\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 273,
          "throwingLine": 275,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheEvictionTest.testUpdateRecency_onInvalidate()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().maximumSize(MAX_SIZE).concurrencyLevel(1).build(loader))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nMAX_SIZE0 = Int('MAX_SIZE0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  loader0 == new IdentityLoader<T>(),\n  MAX_SIZE0 == 100,\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 273,
          "throwingLine": 275,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/UnsignedLongs.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLongs.min(long...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 91,
          "throwingLine": 92,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLongs.max(long...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 112,
          "throwingLine": 113,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLongs.join(java.lang.String, long...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 133,
          "throwingLine": 134,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String)",
          "exception": "throw new NumberFormatException(\"empty string\")",
          "pathCojunction": "(!(s == null)) && (s.length() == 0)",
          "symbolicPathConjunction": "(parseUnsignedLong(s, 10))",
          "backwardsPathConjunction": "(!(s == null)) && (s.length() == 0)",
          "simplifiedPathConjunction": "s.length() == 0 && null != s",
          "z3Inputs": "[s0 = \"\", s0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  And(Not(s0_isNull), Length(s0) == 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\ns_length = Symbol('s_length')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(s, null)))) & (Eq(s_length, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 258,
          "throwingLine": 259,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(parseUnsignedLong(s, 10))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 258,
          "throwingLine": 259,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nradix0 = Int('radix0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 302,
          "throwingLine": 303,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, int)",
          "exception": "throw new NumberFormatException(\"illegal radix: \" + radix);",
          "pathCojunction": "(!(s == null)) && (!(s.length() == 0)) && (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)",
          "symbolicPathConjunction": "(checkNotNull(s)) && (!(s.length() == 0)) && (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)",
          "backwardsPathConjunction": "(!(s == null)) && (!(s.length() == 0)) && (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)",
          "z3Inputs": "[Character_MIN_RADIX0 = 1,\n s0 = \"A\",\n Character_MAX_RADIX0 = 0,\n radix0 = 0,\n s0_isNull = False]\n[radix0 = -1,\n s0_isNull = False,\n s0 = \"B\",\n Character_MAX_RADIX0 = -2]\n[Character_MIN_RADIX0 = 0,\n radix0 = -2,\n s0_isNull = False,\n s0 = \"C\"]\n[radix0 = -2,\n s0_isNull = False,\n s0 = \"D\",\n Character_MAX_RADIX0 = -3]\n[radix0 = -3,\n s0_isNull = False,\n s0 = \"E\",\n Character_MAX_RADIX0 = -4]\n[radix0 = -4,\n s0_isNull = False,\n s0 = \"F\",\n Character_MAX_RADIX0 = -5]\n[radix0 = -5,\n s0_isNull = False,\n s0 = \"G\",\n Character_MAX_RADIX0 = -6]\n[radix0 = -6,\n s0_isNull = False,\n s0 = \"H\",\n Character_MAX_RADIX0 = -7]\n[Character_MIN_RADIX0 = -1,\n radix0 = -7,\n s0_isNull = False,\n s0 = \"I\",\n Character_MAX_RADIX0 = -8]\n[Character_MIN_RADIX0 = -2,\n radix0 = -8,\n s0_isNull = False,\n s0 = \"J\",\n Character_MAX_RADIX0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nradix0 = Int('radix0')\nCharacter_MIN_RADIX0 = Int('Character_MIN_RADIX0')\nCharacter_MAX_RADIX0 = Int('Character_MAX_RADIX0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  And(And(Not(s0_isNull), Not(Length(s0) == 0)), Or(radix0 < Character_MIN_RADIX0, radix0 > Character_MAX_RADIX0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 302,
          "throwingLine": 308,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, int)",
          "exception": "throw new NumberFormatException(\"empty string\");",
          "pathCojunction": "(!(s == null)) && (s.length() == 0)",
          "symbolicPathConjunction": "(checkNotNull(s)) && (s.length() == 0)",
          "backwardsPathConjunction": "(!(s == null)) && (s.length() == 0)",
          "simplifiedPathConjunction": "s.length() == 0 && null != s",
          "z3Inputs": "[s0 = \"\", s0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nradix0 = Int('radix0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  And(Not(s0_isNull), Length(s0) == 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\ns_length = Symbol('s_length')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(s, null)))) & (Eq(s_length, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 302,
          "throwingLine": 305,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, int)",
          "exception": "throw new NumberFormatException(s);",
          "pathCojunction": "(!(s == null)) && (!(s.length() == 0)) && (!(radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)) && (pos < s.length()) && (digit == -1)",
          "symbolicPathConjunction": "(checkNotNull(s)) && (!(s.length() == 0)) && (!(radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)) && (pos < s.length()) && (digit == -1)",
          "backwardsPathConjunction": "(!(s == null)) && (!(s.length() == 0)) && (!(radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)) && (0 < s.length()) && (Character.digit(s.charAt(pos), radix) == -1)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nradix0 = Int('radix0')\nCharacter_MIN_RADIX0 = Int('Character_MIN_RADIX0')\nCharacter_MAX_RADIX0 = Int('Character_MAX_RADIX0')\nmax_safe_pos0 = Int('max_safe_pos0')\nvalue0 = Int('value0')\npos0 = Int('pos0')\ndigit0 = Int('digit0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  maxSafeDigits0 == new int[Character.MAX_RADIX + 1],\n  max_safe_pos0 == maxSafeDigits0[radix0] - 1,\n  value0 == 0,\n  pos0 == 0,\n  digit0 == Character.digit(s0.charAt(pos0), radix0),\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  And(And(And(And(Not(s0_isNull), Not(Length(s0) == 0)), Not(Or(radix0 < Character_MIN_RADIX0, radix0 > Character_MAX_RADIX0))), pos0 < Length(s0)), digit0 == -1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 302,
          "throwingLine": 316,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, int)",
          "exception": "throw new NumberFormatException(\"Too large for unsigned long: \" + s);",
          "pathCojunction": "(!(s == null)) && (!(s.length() == 0)) && (!(radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)) && (pos < s.length()) && (!(digit == -1)) && (!(value >= 0)) && (pos > max_safe_pos && true)",
          "symbolicPathConjunction": "(checkNotNull(s)) && (!(s.length() == 0)) && (!(radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)) && (pos < s.length()) && (!(digit == -1)) && (!(current >= 0)) && (pos > max_safe_pos && true)",
          "backwardsPathConjunction": "(!(s == null)) && (!(s.length() == 0)) && (!(radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)) && (0 < s.length()) && (!(Character.digit(s.charAt(pos), radix) == -1)) && (!(0 >= 0)) && (0 > maxSafeDigits[radix] - 1 && true)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nradix0 = Int('radix0')\nCharacter_MIN_RADIX0 = Int('Character_MIN_RADIX0')\nCharacter_MAX_RADIX0 = Int('Character_MAX_RADIX0')\nmax_safe_pos0 = Int('max_safe_pos0')\nvalue0 = Int('value0')\npos0 = Int('pos0')\ndigit0 = Int('digit0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  maxSafeDigits0 == new int[Character.MAX_RADIX + 1],\n  max_safe_pos0 == maxSafeDigits0[radix0] - 1,\n  value0 == 0,\n  pos0 == 0,\n  digit0 == Character.digit(s0.charAt(pos0), radix0),\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(And(Not(s0_isNull), Not(Length(s0) == 0)), Not(Or(radix0 < Character_MIN_RADIX0, radix0 > Character_MAX_RADIX0))), pos0 < Length(s0)), Not(digit0 == -1)), Not(value0 >= 0)), And(pos0 > max_safe_pos0, True))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 302,
          "throwingLine": 319,
          "isStatic": true,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularContiguousSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.RegularContiguousSet.intersection(com.google.common.collect.ContiguousSet<C>)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(other == null)) && (!(this.domain.equals(other.domain)))",
          "symbolicPathConjunction": "(checkNotNull(other)) && (checkArgument(this.domain.equals(other.domain)))",
          "backwardsPathConjunction": "(!(other == null)) && (!(this.domain.equals(other.domain)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  And(Not(other0_isNull), Not(this.domain.equals(other0.domain)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((~((Eq(other, null)))) & (~(this.domain_equals)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 131,
          "throwingLine": 133,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.RegularContiguousSet.intersection(com.google.common.collect.ContiguousSet<C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 131,
          "throwingLine": 132,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/TestThread.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.TestThread.tearDown()",
          "exception": "throw (AssertionFailedError) new AssertionFailedError(\"Uncaught throwable in \" + getName()).initCause(uncaughtThrowable);",
          "pathCojunction": "(uncaughtThrowable != null)",
          "symbolicPathConjunction": "(uncaughtThrowable != null)",
          "backwardsPathConjunction": "(uncaughtThrowable != null)",
          "simplifiedPathConjunction": "null != uncaughtThrowable",
          "z3Inputs": "[uncaughtThrowable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nuncaughtThrowable0_isNull = Bool('uncaughtThrowable0_isNull')\n\nconstraints = [\n  Not(uncaughtThrowable0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nuncaughtThrowable = Symbol('uncaughtThrowable')\nnull = Symbol('null')\npath_conjunction = (Ne(uncaughtThrowable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 77,
          "throwingLine": 82,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/java/nio/charset/Charset.java",
      "methods": [
        {
          "qualifiedSignature": "java.nio.charset.Charset.forName(java.lang.String)",
          "exception": "throw new UnsupportedCharsetException(charsetName);",
          "pathCojunction": "(!(charsetName == null)) && (!(length == 0)) && (!(i < length)) && (!(charset != null))",
          "symbolicPathConjunction": "(!(charsetName == null)) && (!(length == 0)) && (!(i < length)) && (!(charset != null))",
          "backwardsPathConjunction": "(!(charsetName == null)) && (!(charsetName.length() == 0)) && (!(0 < charsetName.length())) && (!(AVAILABLE_CHARSETS.get(charsetName.toUpperCase()) != null))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncharsetName0 = String('charsetName0')\nlength0 = Int('length0')\ni0 = Int('i0')\ncharsetName0_isNull = Bool('charsetName0_isNull')\ncharset0_isNull = Bool('charset0_isNull')\n\nconstraints = [\n  length0 == Length(charsetName0),\n  i0 == 0,\n  java.nio.charset.Charset > AVAILABLE_CHARSETS0 == new TreeMap<String, Charset>(),\n  charset0 == AVAILABLE_CHARSETS0.get(charsetName0.toUpperCase()),\n  And(And(And(Not(charsetName0_isNull), Not(length0 == 0)), Not(i0 < length0)), Not(Not(charset0_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncharsetName = Symbol('charsetName')\ncharsetName_length = Symbol('charsetName_length')\nnew TreeMap<String, Charset>()_get = Symbol('new TreeMap<String, Charset>()_get')\ncharsetName_toUpperCase = Symbol('charsetName_toUpperCase')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(charsetName, null)))) & (~((Eq(charsetName_length, 0))))) & (~((StrictLessThan(0, charsetName_length))))) & (~((Ne(new TreeMap<String, Charset>()_get, null)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 41,
          "throwingLine": 66,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "java.nio.charset.Charset.forName(java.lang.String)",
          "exception": "throw new IllegalCharsetNameException(charsetName);",
          "pathCojunction": "(!(charsetName == null)) && (!(length == 0)) && (i < length) && (!(c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c == '-' && i != 0) || (c == ':' && i != 0) || (c == '_' && i != 0) || (c == '.' && i != 0))",
          "symbolicPathConjunction": "(!(charsetName == null)) && (!(length == 0)) && (i < length) && (!(c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c == '-' && i != 0) || (c == ':' && i != 0) || (c == '_' && i != 0) || (c == '.' && i != 0))",
          "backwardsPathConjunction": "(!(charsetName == null)) && (!(charsetName.length() == 0)) && (0 < charsetName.length()) && (!(charsetName.charAt(0) >= 'A' && charsetName.charAt(0) <= 'Z') || (charsetName.charAt(0) >= 'a' && charsetName.charAt(0) <= 'z') || (charsetName.charAt(0) >= '0' && charsetName.charAt(0) <= '9') || (charsetName.charAt(0) == '-' && 0 != 0) || (charsetName.charAt(0) == ':' && 0 != 0) || (charsetName.charAt(0) == '_' && 0 != 0) || (charsetName.charAt(0) == '.' && 0 != 0))",
          "simplifiedPathConjunction": "(charsetName.charAt(0) >= 'a' && charsetName.charAt(0) <= 'z' || charsetName.charAt(0) >= '0' && charsetName.charAt(0) <= '9' || charsetName.charAt(0) > 'Z' || charsetName.charAt(0) < 'A') && charsetName.length() > 0 && charsetName != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncharsetName0 = String('charsetName0')\nlength0 = Int('length0')\ni0 = Int('i0')\ncharsetName0_isNull = Bool('charsetName0_isNull')\n\nconstraints = [\n  length0 == Length(charsetName0),\n  i0 == 0,\n  c0 == charsetName0.charAt(i0),\n  And(And(And(Not(charsetName0_isNull), Not(length0 == 0)), i0 < length0), Or(Or(Or(Or(Or(Or(Not(And(c0 >= 'A', c0 <= 'Z')), And(c0 >= 'a', c0 <= 'z')), And(c0 >= '0', c0 <= '9')), And(c0 == '-', i0 != 0)), And(c0 == ':', i0 != 0)), And(c0 == '_', i0 != 0)), And(c0 == '.', i0 != 0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncharsetName = Symbol('charsetName')\ncharsetName_length = Symbol('charsetName_length')\ncharsetName_charAt = Symbol('charsetName_charAt')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # 'A'\nwit_str_1 = Symbol('wit_str_1') # 'Z'\nwit_str_2 = Symbol('wit_str_2') # 'a'\nwit_str_3 = Symbol('wit_str_3') # 'z'\nwit_str_4 = Symbol('wit_str_4') # '0'\nwit_str_5 = Symbol('wit_str_5') # '9'\nwit_str_6 = Symbol('wit_str_6') # '-'\nwit_str_7 = Symbol('wit_str_7') # ':'\nwit_str_8 = Symbol('wit_str_8') # '_'\nwit_str_9 = Symbol('wit_str_9') # '.'\npath_conjunction = ((((~((Eq(charsetName, null)))) & (~((Eq(charsetName_length, 0))))) & (StrictLessThan(0, charsetName_length))) & (((((((~(((GreaterThan(charsetName_charAt, wit_str_0)) & (LessThan(charsetName_charAt, wit_str_1))))) | ((GreaterThan(charsetName_charAt, wit_str_2)) & (LessThan(charsetName_charAt, wit_str_3)))) | ((GreaterThan(charsetName_charAt, wit_str_4)) & (LessThan(charsetName_charAt, wit_str_5)))) | ((Eq(charsetName_charAt, wit_str_6)) & (Ne(0, 0)))) | ((Eq(charsetName_charAt, wit_str_7)) & (Ne(0, 0)))) | ((Eq(charsetName_charAt, wit_str_8)) & (Ne(0, 0)))) | ((Eq(charsetName_charAt, wit_str_9)) & (Ne(0, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 41,
          "throwingLine": 60,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "java.nio.charset.Charset.forName(java.lang.String)",
          "exception": "throw new IllegalArgumentException(\"Null charset name\");",
          "pathCojunction": "(charsetName == null)",
          "symbolicPathConjunction": "(charsetName == null)",
          "backwardsPathConjunction": "(charsetName == null)",
          "simplifiedPathConjunction": "charsetName == null",
          "z3Inputs": "[charsetName0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncharsetName0 = String('charsetName0')\ncharsetName0_isNull = Bool('charsetName0_isNull')\n\nconstraints = [\n  charsetName0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncharsetName = Symbol('charsetName')\nnull = Symbol('null')\npath_conjunction = (Eq(charsetName, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 41,
          "throwingLine": 43,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.nio.charset.Charset.forName(java.lang.String)",
          "exception": "throw new IllegalCharsetNameException(charsetName);",
          "pathCojunction": "(!(charsetName == null)) && (length == 0)",
          "symbolicPathConjunction": "(!(charsetName == null)) && (length == 0)",
          "backwardsPathConjunction": "(!(charsetName == null)) && (charsetName.length() == 0)",
          "simplifiedPathConjunction": "charsetName.length() == 0 && charsetName != null",
          "z3Inputs": "[charsetName0 = \"\",\n charsetName0_isNull = False,\n length0 = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncharsetName0 = String('charsetName0')\nlength0 = Int('length0')\ncharsetName0_isNull = Bool('charsetName0_isNull')\n\nconstraints = [\n  length0 == Length(charsetName0),\n  And(Not(charsetName0_isNull), length0 == 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncharsetName = Symbol('charsetName')\ncharsetName_length = Symbol('charsetName_length')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(charsetName, null)))) & (Eq(charsetName_length, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 41,
          "throwingLine": 47,
          "isStatic": true,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Suppliers.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Suppliers.compose(com.google.common.base.Function<? super F, T>, com.google.common.base.Supplier<F>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(function == null)) && (supplier == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(function)) && (Preconditions.checkNotNull(supplier))",
          "backwardsPathConjunction": "(!(function == null)) && (supplier == null)",
          "z3Inputs": "[function0_isNull = False, supplier0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\nsupplier0_isNull = Bool('supplier0_isNull')\n\nconstraints = [\n  And(Not(function0_isNull), supplier0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nsupplier = Symbol('supplier')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(function, null)))) & (Eq(supplier, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 51,
          "throwingLine": 53,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Suppliers.compose(com.google.common.base.Function<? super F, T>, com.google.common.base.Supplier<F>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 51,
          "throwingLine": 52,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Suppliers.synchronizedSupplier(com.google.common.base.Supplier<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(delegate == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(delegate))",
          "backwardsPathConjunction": "(delegate == null)",
          "simplifiedPathConjunction": "delegate == null",
          "z3Inputs": "[delegate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndelegate0_isNull = Bool('delegate0_isNull')\n\nconstraints = [\n  delegate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nnull = Symbol('null')\npath_conjunction = (Eq(delegate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 267,
          "throwingLine": 268,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/SignedBytes.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.SignedBytes.min(byte...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 116,
          "throwingLine": 117,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.SignedBytes.max(byte...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 135,
          "throwingLine": 136,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.SignedBytes.join(java.lang.String, byte...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 155,
          "throwingLine": 156,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionListTest.Anonymous-2a95abd0-2988-4da5-849c-db3f0267b8c0.run()",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 147,
          "throwingLine": 148,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/RegularContiguousSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.RegularContiguousSet.intersection(com.google.common.collect.ContiguousSet<C>)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(other == null)) && (!(this.domain.equals(other.domain)))",
          "symbolicPathConjunction": "(checkNotNull(other)) && (checkArgument(this.domain.equals(other.domain)))",
          "backwardsPathConjunction": "(!(other == null)) && (!(this.domain.equals(other.domain)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  And(Not(other0_isNull), Not(this.domain.equals(other0.domain)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((~((Eq(other, null)))) & (~(this.domain_equals)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 152,
          "throwingLine": 154,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.RegularContiguousSet.intersection(com.google.common.collect.ContiguousSet<C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 152,
          "throwingLine": 153,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/AbstractIndexedListIterator.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractIndexedListIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(position < size))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(position < size))",
          "simplifiedPathConjunction": "position >= size",
          "z3Inputs": "[size0 = 0, position0 = 0]\n[position0 = -1, size0 = -1]\n[position0 = -2, size0 = -2]\n[position0 = -3, size0 = -3]\n[position0 = -4, size0 = -4]\n[position0 = -5, size0 = -5]\n[position0 = -6, size0 = -6]\n[position0 = -7, size0 = -7]\n[position0 = -8, size0 = -8]\n[position0 = -9, size0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\nposition0 = Int('position0')\n\nconstraints = [\n  Not(position0 < size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsize = Symbol('size', integer=True)\nposition = Symbol('position', integer=True)\npath_conjunction = (~((StrictLessThan(position, size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 79,
          "throwingLine": 81,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractIndexedListIterator.previous()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(position > 0))",
          "symbolicPathConjunction": "(!(hasPrevious())) && (!hasPrevious())",
          "backwardsPathConjunction": "(!(position > 0))",
          "simplifiedPathConjunction": "position <= 0",
          "z3Inputs": "[position0 = 0]\n[position0 = -1]\n[position0 = -2]\n[position0 = -3]\n[position0 = -4]\n[position0 = -5]\n[position0 = -6]\n[position0 = -7]\n[position0 = -8]\n[position0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\n\nconstraints = [\n  Not(position0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nposition = Symbol('position', integer=True)\npath_conjunction = (~((StrictGreaterThan(position, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 97,
          "throwingLine": 99,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSetMultimap.get(K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(set != null)) && (emptySet == null)",
          "symbolicPathConjunction": "(MoreObjects.firstNonNull(set, emptySet))",
          "backwardsPathConjunction": "(!((ImmutableSet<V>) map.get(key) != null)) && (emptySet == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset0_isNull = Bool('set0_isNull')\nemptySet0_isNull = Bool('emptySet0_isNull')\n\nconstraints = [\n  set0 == (ImmutableSet<V>) map.get(key0),\n  And(Not(Not(set0_isNull)), emptySet0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 355,
          "throwingLine": 358,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 396,
          "throwingLine": 397,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 408,
          "throwingLine": 409,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/SortedIterables.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.SortedIterables.hasSameComparator(java.util.Comparator<?>, java.lang.Iterable<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "simplifiedPathConjunction": "comparator == null",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncomparator = Symbol('comparator')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 37,
          "throwingLine": 38,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SortedIterables.hasSameComparator(java.util.Comparator<?>, java.lang.Iterable<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(comparator == null)) && (elements == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator)) && (checkNotNull(elements))",
          "backwardsPathConjunction": "(!(comparator == null)) && (elements == null)",
          "simplifiedPathConjunction": "elements == null && comparator != null",
          "z3Inputs": "[elements0_isNull = True, comparator0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  And(Not(comparator0_isNull), elements0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncomparator = Symbol('comparator')\nelements = Symbol('elements')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(comparator, null)))) & (Eq(elements, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 37,
          "throwingLine": 39,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testSimple()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "simplifiedPathConjunction": "Double.isNaN(5.0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(5.0 > 0.0, Not(Double.isNaN(5.0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(5.0, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 54,
          "throwingLine": 55,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testSimpleWithWait()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "simplifiedPathConjunction": "Double.isNaN(5.0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(5.0 > 0.0, Not(Double.isNaN(5.0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(5.0, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 126,
          "throwingLine": 127,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testOneSecondBurst()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "simplifiedPathConjunction": "Double.isNaN(5.0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(5.0 > 0.0, Not(Double.isNaN(5.0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(5.0, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 153,
          "throwingLine": 154,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testWarmUp()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(2.0 > 0.0 && !Double.isNaN(2.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(2.0 > 0.0 && !Double.isNaN(2.0)))",
          "simplifiedPathConjunction": "Double.isNaN(2.0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(2.0 > 0.0, Not(Double.isNaN(2.0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(2.0, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 187,
          "throwingLine": 188,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testWarmUpWithColdFactor()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "simplifiedPathConjunction": "Double.isNaN(5.0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(5.0 > 0.0, Not(Double.isNaN(5.0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(5.0, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 212,
          "throwingLine": 213,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testWarmUpWithColdFactor1()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "simplifiedPathConjunction": "Double.isNaN(5.0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(5.0 > 0.0, Not(Double.isNaN(5.0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(5.0, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 237,
          "throwingLine": 238,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testWarmUpAndUpdate()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(2.0 > 0.0 && !Double.isNaN(2.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(2.0 > 0.0 && !Double.isNaN(2.0)))",
          "simplifiedPathConjunction": "Double.isNaN(2.0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(2.0 > 0.0, Not(Double.isNaN(2.0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(2.0, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 253,
          "throwingLine": 254,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testWarmUpAndUpdateWithColdFactor()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(5.0 > 0.0 && !Double.isNaN(5.0)))",
          "simplifiedPathConjunction": "Double.isNaN(5.0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(5.0 > 0.0, Not(Double.isNaN(5.0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(5.0, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 285,
          "throwingLine": 286,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testBurstyAndUpdate()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(1.0 > 0.0 && !Double.isNaN(1.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(1.0 > 0.0 && !Double.isNaN(1.0)))",
          "simplifiedPathConjunction": "Double.isNaN(1.0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(1.0 > 0.0, Not(Double.isNaN(1.0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(1.0, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 317,
          "throwingLine": 318,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testSimpleWeights()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(1.0 > 0.0 && !Double.isNaN(1.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(1.0 > 0.0 && !Double.isNaN(1.0)))",
          "simplifiedPathConjunction": "Double.isNaN(1.0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(1.0 > 0.0, Not(Double.isNaN(1.0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(1.0, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 365,
          "throwingLine": 366,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testInfinity_Bursty()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(!(2.0 > 0.0 && !Double.isNaN(2.0)))) && (!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond)) && (limiter.setRate(2.0)) && (limiter.acquire()) && (limiter.acquire()) && (limiter.acquire()) && (limiter.acquire()) && (limiter.acquire()) && (limiter.setRate(Double.POSITIVE_INFINITY))",
          "backwardsPathConjunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(!(2.0 > 0.0 && !Double.isNaN(2.0)))) && (!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDouble_POSITIVE_INFINITY0 = Real('Double_POSITIVE_INFINITY0')\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  rateLimiter0 == new SmoothBursty(stopwatch0, 1.0),\n  limiter0 == rateLimiter0,\n  And(And(Not(Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0))))), Not(Not(And(2.0 > 0.0, Not(Double.isNaN(2.0)))))), Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0)))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 376,
          "throwingLine": 396,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testInfinity_Bursty()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(2.0 > 0.0 && !Double.isNaN(2.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond)) && (limiter.setRate(2.0))",
          "backwardsPathConjunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(2.0 > 0.0 && !Double.isNaN(2.0)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDouble_POSITIVE_INFINITY0 = Real('Double_POSITIVE_INFINITY0')\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  rateLimiter0 == new SmoothBursty(stopwatch0, 1.0),\n  limiter0 == rateLimiter0,\n  And(Not(Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0))))), Not(And(2.0 > 0.0, Not(Double.isNaN(2.0)))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 376,
          "throwingLine": 383,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testInfinity_Bursty()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDouble_POSITIVE_INFINITY0 = Real('Double_POSITIVE_INFINITY0')\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 376,
          "throwingLine": 377,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testInfinity_BustyTimeElapsed()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDouble_POSITIVE_INFINITY0 = Real('Double_POSITIVE_INFINITY0')\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 404,
          "throwingLine": 405,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testInfinity_BustyTimeElapsed()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(2.0 > 0.0 && !Double.isNaN(2.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond)) && (limiter.setRate(2.0))",
          "backwardsPathConjunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(2.0 > 0.0 && !Double.isNaN(2.0)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDouble_POSITIVE_INFINITY0 = Real('Double_POSITIVE_INFINITY0')\nstopwatch_instant0 = Int('stopwatch_instant0')\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  rateLimiter0 == new SmoothBursty(stopwatch0, 1.0),\n  limiter0 == rateLimiter0,\n  stopwatch_instant0 == stopwatch0.instant + 1000000,\n  stopwatch_instant0 >= -9223372036854775808, stopwatch_instant0 <= 9223372036854775807, # implicit\n  And(Not(Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0))))), Not(And(2.0 > 0.0, Not(Double.isNaN(2.0)))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 404,
          "throwingLine": 407,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testInfinity_WarmUp()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(!(1.0 > 0.0 && !Double.isNaN(1.0)))) && (!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond)) && (limiter.setRate(1.0)) && (limiter.acquire()) && (limiter.acquire()) && (limiter.acquire()) && (limiter.setRate(Double.POSITIVE_INFINITY))",
          "backwardsPathConjunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(!(1.0 > 0.0 && !Double.isNaN(1.0)))) && (!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDouble_POSITIVE_INFINITY0 = Real('Double_POSITIVE_INFINITY0')\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  rateLimiter0 == new SmoothWarmingUp(stopwatch0, warmupPeriod, unit, coldFactor),\n  limiter0 == rateLimiter0,\n  And(And(Not(Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0))))), Not(Not(And(1.0 > 0.0, Not(Double.isNaN(1.0)))))), Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0)))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 419,
          "throwingLine": 433,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testInfinity_WarmUp()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDouble_POSITIVE_INFINITY0 = Real('Double_POSITIVE_INFINITY0')\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 419,
          "throwingLine": 420,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testInfinity_WarmUp()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(1.0 > 0.0 && !Double.isNaN(1.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond)) && (limiter.setRate(1.0))",
          "backwardsPathConjunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(1.0 > 0.0 && !Double.isNaN(1.0)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDouble_POSITIVE_INFINITY0 = Real('Double_POSITIVE_INFINITY0')\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  rateLimiter0 == new SmoothWarmingUp(stopwatch0, warmupPeriod, unit, coldFactor),\n  limiter0 == rateLimiter0,\n  And(Not(Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0))))), Not(And(1.0 > 0.0, Not(Double.isNaN(1.0)))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 419,
          "throwingLine": 427,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testInfinity_WarmUpTimeElapsed()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDouble_POSITIVE_INFINITY0 = Real('Double_POSITIVE_INFINITY0')\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 440,
          "throwingLine": 441,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.testInfinity_WarmUpTimeElapsed()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(1.0 > 0.0 && !Double.isNaN(1.0)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond)) && (limiter.setRate(1.0))",
          "backwardsPathConjunction": "(!(!(Double.POSITIVE_INFINITY > 0.0 && !Double.isNaN(Double.POSITIVE_INFINITY)))) && (!(1.0 > 0.0 && !Double.isNaN(1.0)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDouble_POSITIVE_INFINITY0 = Real('Double_POSITIVE_INFINITY0')\nstopwatch_instant0 = Int('stopwatch_instant0')\n\nconstraints = [\n  stopwatch0 == new FakeStopwatch(),\n  rateLimiter0 == new SmoothWarmingUp(stopwatch0, warmupPeriod, unit, coldFactor),\n  limiter0 == rateLimiter0,\n  stopwatch_instant0 == stopwatch0.instant + 1000000,\n  stopwatch_instant0 >= -9223372036854775808, stopwatch_instant0 <= 9223372036854775807, # implicit\n  And(Not(Not(And(Double_POSITIVE_INFINITY0 > 0.0, Not(Double.isNaN(Double_POSITIVE_INFINITY0))))), Not(And(1.0 > 0.0, Not(Double.isNaN(1.0)))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 440,
          "throwingLine": 443,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiterTest.FakeStopwatch.readMicros()",
          "exception": "throw new AssertionError()",
          "pathCojunction": "(true)",
          "symbolicPathConjunction": "(NANOSECONDS.toMicros(instant))",
          "backwardsPathConjunction": "(true)",
          "simplifiedPathConjunction": "true",
          "z3Inputs": "[instant0 = -9223372036854775808]\n[instant0 = 0]\n[instant0 = -1]\n[instant0 = -2]\n[instant0 = -3]\n[instant0 = -4]\n[instant0 = -5]\n[instant0 = -6]\n[instant0 = -7]\n[instant0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninstant0 = Int('instant0')\n\nconstraints = [\n  instant0 >= -9223372036854775808, instant0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = True\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 530,
          "throwingLine": 531,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/java/util/super/java/util/concurrent/ConcurrentHashMap.java",
      "methods": [
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.putIfAbsent(K, V)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(!(containsKey(key)))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 56,
          "throwingLine": 57,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.putIfAbsent(K, V)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(!(key == null)) && (!(backingMap.containsKey(key))) && (key == null || value == null)",
          "symbolicPathConjunction": "(!(containsKey(key))) && (!containsKey(key)) && (put(key, value))",
          "backwardsPathConjunction": "(!(key == null)) && (!(backingMap.containsKey(key))) && (key == null || value == null)",
          "simplifiedPathConjunction": "null == value && !backingMap.containsKey(key) && key != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(And(Not(key0_isNull), Not(backingMap0.containsKey(key0))), Or(key0_isNull, value0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nbackingMap = Symbol('backingMap')\nbackingMap_containsKey = Symbol('backingMap_containsKey')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(key, null)))) & (~(backingMap_containsKey))) & ((Eq(key, null)) | (Eq(value, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 56,
          "throwingLine": 58,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object, java.lang.Object)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(containsKey(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 64,
          "throwingLine": 65,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.replace(K, V, V)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(oldValue == null || newValue == null)",
          "symbolicPathConjunction": "(oldValue == null || newValue == null)",
          "backwardsPathConjunction": "(oldValue == null || newValue == null)",
          "simplifiedPathConjunction": "newValue == null || null == oldValue",
          "z3Inputs": "[newValue0_isNull = False, oldValue0_isNull = True]\n[newValue0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldValue0_isNull = Bool('oldValue0_isNull')\nnewValue0_isNull = Bool('newValue0_isNull')\n\nconstraints = [\n  Or(oldValue0_isNull, newValue0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noldValue = Symbol('oldValue')\nnewValue = Symbol('newValue')\nnull = Symbol('null')\npath_conjunction = ((Eq(oldValue, null)) | (Eq(newValue, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 73,
          "throwingLine": 75,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.replace(K, V, V)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(!(oldValue == null || newValue == null)) && (key == null)",
          "symbolicPathConjunction": "(!(oldValue == null || newValue == null)) && (!(containsKey(key)))",
          "backwardsPathConjunction": "(!(oldValue == null || newValue == null)) && (key == null)",
          "simplifiedPathConjunction": "key == null && newValue != null && null != oldValue",
          "z3Inputs": "[newValue0_isNull = False,\n key0_isNull = True,\n oldValue0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldValue0_isNull = Bool('oldValue0_isNull')\nnewValue0_isNull = Bool('newValue0_isNull')\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  And(Not(Or(oldValue0_isNull, newValue0_isNull)), key0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\noldValue = Symbol('oldValue')\nnewValue = Symbol('newValue')\nnull = Symbol('null')\npath_conjunction = ((~(((Eq(oldValue, null)) | (Eq(newValue, null))))) & (Eq(key, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 73,
          "throwingLine": 76,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.replace(K, V)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(!(value == null)) && (key == null)",
          "symbolicPathConjunction": "(!(value == null)) && (!(containsKey(key)))",
          "backwardsPathConjunction": "(!(value == null)) && (key == null)",
          "simplifiedPathConjunction": "key == null && null != value",
          "z3Inputs": "[key0_isNull = True, value0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  And(Not(value0_isNull), key0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(value, null)))) & (Eq(key, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 84,
          "throwingLine": 87,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.replace(K, V)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(value == null)",
          "symbolicPathConjunction": "(value == null)",
          "backwardsPathConjunction": "(value == null)",
          "simplifiedPathConjunction": "null == value",
          "z3Inputs": "[value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  value0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (Eq(value, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 84,
          "throwingLine": 86,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.containsKey(java.lang.Object)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(key == null)",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 96,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(key == null)",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 101,
          "throwingLine": 103,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.put(K, V)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(key == null || value == null)",
          "symbolicPathConjunction": "(key == null || value == null)",
          "backwardsPathConjunction": "(key == null || value == null)",
          "simplifiedPathConjunction": "key == null || null == value",
          "z3Inputs": "[key0_isNull = True, value0_isNull = False]\n[value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  Or(key0_isNull, value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((Eq(key, null)) | (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 108,
          "throwingLine": 110,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.containsValue(java.lang.Object)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(value == null)",
          "symbolicPathConjunction": "(value == null)",
          "backwardsPathConjunction": "(value == null)",
          "simplifiedPathConjunction": "null == value",
          "z3Inputs": "[value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  value0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (Eq(value, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 115,
          "throwingLine": 117,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(key == null)",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 122,
          "throwingLine": 124,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.ConcurrentHashMap.contains(java.lang.Object)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(value == null)",
          "symbolicPathConjunction": "(containsValue(value))",
          "backwardsPathConjunction": "(value == null)",
          "simplifiedPathConjunction": "null == value",
          "z3Inputs": "[value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  value0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (Eq(value, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 133,
          "throwingLine": 134,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/AbstractLoadingCacheTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.AbstractLoadingCacheTest.Anonymous-7c9e1abd-a06a-428d-af0f-a27852797ae1.get(java.lang.Object)",
          "exception": "throw new ExecutionException(cause);",
          "pathCojunction": "(v == null)",
          "symbolicPathConjunction": "(v == null)",
          "backwardsPathConjunction": "(valueRef.get() == null)",
          "simplifiedPathConjunction": "null == valueRef.get()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0_isNull = Bool('v0_isNull')\n\nconstraints = [\n  v0 == valueRef.get(),\n  v0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalueRef_get = Symbol('valueRef_get')\nnull = Symbol('null')\npath_conjunction = (Eq(valueRef_get, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 39,
          "throwingLine": 42,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.AbstractLoadingCacheTest.Anonymous-8e2d0a43-082b-4d54-accc-cda39a87bcfe.get(java.lang.Object)",
          "exception": "throw new ExecutionException(cause);",
          "pathCojunction": "(v == null)",
          "symbolicPathConjunction": "(v == null)",
          "backwardsPathConjunction": "(valueRef.get() == null)",
          "simplifiedPathConjunction": "null == valueRef.get()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0_isNull = Bool('v0_isNull')\n\nconstraints = [\n  v0 == valueRef.get(),\n  v0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalueRef_get = Symbol('valueRef_get')\nnull = Symbol('null')\npath_conjunction = (Eq(valueRef_get, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 70,
          "throwingLine": 73,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.AbstractLoadingCacheTest.Anonymous-ceae031a-b5e8-499c-b1bc-44f251f73149.get(java.lang.Object)",
          "exception": "throw new ExecutionError(cause);",
          "pathCojunction": "(v == null)",
          "symbolicPathConjunction": "(v == null)",
          "backwardsPathConjunction": "(valueRef.get() == null)",
          "simplifiedPathConjunction": "null == valueRef.get()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0_isNull = Bool('v0_isNull')\n\nconstraints = [\n  v0 == valueRef.get(),\n  v0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalueRef_get = Symbol('valueRef_get')\nnull = Symbol('null')\npath_conjunction = (Eq(valueRef_get, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 101,
          "throwingLine": 104,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.AbstractLoadingCacheTest.Anonymous-0b0a2809-155b-4a3c-8574-6d7675f7b765.get(java.lang.Object)",
          "exception": "throw new ExecutionException(cause);",
          "pathCojunction": "(v == null)",
          "symbolicPathConjunction": "(v == null)",
          "backwardsPathConjunction": "(valueRef.get() == null)",
          "simplifiedPathConjunction": "null == valueRef.get()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nv0_isNull = Bool('v0_isNull')\n\nconstraints = [\n  v0 == valueRef.get(),\n  v0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalueRef_get = Symbol('valueRef_get')\nnull = Symbol('null')\npath_conjunction = (Eq(valueRef_get, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 132,
          "throwingLine": 135,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Enums.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Enums.getIfPresent(java.lang.Class<T>, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(enumClass == null)",
          "symbolicPathConjunction": "(checkNotNull(enumClass))",
          "backwardsPathConjunction": "(enumClass == null)",
          "simplifiedPathConjunction": "enumClass == null",
          "z3Inputs": "[enumClass0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = String('value0')\nenumClass0_isNull = Bool('enumClass0_isNull')\n\nconstraints = [\n  enumClass0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nenumClass = Symbol('enumClass')\nnull = Symbol('null')\npath_conjunction = (Eq(enumClass, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 51,
          "throwingLine": 52,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Enums.getIfPresent(java.lang.Class<T>, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(enumClass == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(enumClass)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(enumClass == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && enumClass != null",
          "z3Inputs": "[value0_isNull = True, enumClass0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = String('value0')\nenumClass0_isNull = Bool('enumClass0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(enumClass0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nenumClass = Symbol('enumClass')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(enumClass, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 51,
          "throwingLine": 53,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/benchmark/com/google/common/collect/ConcurrentHashMultisetBenchmark.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ConcurrentHashMultisetBenchmark.OldConcurrentHashMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException(\"count\" + \" cannot be negative but was: \" + count)",
          "pathCojunction": "(count < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(count < 0)",
          "simplifiedPathConjunction": "count < 0",
          "z3Inputs": "[count0 = -1]\n[count0 = -2]\n[count0 = -3]\n[count0 = -4]\n[count0 = -5]\n[count0 = -6]\n[count0 = -7]\n[count0 = -8]\n[count0 = -9]\n[count0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  count0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictLessThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 374,
          "throwingLine": 375,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConcurrentHashMultisetBenchmark.OldConcurrentHashMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException(\"oldCount\" + \" cannot be negative but was: \" + oldCount)",
          "pathCojunction": "(oldCount < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(oldCount < 0)",
          "simplifiedPathConjunction": "oldCount < 0",
          "z3Inputs": "[oldCount0 = -1]\n[oldCount0 = -2]\n[oldCount0 = -3]\n[oldCount0 = -4]\n[oldCount0 = -5]\n[oldCount0 = -6]\n[oldCount0 = -7]\n[oldCount0 = -8]\n[oldCount0 = -9]\n[oldCount0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  oldCount0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noldCount = Symbol('oldCount', integer=True)\npath_conjunction = (StrictLessThan(oldCount, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 394,
          "throwingLine": 395,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/AbstractMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMultiset.add(E)",
          "exception": "throw new UnsupportedOperationException()",
          "pathCojunction": "(true)",
          "symbolicPathConjunction": "(add(element, 1))",
          "backwardsPathConjunction": "(true)",
          "simplifiedPathConjunction": "true",
          "z3Inputs": "[]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = True\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 84,
          "throwingLine": 85,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMultiset.add(E, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 90,
          "throwingLine": 91,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMultiset.remove(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException()",
          "pathCojunction": "(true)",
          "symbolicPathConjunction": "(remove(element, 1))",
          "backwardsPathConjunction": "(true)",
          "simplifiedPathConjunction": "true",
          "z3Inputs": "[]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = True\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 95,
          "throwingLine": 96,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMultiset.remove(java.lang.Object, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 100,
          "throwingLine": 101,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException(\"count\" + \" cannot be negative but was: \" + count)",
          "pathCojunction": "(count < 0)",
          "symbolicPathConjunction": "(checkNonnegative(count, \"count\"))",
          "backwardsPathConjunction": "(count < 0)",
          "simplifiedPathConjunction": "count < 0",
          "z3Inputs": "[count0 = -1]\n[count0 = -2]\n[count0 = -3]\n[count0 = -4]\n[count0 = -5]\n[count0 = -6]\n[count0 = -7]\n[count0 = -8]\n[count0 = -9]\n[count0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  count0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictLessThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 105,
          "throwingLine": 106,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException(\"oldCount\" + \" cannot be negative but was: \" + oldCount)",
          "pathCojunction": "(oldCount < 0)",
          "symbolicPathConjunction": "(checkNonnegative(oldCount, \"oldCount\"))",
          "backwardsPathConjunction": "(oldCount < 0)",
          "simplifiedPathConjunction": "oldCount < 0",
          "z3Inputs": "[oldCount0 = -1]\n[oldCount0 = -2]\n[oldCount0 = -3]\n[oldCount0 = -4]\n[oldCount0 = -5]\n[oldCount0 = -6]\n[oldCount0 = -7]\n[oldCount0 = -8]\n[oldCount0 = -9]\n[oldCount0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  oldCount0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noldCount = Symbol('oldCount', integer=True)\npath_conjunction = (StrictLessThan(oldCount, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 110,
          "throwingLine": 111,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException(\"newCount\" + \" cannot be negative but was: \" + newCount)",
          "pathCojunction": "(!(oldCount < 0)) && (newCount < 0)",
          "symbolicPathConjunction": "((checkNonnegative(oldCount, \"oldCount\")) && (checkNonnegative(newCount, \"newCount\")))",
          "backwardsPathConjunction": "(!(oldCount < 0)) && (newCount < 0)",
          "simplifiedPathConjunction": "oldCount >= 0 && newCount < 0",
          "z3Inputs": "[newCount0 = -1, oldCount0 = 0]\n[newCount0 = -1, oldCount0 = 1]\n[newCount0 = -2, oldCount0 = 1]\n[newCount0 = -3, oldCount0 = 1]\n[newCount0 = -3, oldCount0 = 2]\n[newCount0 = -3, oldCount0 = 3]\n[newCount0 = -4, oldCount0 = 4]\n[newCount0 = -4, oldCount0 = 5]\n[newCount0 = -4, oldCount0 = 6]\n[newCount0 = -4, oldCount0 = 7]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  And(Not(oldCount0 < 0), newCount0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noldCount = Symbol('oldCount', integer=True)\nnewCount = Symbol('newCount', integer=True)\npath_conjunction = ((~((StrictLessThan(oldCount, 0)))) & (StrictLessThan(newCount, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 110,
          "throwingLine": 111,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMultiset.retainAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elementsToRetain == null)",
          "symbolicPathConjunction": "(checkNotNull(elementsToRetain))",
          "backwardsPathConjunction": "(elementsToRetain == null)",
          "simplifiedPathConjunction": "elementsToRetain == null",
          "z3Inputs": "[elementsToRetain0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelementsToRetain0_isNull = Bool('elementsToRetain0_isNull')\n\nconstraints = [\n  elementsToRetain0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelementsToRetain = Symbol('elementsToRetain')\nnull = Symbol('null')\npath_conjunction = (Eq(elementsToRetain, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 133,
          "throwingLine": 134,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/MultimapBuilder.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MultimapBuilder.hashKeys(int)",
          "exception": "throw new IllegalArgumentException(\"expectedKeys\" + \" cannot be negative but was: \" + expectedKeys)",
          "pathCojunction": "(expectedKeys < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(expectedKeys < 0)",
          "simplifiedPathConjunction": "expectedKeys < 0",
          "z3Inputs": "[expectedKeys0 = -1]\n[expectedKeys0 = -2]\n[expectedKeys0 = -3]\n[expectedKeys0 = -4]\n[expectedKeys0 = -5]\n[expectedKeys0 = -6]\n[expectedKeys0 = -7]\n[expectedKeys0 = -8]\n[expectedKeys0 = -9]\n[expectedKeys0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedKeys0 = Int('expectedKeys0')\n\nconstraints = [\n  expectedKeys0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedKeys = Symbol('expectedKeys', integer=True)\npath_conjunction = (StrictLessThan(expectedKeys, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 98,
          "throwingLine": 99,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapBuilder.linkedHashKeys(int)",
          "exception": "throw new IllegalArgumentException(\"expectedKeys\" + \" cannot be negative but was: \" + expectedKeys)",
          "pathCojunction": "(expectedKeys < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(expectedKeys < 0)",
          "simplifiedPathConjunction": "expectedKeys < 0",
          "z3Inputs": "[expectedKeys0 = -1]\n[expectedKeys0 = -2]\n[expectedKeys0 = -3]\n[expectedKeys0 = -4]\n[expectedKeys0 = -5]\n[expectedKeys0 = -6]\n[expectedKeys0 = -7]\n[expectedKeys0 = -8]\n[expectedKeys0 = -9]\n[expectedKeys0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedKeys0 = Int('expectedKeys0')\n\nconstraints = [\n  expectedKeys0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedKeys = Symbol('expectedKeys', integer=True)\npath_conjunction = (StrictLessThan(expectedKeys, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 129,
          "throwingLine": 130,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapBuilder.treeKeys(java.util.Comparator<K0>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "simplifiedPathConjunction": "comparator == null",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncomparator = Symbol('comparator')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 167,
          "throwingLine": 168,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapBuilder.enumKeys(java.lang.Class<K0>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyClass == null)",
          "symbolicPathConjunction": "(checkNotNull(keyClass))",
          "backwardsPathConjunction": "(keyClass == null)",
          "simplifiedPathConjunction": "keyClass == null",
          "z3Inputs": "[keyClass0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyClass0_isNull = Bool('keyClass0_isNull')\n\nconstraints = [\n  keyClass0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkeyClass = Symbol('keyClass')\nnull = Symbol('null')\npath_conjunction = (Eq(keyClass, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapBuilder.HashSetSupplier.get()",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedValuesPerKey)",
          "pathCojunction": "(expectedValuesPerKey < 3) && (expectedValuesPerKey < 0)",
          "symbolicPathConjunction": "(Sets.newHashSetWithExpectedSize(expectedValuesPerKey))",
          "backwardsPathConjunction": "(expectedValuesPerKey < 3) && (expectedValuesPerKey < 0)",
          "simplifiedPathConjunction": "expectedValuesPerKey < 0",
          "z3Inputs": "[expectedValuesPerKey0 = -1]\n[expectedValuesPerKey0 = -2]\n[expectedValuesPerKey0 = -3]\n[expectedValuesPerKey0 = -4]\n[expectedValuesPerKey0 = -5]\n[expectedValuesPerKey0 = -6]\n[expectedValuesPerKey0 = -7]\n[expectedValuesPerKey0 = -8]\n[expectedValuesPerKey0 = -9]\n[expectedValuesPerKey0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedValuesPerKey0 = Int('expectedValuesPerKey0')\n\nconstraints = [\n  And(expectedValuesPerKey0 < 3, expectedValuesPerKey0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedValuesPerKey = Symbol('expectedValuesPerKey', integer=True)\npath_conjunction = ((StrictLessThan(expectedValuesPerKey, 3)) & (StrictLessThan(expectedValuesPerKey, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 231,
          "throwingLine": 232,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapBuilder.LinkedHashSetSupplier.get()",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedValuesPerKey)",
          "pathCojunction": "(expectedValuesPerKey < 3) && (expectedValuesPerKey < 0)",
          "symbolicPathConjunction": "(Sets.newLinkedHashSetWithExpectedSize(expectedValuesPerKey))",
          "backwardsPathConjunction": "(expectedValuesPerKey < 3) && (expectedValuesPerKey < 0)",
          "simplifiedPathConjunction": "expectedValuesPerKey < 0",
          "z3Inputs": "[expectedValuesPerKey0 = -1]\n[expectedValuesPerKey0 = -2]\n[expectedValuesPerKey0 = -3]\n[expectedValuesPerKey0 = -4]\n[expectedValuesPerKey0 = -5]\n[expectedValuesPerKey0 = -6]\n[expectedValuesPerKey0 = -7]\n[expectedValuesPerKey0 = -8]\n[expectedValuesPerKey0 = -9]\n[expectedValuesPerKey0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedValuesPerKey0 = Int('expectedValuesPerKey0')\n\nconstraints = [\n  And(expectedValuesPerKey0 < 3, expectedValuesPerKey0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedValuesPerKey = Symbol('expectedValuesPerKey', integer=True)\npath_conjunction = ((StrictLessThan(expectedValuesPerKey, 3)) & (StrictLessThan(expectedValuesPerKey, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 244,
          "throwingLine": 245,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys.hashSetValues(int)",
          "exception": "throw new IllegalArgumentException(\"expectedValuesPerKey\" + \" cannot be negative but was: \" + expectedValuesPerKey)",
          "pathCojunction": "(expectedValuesPerKey < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(expectedValuesPerKey < 0)",
          "simplifiedPathConjunction": "expectedValuesPerKey < 0",
          "z3Inputs": "[expectedValuesPerKey0 = -1]\n[expectedValuesPerKey0 = -2]\n[expectedValuesPerKey0 = -3]\n[expectedValuesPerKey0 = -4]\n[expectedValuesPerKey0 = -5]\n[expectedValuesPerKey0 = -6]\n[expectedValuesPerKey0 = -7]\n[expectedValuesPerKey0 = -8]\n[expectedValuesPerKey0 = -9]\n[expectedValuesPerKey0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedValuesPerKey0 = Int('expectedValuesPerKey0')\n\nconstraints = [\n  expectedValuesPerKey0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedValuesPerKey = Symbol('expectedValuesPerKey', integer=True)\npath_conjunction = (StrictLessThan(expectedValuesPerKey, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 341,
          "throwingLine": 342,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys.linkedHashSetValues(int)",
          "exception": "throw new IllegalArgumentException(\"expectedValuesPerKey\" + \" cannot be negative but was: \" + expectedValuesPerKey)",
          "pathCojunction": "(expectedValuesPerKey < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(expectedValuesPerKey < 0)",
          "simplifiedPathConjunction": "expectedValuesPerKey < 0",
          "z3Inputs": "[expectedValuesPerKey0 = -1]\n[expectedValuesPerKey0 = -2]\n[expectedValuesPerKey0 = -3]\n[expectedValuesPerKey0 = -4]\n[expectedValuesPerKey0 = -5]\n[expectedValuesPerKey0 = -6]\n[expectedValuesPerKey0 = -7]\n[expectedValuesPerKey0 = -8]\n[expectedValuesPerKey0 = -9]\n[expectedValuesPerKey0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedValuesPerKey0 = Int('expectedValuesPerKey0')\n\nconstraints = [\n  expectedValuesPerKey0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedValuesPerKey = Symbol('expectedValuesPerKey', integer=True)\npath_conjunction = (StrictLessThan(expectedValuesPerKey, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 366,
          "throwingLine": 367,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys.enumSetValues(java.lang.Class<V0>)",
          "exception": "throw new NullPointerException(String.valueOf(\"valueClass\"))",
          "pathCojunction": "(valueClass == null)",
          "symbolicPathConjunction": "(checkNotNull(valueClass, \"valueClass\"))",
          "backwardsPathConjunction": "(valueClass == null)",
          "simplifiedPathConjunction": "null == valueClass",
          "z3Inputs": "[valueClass0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalueClass0_isNull = Bool('valueClass0_isNull')\n\nconstraints = [\n  valueClass0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalueClass = Symbol('valueClass')\nnull = Symbol('null')\npath_conjunction = (Eq(valueClass, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 407,
          "throwingLine": 408,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/EnumMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.EnumMultiset.create(java.lang.Iterable<E>)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"EnumMultiset constructor passed empty Iterable\"))",
          "pathCojunction": "(!(iterator.hasNext()))",
          "symbolicPathConjunction": "(checkArgument(iterator.hasNext(), \"EnumMultiset constructor passed empty Iterable\"))",
          "backwardsPathConjunction": "(!(elements.iterator().hasNext()))",
          "simplifiedPathConjunction": "!elements.iterator()_hasNext",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  iterator0 == elements0.iterator(),\n  Not(iterator0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nelements_iterator_hasNext = Symbol('elements_iterator_hasNext')\nelements_iterator = Symbol('elements_iterator')\npath_conjunction = (~(elements_iterator_hasNext))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 54,
          "throwingLine": 56,
          "isStatic": true,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.TrustedListenableFutureTaskTest.Anonymous-f29a1f29-3021-4047-b851-bce3924d451d.call()",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 64,
          "throwingLine": 65,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.math.IntMath.mod(int, int)",
          "exception": "throw new ArithmeticException(\"Modulus \" + m + \" must be > 0\");",
          "pathCojunction": "(m <= 0)",
          "symbolicPathConjunction": "(m <= 0)",
          "backwardsPathConjunction": "(m <= 0)",
          "simplifiedPathConjunction": "m <= 0",
          "z3Inputs": "[m0 = 0]\n[m0 = -1]\n[m0 = -2]\n[m0 = -3]\n[m0 = -4]\n[m0 = -5]\n[m0 = -6]\n[m0 = -7]\n[m0 = -8]\n[m0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Int('x0')\nm0 = Int('m0')\n\nconstraints = [\n  m0 <= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nm = Symbol('m', integer=True)\npath_conjunction = (LessThan(m, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 229,
          "throwingLine": 231,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.IntMath.gcd(int, int)",
          "exception": "throw new IllegalArgumentException(\"a\" + \" (\" + a + \") must be >= 0\")",
          "pathCojunction": "(a < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(a < 0)",
          "simplifiedPathConjunction": "a < 0",
          "z3Inputs": "[a0 = -1]\n[a0 = -2]\n[a0 = -3]\n[a0 = -4]\n[a0 = -5]\n[a0 = -6]\n[a0 = -7]\n[a0 = -8]\n[a0 = -9]\n[a0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\n\nconstraints = [\n  a0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a', integer=True)\npath_conjunction = (StrictLessThan(a, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 243,
          "throwingLine": 249,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.IntMath.gcd(int, int)",
          "exception": "throw new IllegalArgumentException(\"b\" + \" (\" + b + \") must be >= 0\")",
          "pathCojunction": "(!(a < 0)) && (b < 0)",
          "symbolicPathConjunction": "(!(x < 0)) && (x < 0)",
          "backwardsPathConjunction": "(!(a < 0)) && (b < 0)",
          "simplifiedPathConjunction": "a >= 0 && b < 0",
          "z3Inputs": "[b0 = -1, a0 = 0]\n[b0 = -1, a0 = 1]\n[b0 = -2, a0 = 1]\n[b0 = -3, a0 = 1]\n[b0 = -3, a0 = 2]\n[b0 = -3, a0 = 3]\n[b0 = -4, a0 = 4]\n[b0 = -4, a0 = 5]\n[b0 = -4, a0 = 6]\n[b0 = -4, a0 = 7]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\n\nconstraints = [\n  And(Not(a0 < 0), b0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a', integer=True)\nb = Symbol('b', integer=True)\npath_conjunction = ((~((StrictLessThan(a, 0)))) & (StrictLessThan(b, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 243,
          "throwingLine": 250,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.IntMath.factorial(int)",
          "exception": "throw new IllegalArgumentException(\"n\" + \" (\" + n + \") must be >= 0\")",
          "pathCojunction": "(n < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(n < 0)",
          "simplifiedPathConjunction": "n < 0",
          "z3Inputs": "[n0 = -1]\n[n0 = -2]\n[n0 = -3]\n[n0 = -4]\n[n0 = -5]\n[n0 = -6]\n[n0 = -7]\n[n0 = -8]\n[n0 = -9]\n[n0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\n\nconstraints = [\n  n0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\npath_conjunction = (StrictLessThan(n, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 376,
          "throwingLine": 377,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Optional.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Optional.of(T)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(reference == null)",
          "symbolicPathConjunction": "(checkNotNull(reference))",
          "backwardsPathConjunction": "(reference == null)",
          "simplifiedPathConjunction": "null == reference",
          "z3Inputs": "[reference0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreference0_isNull = Bool('reference0_isNull')\n\nconstraints = [\n  reference0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreference = Symbol('reference')\nnull = Symbol('null')\npath_conjunction = (Eq(reference, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 111,
          "throwingLine": 112,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/OrderingTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(numbers == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers))",
          "backwardsPathConjunction": "(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 303,
          "throwingLine": 309,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(numbers == null)) && (!(objects == null)) && (!(numbers == null)) && (integers == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers)) && (numbers.compound(objects)) && (objects.compound(numbers)) && (numbers.compound(integers))",
          "backwardsPathConjunction": "(!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\nobjects0_isNull = Bool('objects0_isNull')\nintegers0_isNull = Bool('integers0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  a0 == new CompoundOrdering<U>(this, numbers0),\n  b0 == new CompoundOrdering<U>(this, objects0),\n  c0 == new CompoundOrdering<U>(this, numbers0),\n  And(And(And(Not(numbers0_isNull), Not(objects0_isNull)), Not(numbers0_isNull)), integers0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 303,
          "throwingLine": 316,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(numbers == null)) && (!(objects == null)) && (numbers == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers)) && (numbers.compound(objects)) && (objects.compound(numbers))",
          "backwardsPathConjunction": "(!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)) && (new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\nobjects0_isNull = Bool('objects0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  a0 == new CompoundOrdering<U>(this, numbers0),\n  b0 == new CompoundOrdering<U>(this, objects0),\n  And(And(Not(numbers0_isNull), Not(objects0_isNull)), numbers0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 303,
          "throwingLine": 314,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(numbers == null)) && (objects == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers)) && (numbers.compound(objects))",
          "backwardsPathConjunction": "(!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\nobjects0_isNull = Bool('objects0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  a0 == new CompoundOrdering<U>(this, numbers0),\n  And(Not(numbers0_isNull), objects0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 303,
          "throwingLine": 313,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(numbers == null)) && (!(objects == null)) && (!(numbers == null)) && (!(integers == null)) && (numbers == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers)) && (numbers.compound(objects)) && (objects.compound(numbers)) && (numbers.compound(integers)) && (integers.compound(numbers))",
          "backwardsPathConjunction": "(!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder)) == null)) && (new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\nobjects0_isNull = Bool('objects0_isNull')\nintegers0_isNull = Bool('integers0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  a0 == new CompoundOrdering<U>(this, numbers0),\n  b0 == new CompoundOrdering<U>(this, objects0),\n  c0 == new CompoundOrdering<U>(this, numbers0),\n  d0 == new CompoundOrdering<U>(this, integers0),\n  And(And(And(And(Not(numbers0_isNull), Not(objects0_isNull)), Not(numbers0_isNull)), Not(integers0_isNull)), numbers0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 303,
          "throwingLine": 317,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(numbers == null)) && (!(objects == null)) && (!(numbers == null)) && (!(integers == null)) && (!(numbers == null)) && (!(objects == null)) && (!(objects == null)) && (numbers == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers)) && (numbers.compound(objects)) && (objects.compound(numbers)) && (numbers.compound(integers)) && (integers.compound(numbers)) && (numbers.compound(objects).compound(objects)) && (objects.compound(numbers).compound(objects)) && (objects.compound(objects).compound(numbers))",
          "backwardsPathConjunction": "(!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)) && (new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\nobjects0_isNull = Bool('objects0_isNull')\nintegers0_isNull = Bool('integers0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  a0 == new CompoundOrdering<U>(this, numbers0),\n  b0 == new CompoundOrdering<U>(this, objects0),\n  c0 == new CompoundOrdering<U>(this, numbers0),\n  d0 == new CompoundOrdering<U>(this, integers0),\n  e0 == new CompoundOrdering<U>(this, numbers0),\n  f0 == new CompoundOrdering<U>(this, objects0),\n  g0 == new CompoundOrdering<U>(this, objects0),\n  And(And(And(And(And(And(And(Not(numbers0_isNull), Not(objects0_isNull)), Not(numbers0_isNull)), Not(integers0_isNull)), Not(numbers0_isNull)), Not(objects0_isNull)), Not(objects0_isNull)), numbers0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 303,
          "throwingLine": 324,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/benchmark/com/google/common/collect/MinMaxPriorityQueueBenchmark.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueueBenchmark.InvertedMinMaxPriorityQueue.poll()",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(getMaxElementIndex(), size, \"index\"))",
          "pathCojunction": "(!(isEmpty())) && (getMaxElementIndex() < 0 || getMaxElementIndex() > size)",
          "symbolicPathConjunction": "(mmHeap.pollLast())",
          "backwardsPathConjunction": "(!(isEmpty())) && (getMaxElementIndex() < 0 || getMaxElementIndex() > size)",
          "simplifiedPathConjunction": "!isEmpty() && (getMaxElementIndex() > size || getMaxElementIndex() < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\n\nconstraints = [\n  And(Not(isEmpty()), Or(getMaxElementIndex() < 0, getMaxElementIndex() > size0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsize = Symbol('size', integer=True)\n_isEmpty = Symbol('_isEmpty')\n_getMaxElementIndex = Symbol('_getMaxElementIndex')\npath_conjunction = ((~(_isEmpty)) & ((StrictLessThan(_getMaxElementIndex, 0)) | (StrictGreaterThan(_getMaxElementIndex, size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 92,
          "throwingLine": 93,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/Shorts.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.indexOf(short[], short[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 184,
          "throwingLine": 186,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.indexOf(short[], short[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 184,
          "throwingLine": 185,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.min(short...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 234,
          "throwingLine": 235,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.max(short...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 253,
          "throwingLine": 254,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.join(java.lang.String, short...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 414,
          "throwingLine": 415,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.ShortArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 544,
          "throwingLine": 545,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.ShortArrayAsList.set(int, java.lang.Short)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  element0 >= -32768, element0 <= 32767, # implicit\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 580,
          "throwingLine": 581,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.ShortArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 589,
          "throwingLine": 591,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/SetsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.SetsTest.testNewTreeSetEmptyWithComparator()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_COMPARATOR == null)",
          "symbolicPathConjunction": "(Sets.newTreeSet(SOME_COMPARATOR))",
          "backwardsPathConjunction": "(SOME_COMPARATOR == null)",
          "simplifiedPathConjunction": "Collections.reverseOrder() == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_COMPARATOR0_isNull = Bool('SOME_COMPARATOR0_isNull')\n\nconstraints = [\n  SOME_COMPARATOR0 == Collections.reverseOrder(),\n  SOME_COMPARATOR0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nCollections_reverseOrder = Symbol('Collections_reverseOrder')\nnull = Symbol('null')\npath_conjunction = (Eq(Collections_reverseOrder, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 528,
          "throwingLine": 529,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.SetsTest.testComplementOfEnumSetWithType()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(units == null)",
          "symbolicPathConjunction": "(Sets.complementOf(units, SomeEnum.class))",
          "backwardsPathConjunction": "(EnumSet.of(SomeEnum.B, SomeEnum.D) == null)",
          "simplifiedPathConjunction": "EnumSet.of(SomeEnum.B, SomeEnum.D) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunits0_isNull = Bool('units0_isNull')\n\nconstraints = [\n  units0 == EnumSet.of(SomeEnum.B, SomeEnum.D),\n  units0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nEnumSet_of = Symbol('EnumSet_of')\nnull = Symbol('null')\npath_conjunction = (Eq(EnumSet_of, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 562,
          "throwingLine": 564,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.SetsTest.testComplementOfRegularSetWithType()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(units == null)",
          "symbolicPathConjunction": "(Sets.complementOf(units, SomeEnum.class))",
          "backwardsPathConjunction": "(Sets.newHashSet(SomeEnum.B, SomeEnum.D) == null)",
          "simplifiedPathConjunction": "Sets.newHashSet(SomeEnum.B, SomeEnum.D) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunits0_isNull = Bool('units0_isNull')\n\nconstraints = [\n  units0 == Sets.newHashSet(SomeEnum.B, SomeEnum.D),\n  units0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nSets_newHashSet = Symbol('Sets_newHashSet')\nnull = Symbol('null')\npath_conjunction = (Eq(Sets_newHashSet, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 574,
          "throwingLine": 576,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.SetsTest.testComplementOfEmptySet()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(noUnits == null)",
          "symbolicPathConjunction": "(Sets.complementOf(noUnits, SomeEnum.class))",
          "backwardsPathConjunction": "(Collections.emptySet() == null)",
          "simplifiedPathConjunction": "Collections.emptySet() == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnoUnits0_isNull = Bool('noUnits0_isNull')\n\nconstraints = [\n  noUnits0 == Collections.emptySet(),\n  noUnits0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nCollections_emptySet = Symbol('Collections_emptySet')\nnull = Symbol('null')\npath_conjunction = (Eq(Collections_emptySet, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 580,
          "throwingLine": 582,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.SetsTest.testComplementOfFullSet()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(allUnits == null)",
          "symbolicPathConjunction": "(Sets.complementOf(allUnits, SomeEnum.class))",
          "backwardsPathConjunction": "(Sets.newHashSet(SomeEnum.values()) == null)",
          "simplifiedPathConjunction": "Sets.newHashSet(SomeEnum.values()) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nallUnits0_isNull = Bool('allUnits0_isNull')\n\nconstraints = [\n  allUnits0 == Sets.newHashSet(SomeEnum.values()),\n  allUnits0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nSets_newHashSet = Symbol('Sets_newHashSet')\nSomeEnum_values = Symbol('SomeEnum_values')\nnull = Symbol('null')\npath_conjunction = (Eq(Sets_newHashSet, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 586,
          "throwingLine": 588,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/reflect/TypeResolver.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.reflect.TypeResolver.resolveType(java.lang.reflect.Type)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(type == null)",
          "symbolicPathConjunction": "(checkNotNull(type))",
          "backwardsPathConjunction": "(type == null)",
          "simplifiedPathConjunction": "null == type",
          "z3Inputs": "[type0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\n\nconstraints = [\n  type0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nnull = Symbol('null')\npath_conjunction = (Eq(type, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 162,
          "throwingLine": 163,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.Builder.orderEntriesByValue(java.util.Comparator<? super V>)",
          "exception": "throw new UnsupportedOperationException(\"Not available on ImmutableSortedMap.Builder\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 215,
          "throwingLine": 216,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.keySet()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(ks == null) && (!(comparator == null)) && (comparator == null)",
          "symbolicPathConjunction": "(ks == null) && (ImmutableSortedSet.copyOf(comparator, sortedDelegate.keySet()))",
          "backwardsPathConjunction": "(keySet == null) && (!(comparator == null)) && (comparator == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nks0_isNull = Bool('ks0_isNull')\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  ks0 == keySet0,\n  And(And(ks0_isNull, Not(comparator0_isNull)), comparator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkeySet = Symbol('keySet')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((Eq(keySet, null)) & (~((Eq(comparator, null))))) & (Eq(comparator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 230,
          "throwingLine": 232,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.keySet()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(ks == null) && (comparator == null)",
          "symbolicPathConjunction": "(ks == null) && (ImmutableSortedSet.copyOf(comparator, sortedDelegate.keySet()))",
          "backwardsPathConjunction": "(keySet == null) && (comparator == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nks0_isNull = Bool('ks0_isNull')\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  ks0 == keySet0,\n  And(ks0_isNull, comparator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkeySet = Symbol('keySet')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(keySet, null)) & (Eq(comparator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 230,
          "throwingLine": 232,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.headMap(K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(toKey == null)",
          "symbolicPathConjunction": "(checkNotNull(toKey))",
          "backwardsPathConjunction": "(toKey == null)",
          "simplifiedPathConjunction": "null == toKey",
          "z3Inputs": "[toKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoKey0_isNull = Bool('toKey0_isNull')\n\nconstraints = [\n  toKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntoKey = Symbol('toKey')\nnull = Symbol('null')\npath_conjunction = (Eq(toKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 268,
          "throwingLine": 269,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.subMap(K, K)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(fromKey == null)) && (!(toKey == null)) && (!(comparator.compare(fromKey, toKey) <= 0))",
          "symbolicPathConjunction": "(checkNotNull(fromKey)) && (checkNotNull(toKey)) && (checkArgument(comparator.compare(fromKey, toKey) <= 0))",
          "backwardsPathConjunction": "(!(fromKey == null)) && (!(toKey == null)) && (!(comparator.compare(fromKey, toKey) <= 0))",
          "simplifiedPathConjunction": "comparator.compare(fromKey, toKey) > 0 && fromKey != null && null != toKey",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromKey0_isNull = Bool('fromKey0_isNull')\ntoKey0_isNull = Bool('toKey0_isNull')\n\nconstraints = [\n  And(And(Not(fromKey0_isNull), Not(toKey0_isNull)), Not(comparator.compare(fromKey0, toKey0) <= 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\ntoKey = Symbol('toKey')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(fromKey, null)))) & (~((Eq(toKey, null))))) & (~((LessThan(comparator_compare, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 285,
          "throwingLine": 288,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.subMap(K, K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromKey == null)) && (toKey == null)",
          "symbolicPathConjunction": "(checkNotNull(fromKey)) && (checkNotNull(toKey))",
          "backwardsPathConjunction": "(!(fromKey == null)) && (toKey == null)",
          "simplifiedPathConjunction": "null == toKey && fromKey != null",
          "z3Inputs": "[fromKey0_isNull = False, toKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromKey0_isNull = Bool('fromKey0_isNull')\ntoKey0_isNull = Bool('toKey0_isNull')\n\nconstraints = [\n  And(Not(fromKey0_isNull), toKey0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\ntoKey = Symbol('toKey')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(fromKey, null)))) & (Eq(toKey, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 285,
          "throwingLine": 287,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.subMap(K, K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromKey == null)",
          "symbolicPathConjunction": "(checkNotNull(fromKey))",
          "backwardsPathConjunction": "(fromKey == null)",
          "simplifiedPathConjunction": "fromKey == null",
          "z3Inputs": "[fromKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromKey0_isNull = Bool('fromKey0_isNull')\n\nconstraints = [\n  fromKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\nnull = Symbol('null')\npath_conjunction = (Eq(fromKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 285,
          "throwingLine": 286,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.tailMap(K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromKey == null)",
          "symbolicPathConjunction": "(checkNotNull(fromKey))",
          "backwardsPathConjunction": "(fromKey == null)",
          "simplifiedPathConjunction": "fromKey == null",
          "z3Inputs": "[fromKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromKey0_isNull = Bool('fromKey0_isNull')\n\nconstraints = [\n  fromKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\nnull = Symbol('null')\npath_conjunction = (Eq(fromKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 299,
          "throwingLine": 300,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.tailMap(K, boolean)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromKey == null)",
          "symbolicPathConjunction": "(checkNotNull(fromKey))",
          "backwardsPathConjunction": "(fromKey == null)",
          "simplifiedPathConjunction": "fromKey == null",
          "z3Inputs": "[fromKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninclusive0 = Bool('inclusive0')\nfromKey0_isNull = Bool('fromKey0_isNull')\n\nconstraints = [\n  fromKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\nnull = Symbol('null')\npath_conjunction = (Eq(fromKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 304,
          "throwingLine": 305,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/base/PreconditionsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.PreconditionsTest.Anonymous-c2010ad5-e56b-4957-a77a-12112b0467fa.toString()",
          "exception": "throw new AssertionFailedError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 345,
          "throwingLine": 346,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/test/com/google/common/util/concurrent/testing/TestingExecutorsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.testing.TestingExecutorsTest.Anonymous-9499feaf-4f7c-4386-a870-818167052263.run()",
          "exception": "throw new RuntimeException(\"Oh no!\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 102,
          "throwingLine": 103,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/base/JoinerTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.JoinerTest.Anonymous-2e49eca1-ca21-4f05-9a76-fccf951480c4.append(java.lang.CharSequence)",
          "exception": "throw new IOException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncsq0 = String('csq0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 167,
          "throwingLine": 168,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.JoinerTest.Anonymous-196a7530-5850-4187-b2ea-3dc1ab2b4355.append(java.lang.CharSequence, int, int)",
          "exception": "throw new IOException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncsq0 = String('csq0')\nstart0 = Int('start0')\nend0 = Int('end0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 171,
          "throwingLine": 172,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.JoinerTest.Anonymous-ebddf457-9ba4-41e9-ba67-b1d3be708676.append(char)",
          "exception": "throw new IOException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 175,
          "throwingLine": 176,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.JoinerTest.DontStringMeBro.toString()",
          "exception": "throw new AssertionFailedError(\"shouldn't be invoked\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 326,
          "throwingLine": 327,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Preconditions.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkArgument(boolean)",
          "exception": "throw new IllegalArgumentException();",
          "pathCojunction": "(!(expression))",
          "symbolicPathConjunction": "(!(expression))",
          "backwardsPathConjunction": "(!(expression))",
          "simplifiedPathConjunction": "!expression",
          "z3Inputs": "[expression0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpression0 = Bool('expression0')\n\nconstraints = [\n  Not(expression0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpression = Symbol('expression')\npath_conjunction = (~(expression))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 106,
          "throwingLine": 108,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.Object)",
          "exception": "throw new IllegalArgumentException(String.valueOf(errorMessage));",
          "pathCojunction": "(!(expression))",
          "symbolicPathConjunction": "(!(expression))",
          "backwardsPathConjunction": "(!(expression))",
          "simplifiedPathConjunction": "!expression",
          "z3Inputs": "[expression0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpression0 = Bool('expression0')\n\nconstraints = [\n  Not(expression0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpression = Symbol('expression')\npath_conjunction = (~(expression))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 120,
          "throwingLine": 122,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object...)",
          "exception": "throw new IllegalArgumentException(format(errorMessageTemplate, errorMessageArgs));",
          "pathCojunction": "(!(expression))",
          "symbolicPathConjunction": "(!(expression))",
          "backwardsPathConjunction": "(!(expression))",
          "simplifiedPathConjunction": "!expression",
          "z3Inputs": "[expression0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpression0 = Bool('expression0')\nerrorMessageTemplate0 = String('errorMessageTemplate0')\n\nconstraints = [\n  Not(expression0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpression = Symbol('expression')\npath_conjunction = (~(expression))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 144,
          "throwingLine": 146,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkState(boolean)",
          "exception": "throw new IllegalStateException();",
          "pathCojunction": "(!(expression))",
          "symbolicPathConjunction": "(!(expression))",
          "backwardsPathConjunction": "(!(expression))",
          "simplifiedPathConjunction": "!expression",
          "z3Inputs": "[expression0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpression0 = Bool('expression0')\n\nconstraints = [\n  Not(expression0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpression = Symbol('expression')\npath_conjunction = (~(expression))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 157,
          "throwingLine": 159,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkState(boolean, java.lang.Object)",
          "exception": "throw new IllegalStateException(String.valueOf(errorMessage));",
          "pathCojunction": "(!(expression))",
          "symbolicPathConjunction": "(!(expression))",
          "backwardsPathConjunction": "(!(expression))",
          "simplifiedPathConjunction": "!expression",
          "z3Inputs": "[expression0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpression0 = Bool('expression0')\n\nconstraints = [\n  Not(expression0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpression = Symbol('expression')\npath_conjunction = (~(expression))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 172,
          "throwingLine": 174,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object...)",
          "exception": "throw new IllegalStateException(format(errorMessageTemplate, errorMessageArgs));",
          "pathCojunction": "(!(expression))",
          "symbolicPathConjunction": "(!(expression))",
          "backwardsPathConjunction": "(!(expression))",
          "simplifiedPathConjunction": "!expression",
          "z3Inputs": "[expression0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpression0 = Bool('expression0')\nerrorMessageTemplate0 = String('errorMessageTemplate0')\n\nconstraints = [\n  Not(expression0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpression = Symbol('expression')\npath_conjunction = (~(expression))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 199,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkNotNull(T)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(reference == null)",
          "symbolicPathConjunction": "(reference == null)",
          "backwardsPathConjunction": "(reference == null)",
          "simplifiedPathConjunction": "null == reference",
          "z3Inputs": "[reference0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreference0_isNull = Bool('reference0_isNull')\n\nconstraints = [\n  reference0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreference = Symbol('reference')\nnull = Symbol('null')\npath_conjunction = (Eq(reference, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 210,
          "throwingLine": 212,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkNotNull(T, java.lang.Object)",
          "exception": "throw new NullPointerException(String.valueOf(errorMessage));",
          "pathCojunction": "(reference == null)",
          "symbolicPathConjunction": "(reference == null)",
          "backwardsPathConjunction": "(reference == null)",
          "simplifiedPathConjunction": "null == reference",
          "z3Inputs": "[reference0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreference0_isNull = Bool('reference0_isNull')\n\nconstraints = [\n  reference0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreference = Symbol('reference')\nnull = Symbol('null')\npath_conjunction = (Eq(reference, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 226,
          "throwingLine": 228,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object...)",
          "exception": "throw new NullPointerException(format(errorMessageTemplate, errorMessageArgs));",
          "pathCojunction": "(reference == null)",
          "symbolicPathConjunction": "(reference == null)",
          "backwardsPathConjunction": "(reference == null)",
          "simplifiedPathConjunction": "null == reference",
          "z3Inputs": "[reference0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nerrorMessageTemplate0 = String('errorMessageTemplate0')\nreference0_isNull = Bool('reference0_isNull')\n\nconstraints = [\n  reference0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreference = Symbol('reference')\nnull = Symbol('null')\npath_conjunction = (Eq(reference, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 248,
          "throwingLine": 251,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkElementIndex(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size, \"index\"))",
          "pathCojunction": "(index < 0 || index >= size)",
          "symbolicPathConjunction": "(checkElementIndex(index, size, \"index\"))",
          "backwardsPathConjunction": "(index < 0 || index >= size)",
          "simplifiedPathConjunction": "index >= size || index < 0",
          "z3Inputs": "[index0 = -1, size0 = 0]\n[size0 = -1, index0 = -1]\n[size0 = -2, index0 = -2]\n[index0 = -3]\n[index0 = -4]\n[size0 = -3, index0 = -5]\n[size0 = -4, index0 = -6]\n[index0 = -7]\n[size0 = -5, index0 = -8]\n[size0 = -6, index0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nsize0 = Int('size0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nsize = Symbol('size', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 292,
          "throwingLine": 293,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkElementIndex(int, int, java.lang.String)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size, desc));",
          "pathCojunction": "(index < 0 || index >= size)",
          "symbolicPathConjunction": "(index < 0 || index >= size)",
          "backwardsPathConjunction": "(index < 0 || index >= size)",
          "simplifiedPathConjunction": "index >= size || index < 0",
          "z3Inputs": "[index0 = -1, size0 = 0]\n[size0 = -1, index0 = -1]\n[size0 = -2, index0 = -2]\n[index0 = -3]\n[index0 = -4]\n[size0 = -3, index0 = -5]\n[size0 = -4, index0 = -6]\n[index0 = -7]\n[size0 = -5, index0 = -8]\n[size0 = -6, index0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nsize0 = Int('size0')\ndesc0 = String('desc0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nsize = Symbol('size', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 307,
          "throwingLine": 310,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkPositionIndex(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(index, size, \"index\"))",
          "pathCojunction": "(index < 0 || index > size)",
          "symbolicPathConjunction": "(checkPositionIndex(index, size, \"index\"))",
          "backwardsPathConjunction": "(index < 0 || index > size)",
          "simplifiedPathConjunction": "index > size || index < 0",
          "z3Inputs": "[index0 = -1, size0 = -1]\n[size0 = -2, index0 = -2]\n[size0 = -4, index0 = -3]\n[size0 = -5, index0 = -4]\n[size0 = -6, index0 = -5]\n[size0 = -7, index0 = -6]\n[size0 = -8, index0 = -7]\n[size0 = -9, index0 = -8]\n[size0 = -10, index0 = -9]\n[size0 = -11, index0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nsize0 = Int('size0')\n\nconstraints = [\n  Or(index0 < 0, index0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nsize = Symbol('size', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (StrictGreaterThan(index, size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 335,
          "throwingLine": 336,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkPositionIndex(int, int, java.lang.String)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(index, size, desc));",
          "pathCojunction": "(index < 0 || index > size)",
          "symbolicPathConjunction": "(index < 0 || index > size)",
          "backwardsPathConjunction": "(index < 0 || index > size)",
          "simplifiedPathConjunction": "index > size || index < 0",
          "z3Inputs": "[index0 = -1, size0 = -1]\n[size0 = -2, index0 = -2]\n[size0 = -4, index0 = -3]\n[size0 = -5, index0 = -4]\n[size0 = -6, index0 = -5]\n[size0 = -7, index0 = -6]\n[size0 = -8, index0 = -7]\n[size0 = -9, index0 = -8]\n[size0 = -10, index0 = -9]\n[size0 = -11, index0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nsize0 = Int('size0')\ndesc0 = String('desc0')\n\nconstraints = [\n  Or(index0 < 0, index0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nsize = Symbol('size', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (StrictGreaterThan(index, size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 350,
          "throwingLine": 353,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Preconditions.checkPositionIndexes(int, int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(start, end, size));",
          "pathCojunction": "(start < 0 || end < start || end > size)",
          "symbolicPathConjunction": "(start < 0 || end < start || end > size)",
          "backwardsPathConjunction": "(start < 0 || end < start || end > size)",
          "simplifiedPathConjunction": "end > size || end < start || start < 0",
          "z3Inputs": "[start0 = -1, size0 = -1, end0 = -1]\n[start0 = -2, end0 = -2]\n[start0 = -3, end0 = -4]\n[size0 = -6, end0 = -5]\n[start0 = -5, end0 = -6]\n[start0 = -6, end0 = -7]\n[size0 = -9, end0 = -8]\n[start0 = -8, end0 = -9]\n[start0 = -9, end0 = -10]\n[size0 = -12, end0 = -11]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  Or(Or(start0 < 0, end0 < start0), end0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\nsize = Symbol('size', integer=True)\npath_conjunction = (((StrictLessThan(start, 0)) | (StrictLessThan(end, start))) | (StrictGreaterThan(end, size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 380,
          "throwingLine": 383,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/testing/EqualsTester.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.testing.EqualsTester.addEqualityGroup(java.lang.Object...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(equalityGroup == null)",
          "symbolicPathConjunction": "(checkNotNull(equalityGroup))",
          "backwardsPathConjunction": "(equalityGroup == null)",
          "simplifiedPathConjunction": "equalityGroup == null",
          "z3Inputs": "[equalityGroup0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nequalityGroup0_isNull = Bool('equalityGroup0_isNull')\n\nconstraints = [\n  equalityGroup0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nequalityGroup = Symbol('equalityGroup')\nnull = Symbol('null')\npath_conjunction = (Eq(equalityGroup, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 95,
          "throwingLine": 96,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractIteratorTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractIteratorTest.Anonymous-dfc7b11c-6be4-4fc9-8d0d-7d5262144b82.computeNext()",
          "exception": "throw exception;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 195,
          "throwingLine": 196,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractIteratorTest.Anonymous-de64109e-5fcf-4f9d-ba61-87e112c5d1e8.computeNext()",
          "exception": "throw new SomeUncheckedException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 211,
          "throwingLine": 213,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/FilteredKeyMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingSet.add(V)",
          "exception": "throw new IllegalArgumentException(\"Key does not satisfy predicate: \" + key);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 120,
          "throwingLine": 121,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingSet.addAll(java.util.Collection<? extends V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(collection == null)",
          "symbolicPathConjunction": "(checkNotNull(collection))",
          "backwardsPathConjunction": "(collection == null)",
          "z3Inputs": "[collection0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncollection0_isNull = Bool('collection0_isNull')\n\nconstraints = [\n  collection0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(collection, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 125,
          "throwingLine": 126,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingSet.addAll(java.util.Collection<? extends V>)",
          "exception": "throw new IllegalArgumentException(\"Key does not satisfy predicate: \" + key);",
          "pathCojunction": "(!(collection == null))",
          "symbolicPathConjunction": "(checkNotNull(collection))",
          "backwardsPathConjunction": "(!(collection == null))",
          "z3Inputs": "[collection0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncollection0_isNull = Bool('collection0_isNull')\n\nconstraints = [\n  Not(collection0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (~((Eq(collection, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 125,
          "throwingLine": 127,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingList.add(V)",
          "exception": "throw new IllegalArgumentException(\"Key does not satisfy predicate: \" + key)",
          "pathCojunction": "(!(0 < 0 || 0 > 0))",
          "symbolicPathConjunction": "(add(0, v))",
          "backwardsPathConjunction": "(!(0 < 0 || 0 > 0))",
          "simplifiedPathConjunction": "true",
          "z3Inputs": "[]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(Or(0 < 0, 0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~(((StrictLessThan(0, 0)) | (StrictGreaterThan(0, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 144,
          "throwingLine": 145,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingList.addAll(java.util.Collection<? extends V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(collection == null)",
          "symbolicPathConjunction": "(addAll(0, collection))",
          "backwardsPathConjunction": "(collection == null)",
          "z3Inputs": "[collection0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncollection0_isNull = Bool('collection0_isNull')\n\nconstraints = [\n  collection0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(collection, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 150,
          "throwingLine": 151,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingList.addAll(java.util.Collection<? extends V>)",
          "exception": "throw new IllegalArgumentException(\"Key does not satisfy predicate: \" + key)",
          "pathCojunction": "(!(collection == null)) && (!(0 < 0 || 0 > 0))",
          "symbolicPathConjunction": "(addAll(0, collection))",
          "backwardsPathConjunction": "(!(collection == null)) && (!(0 < 0 || 0 > 0))",
          "z3Inputs": "[collection0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncollection0_isNull = Bool('collection0_isNull')\n\nconstraints = [\n  And(Not(collection0_isNull), Not(Or(0 < 0, 0 > 0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(collection, null)))) & (~(((StrictLessThan(0, 0)) | (StrictGreaterThan(0, 0))))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 150,
          "throwingLine": 151,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingList.add(int, V)",
          "exception": "throw new IllegalArgumentException(\"Key does not satisfy predicate: \" + key);",
          "pathCojunction": "(!(index < 0 || index > 0))",
          "symbolicPathConjunction": "(checkPositionIndex(index, 0))",
          "backwardsPathConjunction": "(!(index < 0 || index > 0))",
          "simplifiedPathConjunction": "index == 0",
          "z3Inputs": "[index0 = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Not(Or(index0 < 0, index0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\npath_conjunction = (~(((StrictLessThan(index, 0)) | (StrictGreaterThan(index, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 156,
          "throwingLine": 158,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingList.add(int, V)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(index, 0, \"index\"))",
          "pathCojunction": "(index < 0 || index > 0)",
          "symbolicPathConjunction": "(checkPositionIndex(index, 0))",
          "backwardsPathConjunction": "(index < 0 || index > 0)",
          "simplifiedPathConjunction": "index != 0",
          "z3Inputs": "[index0 = 1]\n[index0 = -1]\n[index0 = -2]\n[index0 = -3]\n[index0 = -4]\n[index0 = -5]\n[index0 = -6]\n[index0 = -7]\n[index0 = -8]\n[index0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (StrictGreaterThan(index, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 156,
          "throwingLine": 157,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingList.addAll(int, java.util.Collection<? extends V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 162,
          "throwingLine": 163,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingList.addAll(int, java.util.Collection<? extends V>)",
          "exception": "throw new IllegalArgumentException(\"Key does not satisfy predicate: \" + key);",
          "pathCojunction": "(!(elements == null)) && (!(index < 0 || index > 0))",
          "symbolicPathConjunction": "(checkNotNull(elements)) && (checkPositionIndex(index, 0))",
          "backwardsPathConjunction": "(!(elements == null)) && (!(index < 0 || index > 0))",
          "z3Inputs": "[elements0_isNull = False, index0 = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  And(Not(elements0_isNull), Not(Or(index0 < 0, index0 > 0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(elements, null)))) & (~(((StrictLessThan(index, 0)) | (StrictGreaterThan(index, 0))))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 162,
          "throwingLine": 165,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FilteredKeyMultimap.AddRejectingList.addAll(int, java.util.Collection<? extends V>)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(index, 0, \"index\"))",
          "pathCojunction": "(!(elements == null)) && (index < 0 || index > 0)",
          "symbolicPathConjunction": "(checkNotNull(elements)) && (checkPositionIndex(index, 0))",
          "backwardsPathConjunction": "(!(elements == null)) && (index < 0 || index > 0)",
          "z3Inputs": "[index0 = 1, elements0_isNull = False]\n[elements0_isNull = False, index0 = 2]\n[elements0_isNull = False, index0 = 3]\n[elements0_isNull = False, index0 = 4]\n[elements0_isNull = False, index0 = 5]\n[elements0_isNull = False, index0 = 6]\n[elements0_isNull = False, index0 = 7]\n[elements0_isNull = False, index0 = 8]\n[elements0_isNull = False, index0 = 9]\n[elements0_isNull = False, index0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  And(Not(elements0_isNull), Or(index0 < 0, index0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(elements, null)))) & ((StrictLessThan(index, 0)) | (StrictGreaterThan(index, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 162,
          "throwingLine": 164,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/java/util/super/java/util/concurrent/CountDownLatch.java",
      "methods": [
        {
          "qualifiedSignature": "java.util.concurrent.CountDownLatch.await()",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0)",
          "symbolicPathConjunction": "(count > 0)",
          "backwardsPathConjunction": "(count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  count0 > 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictGreaterThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 30,
          "throwingLine": 32,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "java.util.concurrent.CountDownLatch.await(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0)",
          "symbolicPathConjunction": "(await())",
          "backwardsPathConjunction": "(count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1, timeout0 = -9223372036854775808]\n[count0 = 1, timeout0 = 0]\n[count0 = 2, timeout0 = -1]\n[count0 = 2, timeout0 = -2]\n[count0 = 2, timeout0 = -3]\n[count0 = 3, timeout0 = -3]\n[count0 = 4, timeout0 = -3]\n[count0 = 5, timeout0 = -4]\n[count0 = 5, timeout0 = -3]\n[count0 = 2, timeout0 = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\ncount0 = Int('count0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  count0 > 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictGreaterThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 37,
          "throwingLine": 38,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/test/com/google/common/collect/testing/IteratorTesterTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.IteratorTesterTest.IteratorWithSunJavaBug6529795.remove()",
          "exception": "throw new IllegalStateException();",
          "pathCojunction": "(nextThrewException)",
          "symbolicPathConjunction": "(nextThrewException)",
          "backwardsPathConjunction": "(nextThrewException)",
          "simplifiedPathConjunction": "nextThrewException",
          "z3Inputs": "[nextThrewException0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnextThrewException0 = Bool('nextThrewException0')\n\nconstraints = [\n  nextThrewException0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnextThrewException = Symbol('nextThrewException')\npath_conjunction = nextThrewException\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 133,
          "throwingLine": 135,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.IteratorTesterTest.Anonymous-4c74cf9a-a07c-4797-adba-6ad889f74e97.remove()",
          "exception": "throw new IllegalStateException() {\n};",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 274,
          "throwingLine": 275,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.IteratorTesterTest.Anonymous-07e3137b-d5e8-4440-b598-8c818b8a1be8.next()",
          "exception": "throw new NoSuchElementException() {\n};",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 278,
          "throwingLine": 279,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.IteratorTesterTest.Anonymous-346f1e92-969d-4367-9b46-4d51251b9661.remove()",
          "exception": "throw new IllegalArgumentException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 299,
          "throwingLine": 301,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.IteratorTesterTest.Anonymous-fc236105-5ca4-4964-8573-9890c8617f55.next()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 304,
          "throwingLine": 306,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.IteratorTesterTest.ThrowingIterator.next()",
          "exception": "throw ex;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 340,
          "throwingLine": 342,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.IteratorTesterTest.ThrowingIterator.remove()",
          "exception": "throw ex;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 346,
          "throwingLine": 348,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.initialCapacity(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(initialCapacity >= 0))",
          "symbolicPathConjunction": "(checkArgument(initialCapacity >= 0))",
          "backwardsPathConjunction": "(!(initialCapacity >= 0))",
          "simplifiedPathConjunction": "initialCapacity < 0",
          "z3Inputs": "[initialCapacity0 = -1]\n[initialCapacity0 = -2]\n[initialCapacity0 = -3]\n[initialCapacity0 = -4]\n[initialCapacity0 = -5]\n[initialCapacity0 = -6]\n[initialCapacity0 = -7]\n[initialCapacity0 = -8]\n[initialCapacity0 = -9]\n[initialCapacity0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninitialCapacity0 = Int('initialCapacity0')\n\nconstraints = [\n  Not(initialCapacity0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninitialCapacity = Symbol('initialCapacity', integer=True)\npath_conjunction = (~((GreaterThan(initialCapacity, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 264,
          "throwingLine": 267,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.concurrencyLevel(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(concurrencyLevel > 0))",
          "symbolicPathConjunction": "(checkArgument(concurrencyLevel > 0))",
          "backwardsPathConjunction": "(!(concurrencyLevel > 0))",
          "simplifiedPathConjunction": "concurrencyLevel <= 0",
          "z3Inputs": "[concurrencyLevel0 = 0]\n[concurrencyLevel0 = -1]\n[concurrencyLevel0 = -2]\n[concurrencyLevel0 = -3]\n[concurrencyLevel0 = -4]\n[concurrencyLevel0 = -5]\n[concurrencyLevel0 = -6]\n[concurrencyLevel0 = -7]\n[concurrencyLevel0 = -8]\n[concurrencyLevel0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nconcurrencyLevel0 = Int('concurrencyLevel0')\n\nconstraints = [\n  Not(concurrencyLevel0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nconcurrencyLevel = Symbol('concurrencyLevel', integer=True)\npath_conjunction = (~((StrictGreaterThan(concurrencyLevel, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 306,
          "throwingLine": 309,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build(com.google.common.cache.CacheLoader<? super K1, V1>)",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "((!(weigher == null)) && (strictParsing) && (checkState(maximumWeight != UNSET_INT, \"weigher requires maximumWeight\")))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 543,
          "throwingLine": 544,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build(com.google.common.cache.CacheLoader<? super K1, V1>)",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "((weigher == null) && (checkState(maximumWeight == UNSET_INT, \"maximumWeight requires weigher\")))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 543,
          "throwingLine": 544,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "((!(weigher == null)) && (strictParsing) && (checkState(maximumWeight != UNSET_INT, \"weigher requires maximumWeight\")))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 560,
          "throwingLine": 561,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"refreshAfterWrite requires a LoadingCache\"))",
          "pathCojunction": "(!(weigher == null)) && (!(strictParsing)) && (!(maximumWeight == -1)) && (!(refreshNanos == UNSET_INT))",
          "symbolicPathConjunction": "((!(weigher == null)) && (!(strictParsing)) && (!(maximumWeight == -1))) && (checkState(refreshNanos == UNSET_INT, \"refreshAfterWrite requires a LoadingCache\"))",
          "backwardsPathConjunction": "(!(weigher == null)) && (!(strictParsing)) && (!(maximumWeight == -1)) && (!(refreshNanos == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nmaximumWeight0 = Int('maximumWeight0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(And(Not(weigher0_isNull), Not(strictParsing0)), Not(maximumWeight0 == -1)), Not(refreshNanos == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nmaximumWeight = Symbol('maximumWeight', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(weigher, null)))) & (~(strictParsing))) & (~((Eq(maximumWeight, -1))))) & (~((Eq(refreshNanos, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 560,
          "throwingLine": 562,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "((weigher == null) && (checkState(maximumWeight == UNSET_INT, \"maximumWeight requires weigher\")))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 560,
          "throwingLine": 561,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"refreshAfterWrite requires a LoadingCache\"))",
          "pathCojunction": "(weigher == null) && (!(!(maximumWeight == UNSET_INT))) && (!(refreshNanos == UNSET_INT))",
          "symbolicPathConjunction": "((weigher == null) && (checkState(maximumWeight == UNSET_INT, \"maximumWeight requires weigher\"))) && (checkState(refreshNanos == UNSET_INT, \"refreshAfterWrite requires a LoadingCache\"))",
          "backwardsPathConjunction": "(weigher == null) && (!(!(maximumWeight == UNSET_INT))) && (!(refreshNanos == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(weigher0_isNull, Not(Not(maximumWeight == UNSET_INT))), Not(refreshNanos == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((Eq(weigher, null)) & (~((~((Eq(maximumWeight, UNSET_INT))))))) & (~((Eq(refreshNanos, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 560,
          "throwingLine": 562,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"refreshAfterWrite requires a LoadingCache\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(!(maximumWeight != UNSET_INT))) && (!(refreshNanos == UNSET_INT))",
          "symbolicPathConjunction": "((!(weigher == null)) && (strictParsing) && (checkState(maximumWeight != UNSET_INT, \"weigher requires maximumWeight\"))) && (checkState(refreshNanos == UNSET_INT, \"refreshAfterWrite requires a LoadingCache\"))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(!(maximumWeight != UNSET_INT))) && (!(refreshNanos == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(And(Not(weigher0_isNull), strictParsing0), Not(Not(maximumWeight != UNSET_INT))), Not(refreshNanos == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(weigher, null)))) & strictParsing) & (~((~((Ne(maximumWeight, UNSET_INT))))))) & (~((Eq(refreshNanos, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 560,
          "throwingLine": 562,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"refreshAfterWrite requires a LoadingCache\"))",
          "pathCojunction": "(!(weigher == null)) && (!(strictParsing)) && (maximumWeight == -1) && (!(refreshNanos == UNSET_INT))",
          "symbolicPathConjunction": "((!(weigher == null)) && (!(strictParsing)) && (maximumWeight == -1)) && (checkState(refreshNanos == UNSET_INT, \"refreshAfterWrite requires a LoadingCache\"))",
          "backwardsPathConjunction": "(!(weigher == null)) && (!(strictParsing)) && (maximumWeight == -1) && (!(refreshNanos == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nmaximumWeight0 = Int('maximumWeight0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(And(Not(weigher0_isNull), Not(strictParsing0)), maximumWeight0 == -1), Not(refreshNanos == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nmaximumWeight = Symbol('maximumWeight', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(weigher, null)))) & (~(strictParsing))) & (Eq(maximumWeight, -1))) & (~((Eq(refreshNanos, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 560,
          "throwingLine": 562,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Iterators.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-ae4f9a8f-f43c-4d43-84e1-5632bd678e62.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 81,
          "throwingLine": 82,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-676625fe-eaf5-448f-8cb2-7decb12cdf67.previous()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 91,
          "throwingLine": 92,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-6af57c50-7c22-4556-a683-76cee2fe42bb.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 141,
          "throwingLine": 142,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 162,
          "throwingLine": 163,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.unmodifiableIterator(com.google.common.collect.UnmodifiableIterator<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 189,
          "throwingLine": 190,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.removeIf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(checkNotNull(predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 236,
          "throwingLine": 237,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<T>)",
          "exception": "throw new IllegalArgumentException(sb.toString());",
          "pathCojunction": "(!(!iterator.hasNext())) && (i < 4 && iterator.hasNext()) && (iterator.hasNext())",
          "symbolicPathConjunction": "(!(!iterator.hasNext())) && (i < 4 && iterator.hasNext()) && (iterator.hasNext())",
          "backwardsPathConjunction": "(!(!iterator.hasNext())) && (0 < 4 && iterator.hasNext()) && (iterator.hasNext())",
          "simplifiedPathConjunction": "iterator.hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\n\nconstraints = [\n  first0 == iterator0.next(),\n  sb0 == new StringBuilder(),\n  i0 == 0,\n  And(And(Not(Not(iterator0.hasNext())), And(i0 < 4, iterator0.hasNext())), iterator0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\niterator_hasNext = Symbol('iterator_hasNext')\npath_conjunction = (((~((~(iterator_hasNext)))) & ((StrictLessThan(0, 4)) & iterator_hasNext)) & iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 304,
          "throwingLine": 320,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<? extends T>, T)",
          "exception": "throw new IllegalArgumentException(sb.toString());",
          "pathCojunction": "(iterator.hasNext()) && (!(!iterator.hasNext())) && (0 < 4 && iterator.hasNext()) && (iterator.hasNext())",
          "symbolicPathConjunction": "(iterator.hasNext()) && (getOnlyElement(iterator))",
          "backwardsPathConjunction": "(iterator.hasNext()) && (!(!iterator.hasNext())) && (0 < 4 && iterator.hasNext()) && (iterator.hasNext())",
          "simplifiedPathConjunction": "iterator.hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(And(iterator0.hasNext(), Not(Not(iterator0.hasNext()))), And(0 < 4, iterator0.hasNext())), iterator0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterator_hasNext = Symbol('iterator_hasNext')\npath_conjunction = (((iterator_hasNext & (~((~(iterator_hasNext))))) & ((StrictLessThan(0, 4)) & iterator_hasNext)) & iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 331,
          "throwingLine": 332,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(addTo == null)",
          "symbolicPathConjunction": "(checkNotNull(addTo))",
          "backwardsPathConjunction": "(addTo == null)",
          "simplifiedPathConjunction": "addTo == null",
          "z3Inputs": "[addTo0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\naddTo0_isNull = Bool('addTo0_isNull')\n\nconstraints = [\n  addTo0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\naddTo = Symbol('addTo')\nnull = Symbol('null')\npath_conjunction = (Eq(addTo, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 343,
          "throwingLine": 344,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(addTo == null)) && (iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(addTo)) && (checkNotNull(iterator))",
          "backwardsPathConjunction": "(!(addTo == null)) && (iterator == null)",
          "z3Inputs": "[iterator0_isNull = True, addTo0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\naddTo0_isNull = Bool('addTo0_isNull')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(addTo0_isNull), iterator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\naddTo = Symbol('addTo')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(addTo, null)))) & (Eq(iterator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 343,
          "throwingLine": 345,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.cycle(java.lang.Iterable<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 378,
          "throwingLine": 379,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-42299d91-ae5d-47a0-a447-954b8c4c2f23.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(iterator.hasNext())) && (!(iterator.hasNext()))",
          "symbolicPathConjunction": "(!iterator.hasNext()) && (!iterator.hasNext())",
          "backwardsPathConjunction": "(!(iterator.hasNext())) && (!(iterator.hasNext()))",
          "simplifiedPathConjunction": "!iterable.iterator().hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  iterator1 == iterable.iterator(),\n  And(Not(iterator1.hasNext()), Not(iterator1.hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\niterable_iterator = Symbol('iterable_iterator')\npath_conjunction = ((~(iterable_iterator_hasNext)) & (~(iterable_iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 415,
          "throwingLine": 419,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (b == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b))",
          "backwardsPathConjunction": "(!(a == null)) && (b == null)",
          "z3Inputs": "[b0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(a0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(a, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 462,
          "throwingLine": 464,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(a == null)",
          "symbolicPathConjunction": "(checkNotNull(a))",
          "backwardsPathConjunction": "(a == null)",
          "z3Inputs": "[a0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\n\nconstraints = [\n  a0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(a, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 462,
          "throwingLine": 463,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (b == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b))",
          "backwardsPathConjunction": "(!(a == null)) && (b == null)",
          "z3Inputs": "[b0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(a0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(a, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 483,
          "throwingLine": 485,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(a == null)",
          "symbolicPathConjunction": "(checkNotNull(a))",
          "backwardsPathConjunction": "(a == null)",
          "z3Inputs": "[a0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\n\nconstraints = [\n  a0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(a, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 483,
          "throwingLine": 484,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (!(b == null)) && (c == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b)) && (checkNotNull(c))",
          "backwardsPathConjunction": "(!(a == null)) && (!(b == null)) && (c == null)",
          "z3Inputs": "[b0_isNull = False, c0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  And(And(Not(a0_isNull), Not(b0_isNull)), c0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(a, null)))) & (~((Eq(b, null))))) & (Eq(c, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 483,
          "throwingLine": 486,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (!(b == null)) && (c == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b)) && (checkNotNull(c))",
          "backwardsPathConjunction": "(!(a == null)) && (!(b == null)) && (c == null)",
          "z3Inputs": "[b0_isNull = False, c0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  And(And(Not(a0_isNull), Not(b0_isNull)), c0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(a, null)))) & (~((Eq(b, null))))) & (Eq(c, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 508,
          "throwingLine": 511,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(a == null)",
          "symbolicPathConjunction": "(checkNotNull(a))",
          "backwardsPathConjunction": "(a == null)",
          "z3Inputs": "[a0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\n\nconstraints = [\n  a0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(a, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 508,
          "throwingLine": 509,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (b == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b))",
          "backwardsPathConjunction": "(!(a == null)) && (b == null)",
          "z3Inputs": "[b0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(a0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(a, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 508,
          "throwingLine": 510,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (!(b == null)) && (!(c == null)) && (d == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b)) && (checkNotNull(c)) && (checkNotNull(d))",
          "backwardsPathConjunction": "(!(a == null)) && (!(b == null)) && (!(c == null)) && (d == null)",
          "z3Inputs": "[d0_isNull = True,\n b0_isNull = False,\n c0_isNull = False,\n a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\nc0_isNull = Bool('c0_isNull')\nd0_isNull = Bool('d0_isNull')\n\nconstraints = [\n  And(And(And(Not(a0_isNull), Not(b0_isNull)), Not(c0_isNull)), d0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(a, null)))) & (~((Eq(b, null))))) & (~((Eq(c, null))))) & (Eq(d, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 508,
          "throwingLine": 512,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(inputs == null)) && (current == null)",
          "symbolicPathConjunction": "(checkNotNull(inputs)) && (emptyIterator()) && (checkNotNull(current))",
          "backwardsPathConjunction": "(!(inputs == null)) && (current == null)",
          "z3Inputs": "[current0_isNull = True, inputs0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninputs0_isNull = Bool('inputs0_isNull')\ncurrent0_isNull = Bool('current0_isNull')\n\nconstraints = [\n  And(Not(inputs0_isNull), current0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\ncurrent = Symbol('current')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(inputs, null)))) & (Eq(current, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 535,
          "throwingLine": 537,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.partition(java.util.Iterator<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 590,
          "throwingLine": 591,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.partition(java.util.Iterator<T>, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(iterator == null)) && (!(size > 0))",
          "symbolicPathConjunction": "((checkNotNull(iterator)) && (checkArgument(size > 0)))",
          "backwardsPathConjunction": "(!(iterator == null)) && (!(size > 0))",
          "simplifiedPathConjunction": "size <= 0 && iterator != null",
          "z3Inputs": "[size0 = 0, iterator0_isNull = False]\n[iterator0_isNull = False, size0 = -1]\n[iterator0_isNull = False, size0 = -2]\n[iterator0_isNull = False, size0 = -3]\n[iterator0_isNull = False, size0 = -4]\n[iterator0_isNull = False, size0 = -5]\n[iterator0_isNull = False, size0 = -6]\n[iterator0_isNull = False, size0 = -7]\n[iterator0_isNull = False, size0 = -8]\n[iterator0_isNull = False, size0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(iterator0_isNull), Not(size0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nsize = Symbol('size', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterator, null)))) & (~((StrictGreaterThan(size, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 590,
          "throwingLine": 591,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.paddedPartition(java.util.Iterator<T>, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(iterator == null)) && (!(size > 0))",
          "symbolicPathConjunction": "((checkNotNull(iterator)) && (checkArgument(size > 0)))",
          "backwardsPathConjunction": "(!(iterator == null)) && (!(size > 0))",
          "simplifiedPathConjunction": "size <= 0 && iterator != null",
          "z3Inputs": "[size0 = 0, iterator0_isNull = False]\n[iterator0_isNull = False, size0 = -1]\n[iterator0_isNull = False, size0 = -2]\n[iterator0_isNull = False, size0 = -3]\n[iterator0_isNull = False, size0 = -4]\n[iterator0_isNull = False, size0 = -5]\n[iterator0_isNull = False, size0 = -6]\n[iterator0_isNull = False, size0 = -7]\n[iterator0_isNull = False, size0 = -8]\n[iterator0_isNull = False, size0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(iterator0_isNull), Not(size0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nsize = Symbol('size', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterator, null)))) & (~((StrictGreaterThan(size, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 610,
          "throwingLine": 611,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.paddedPartition(java.util.Iterator<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 610,
          "throwingLine": 611,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-14d0b4c3-8242-4dd0-b562-93b600e3ce09.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(iterator.hasNext()))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(iterator.hasNext()))",
          "simplifiedPathConjunction": "!iterator.hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(iterator0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterator_hasNext = Symbol('iterator_hasNext')\npath_conjunction = (~(iterator_hasNext))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 642,
          "throwingLine": 644,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.filter(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unfiltered == null)",
          "symbolicPathConjunction": "(checkNotNull(unfiltered))",
          "backwardsPathConjunction": "(unfiltered == null)",
          "simplifiedPathConjunction": "null == unfiltered",
          "z3Inputs": "[unfiltered0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\n\nconstraints = [\n  unfiltered0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunfiltered = Symbol('unfiltered')\nnull = Symbol('null')\npath_conjunction = (Eq(unfiltered, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 650,
          "throwingLine": 651,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.all(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(checkNotNull(predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 680,
          "throwingLine": 681,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.tryFind(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(filter(iterator, predicate))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 735,
          "throwingLine": 736,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.get(java.util.Iterator<T>, int)",
          "exception": "throw new IndexOutOfBoundsException(\"position (\" + position + \") must not be negative\");",
          "pathCojunction": "(position < 0)",
          "symbolicPathConjunction": "(position < 0)",
          "backwardsPathConjunction": "(position < 0)",
          "simplifiedPathConjunction": "position < 0",
          "z3Inputs": "[position0 = -1]\n[position0 = -2]\n[position0 = -3]\n[position0 = -4]\n[position0 = -5]\n[position0 = -6]\n[position0 = -7]\n[position0 = -8]\n[position0 = -9]\n[position0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\n\nconstraints = [\n  position0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nposition = Symbol('position', integer=True)\npath_conjunction = (StrictLessThan(position, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 798,
          "throwingLine": 799,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.get(java.util.Iterator<T>, int)",
          "exception": "throw new IndexOutOfBoundsException(\"position (\" + position + \") must be less than the number of elements that remained (\" + skipped + \")\");",
          "pathCojunction": "(!(position < 0)) && (!(iterator == null)) && (!(!(position >= 0))) && (!(i < position && iterator.hasNext())) && (!(iterator.hasNext()))",
          "symbolicPathConjunction": "(!(!(position < 0))) && (advance(iterator, position)) && (!iterator.hasNext())",
          "backwardsPathConjunction": "(!(position < 0)) && (!(iterator == null)) && (!(!(position >= 0))) && (!(i < position && iterator.hasNext())) && (!(iterator.hasNext()))",
          "simplifiedPathConjunction": "position >= 0 && !iterator.hasNext() && iterator != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\ni0 = Int('i0')\nskipped0 = Int('skipped0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  skipped0 == i0,\n  And(And(And(And(Not(position0 < 0), Not(iterator0_isNull)), Not(Not(position0 >= 0))), Not(And(i0 < position0, iterator0.hasNext()))), Not(iterator0.hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nposition = Symbol('position', integer=True)\ni = Symbol('i', integer=True)\niterator_hasNext = Symbol('iterator_hasNext')\nnull = Symbol('null')\npath_conjunction = (((((~((StrictLessThan(position, 0)))) & (~((Eq(iterator, null))))) & (~((~((GreaterThan(position, 0))))))) & (~(((StrictLessThan(i, position)) & iterator_hasNext)))) & (~(iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 798,
          "throwingLine": 802,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.get(java.util.Iterator<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(position < 0)) && (iterator == null)",
          "symbolicPathConjunction": "(!(!(position < 0))) && (advance(iterator, position))",
          "backwardsPathConjunction": "(!(position < 0)) && (iterator == null)",
          "simplifiedPathConjunction": "iterator == null && position >= 0",
          "z3Inputs": "[position0 = 0, iterator0_isNull = True]\n[position0 = 1, iterator0_isNull = True]\n[position0 = 2, iterator0_isNull = True]\n[position0 = 3, iterator0_isNull = True]\n[position0 = 4, iterator0_isNull = True]\n[position0 = 5, iterator0_isNull = True]\n[position0 = 6, iterator0_isNull = True]\n[position0 = 7, iterator0_isNull = True]\n[position0 = 8, iterator0_isNull = True]\n[position0 = 9, iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(position0 < 0), iterator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nposition = Symbol('position', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((StrictLessThan(position, 0)))) & (Eq(iterator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 798,
          "throwingLine": 800,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.get(java.util.Iterator<? extends T>, int, T)",
          "exception": "throw new IndexOutOfBoundsException(\"position (\" + position + \") must not be negative\");",
          "pathCojunction": "(position < 0)",
          "symbolicPathConjunction": "(position < 0)",
          "backwardsPathConjunction": "(position < 0)",
          "simplifiedPathConjunction": "position < 0",
          "z3Inputs": "[position0 = -1]\n[position0 = -2]\n[position0 = -3]\n[position0 = -4]\n[position0 = -5]\n[position0 = -6]\n[position0 = -7]\n[position0 = -8]\n[position0 = -9]\n[position0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\n\nconstraints = [\n  position0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nposition = Symbol('position', integer=True)\npath_conjunction = (StrictLessThan(position, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 868,
          "throwingLine": 869,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.get(java.util.Iterator<? extends T>, int, T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(position < 0)) && (iterator == null)",
          "symbolicPathConjunction": "(!(position < 0)) && (advance(iterator, position))",
          "backwardsPathConjunction": "(!(position < 0)) && (iterator == null)",
          "z3Inputs": "[position0 = 0, iterator0_isNull = True]\n[position0 = 1, iterator0_isNull = True]\n[position0 = 2, iterator0_isNull = True]\n[position0 = 3, iterator0_isNull = True]\n[position0 = 4, iterator0_isNull = True]\n[position0 = 5, iterator0_isNull = True]\n[position0 = 6, iterator0_isNull = True]\n[position0 = 7, iterator0_isNull = True]\n[position0 = 8, iterator0_isNull = True]\n[position0 = 9, iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(position0 < 0), iterator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nposition = Symbol('position', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((StrictLessThan(position, 0)))) & (Eq(iterator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 868,
          "throwingLine": 870,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.advance(java.util.Iterator<?>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumberToAdvance0 = Int('numberToAdvance0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 889,
          "throwingLine": 890,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.advance(java.util.Iterator<?>, int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"numberToAdvance must be nonnegative\"))",
          "pathCojunction": "(!(iterator == null)) && (!(numberToAdvance >= 0))",
          "symbolicPathConjunction": "(checkNotNull(iterator)) && (checkArgument(numberToAdvance >= 0, \"numberToAdvance must be nonnegative\"))",
          "backwardsPathConjunction": "(!(iterator == null)) && (!(numberToAdvance >= 0))",
          "simplifiedPathConjunction": "numberToAdvance < 0 && iterator != null",
          "z3Inputs": "[numberToAdvance0 = -1, iterator0_isNull = False]\n[numberToAdvance0 = -2, iterator0_isNull = False]\n[numberToAdvance0 = -3, iterator0_isNull = False]\n[numberToAdvance0 = -4, iterator0_isNull = False]\n[numberToAdvance0 = -5, iterator0_isNull = False]\n[numberToAdvance0 = -6, iterator0_isNull = False]\n[numberToAdvance0 = -7, iterator0_isNull = False]\n[numberToAdvance0 = -8, iterator0_isNull = False]\n[numberToAdvance0 = -9, iterator0_isNull = False]\n[numberToAdvance0 = -10, iterator0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumberToAdvance0 = Int('numberToAdvance0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(iterator0_isNull), Not(numberToAdvance0 >= 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnumberToAdvance = Symbol('numberToAdvance', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterator, null)))) & (~((GreaterThan(numberToAdvance, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 889,
          "throwingLine": 891,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.limit(java.util.Iterator<T>, int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"limit is negative\"))",
          "pathCojunction": "(!(iterator == null)) && (!(limitSize >= 0))",
          "symbolicPathConjunction": "(checkNotNull(iterator)) && (checkArgument(limitSize >= 0, \"limit is negative\"))",
          "backwardsPathConjunction": "(!(iterator == null)) && (!(limitSize >= 0))",
          "simplifiedPathConjunction": "limitSize < 0 && iterator != null",
          "z3Inputs": "[limitSize0 = -1, iterator0_isNull = False]\n[limitSize0 = -2, iterator0_isNull = False]\n[limitSize0 = -3, iterator0_isNull = False]\n[limitSize0 = -4, iterator0_isNull = False]\n[limitSize0 = -5, iterator0_isNull = False]\n[limitSize0 = -6, iterator0_isNull = False]\n[limitSize0 = -7, iterator0_isNull = False]\n[limitSize0 = -8, iterator0_isNull = False]\n[limitSize0 = -9, iterator0_isNull = False]\n[limitSize0 = -10, iterator0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlimitSize0 = Int('limitSize0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(iterator0_isNull), Not(limitSize0 >= 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nlimitSize = Symbol('limitSize', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterator, null)))) & (~((GreaterThan(limitSize, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 912,
          "throwingLine": 914,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.limit(java.util.Iterator<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlimitSize0 = Int('limitSize0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 912,
          "throwingLine": 913,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-30896fbe-68d8-4a3b-8049-a902850d68c6.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(count < limitSize && iterator.hasNext()))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(count < limitSize && iterator.hasNext()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  Not(And(count0 < limitSize, iterator0.hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\ncount = Symbol('count', integer=True)\niterator_hasNext = Symbol('iterator_hasNext')\npath_conjunction = (~(((StrictLessThan(count, limitSize)) & iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 958,
          "throwingLine": 960,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.consumingIterator(java.util.Iterator<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 952,
          "throwingLine": 953,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.forArray(T...)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(0, end, array.length))",
          "pathCojunction": "(!(!(array.length >= 0))) && (0 < 0 || offset + length < 0 || offset + length > array.length)",
          "symbolicPathConjunction": "((checkArgument(length >= 0)) && (Preconditions.checkPositionIndexes(offset, end, array.length)))",
          "backwardsPathConjunction": "(!(!(array.length >= 0))) && (0 < 0 || offset + length < 0 || offset + length > array.length)",
          "simplifiedPathConjunction": "array.length >= 0 && (array.length < length + offset || length < -offset)",
          "z3Inputs": "[array0_length = 0, offset0 = 1, length0 = 0]\n[length0 = -1, array0_length = 1, offset0 = 3]\n[length0 = -3, array0_length = 1, offset0 = 2]\n[length0 = -4, array0_length = 1, offset0 = 2]\n[length0 = -4, array0_length = 2, offset0 = 0]\n[length0 = -5, array0_length = 3, offset0 = -1]\n[length0 = -6, array0_length = 3, offset0 = -1]\n[length0 = -7, array0_length = 3, offset0 = -1]\n[length0 = -6, array0_length = 3, offset0 = -2]\n[length0 = -6, array0_length = 3, offset0 = -3]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noffset0 = Int('offset0')\nlength0 = Int('length0')\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  And(Not(Not(array0_length >= 0)), Or(Or(0 < 0, offset0 + length0 < 0), offset0 + length0 > array0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\noffset = Symbol('offset', integer=True)\nlength = Symbol('length', integer=True)\narray_length = Symbol('array_length', integer=True)\npath_conjunction = ((~((~((GreaterThan(array_length, 0)))))) & (((StrictLessThan(0, 0)) | (StrictLessThan((offset + length), 0))) | (StrictGreaterThan((offset + length), array_length))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 1049,
          "throwingLine": 1050,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-73352522-bf94-4b8f-8168-cf9444a0bd95.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(done)",
          "symbolicPathConjunction": "(done)",
          "backwardsPathConjunction": "(done)",
          "simplifiedPathConjunction": "done",
          "z3Inputs": "[done0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndone0 = Bool('done0')\n\nconstraints = [\n  done0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndone = Symbol('done')\npath_conjunction = done\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1101,
          "throwingLine": 1103,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.forEnumeration(java.util.Enumeration<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(enumeration == null)",
          "symbolicPathConjunction": "(checkNotNull(enumeration))",
          "backwardsPathConjunction": "(enumeration == null)",
          "simplifiedPathConjunction": "enumeration == null",
          "z3Inputs": "[enumeration0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nenumeration0_isNull = Bool('enumeration0_isNull')\n\nconstraints = [\n  enumeration0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nenumeration = Symbol('enumeration')\nnull = Symbol('null')\npath_conjunction = (Eq(enumeration, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1119,
          "throwingLine": 1120,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.asEnumeration(java.util.Iterator<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1141,
          "throwingLine": 1142,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.peekingIterator(com.google.common.collect.PeekingIterator<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1257,
          "throwingLine": 1258,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)",
          "exception": "throw new NullPointerException(String.valueOf(\"comparator\"))",
          "pathCojunction": "(!(iterators == null)) && (comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterators, \"iterators\")) && (checkNotNull(comparator, \"comparator\"))",
          "backwardsPathConjunction": "(!(iterators == null)) && (comparator == null)",
          "z3Inputs": "[iterators0_isNull = False, comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterators0_isNull = Bool('iterators0_isNull')\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  And(Not(iterators0_isNull), comparator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterators, null)))) & (Eq(comparator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1276,
          "throwingLine": 1278,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)",
          "exception": "throw new NullPointerException(String.valueOf(\"iterators\"))",
          "pathCojunction": "(iterators == null)",
          "symbolicPathConjunction": "(checkNotNull(iterators, \"iterators\"))",
          "backwardsPathConjunction": "(iterators == null)",
          "z3Inputs": "[iterators0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterators0_isNull = Bool('iterators0_isNull')\n\nconstraints = [\n  iterators0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(iterators, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1276,
          "throwingLine": 1277,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/test/com/google/common/collect/testing/MapTestSuiteBuilderTests.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.MapTestSuiteBuilderTests.Anonymous-f0de5fa4-c99f-4179-bf91-8fa86485325c.put(java.lang.String, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 97,
          "throwingLine": 98,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.MapTestSuiteBuilderTests.Anonymous-bf3e9efb-8071-4d03-90e5-9980cb08c85f.put(java.lang.String, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(value == null)",
          "symbolicPathConjunction": "(checkNotNull(value))",
          "backwardsPathConjunction": "(value == null)",
          "simplifiedPathConjunction": "null == value",
          "z3Inputs": "[value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  value0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (Eq(value, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 116,
          "throwingLine": 117,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/TreeMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultimap.create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyComparator == null)",
          "symbolicPathConjunction": "(checkNotNull(keyComparator))",
          "backwardsPathConjunction": "(keyComparator == null)",
          "z3Inputs": "[keyComparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyComparator0_isNull = Bool('keyComparator0_isNull')\n\nconstraints = [\n  keyComparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyComparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 100,
          "throwingLine": 101,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultimap.create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(keyComparator == null)) && (valueComparator == null)",
          "symbolicPathConjunction": "(checkNotNull(keyComparator)) && (checkNotNull(valueComparator))",
          "backwardsPathConjunction": "(!(keyComparator == null)) && (valueComparator == null)",
          "z3Inputs": "[keyComparator0_isNull = False,\n valueComparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyComparator0_isNull = Bool('keyComparator0_isNull')\nvalueComparator0_isNull = Bool('valueComparator0_isNull')\n\nconstraints = [\n  And(Not(keyComparator0_isNull), valueComparator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(keyComparator, null)))) & (Eq(valueComparator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 100,
          "throwingLine": 101,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/Striped.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Striped.SmallLazyStriped.getAt(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(size != Integer.MAX_VALUE) && (index < 0 || index >= size())",
          "symbolicPathConjunction": "(size != Integer.MAX_VALUE) && (Preconditions.checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(size != Integer.MAX_VALUE) && (index < 0 || index >= size())",
          "simplifiedPathConjunction": "(size() <= index || index < 0) && Integer.MAX_VALUE != size",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nsize0 = Int('size0')\n\nconstraints = [\n  And(size0 != 2147483647, Or(index0 < 0, index0 >= size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nInteger_MAX_VALUE = Symbol('Integer_MAX_VALUE', integer=True)\nsize = Symbol('size', integer=True)\n_size = Symbol('_size')\nInteger_MAX_VALUE = Symbol('Integer_MAX_VALUE', integer=True)\npath_conjunction = ((Ne(size, Integer_MAX_VALUE)) & ((StrictLessThan(index, 0)) | (GreaterThan(index, _size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 354,
          "throwingLine": 356,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/FakeTimeLimiter.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FakeTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(target == null)",
          "symbolicPathConjunction": "(checkNotNull(target))",
          "backwardsPathConjunction": "(target == null)",
          "simplifiedPathConjunction": "null == target",
          "z3Inputs": "[timeoutDuration0 = -9223372036854775808,\n target0_isNull = True]\n[timeoutDuration0 = 0, target0_isNull = True]\n[timeoutDuration0 = -1, target0_isNull = True]\n[timeoutDuration0 = -2, target0_isNull = True]\n[timeoutDuration0 = -3, target0_isNull = True]\n[timeoutDuration0 = -4, target0_isNull = True]\n[timeoutDuration0 = -5, target0_isNull = True]\n[timeoutDuration0 = -6, target0_isNull = True]\n[timeoutDuration0 = -7, target0_isNull = True]\n[timeoutDuration0 = -8, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeoutDuration0 = Int('timeoutDuration0')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  timeoutDuration0 >= -9223372036854775808, timeoutDuration0 <= 9223372036854775807, # implicit\n  target0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = (Eq(target, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 40,
          "throwingLine": 41,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FakeTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(target == null)) && (interfaceType == null)",
          "symbolicPathConjunction": "(checkNotNull(target)) && (checkNotNull(interfaceType))",
          "backwardsPathConjunction": "(!(target == null)) && (interfaceType == null)",
          "simplifiedPathConjunction": "interfaceType == null && null != target",
          "z3Inputs": "[timeoutDuration0 = -9223372036854775808,\n target0_isNull = False,\n interfaceType0_isNull = True]\n[interfaceType0_isNull = True,\n timeoutDuration0 = 0,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -1,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -2,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -3,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -4,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -5,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -6,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -7,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -8,\n target0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeoutDuration0 = Int('timeoutDuration0')\ntarget0_isNull = Bool('target0_isNull')\ninterfaceType0_isNull = Bool('interfaceType0_isNull')\n\nconstraints = [\n  timeoutDuration0 >= -9223372036854775808, timeoutDuration0 <= 9223372036854775807, # implicit\n  And(Not(target0_isNull), interfaceType0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntarget = Symbol('target')\ninterfaceType = Symbol('interfaceType')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(target, null)))) & (Eq(interfaceType, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 40,
          "throwingLine": 42,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FakeTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(target == null)) && (!(interfaceType == null)) && (timeoutUnit == null)",
          "symbolicPathConjunction": "(checkNotNull(target)) && (checkNotNull(interfaceType)) && (checkNotNull(timeoutUnit))",
          "backwardsPathConjunction": "(!(target == null)) && (!(interfaceType == null)) && (timeoutUnit == null)",
          "simplifiedPathConjunction": "null == timeoutUnit && interfaceType != null && null != target",
          "z3Inputs": "[timeoutDuration0 = -9223372036854775808,\n target0_isNull = False,\n timeoutUnit0_isNull = True,\n interfaceType0_isNull = False]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = 0]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -1]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -2]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -3]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -4]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -5]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -6]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -7]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeoutDuration0 = Int('timeoutDuration0')\ntarget0_isNull = Bool('target0_isNull')\ninterfaceType0_isNull = Bool('interfaceType0_isNull')\ntimeoutUnit0_isNull = Bool('timeoutUnit0_isNull')\n\nconstraints = [\n  timeoutDuration0 >= -9223372036854775808, timeoutDuration0 <= 9223372036854775807, # implicit\n  And(And(Not(target0_isNull), Not(interfaceType0_isNull)), timeoutUnit0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntarget = Symbol('target')\ninterfaceType = Symbol('interfaceType')\ntimeoutUnit = Symbol('timeoutUnit')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(target, null)))) & (~((Eq(interfaceType, null))))) & (Eq(timeoutUnit, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 40,
          "throwingLine": 43,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/AtomicLongMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AtomicLongMap.get(K)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(map.get(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AtomicLongMap.remove(K)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(map.get(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 235,
          "throwingLine": 236,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AtomicLongMap.remove(K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (!(atomic == null)) && (true) && (update == oldValue) && (oldValue == 0L || true) && (!(key == null)) && (key == null)",
          "symbolicPathConjunction": "(map.get(key)) && (!(atomic == null)) && (true) && (atomic.get()) && (atomic.compareAndSet(oldValue, 0L)) && (oldValue == 0L || atomic.compareAndSet(oldValue, 0L)) && (map.remove(key, atomic))",
          "backwardsPathConjunction": "(!(key == null)) && (!(backingMap.get(key) == null)) && (true) && (update == value) && (value == 0L || true) && (!(key == null)) && (key == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = Int('value0')\noldValue0 = Int('oldValue0')\nupdate0 = Int('update0')\nkey0_isNull = Bool('key0_isNull')\natomic0_isNull = Bool('atomic0_isNull')\n\nconstraints = [\n  atomic0 == backingMap0.get(key0),\n  oldValue0 == value0,\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  oldValue0 >= -9223372036854775808, oldValue0 <= 9223372036854775807, # implicit\n  update0 >= -9223372036854775808, update0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(And(Not(key0_isNull), Not(atomic0_isNull)), True), update0 == oldValue0), Or(oldValue0 == 0L, True)), Not(key0_isNull)), key0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nbackingMap = Symbol('backingMap')\nvalue = Symbol('value')\nupdate = Symbol('update')\nbackingMap_get = Symbol('backingMap_get')\nnull = Symbol('null')\npath_conjunction = (((((((~((Eq(key, null)))) & (~((Eq(backingMap_get, null))))) & True) & (Eq(update, value))) & ((Eq(value, 0L)) | True)) & (~((Eq(key, null))))) & (Eq(key, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 235,
          "throwingLine": 245,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AtomicLongMap.remove(K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (!(atomic == null)) && (true) && (!(value == oldValue)) && (oldValue == 0L || false) && (!(key == null)) && (!(key == null)) && (backingMap.containsKey(key) && backingMap.get(key).equals(atomic)) && (key == null)",
          "symbolicPathConjunction": "(map.get(key)) && (!(atomic == null)) && (true) && (atomic.get()) && (atomic.compareAndSet(oldValue, 0L)) && (oldValue == 0L || atomic.compareAndSet(oldValue, 0L)) && (map.remove(key, atomic))",
          "backwardsPathConjunction": "(!(key == null)) && (!(backingMap.get(key) == null)) && (true) && (!(value == value)) && (value == 0L || false) && (!(key == null)) && (!(key == null)) && (backingMap.containsKey(key) && backingMap.get(key).equals(backingMap.get(key))) && (key == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = Int('value0')\noldValue0 = Int('oldValue0')\nkey0_isNull = Bool('key0_isNull')\natomic0_isNull = Bool('atomic0_isNull')\n\nconstraints = [\n  atomic0 == backingMap0.get(key0),\n  oldValue0 == value0,\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  oldValue0 >= -9223372036854775808, oldValue0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(And(And(And(Not(key0_isNull), Not(atomic0_isNull)), True), Not(value0 == oldValue0)), Or(oldValue0 == 0L, False)), Not(key0_isNull)), Not(key0_isNull)), And(backingMap0.containsKey(key0), backingMap0.get(key0).equals(atomic0))), key0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nbackingMap = Symbol('backingMap')\nvalue = Symbol('value')\nbackingMap_get = Symbol('backingMap_get')\nbackingMap_containsKey = Symbol('backingMap_containsKey')\nbackingMap_get_equals = Symbol('backingMap_get_equals')\nnull = Symbol('null')\npath_conjunction = (((((((((~((Eq(key, null)))) & (~((Eq(backingMap_get, null))))) & True) & (~((Eq(value, value))))) & ((Eq(value, 0L)) | False)) & (~((Eq(key, null))))) & (~((Eq(key, null))))) & (backingMap_containsKey & backingMap_get_equals)) & (Eq(key, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 235,
          "throwingLine": 245,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AtomicLongMap.remove(K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (!(atomic == null)) && (true) && (update == oldValue) && (oldValue == 0L || true) && (!(key == null)) && (!(key == null)) && (backingMap.containsKey(key) && backingMap.get(key).equals(atomic)) && (key == null)",
          "symbolicPathConjunction": "(map.get(key)) && (!(atomic == null)) && (true) && (atomic.get()) && (atomic.compareAndSet(oldValue, 0L)) && (oldValue == 0L || atomic.compareAndSet(oldValue, 0L)) && (map.remove(key, atomic))",
          "backwardsPathConjunction": "(!(key == null)) && (!(backingMap.get(key) == null)) && (true) && (update == value) && (value == 0L || true) && (!(key == null)) && (!(key == null)) && (backingMap.containsKey(key) && backingMap.get(key).equals(backingMap.get(key))) && (key == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = Int('value0')\noldValue0 = Int('oldValue0')\nupdate0 = Int('update0')\nkey0_isNull = Bool('key0_isNull')\natomic0_isNull = Bool('atomic0_isNull')\n\nconstraints = [\n  atomic0 == backingMap0.get(key0),\n  oldValue0 == value0,\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  oldValue0 >= -9223372036854775808, oldValue0 <= 9223372036854775807, # implicit\n  update0 >= -9223372036854775808, update0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(And(And(And(Not(key0_isNull), Not(atomic0_isNull)), True), update0 == oldValue0), Or(oldValue0 == 0L, True)), Not(key0_isNull)), Not(key0_isNull)), And(backingMap0.containsKey(key0), backingMap0.get(key0).equals(atomic0))), key0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nbackingMap = Symbol('backingMap')\nvalue = Symbol('value')\nupdate = Symbol('update')\nbackingMap_get = Symbol('backingMap_get')\nbackingMap_containsKey = Symbol('backingMap_containsKey')\nbackingMap_get_equals = Symbol('backingMap_get_equals')\nnull = Symbol('null')\npath_conjunction = (((((((((~((Eq(key, null)))) & (~((Eq(backingMap_get, null))))) & True) & (Eq(update, value))) & ((Eq(value, 0L)) | True)) & (~((Eq(key, null))))) & (~((Eq(key, null))))) & (backingMap_containsKey & backingMap_get_equals)) & (Eq(key, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 235,
          "throwingLine": 245,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AtomicLongMap.remove(K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (!(atomic == null)) && (true) && (!(value == oldValue)) && (oldValue == 0L || false) && (!(key == null)) && (key == null)",
          "symbolicPathConjunction": "(map.get(key)) && (!(atomic == null)) && (true) && (atomic.get()) && (atomic.compareAndSet(oldValue, 0L)) && (oldValue == 0L || atomic.compareAndSet(oldValue, 0L)) && (map.remove(key, atomic))",
          "backwardsPathConjunction": "(!(key == null)) && (!(backingMap.get(key) == null)) && (true) && (!(value == value)) && (value == 0L || false) && (!(key == null)) && (key == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = Int('value0')\noldValue0 = Int('oldValue0')\nkey0_isNull = Bool('key0_isNull')\natomic0_isNull = Bool('atomic0_isNull')\n\nconstraints = [\n  atomic0 == backingMap0.get(key0),\n  oldValue0 == value0,\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  oldValue0 >= -9223372036854775808, oldValue0 <= 9223372036854775807, # implicit\n  And(And(And(And(And(And(Not(key0_isNull), Not(atomic0_isNull)), True), Not(value0 == oldValue0)), Or(oldValue0 == 0L, False)), Not(key0_isNull)), key0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nbackingMap = Symbol('backingMap')\nvalue = Symbol('value')\nbackingMap_get = Symbol('backingMap_get')\nnull = Symbol('null')\npath_conjunction = (((((((~((Eq(key, null)))) & (~((Eq(backingMap_get, null))))) & True) & (~((Eq(value, value))))) & ((Eq(value, 0L)) | False)) & (~((Eq(key, null))))) & (Eq(key, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 235,
          "throwingLine": 245,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/UnsignedBytes.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedBytes.checkedCast(long)",
          "exception": "throw new IllegalArgumentException(\"Out of range: \" + value);",
          "pathCojunction": "((value >> Byte.SIZE) != 0)",
          "symbolicPathConjunction": "((value >> Byte.SIZE) != 0)",
          "backwardsPathConjunction": "((value >> Byte.SIZE) != 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = Int('value0')\nByte_SIZE0 = Int('Byte_SIZE0')\n\nconstraints = [\n  value0 >= -9223372036854775808, value0 <= 9223372036854775807, # implicit\n  value0 >> Byte_SIZE0 != 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 91,
          "throwingLine": 94,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedBytes.min(byte...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 142,
          "throwingLine": 143,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedBytes.max(byte...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 163,
          "throwingLine": 164,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedBytes.parseUnsignedByte(java.lang.String, int)",
          "exception": "throw new NumberFormatException(\"out of range: \" + parse);",
          "pathCojunction": "(!(parse >> Byte.SIZE == 0))",
          "symbolicPathConjunction": "(!(parse >> Byte.SIZE == 0))",
          "backwardsPathConjunction": "(!(Integer.parseInt(checkNotNull(string), radix) >> Byte.SIZE == 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nradix0 = Int('radix0')\nparse0 = Int('parse0')\nByte_SIZE0 = Int('Byte_SIZE0')\n\nconstraints = [\n  parse0 == Integer.parseInt(checkNotNull(string0), radix0),\n  Not(parse0 >> Byte_SIZE0 == 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 234,
          "throwingLine": 240,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedBytes.join(java.lang.String, byte...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 254,
          "throwingLine": 255,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SuppliersTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.SuppliersTest.Anonymous-98112b2a-e63a-4ad1-bec5-59454d44eb61.apply(java.util.List<java.lang.Integer>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(list == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(list))",
          "backwardsPathConjunction": "(list == null)",
          "simplifiedPathConjunction": "list == null",
          "z3Inputs": "[list0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  list0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlist = Symbol('list')\nnull = Symbol('null')\npath_conjunction = (Eq(list, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 71,
          "throwingLine": 72,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.SuppliersTest.Anonymous-304a0702-886b-44dd-b46f-45534f410160.get()",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 127,
          "throwingLine": 128,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/Bytes.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Bytes.indexOf(byte[], byte[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 121,
          "throwingLine": 123,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Bytes.indexOf(byte[], byte[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 121,
          "throwingLine": 122,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Bytes.ByteArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 296,
          "throwingLine": 297,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Bytes.ByteArrayAsList.set(int, java.lang.Byte)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  element0 >= -128, element0 <= 127, # implicit\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 332,
          "throwingLine": 333,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Bytes.ByteArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 341,
          "throwingLine": 343,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/io/TestOutputStream.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.TestOutputStream.write(byte[], int, int)",
          "exception": "throw new IOException()",
          "pathCojunction": "(!(closed)) && (options.contains(WRITE_THROWS))",
          "symbolicPathConjunction": "(!(condition)) && (throwIf(options.contains(option)))",
          "backwardsPathConjunction": "(!(closed)) && (options.contains(WRITE_THROWS))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\n\nconstraints = [\n  And(Not(closed), options.contains(WRITE_THROWS))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noptions_contains = Symbol('options_contains')\npath_conjunction = ((~(closed)) & options_contains)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 54,
          "throwingLine": 56,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.TestOutputStream.write(byte[], int, int)",
          "exception": "throw new IOException()",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(condition)",
          "backwardsPathConjunction": "(closed)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\n\nconstraints = [\n  closed\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 54,
          "throwingLine": 55,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.TestOutputStream.write(int)",
          "exception": "throw new IOException()",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(condition)",
          "backwardsPathConjunction": "(closed)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nb0 = Int('b0')\n\nconstraints = [\n  closed\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 61,
          "throwingLine": 62,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.TestOutputStream.write(int)",
          "exception": "throw new IOException()",
          "pathCojunction": "(!(closed)) && (options.contains(WRITE_THROWS))",
          "symbolicPathConjunction": "(!(condition)) && (throwIf(options.contains(option)))",
          "backwardsPathConjunction": "(!(closed)) && (options.contains(WRITE_THROWS))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nb0 = Int('b0')\n\nconstraints = [\n  And(Not(closed), options.contains(WRITE_THROWS))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noptions_contains = Symbol('options_contains')\npath_conjunction = ((~(closed)) & options_contains)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 61,
          "throwingLine": 63,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.TestOutputStream.close()",
          "exception": "throw new IOException()",
          "pathCojunction": "(options.contains(CLOSE_THROWS))",
          "symbolicPathConjunction": "(throwIf(options.contains(option)))",
          "backwardsPathConjunction": "(options.contains(CLOSE_THROWS))",
          "simplifiedPathConjunction": "options.contains(CLOSE_THROWS)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nclosed0 = Bool('closed0')\n\nconstraints = [\n  closed0 == True,\n  options.contains(CLOSE_THROWS)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noptions_contains = Symbol('options_contains')\npath_conjunction = options_contains\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 68,
          "throwingLine": 71,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FutureCallbackTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.testSameThreadSuccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(callback == null)",
          "symbolicPathConjunction": "(SettableFuture.create()) && (Futures.addCallback(f, callback))",
          "backwardsPathConjunction": "(new MockCallback(\"foo\") == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  f0 == new SettableFuture<V>(),\n  callback0 == new MockCallback(\"foo\"),\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 39,
          "throwingLine": 42,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.testSameThreadExecutionException()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(callback == null)",
          "symbolicPathConjunction": "(SettableFuture.create()) && (Futures.addCallback(f, callback))",
          "backwardsPathConjunction": "(new MockCallback(new IllegalArgumentException(\"foo not found\")) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  f0 == new SettableFuture<V>(),\n  e0 == new IllegalArgumentException(\"foo not found\"),\n  callback0 == new MockCallback(e0),\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 56,
          "throwingLine": 60,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.testThrowErrorFromGet()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(callback == null)",
          "symbolicPathConjunction": "(ThrowingFuture.throwingError(error)) && (Futures.addCallback(f, callback))",
          "backwardsPathConjunction": "(new MockCallback(error) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  error0 == new AssertionError(\"ASSERT!\"),\n  f0 == new ThrowingFuture<V>(error0),\n  callback0 == new MockCallback(error0),\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 86,
          "throwingLine": 90,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.testRuntimeExeceptionFromGet()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(callback == null)",
          "symbolicPathConjunction": "(ThrowingFuture.throwingRuntimeException(e)) && (Futures.addCallback(f, callback))",
          "backwardsPathConjunction": "(new MockCallback(new IllegalArgumentException(\"foo not found\")) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  e0 == new IllegalArgumentException(\"foo not found\"),\n  f0 == new ThrowingFuture<V>(e0),\n  callback0 == new MockCallback(e0),\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 93,
          "throwingLine": 97,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.testWildcardFuture()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(callback == null)",
          "symbolicPathConjunction": "(SettableFuture.create()) && (Futures.addCallback(f, callback))",
          "backwardsPathConjunction": "(new FutureCallback<Object>() {\n\n    @Override\n    public void onSuccess(Object result) {\n    }\n\n    @Override\n    public void onFailure(Throwable t) {\n    }\n} == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  settable0 == new SettableFuture<V>(),\n  f0 == settable0,\n  callback0 == new FutureCallback<Object>() {\n\n    @Override\n    public void onSuccess(Object result) {\n    }\n\n    @Override\n    public void onFailure(Throwable t) {\n    }\n},\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 100,
          "throwingLine": 110,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.ThrowingFuture.get()",
          "exception": "throw error;",
          "pathCojunction": "(error != null)",
          "symbolicPathConjunction": "(error != null)",
          "backwardsPathConjunction": "(error != null)",
          "simplifiedPathConjunction": "error != null",
          "z3Inputs": "[error0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nerror0_isNull = Bool('error0_isNull')\n\nconstraints = [\n  Not(error0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerror = Symbol('error')\nnull = Symbol('null')\npath_conjunction = (Ne(error, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 172,
          "throwingLine": 173,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.ThrowingFuture.get()",
          "exception": "throw runtime;",
          "pathCojunction": "(!(error != null))",
          "symbolicPathConjunction": "(!(error != null))",
          "backwardsPathConjunction": "(!(error != null))",
          "simplifiedPathConjunction": "error == null",
          "z3Inputs": "[error0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nerror0_isNull = Bool('error0_isNull')\n\nconstraints = [\n  Not(Not(error0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerror = Symbol('error')\nnull = Symbol('null')\npath_conjunction = (~((Ne(error, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 172,
          "throwingLine": 173,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.ThrowingFuture.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw error;",
          "pathCojunction": "(error != null)",
          "symbolicPathConjunction": "(error != null)",
          "backwardsPathConjunction": "(error != null)",
          "simplifiedPathConjunction": "error != null",
          "z3Inputs": "[timeout0 = -9223372036854775808, error0_isNull = False]\n[error0_isNull = False, timeout0 = 0]\n[error0_isNull = False, timeout0 = -1]\n[error0_isNull = False, timeout0 = -2]\n[error0_isNull = False, timeout0 = -3]\n[error0_isNull = False, timeout0 = -4]\n[error0_isNull = False, timeout0 = -5]\n[error0_isNull = False, timeout0 = -6]\n[error0_isNull = False, timeout0 = -7]\n[error0_isNull = False, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\nerror0_isNull = Bool('error0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  Not(error0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerror = Symbol('error')\nnull = Symbol('null')\npath_conjunction = (Ne(error, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 178,
          "throwingLine": 179,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.ThrowingFuture.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw runtime;",
          "pathCojunction": "(!(error != null))",
          "symbolicPathConjunction": "(!(error != null))",
          "backwardsPathConjunction": "(!(error != null))",
          "simplifiedPathConjunction": "error == null",
          "z3Inputs": "[timeout0 = -9223372036854775808, error0_isNull = True]\n[error0_isNull = True, timeout0 = 0]\n[error0_isNull = True, timeout0 = -1]\n[error0_isNull = True, timeout0 = -2]\n[error0_isNull = True, timeout0 = -3]\n[error0_isNull = True, timeout0 = -4]\n[error0_isNull = True, timeout0 = -5]\n[error0_isNull = True, timeout0 = -6]\n[error0_isNull = True, timeout0 = -7]\n[error0_isNull = True, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\nerror0_isNull = Bool('error0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  Not(Not(error0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerror = Symbol('error')\nnull = Symbol('null')\npath_conjunction = (~((Ne(error, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 178,
          "throwingLine": 179,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/cache/RemovalNotification.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.RemovalNotification.setValue(V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 86,
          "throwingLine": 87,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/ListenerCallQueueTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ListenerCallQueueTest.Anonymous-3cfb15aa-52c1-492f-8ffe-7ae17a9d5abe.call(java.lang.Object)",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 36,
          "throwingLine": 37,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/CartesianList.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.CartesianList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 72,
          "throwingLine": 73,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.CartesianList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(axis, size(), \"index\"))",
          "pathCojunction": "(!(index < 0 || index >= size())) && (axis < 0 || axis >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size())) && (checkElementIndex(axis, size()))",
          "backwardsPathConjunction": "(!(index < 0 || index >= size())) && (axis < 0 || axis >= size())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  And(Not(Or(index0 < 0, index0 >= size())), Or(axis < 0, axis >= size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((~(((StrictLessThan(index, 0)) | (GreaterThan(index, _size))))) & ((StrictLessThan(axis, 0)) | (GreaterThan(axis, _size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 72,
          "throwingLine": 74,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.CartesianList.Anonymous-2e0d32de-7b84-41e2-9a5f-be5d85c5c415.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(axis, size(), \"index\"))",
          "pathCojunction": "(axis < 0 || axis >= size())",
          "symbolicPathConjunction": "(checkElementIndex(axis, size()))",
          "backwardsPathConjunction": "(axis < 0 || axis >= size())",
          "simplifiedPathConjunction": "size() <= axis || axis < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\naxis0 = Int('axis0')\n\nconstraints = [\n  Or(axis0 < 0, axis0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\naxis = Symbol('axis', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(axis, 0)) | (GreaterThan(axis, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 82,
          "throwingLine": 83,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.MonitorBasedPriorityBlockingQueue.offer(E, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unit == null)",
          "symbolicPathConjunction": "(checkNotNull(unit))",
          "backwardsPathConjunction": "(unit == null)",
          "simplifiedPathConjunction": "null == unit",
          "z3Inputs": "[timeout0 = -9223372036854775808, unit0_isNull = True]\n[unit0_isNull = True, timeout0 = 0]\n[unit0_isNull = True, timeout0 = -1]\n[unit0_isNull = True, timeout0 = -2]\n[unit0_isNull = True, timeout0 = -3]\n[unit0_isNull = True, timeout0 = -4]\n[unit0_isNull = True, timeout0 = -5]\n[unit0_isNull = True, timeout0 = -6]\n[unit0_isNull = True, timeout0 = -7]\n[unit0_isNull = True, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\nunit0_isNull = Bool('unit0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  unit0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunit = Symbol('unit')\nnull = Symbol('null')\npath_conjunction = (Eq(unit, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 231,
          "throwingLine": 232,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.MonitorBasedPriorityBlockingQueue.Itr.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(cursor >= array.length)",
          "symbolicPathConjunction": "(cursor >= array.length)",
          "backwardsPathConjunction": "(cursor >= array.length)",
          "simplifiedPathConjunction": "array.length <= cursor",
          "z3Inputs": "[array0_length = 0, cursor0 = 0]\n[array0_length = 1, cursor0 = 1]\n[array0_length = 2, cursor0 = 2]\n[array0_length = 1, cursor0 = 3]\n[array0_length = 1, cursor0 = 4]\n[array0_length = 1, cursor0 = 5]\n[array0_length = 1, cursor0 = 6]\n[array0_length = 1, cursor0 = 7]\n[array0_length = 1, cursor0 = 8]\n[array0_length = 1, cursor0 = 9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncursor0 = Int('cursor0')\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  cursor0 >= array0_length\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncursor = Symbol('cursor', integer=True)\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (GreaterThan(cursor, array_length))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 540,
          "throwingLine": 542,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Utf8.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)",
          "exception": "throw new IllegalArgumentException(\"UTF-8 length does not fit in int: \" + (utf8Length + (1L << 32)));",
          "pathCojunction": "(!(i < utf16Length && sequence.charAt(i) < 0x80)) && (i < utf16Length) && (!(c < 0x800)) && (utf8Length < utf16Length)",
          "symbolicPathConjunction": "(!(i < utf16Length && sequence.charAt(i) < 0x80)) && (i < utf16Length) && (!(c < 0x800)) && (utf8Length < utf16Length)",
          "backwardsPathConjunction": "(!(0 < sequence.length() && sequence.charAt(0) < 0x80)) && (0 < sequence.length()) && (!(sequence.charAt(0) < 0x800)) && (utf8Length + encodedLengthGeneral(sequence, i) + encodedLengthGeneral(sequence, i) < sequence.length())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nutf16Length0 = Int('utf16Length0')\nutf8Length0 = Int('utf8Length0')\ni0 = Int('i0')\nutf8Length1 = Int('utf8Length1')\n\nconstraints = [\n  utf16Length0 == Length(sequence0),\n  utf8Length0 == utf16Length0,\n  i0 == 0,\n  c0 == sequence0.charAt(i0),\n  utf8Length1 == utf8Length0 + encodedLengthGeneral(sequence0, i0),\n  And(And(And(Not(And(i0 < utf16Length0, sequence0.charAt(i0) < 0x80)), i0 < utf16Length0), Not(c0 < 0x800)), utf8Length1 < utf16Length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_length = Symbol('sequence_length')\nsequence_charAt = Symbol('sequence_charAt')\n_encodedLengthGeneral = Symbol('_encodedLengthGeneral')\npath_conjunction = ((((~(((StrictLessThan(0, sequence_length)) & (StrictLessThan(sequence_charAt, 0x80))))) & (StrictLessThan(0, sequence_length))) & (~((StrictLessThan(sequence_charAt, 0x800))))) & (StrictLessThan(((utf8Length + _encodedLengthGeneral) + _encodedLengthGeneral), sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 53,
          "throwingLine": 77,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)",
          "exception": "throw new IllegalArgumentException(\"UTF-8 length does not fit in int: \" + (utf8Length + (1L << 32)));",
          "pathCojunction": "(i < utf16Length && sequence.charAt(i) < 0x80) && (!(i < utf16Length && sequence.charAt(i) < 0x80)) && (i < utf16Length) && (!(c < 0x800)) && (utf8Length < utf16Length)",
          "symbolicPathConjunction": "(i < utf16Length && sequence.charAt(i) < 0x80) && (!(i < utf16Length && sequence.charAt(i) < 0x80)) && (i < utf16Length) && (!(c < 0x800)) && (utf8Length < utf16Length)",
          "backwardsPathConjunction": "(0 < sequence.length() && sequence.charAt(0) < 0x80) && (!(0 < sequence.length() && sequence.charAt(0) < 0x80)) && (0 < sequence.length()) && (!(sequence.charAt(0) < 0x800)) && (utf8Length + encodedLengthGeneral(sequence, i) + encodedLengthGeneral(sequence, i) < sequence.length())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nutf16Length0 = Int('utf16Length0')\nutf8Length0 = Int('utf8Length0')\ni0 = Int('i0')\nutf8Length1 = Int('utf8Length1')\n\nconstraints = [\n  utf16Length0 == Length(sequence0),\n  utf8Length0 == utf16Length0,\n  i0 == 0,\n  c0 == sequence0.charAt(i0),\n  utf8Length1 == utf8Length0 + encodedLengthGeneral(sequence0, i0),\n  And(And(And(And(And(i0 < utf16Length0, sequence0.charAt(i0) < 0x80), Not(And(i0 < utf16Length0, sequence0.charAt(i0) < 0x80))), i0 < utf16Length0), Not(c0 < 0x800)), utf8Length1 < utf16Length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_length = Symbol('sequence_length')\nsequence_charAt = Symbol('sequence_charAt')\n_encodedLengthGeneral = Symbol('_encodedLengthGeneral')\npath_conjunction = ((((((StrictLessThan(0, sequence_length)) & (StrictLessThan(sequence_charAt, 0x80))) & (~(((StrictLessThan(0, sequence_length)) & (StrictLessThan(sequence_charAt, 0x80)))))) & (StrictLessThan(0, sequence_length))) & (~((StrictLessThan(sequence_charAt, 0x800))))) & (StrictLessThan(((utf8Length + _encodedLengthGeneral) + _encodedLengthGeneral), sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 53,
          "throwingLine": 77,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)",
          "exception": "throw new IllegalArgumentException(\"UTF-8 length does not fit in int: \" + (utf8Length + (1L << 32)));",
          "pathCojunction": "(!(i < utf16Length && sequence.charAt(i) < 0x80)) && (i < utf16Length) && (c < 0x800) && (utf8Length < utf16Length)",
          "symbolicPathConjunction": "(!(i < utf16Length && sequence.charAt(i) < 0x80)) && (i < utf16Length) && (c < 0x800) && (utf8Length < utf16Length)",
          "backwardsPathConjunction": "(!(0 < sequence.length() && sequence.charAt(0) < 0x80)) && (0 < sequence.length()) && (sequence.charAt(0) < 0x800) && (utf8Length + ((0x7f - c) >>> 31) + ((0x7f - c) >>> 31) < sequence.length())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nutf16Length0 = Int('utf16Length0')\nutf8Length0 = Int('utf8Length0')\ni0 = Int('i0')\nutf8Length1 = Int('utf8Length1')\n\nconstraints = [\n  utf16Length0 == Length(sequence0),\n  utf8Length0 == utf16Length0,\n  i0 == 0,\n  c0 == sequence0.charAt(i0),\n  utf8Length1 == utf8Length0 + ((0x7f - c0) >>> 31),\n  And(And(And(Not(And(i0 < utf16Length0, sequence0.charAt(i0) < 0x80)), i0 < utf16Length0), c0 < 0x800), utf8Length1 < utf16Length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_length = Symbol('sequence_length')\nsequence_charAt = Symbol('sequence_charAt')\npath_conjunction = ((((~(((StrictLessThan(0, sequence_length)) & (StrictLessThan(sequence_charAt, 0x80))))) & (StrictLessThan(0, sequence_length))) & (StrictLessThan(sequence_charAt, 0x800))) & (StrictLessThan(((utf8Length + ((0x7f - c) >>> 31)) + ((0x7f - c) >>> 31)), sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 53,
          "throwingLine": 77,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)",
          "exception": "throw new IllegalArgumentException(\"UTF-8 length does not fit in int: \" + (utf8Length + (1L << 32)));",
          "pathCojunction": "(!(i < utf16Length && sequence.charAt(i) < 0x80)) && (!(i < utf16Length)) && (utf8Length < utf16Length)",
          "symbolicPathConjunction": "(!(i < utf16Length && sequence.charAt(i) < 0x80)) && (!(i < utf16Length)) && (utf8Length < utf16Length)",
          "backwardsPathConjunction": "(!(0 < sequence.length() && sequence.charAt(0) < 0x80)) && (!(0 < sequence.length())) && (utf16Length < sequence.length())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nutf16Length0 = Int('utf16Length0')\nutf8Length0 = Int('utf8Length0')\ni0 = Int('i0')\n\nconstraints = [\n  utf16Length0 == Length(sequence0),\n  utf8Length0 == utf16Length0,\n  i0 == 0,\n  And(And(Not(And(i0 < utf16Length0, sequence0.charAt(i0) < 0x80)), Not(i0 < utf16Length0)), utf8Length0 < utf16Length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_length = Symbol('sequence_length')\nsequence_charAt = Symbol('sequence_charAt')\npath_conjunction = (((~(((StrictLessThan(0, sequence_length)) & (StrictLessThan(sequence_charAt, 0x80))))) & (~((StrictLessThan(0, sequence_length))))) & (StrictLessThan(utf16Length, sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 53,
          "throwingLine": 77,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)",
          "exception": "throw new IllegalArgumentException(\"UTF-8 length does not fit in int: \" + (utf8Length + (1L << 32)));",
          "pathCojunction": "(i < utf16Length && sequence.charAt(i) < 0x80) && (!(i < utf16Length && sequence.charAt(i) < 0x80)) && (i < utf16Length) && (c < 0x800) && (utf8Length < utf16Length)",
          "symbolicPathConjunction": "(i < utf16Length && sequence.charAt(i) < 0x80) && (!(i < utf16Length && sequence.charAt(i) < 0x80)) && (i < utf16Length) && (c < 0x800) && (utf8Length < utf16Length)",
          "backwardsPathConjunction": "(0 < sequence.length() && sequence.charAt(0) < 0x80) && (!(0 < sequence.length() && sequence.charAt(0) < 0x80)) && (0 < sequence.length()) && (sequence.charAt(0) < 0x800) && (utf8Length + ((0x7f - c) >>> 31) + ((0x7f - c) >>> 31) < sequence.length())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nutf16Length0 = Int('utf16Length0')\nutf8Length0 = Int('utf8Length0')\ni0 = Int('i0')\nutf8Length1 = Int('utf8Length1')\n\nconstraints = [\n  utf16Length0 == Length(sequence0),\n  utf8Length0 == utf16Length0,\n  i0 == 0,\n  c0 == sequence0.charAt(i0),\n  utf8Length1 == utf8Length0 + ((0x7f - c0) >>> 31),\n  And(And(And(And(And(i0 < utf16Length0, sequence0.charAt(i0) < 0x80), Not(And(i0 < utf16Length0, sequence0.charAt(i0) < 0x80))), i0 < utf16Length0), c0 < 0x800), utf8Length1 < utf16Length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_length = Symbol('sequence_length')\nsequence_charAt = Symbol('sequence_charAt')\npath_conjunction = ((((((StrictLessThan(0, sequence_length)) & (StrictLessThan(sequence_charAt, 0x80))) & (~(((StrictLessThan(0, sequence_length)) & (StrictLessThan(sequence_charAt, 0x80)))))) & (StrictLessThan(0, sequence_length))) & (StrictLessThan(sequence_charAt, 0x800))) & (StrictLessThan(((utf8Length + ((0x7f - c) >>> 31)) + ((0x7f - c) >>> 31)), sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 53,
          "throwingLine": 77,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)",
          "exception": "throw new IllegalArgumentException(\"UTF-8 length does not fit in int: \" + (utf8Length + (1L << 32)));",
          "pathCojunction": "(i < utf16Length && sequence.charAt(i) < 0x80) && (!(i < utf16Length && sequence.charAt(i) < 0x80)) && (!(i < utf16Length)) && (utf8Length < utf16Length)",
          "symbolicPathConjunction": "(i < utf16Length && sequence.charAt(i) < 0x80) && (!(i < utf16Length && sequence.charAt(i) < 0x80)) && (!(i < utf16Length)) && (utf8Length < utf16Length)",
          "backwardsPathConjunction": "(0 < sequence.length() && sequence.charAt(0) < 0x80) && (!(0 < sequence.length() && sequence.charAt(0) < 0x80)) && (!(0 < sequence.length())) && (utf16Length < sequence.length())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nutf16Length0 = Int('utf16Length0')\nutf8Length0 = Int('utf8Length0')\ni0 = Int('i0')\n\nconstraints = [\n  utf16Length0 == Length(sequence0),\n  utf8Length0 == utf16Length0,\n  i0 == 0,\n  And(And(And(And(i0 < utf16Length0, sequence0.charAt(i0) < 0x80), Not(And(i0 < utf16Length0, sequence0.charAt(i0) < 0x80))), Not(i0 < utf16Length0)), utf8Length0 < utf16Length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_length = Symbol('sequence_length')\nsequence_charAt = Symbol('sequence_charAt')\npath_conjunction = (((((StrictLessThan(0, sequence_length)) & (StrictLessThan(sequence_charAt, 0x80))) & (~(((StrictLessThan(0, sequence_length)) & (StrictLessThan(sequence_charAt, 0x80)))))) & (~((StrictLessThan(0, sequence_length))))) & (StrictLessThan(utf16Length, sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 53,
          "throwingLine": 77,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Utf8.isWellFormed(byte[])",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(0, end, bytes.length))",
          "pathCojunction": "(0 < 0 || off + len < 0 || off + len > bytes.length)",
          "symbolicPathConjunction": "(isWellFormed(bytes, 0, bytes.length))",
          "backwardsPathConjunction": "(0 < 0 || off + len < 0 || off + len > bytes.length)",
          "simplifiedPathConjunction": "bytes.length < len + off || len < -off",
          "z3Inputs": "[off0 = 1, bytes0_length = 0, len0 = 0]\n[off0 = 3, len0 = -1, bytes0_length = 1]\n[off0 = 5, len0 = -2, bytes0_length = 2]\n[off0 = 6, len0 = -2, bytes0_length = 3]\n[off0 = 1, len0 = -2, bytes0_length = 4]\n[off0 = 1, len0 = -2, bytes0_length = 5]\n[off0 = 2, len0 = -3, bytes0_length = 6]\n[off0 = 2, len0 = -3, bytes0_length = 7]\n[off0 = 1, len0 = -3, bytes0_length = 8]\n[off0 = 1, len0 = -4, bytes0_length = 9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlen0 = Int('len0')\noff0 = Int('off0')\nbytes0_length = Int('bytes0_length')\n\nconstraints = [\n  bytes0_length >= 0, # implicit\n  Or(Or(0 < 0, off0 + len0 < 0), off0 + len0 > bytes0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbytes = Symbol('bytes')\nlen = Symbol('len', integer=True)\noff = Symbol('off', integer=True)\nbytes_length = Symbol('bytes_length', integer=True)\npath_conjunction = (((StrictLessThan(0, 0)) | (StrictLessThan((off + len), 0))) | (StrictGreaterThan((off + len), bytes_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 116,
          "throwingLine": 117,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Utf8.isWellFormed(byte[], int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(off, end, bytes.length))",
          "pathCojunction": "(off < 0 || end < off || end > bytes.length)",
          "symbolicPathConjunction": "(checkPositionIndexes(off, end, bytes.length))",
          "backwardsPathConjunction": "(off < 0 || off + len < off || off + len > bytes.length)",
          "simplifiedPathConjunction": "bytes.length < len + off || len < 0 || off < 0",
          "z3Inputs": "[bytes0_length = 0, len0 = -1, end0 = -2, off0 = -1]\n[bytes0_length = 1, off0 = -2, len0 = -2, end0 = -4]\n[bytes0_length = 1, off0 = -3, len0 = -3, end0 = -6]\n[bytes0_length = 1, off0 = -4, len0 = -3, end0 = -7]\n[bytes0_length = 2, off0 = -4, len0 = -3, end0 = -7]\n[bytes0_length = 3, off0 = -4, len0 = -3, end0 = -7]\n[bytes0_length = 4, off0 = -4, len0 = -4, end0 = -8]\n[bytes0_length = 4, off0 = -3, len0 = -4, end0 = -7]\n[bytes0_length = 4, off0 = -1, len0 = -6, end0 = -7]\n[bytes0_length = 4, off0 = -2, len0 = -5, end0 = -7]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nend0 = Int('end0')\nbytes0_length = Int('bytes0_length')\n\nconstraints = [\n  end0 == off0 + len0,\n  bytes0_length >= 0, # implicit\n  Or(Or(off0 < 0, end0 < off0), end0 > bytes0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbytes = Symbol('bytes')\noff = Symbol('off', integer=True)\nlen = Symbol('len', integer=True)\nbytes_length = Symbol('bytes_length', integer=True)\npath_conjunction = (((StrictLessThan(off, 0)) | (StrictLessThan((off + len), off))) | (StrictGreaterThan((off + len), bytes_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 130,
          "throwingLine": 132,
          "isStatic": true,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Strings.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Strings.padStart(java.lang.String, int, char)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nminLength0 = Int('minLength0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 100,
          "throwingLine": 101,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Strings.padEnd(java.lang.String, int, char)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nminLength0 = Int('minLength0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 132,
          "throwingLine": 133,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Strings.repeat(java.lang.String, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\ncount0 = Int('count0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 156,
          "throwingLine": 157,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Strings.commonPrefix(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(a == null)",
          "symbolicPathConjunction": "(checkNotNull(a))",
          "backwardsPathConjunction": "(a == null)",
          "simplifiedPathConjunction": "a == null",
          "z3Inputs": "[a0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = String('a0')\nb0 = String('b0')\na0_isNull = Bool('a0_isNull')\n\nconstraints = [\n  a0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\nnull = Symbol('null')\npath_conjunction = (Eq(a, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 190,
          "throwingLine": 191,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Strings.commonPrefix(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (b == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b))",
          "backwardsPathConjunction": "(!(a == null)) && (b == null)",
          "simplifiedPathConjunction": "b == null && a != null",
          "z3Inputs": "[b0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = String('a0')\nb0 = String('b0')\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(a0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\nb = Symbol('b')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(a, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 190,
          "throwingLine": 192,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Strings.commonSuffix(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(a == null)",
          "symbolicPathConjunction": "(checkNotNull(a))",
          "backwardsPathConjunction": "(a == null)",
          "simplifiedPathConjunction": "a == null",
          "z3Inputs": "[a0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = String('a0')\nb0 = String('b0')\na0_isNull = Bool('a0_isNull')\n\nconstraints = [\n  a0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\nnull = Symbol('null')\npath_conjunction = (Eq(a, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 213,
          "throwingLine": 214,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Strings.commonSuffix(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (b == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b))",
          "backwardsPathConjunction": "(!(a == null)) && (b == null)",
          "simplifiedPathConjunction": "b == null && a != null",
          "z3Inputs": "[b0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = String('a0')\nb0 = String('b0')\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(a0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\nb = Symbol('b')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(a, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 213,
          "throwingLine": 215,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/cache/CacheLoader.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoader.reload(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 93,
          "throwingLine": 94,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoader.reload(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (oldValue == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(oldValue))",
          "backwardsPathConjunction": "(!(key == null)) && (oldValue == null)",
          "simplifiedPathConjunction": "null == oldValue && key != null",
          "z3Inputs": "[key0_isNull = False, oldValue0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\noldValue0_isNull = Bool('oldValue0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), oldValue0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\noldValue = Symbol('oldValue')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(oldValue, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 93,
          "throwingLine": 95,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoader.loadAll(java.lang.Iterable<? extends K>)",
          "exception": "throw new UnsupportedLoadingOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 121,
          "throwingLine": 124,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoader.SupplierToCacheLoader.load(java.lang.Object)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 216,
          "throwingLine": 217,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableSetMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSetMultimap.get(K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(set != null)) && (emptySet == null)",
          "symbolicPathConjunction": "(MoreObjects.firstNonNull(set, emptySet))",
          "backwardsPathConjunction": "(!((ImmutableSet<V>) map.get(key) != null)) && (emptySet == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset0_isNull = Bool('set0_isNull')\nemptySet0_isNull = Bool('emptySet0_isNull')\n\nconstraints = [\n  set0 == (ImmutableSet<V>) map.get(key0),\n  And(Not(Not(set0_isNull)), emptySet0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 360,
          "throwingLine": 363,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 401,
          "throwingLine": 402,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 413,
          "throwingLine": 414,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableList.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.copyOf(java.lang.Iterable<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 207,
          "throwingLine": 208,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.SubList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, length, \"index\"))",
          "pathCojunction": "(index < 0 || index >= length)",
          "symbolicPathConjunction": "(checkElementIndex(index, length))",
          "backwardsPathConjunction": "(index < 0 || index >= length)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 401,
          "throwingLine": 402,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.SubList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, length))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > length)",
          "symbolicPathConjunction": "(checkPositionIndexes(fromIndex, toIndex, length))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > length)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\n\nconstraints = [\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 407,
          "throwingLine": 408,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.addAll(int, java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 426,
          "throwingLine": 427,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.set(int, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 438,
          "throwingLine": 439,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.add(int, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 450,
          "throwingLine": 451,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.remove(int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 462,
          "throwingLine": 463,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.ReverseImmutableList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size()))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size())",
          "symbolicPathConjunction": "(checkPositionIndexes(fromIndex, toIndex, size()))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size())",
          "simplifiedPathConjunction": "fromIndex > toIndex || size() < toIndex || fromIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\n\nconstraints = [\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\n_size = Symbol('_size')\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 536,
          "throwingLine": 537,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.ReverseImmutableList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 542,
          "throwingLine": 543,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/math/BigIntegerMath.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.math.BigIntegerMath.isPowerOfTwo(java.math.BigInteger)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(x == null)",
          "symbolicPathConjunction": "(checkNotNull(x))",
          "backwardsPathConjunction": "(x == null)",
          "simplifiedPathConjunction": "null == x",
          "z3Inputs": "[x0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0_isNull = Bool('x0_isNull')\n\nconstraints = [\n  x0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nnull = Symbol('null')\npath_conjunction = (Eq(x, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 55,
          "throwingLine": 56,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.BigIntegerMath.factorial(int)",
          "exception": "throw new IllegalArgumentException(\"n\" + \" (\" + n + \") must be >= 0\")",
          "pathCojunction": "(n < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(n < 0)",
          "simplifiedPathConjunction": "n < 0",
          "z3Inputs": "[n0 = -1]\n[n0 = -2]\n[n0 = -3]\n[n0 = -4]\n[n0 = -5]\n[n0 = -6]\n[n0 = -7]\n[n0 = -8]\n[n0 = -9]\n[n0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\n\nconstraints = [\n  n0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\npath_conjunction = (StrictLessThan(n, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 316,
          "throwingLine": 317,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.BigIntegerMath.binomial(int, int)",
          "exception": "throw new IllegalArgumentException(\"n\" + \" (\" + n + \") must be >= 0\")",
          "pathCojunction": "(n < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(n < 0)",
          "simplifiedPathConjunction": "n < 0",
          "z3Inputs": "[n0 = -1]\n[n0 = -2]\n[n0 = -3]\n[n0 = -4]\n[n0 = -5]\n[n0 = -6]\n[n0 = -7]\n[n0 = -8]\n[n0 = -9]\n[n0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\nk0 = Int('k0')\n\nconstraints = [\n  n0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\npath_conjunction = (StrictLessThan(n, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 400,
          "throwingLine": 401,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.BigIntegerMath.binomial(int, int)",
          "exception": "throw new IllegalArgumentException(\"k\" + \" (\" + k + \") must be >= 0\")",
          "pathCojunction": "(!(n < 0)) && (k < 0)",
          "symbolicPathConjunction": "(!(x < 0)) && (x < 0)",
          "backwardsPathConjunction": "(!(n < 0)) && (k < 0)",
          "simplifiedPathConjunction": "n >= 0 && k < 0",
          "z3Inputs": "[k0 = -1, n0 = 0]\n[k0 = -1, n0 = 1]\n[k0 = -2, n0 = 1]\n[k0 = -3, n0 = 1]\n[k0 = -3, n0 = 2]\n[k0 = -3, n0 = 3]\n[k0 = -4, n0 = 4]\n[k0 = -4, n0 = 5]\n[k0 = -4, n0 = 6]\n[k0 = -4, n0 = 7]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\nk0 = Int('k0')\n\nconstraints = [\n  And(Not(n0 < 0), k0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\nk = Symbol('k', integer=True)\npath_conjunction = ((~((StrictLessThan(n, 0)))) & (StrictLessThan(k, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 400,
          "throwingLine": 402,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.add(E)",
          "exception": "throw new PermittedMetaException(UnsupportedOperationException.class);",
          "pathCojunction": "(!(features.contains(IteratorFeature.SUPPORTS_ADD)))",
          "symbolicPathConjunction": "(!features.contains(IteratorFeature.SUPPORTS_ADD))",
          "backwardsPathConjunction": "(!(features.contains(IteratorFeature.SUPPORTS_ADD)))",
          "simplifiedPathConjunction": "!features.contains(IteratorFeature.SUPPORTS_ADD)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(features0.contains(IteratorFeature_SUPPORTS_ADD0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfeatures = Symbol('features')\nfeatures_contains = Symbol('features_contains')\npath_conjunction = (~(features_contains))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 210,
          "throwingLine": 212,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.next()",
          "exception": "throw new PermittedMetaException(NoSuchElementException.class)",
          "pathCojunction": "(nextElements.isEmpty())",
          "symbolicPathConjunction": "(source.isEmpty())",
          "backwardsPathConjunction": "(nextElements.isEmpty())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  nextElements0 == new Stack<E>(),\n  previousElements0 == new Stack<E>(),\n  nextElements0.isEmpty()\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnew Stack<E>()_isEmpty = Symbol('new Stack<E>()_isEmpty')\npath_conjunction = new Stack<E>()_isEmpty\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 230,
          "throwingLine": 231,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.previous()",
          "exception": "throw new PermittedMetaException(NoSuchElementException.class)",
          "pathCojunction": "(previousElements.isEmpty())",
          "symbolicPathConjunction": "(source.isEmpty())",
          "backwardsPathConjunction": "(previousElements.isEmpty())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  previousElements0 == new Stack<E>(),\n  nextElements0 == new Stack<E>(),\n  previousElements0.isEmpty()\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnew Stack<E>()_isEmpty = Symbol('new Stack<E>()_isEmpty')\npath_conjunction = new Stack<E>()_isEmpty\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 240,
          "throwingLine": 241,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.remove()",
          "exception": "throw new PermittedMetaException(exceptions)",
          "pathCojunction": "(!(!features.contains(IteratorFeature.SUPPORTS_REMOVE))) && (stackWithLastReturnedElementAtTop == null) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "symbolicPathConjunction": "((!(!features.contains(methodFeature))) && (stackWithLastReturnedElementAtTop == null) && (!new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "backwardsPathConjunction": "(!(!features.contains(IteratorFeature.SUPPORTS_REMOVE))) && (stackWithLastReturnedElementAtTop == null) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstackWithLastReturnedElementAtTop0_isNull = Bool('stackWithLastReturnedElementAtTop0_isNull')\n\nconstraints = [\n  And(And(Not(Not(features0.contains(IteratorFeature.SUPPORTS_REMOVE))), stackWithLastReturnedElementAtTop0_isNull), Not(new HashSet<Class<? extends RuntimeException>>().isEmpty()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfeatures = Symbol('features')\nstackWithLastReturnedElementAtTop = Symbol('stackWithLastReturnedElementAtTop')\nfeatures_contains = Symbol('features_contains')\nnew HashSet<Class<? extends RuntimeException>>()_isEmpty = Symbol('new HashSet<Class<? extends RuntimeException>>()_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~((~(features_contains)))) & (Eq(stackWithLastReturnedElementAtTop, null))) & (~(new HashSet<Class<? extends RuntimeException>>()_isEmpty)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 250,
          "throwingLine": 251,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.remove()",
          "exception": "throw new PermittedMetaException(exceptions)",
          "pathCojunction": "(!(!features.contains(IteratorFeature.SUPPORTS_REMOVE))) && (!(stackWithLastReturnedElementAtTop == null)) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "symbolicPathConjunction": "((!(!features.contains(methodFeature))) && (!(stackWithLastReturnedElementAtTop == null)) && (!new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "backwardsPathConjunction": "(!(!features.contains(IteratorFeature.SUPPORTS_REMOVE))) && (!(stackWithLastReturnedElementAtTop == null)) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstackWithLastReturnedElementAtTop0_isNull = Bool('stackWithLastReturnedElementAtTop0_isNull')\n\nconstraints = [\n  And(And(Not(Not(features0.contains(IteratorFeature.SUPPORTS_REMOVE))), Not(stackWithLastReturnedElementAtTop0_isNull)), Not(new HashSet<Class<? extends RuntimeException>>().isEmpty()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfeatures = Symbol('features')\nstackWithLastReturnedElementAtTop = Symbol('stackWithLastReturnedElementAtTop')\nfeatures_contains = Symbol('features_contains')\nnew HashSet<Class<? extends RuntimeException>>()_isEmpty = Symbol('new HashSet<Class<? extends RuntimeException>>()_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~((~(features_contains)))) & (~((Eq(stackWithLastReturnedElementAtTop, null))))) & (~(new HashSet<Class<? extends RuntimeException>>()_isEmpty)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 250,
          "throwingLine": 251,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.remove()",
          "exception": "throw new PermittedMetaException(exceptions)",
          "pathCojunction": "(!(features.contains(IteratorFeature.SUPPORTS_REMOVE))) && (!(stackWithLastReturnedElementAtTop == null)) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "symbolicPathConjunction": "((!features.contains(methodFeature)) && (!(stackWithLastReturnedElementAtTop == null)) && (!new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "backwardsPathConjunction": "(!(features.contains(IteratorFeature.SUPPORTS_REMOVE))) && (!(stackWithLastReturnedElementAtTop == null)) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstackWithLastReturnedElementAtTop0_isNull = Bool('stackWithLastReturnedElementAtTop0_isNull')\n\nconstraints = [\n  And(And(Not(features0.contains(IteratorFeature.SUPPORTS_REMOVE)), Not(stackWithLastReturnedElementAtTop0_isNull)), Not(new HashSet<Class<? extends RuntimeException>>().isEmpty()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfeatures = Symbol('features')\nstackWithLastReturnedElementAtTop = Symbol('stackWithLastReturnedElementAtTop')\nfeatures_contains = Symbol('features_contains')\nnew HashSet<Class<? extends RuntimeException>>()_isEmpty = Symbol('new HashSet<Class<? extends RuntimeException>>()_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(features_contains)) & (~((Eq(stackWithLastReturnedElementAtTop, null))))) & (~(new HashSet<Class<? extends RuntimeException>>()_isEmpty)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 250,
          "throwingLine": 251,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.remove()",
          "exception": "throw new PermittedMetaException(exceptions)",
          "pathCojunction": "(!(features.contains(IteratorFeature.SUPPORTS_REMOVE))) && (stackWithLastReturnedElementAtTop == null) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "symbolicPathConjunction": "((!features.contains(methodFeature)) && (stackWithLastReturnedElementAtTop == null) && (!new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "backwardsPathConjunction": "(!(features.contains(IteratorFeature.SUPPORTS_REMOVE))) && (stackWithLastReturnedElementAtTop == null) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstackWithLastReturnedElementAtTop0_isNull = Bool('stackWithLastReturnedElementAtTop0_isNull')\n\nconstraints = [\n  And(And(Not(features0.contains(IteratorFeature.SUPPORTS_REMOVE)), stackWithLastReturnedElementAtTop0_isNull), Not(new HashSet<Class<? extends RuntimeException>>().isEmpty()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfeatures = Symbol('features')\nstackWithLastReturnedElementAtTop = Symbol('stackWithLastReturnedElementAtTop')\nfeatures_contains = Symbol('features_contains')\nnew HashSet<Class<? extends RuntimeException>>()_isEmpty = Symbol('new HashSet<Class<? extends RuntimeException>>()_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(features_contains)) & (Eq(stackWithLastReturnedElementAtTop, null))) & (~(new HashSet<Class<? extends RuntimeException>>()_isEmpty)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 250,
          "throwingLine": 251,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.set(E)",
          "exception": "throw new PermittedMetaException(exceptions)",
          "pathCojunction": "(!(features.contains(IteratorFeature.SUPPORTS_SET))) && (stackWithLastReturnedElementAtTop == null) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "symbolicPathConjunction": "((!features.contains(methodFeature)) && (stackWithLastReturnedElementAtTop == null) && (!new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "backwardsPathConjunction": "(!(features.contains(IteratorFeature.SUPPORTS_SET))) && (stackWithLastReturnedElementAtTop == null) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstackWithLastReturnedElementAtTop0_isNull = Bool('stackWithLastReturnedElementAtTop0_isNull')\n\nconstraints = [\n  And(And(Not(features0.contains(IteratorFeature.SUPPORTS_SET)), stackWithLastReturnedElementAtTop0_isNull), Not(new HashSet<Class<? extends RuntimeException>>().isEmpty()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfeatures = Symbol('features')\nstackWithLastReturnedElementAtTop = Symbol('stackWithLastReturnedElementAtTop')\nfeatures_contains = Symbol('features_contains')\nnew HashSet<Class<? extends RuntimeException>>()_isEmpty = Symbol('new HashSet<Class<? extends RuntimeException>>()_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(features_contains)) & (Eq(stackWithLastReturnedElementAtTop, null))) & (~(new HashSet<Class<? extends RuntimeException>>()_isEmpty)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 258,
          "throwingLine": 259,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.set(E)",
          "exception": "throw new PermittedMetaException(exceptions)",
          "pathCojunction": "(!(!features.contains(IteratorFeature.SUPPORTS_SET))) && (stackWithLastReturnedElementAtTop == null) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "symbolicPathConjunction": "((!(!features.contains(methodFeature))) && (stackWithLastReturnedElementAtTop == null) && (!new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "backwardsPathConjunction": "(!(!features.contains(IteratorFeature.SUPPORTS_SET))) && (stackWithLastReturnedElementAtTop == null) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstackWithLastReturnedElementAtTop0_isNull = Bool('stackWithLastReturnedElementAtTop0_isNull')\n\nconstraints = [\n  And(And(Not(Not(features0.contains(IteratorFeature.SUPPORTS_SET))), stackWithLastReturnedElementAtTop0_isNull), Not(new HashSet<Class<? extends RuntimeException>>().isEmpty()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfeatures = Symbol('features')\nstackWithLastReturnedElementAtTop = Symbol('stackWithLastReturnedElementAtTop')\nfeatures_contains = Symbol('features_contains')\nnew HashSet<Class<? extends RuntimeException>>()_isEmpty = Symbol('new HashSet<Class<? extends RuntimeException>>()_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~((~(features_contains)))) & (Eq(stackWithLastReturnedElementAtTop, null))) & (~(new HashSet<Class<? extends RuntimeException>>()_isEmpty)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 258,
          "throwingLine": 259,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.set(E)",
          "exception": "throw new PermittedMetaException(exceptions)",
          "pathCojunction": "(!(!features.contains(IteratorFeature.SUPPORTS_SET))) && (!(stackWithLastReturnedElementAtTop == null)) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "symbolicPathConjunction": "((!(!features.contains(methodFeature))) && (!(stackWithLastReturnedElementAtTop == null)) && (!new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "backwardsPathConjunction": "(!(!features.contains(IteratorFeature.SUPPORTS_SET))) && (!(stackWithLastReturnedElementAtTop == null)) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstackWithLastReturnedElementAtTop0_isNull = Bool('stackWithLastReturnedElementAtTop0_isNull')\n\nconstraints = [\n  And(And(Not(Not(features0.contains(IteratorFeature.SUPPORTS_SET))), Not(stackWithLastReturnedElementAtTop0_isNull)), Not(new HashSet<Class<? extends RuntimeException>>().isEmpty()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfeatures = Symbol('features')\nstackWithLastReturnedElementAtTop = Symbol('stackWithLastReturnedElementAtTop')\nfeatures_contains = Symbol('features_contains')\nnew HashSet<Class<? extends RuntimeException>>()_isEmpty = Symbol('new HashSet<Class<? extends RuntimeException>>()_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~((~(features_contains)))) & (~((Eq(stackWithLastReturnedElementAtTop, null))))) & (~(new HashSet<Class<? extends RuntimeException>>()_isEmpty)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 258,
          "throwingLine": 259,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.AbstractIteratorTester.MultiExceptionListIterator.set(E)",
          "exception": "throw new PermittedMetaException(exceptions)",
          "pathCojunction": "(!(features.contains(IteratorFeature.SUPPORTS_SET))) && (!(stackWithLastReturnedElementAtTop == null)) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "symbolicPathConjunction": "((!features.contains(methodFeature)) && (!(stackWithLastReturnedElementAtTop == null)) && (!new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "backwardsPathConjunction": "(!(features.contains(IteratorFeature.SUPPORTS_SET))) && (!(stackWithLastReturnedElementAtTop == null)) && (!(new HashSet<Class<? extends RuntimeException>>().isEmpty()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstackWithLastReturnedElementAtTop0_isNull = Bool('stackWithLastReturnedElementAtTop0_isNull')\n\nconstraints = [\n  And(And(Not(features0.contains(IteratorFeature.SUPPORTS_SET)), Not(stackWithLastReturnedElementAtTop0_isNull)), Not(new HashSet<Class<? extends RuntimeException>>().isEmpty()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfeatures = Symbol('features')\nstackWithLastReturnedElementAtTop = Symbol('stackWithLastReturnedElementAtTop')\nfeatures_contains = Symbol('features_contains')\nnew HashSet<Class<? extends RuntimeException>>()_isEmpty = Symbol('new HashSet<Class<? extends RuntimeException>>()_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(features_contains)) & (~((Eq(stackWithLastReturnedElementAtTop, null))))) & (~(new HashSet<Class<? extends RuntimeException>>()_isEmpty)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 258,
          "throwingLine": 259,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/IteratorsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.Anonymous-d9acb4ab-a8df-4f68-becb-8ec132fe8baf.apply(java.lang.String)",
          "exception": "throw new AssertionFailedError(\"Should never be evaluated\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 306,
          "throwingLine": 307,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.PickyIterable.PickyIterator.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(expectedModCount != modCount)",
          "symbolicPathConjunction": "(expectedModCount != modCount)",
          "backwardsPathConjunction": "(expectedModCount != modCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[expectedModCount0 = 1, modCount0 = 0]\n[expectedModCount0 = 2, modCount0 = 3]\n[expectedModCount0 = 4, modCount0 = 5]\n[expectedModCount0 = 6, modCount0 = 7]\n[expectedModCount0 = 8, modCount0 = 9]\n[expectedModCount0 = 10, modCount0 = 11]\n[expectedModCount0 = 12, modCount0 = 13]\n[expectedModCount0 = 14, modCount0 = 15]\n[expectedModCount0 = 16, modCount0 = 17]\n[expectedModCount0 = 18, modCount0 = 19]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  expectedModCount0 != modCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(expectedModCount, modCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 643,
          "throwingLine": 644,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.PickyIterable.PickyIterator.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(expectedModCount != modCount)",
          "symbolicPathConjunction": "(expectedModCount != modCount)",
          "backwardsPathConjunction": "(expectedModCount != modCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[expectedModCount0 = 1, modCount0 = 0]\n[expectedModCount0 = 2, modCount0 = 3]\n[expectedModCount0 = 4, modCount0 = 5]\n[expectedModCount0 = 6, modCount0 = 7]\n[expectedModCount0 = 8, modCount0 = 9]\n[expectedModCount0 = 10, modCount0 = 11]\n[expectedModCount0 = 12, modCount0 = 13]\n[expectedModCount0 = 14, modCount0 = 15]\n[expectedModCount0 = 16, modCount0 = 17]\n[expectedModCount0 = 18, modCount0 = 19]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  expectedModCount0 != modCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(expectedModCount, modCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 649,
          "throwingLine": 650,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.PickyIterable.PickyIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(expectedModCount != modCount)) && (!(expectedModCount != modCount)) && (!(index < elements.size()))",
          "symbolicPathConjunction": "(!(expectedModCount != modCount)) && (!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(expectedModCount != modCount)) && (!(expectedModCount != modCount)) && (!(index < elements.size()))",
          "simplifiedPathConjunction": "expectedModCount == modCount && elements.size() <= index",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\nindex0 = Int('index0')\n\nconstraints = [\n  And(And(Not(expectedModCount0 != modCount0), Not(expectedModCount0 != modCount0)), Not(index0 < elements0.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\nelements = Symbol('elements')\nindex = Symbol('index', integer=True)\nelements_size = Symbol('elements_size')\npath_conjunction = (((~((Ne(expectedModCount, modCount)))) & (~((Ne(expectedModCount, modCount))))) & (~((StrictLessThan(index, elements_size)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 649,
          "throwingLine": 652,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.PickyIterable.PickyIterator.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(expectedModCount != modCount)",
          "symbolicPathConjunction": "(expectedModCount != modCount)",
          "backwardsPathConjunction": "(expectedModCount != modCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[expectedModCount0 = 1, modCount0 = 0]\n[expectedModCount0 = 2, modCount0 = 3]\n[expectedModCount0 = 4, modCount0 = 5]\n[expectedModCount0 = 6, modCount0 = 7]\n[expectedModCount0 = 8, modCount0 = 9]\n[expectedModCount0 = 10, modCount0 = 11]\n[expectedModCount0 = 12, modCount0 = 13]\n[expectedModCount0 = 14, modCount0 = 15]\n[expectedModCount0 = 16, modCount0 = 17]\n[expectedModCount0 = 18, modCount0 = 19]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  expectedModCount0 != modCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(expectedModCount, modCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 659,
          "throwingLine": 660,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.PickyIterable.PickyIterator.remove()",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(expectedModCount != modCount)) && (!(canRemove))",
          "symbolicPathConjunction": "(!(expectedModCount != modCount)) && (checkState(canRemove, \"no calls to next() since the last call to remove()\"))",
          "backwardsPathConjunction": "(!(expectedModCount != modCount)) && (!(canRemove))",
          "simplifiedPathConjunction": "expectedModCount == modCount && !canRemove",
          "z3Inputs": "[modCount0 = 0, expectedModCount0 = 0, canRemove0 = False]\n[canRemove0 = False, expectedModCount0 = 2, modCount0 = 2]\n[canRemove0 = False, expectedModCount0 = 3, modCount0 = 3]\n[canRemove0 = False, expectedModCount0 = 4, modCount0 = 4]\n[canRemove0 = False, expectedModCount0 = 5, modCount0 = 5]\n[canRemove0 = False, expectedModCount0 = 6, modCount0 = 6]\n[canRemove0 = False, expectedModCount0 = 7, modCount0 = 7]\n[canRemove0 = False, expectedModCount0 = 8, modCount0 = 8]\n[canRemove0 = False, expectedModCount0 = 9, modCount0 = 9]\n[canRemove0 = False, expectedModCount0 = 10, modCount0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\ncanRemove0 = Bool('canRemove0')\n\nconstraints = [\n  And(Not(expectedModCount0 != modCount0), Not(canRemove0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\ncanRemove = Symbol('canRemove')\npath_conjunction = ((~((Ne(expectedModCount, modCount)))) & (~(canRemove)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 659,
          "throwingLine": 661,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.Anonymous-74d73006-e9ae-40ee-825d-f3ec47c63265.create(java.lang.String[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(newArrayList(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "simplifiedPathConjunction": "elements == null",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1548,
          "throwingLine": 1549,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/MapsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MapsTest.testSortedMapDifferenceEquals()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(left == null)",
          "symbolicPathConjunction": "(ImmutableSortedMap.of(1, \"a\", 2, \"b\", 3, \"c\", 4, \"d\", 5, \"e\")) && (ImmutableSortedMap.of(1, \"a\", 3, \"f\", 5, \"g\", 6, \"z\")) && (ImmutableSortedMap.of(1, \"a\", 3, \"h\", 5, \"g\", 6, \"z\")) && (Maps.difference(left, right))",
          "backwardsPathConjunction": "(new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(2, \"b\").put(3, \"c\").put(4, \"d\").put(5, \"e\").build() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\n\nconstraints = [\n  java.lang.String > left0 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(2, \"b\").put(3, \"c\").put(4, \"d\").put(5, \"e\").build(),\n  java.lang.String > right0 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(3, \"f\").put(5, \"g\").put(6, \"z\").build(),\n  java.lang.String > right20 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(3, \"h\").put(5, \"g\").put(6, \"z\").build(),\n  left0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nBUG_IN_SIMPLIFICATION\nOrdering_natural = Symbol('Ordering_natural')\nnull = Symbol('null')\npath_conjunction = (Eq(new Builder<K, V>(Ordering.natural())_put_put_put_put_put_build, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 618,
          "throwingLine": 625,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapsTest.testSortedMapDifferenceEquals()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(left == null)) && (right == null)",
          "symbolicPathConjunction": "(ImmutableSortedMap.of(1, \"a\", 2, \"b\", 3, \"c\", 4, \"d\", 5, \"e\")) && (ImmutableSortedMap.of(1, \"a\", 3, \"f\", 5, \"g\", 6, \"z\")) && (ImmutableSortedMap.of(1, \"a\", 3, \"h\", 5, \"g\", 6, \"z\")) && (Maps.difference(left, right))",
          "backwardsPathConjunction": "(!(new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(2, \"b\").put(3, \"c\").put(4, \"d\").put(5, \"e\").build() == null)) && (new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(3, \"f\").put(5, \"g\").put(6, \"z\").build() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\nright0_isNull = Bool('right0_isNull')\n\nconstraints = [\n  java.lang.String > left0 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(2, \"b\").put(3, \"c\").put(4, \"d\").put(5, \"e\").build(),\n  java.lang.String > right0 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(3, \"f\").put(5, \"g\").put(6, \"z\").build(),\n  java.lang.String > right20 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(3, \"h\").put(5, \"g\").put(6, \"z\").build(),\n  And(Not(left0_isNull), right0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nBUG_IN_SIMPLIFICATION\nOrdering_natural = Symbol('Ordering_natural')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(new Builder<K, V>(Ordering.natural())_put_put_put_put_put_build, null)))) & (Eq(new Builder<K, V>(Ordering.natural())_put_put_put_put_build, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 618,
          "throwingLine": 625,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/LittleEndianDataInputStream.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.LittleEndianDataInputStream.readLine()",
          "exception": "throw new UnsupportedOperationException(\"readLine is not supported\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 60,
          "throwingLine": 61,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.LittleEndianDataInputStream.readUnsignedByte()",
          "exception": "throw new EOFException();",
          "pathCojunction": "(0 > b1)",
          "symbolicPathConjunction": "(0 > b1)",
          "backwardsPathConjunction": "(0 > in.read())",
          "simplifiedPathConjunction": "in.read() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nb10 = Int('b10')\n\nconstraints = [\n  b10 == in.read(),\n  0 > b10\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin_read = Symbol('in_read')\npath_conjunction = (StrictGreaterThan(0, in_read))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 80,
          "throwingLine": 83,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.DerivedCollectionGenerators.MapValueCollectionGenerator.Anonymous-4c26df93-22f2-4408-8580-07eb64656ec0.compare(V, V)",
          "exception": "throw new IllegalArgumentException(\"Map.values generator can order only sample values\")",
          "pathCojunction": "(!(0 < orderedEntries.size()))",
          "symbolicPathConjunction": "(!(0 < orderedEntries.size()))",
          "backwardsPathConjunction": "(!(0 < orderedEntries.size()))",
          "simplifiedPathConjunction": "orderedEntries.size() <= 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(0 < orderedEntries.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\norderedEntries_size = Symbol('orderedEntries_size')\npath_conjunction = (~((StrictLessThan(0, orderedEntries_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 269,
          "throwingLine": 271,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.DerivedCollectionGenerators.MapValueCollectionGenerator.Anonymous-4c26df93-22f2-4408-8580-07eb64656ec0.compare(V, V)",
          "exception": "throw new IllegalArgumentException(\"Map.values generator can order only sample values\")",
          "pathCojunction": "(0 < orderedEntries.size()) && (!(equal(orderedEntries.get(0).getValue(), left)))",
          "symbolicPathConjunction": "((i < orderedEntries.size()) && (!(equal(orderedEntries.get(0).getValue(), value))))",
          "backwardsPathConjunction": "(0 < orderedEntries.size()) && (!(equal(orderedEntries.get(0).getValue(), left)))",
          "simplifiedPathConjunction": "!equal(orderedEntries.get(0).getValue(), left) && orderedEntries.size() > 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(0 < orderedEntries.size(), Not(equal(orderedEntries.get(0).getValue(), left0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nleft = Symbol('left')\norderedEntries_size = Symbol('orderedEntries_size')\n_equal = Symbol('_equal')\norderedEntries_get_getValue = Symbol('orderedEntries_get_getValue')\norderedEntries_get = Symbol('orderedEntries_get')\npath_conjunction = ((StrictLessThan(0, orderedEntries_size)) & (~(_equal)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 269,
          "throwingLine": 271,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.DerivedCollectionGenerators.SortedSetSubsetTestSetGenerator.belowSamplesLesser()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 442,
          "throwingLine": 443,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.DerivedCollectionGenerators.SortedSetSubsetTestSetGenerator.belowSamplesGreater()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 447,
          "throwingLine": 448,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.DerivedCollectionGenerators.SortedSetSubsetTestSetGenerator.aboveSamplesLesser()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 452,
          "throwingLine": 453,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.DerivedCollectionGenerators.SortedSetSubsetTestSetGenerator.aboveSamplesGreater()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 457,
          "throwingLine": 458,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.DerivedCollectionGenerators.SortedMapSubmapTestMapGenerator.belowSamplesLesser()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 550,
          "throwingLine": 552,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.DerivedCollectionGenerators.SortedMapSubmapTestMapGenerator.belowSamplesGreater()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 556,
          "throwingLine": 558,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.DerivedCollectionGenerators.SortedMapSubmapTestMapGenerator.aboveSamplesLesser()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 562,
          "throwingLine": 564,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.DerivedCollectionGenerators.SortedMapSubmapTestMapGenerator.aboveSamplesGreater()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 568,
          "throwingLine": 570,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/AbstractMapEntry.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapEntry.setValue(V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 42,
          "throwingLine": 43,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Converter.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Converter.convertAll(java.lang.Iterable<? extends A>)",
          "exception": "throw new NullPointerException(String.valueOf(\"fromIterable\"))",
          "pathCojunction": "(fromIterable == null)",
          "symbolicPathConjunction": "(checkNotNull(fromIterable, \"fromIterable\"))",
          "backwardsPathConjunction": "(fromIterable == null)",
          "z3Inputs": "[fromIterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIterable0_isNull = Bool('fromIterable0_isNull')\n\nconstraints = [\n  fromIterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(fromIterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 199,
          "throwingLine": 200,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Converter.andThen(com.google.common.base.Converter<B, C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(secondConverter == null)",
          "symbolicPathConjunction": "(checkNotNull(secondConverter))",
          "backwardsPathConjunction": "(secondConverter == null)",
          "z3Inputs": "[secondConverter0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsecondConverter0_isNull = Bool('secondConverter0_isNull')\n\nconstraints = [\n  secondConverter0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nC> = Symbol('C>')\nnull = Symbol('null')\npath_conjunction = (Eq(secondConverter, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 309,
          "throwingLine": 310,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MapMakerTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerTest.ComputingTest.Anonymous-18520f88-d1c1-4fdf-b0fe-01f3a25b4620.apply(java.lang.Object)",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 165,
          "throwingLine": 166,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultiset.MapBasedMultisetIterator.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(!canRemove)) && (frequency <= 0)",
          "symbolicPathConjunction": "(checkState(canRemove, \"no calls to next() since the last call to remove()\")) && (currentEntry.getValue().get()) && (frequency <= 0)",
          "backwardsPathConjunction": "(!(!canRemove)) && (value <= 0)",
          "simplifiedPathConjunction": "canRemove && value <= 0",
          "z3Inputs": "[value0 = 0, canRemove0 = True, frequency0 = 0]\n[frequency0 = -1, canRemove0 = True, value0 = -1]\n[frequency0 = -2, canRemove0 = True, value0 = -2]\n[frequency0 = -3, canRemove0 = True, value0 = -3]\n[frequency0 = -4, canRemove0 = True, value0 = -4]\n[frequency0 = -5, canRemove0 = True, value0 = -5]\n[frequency0 = -6, canRemove0 = True, value0 = -6]\n[frequency0 = -7, canRemove0 = True, value0 = -7]\n[frequency0 = -8, canRemove0 = True, value0 = -8]\n[frequency0 = -9, canRemove0 = True, value0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncanRemove0 = Bool('canRemove0')\nvalue0 = Int('value0')\nfrequency0 = Int('frequency0')\n\nconstraints = [\n  frequency0 == value0,\n  And(Not(Not(canRemove0)), frequency0 <= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncanRemove = Symbol('canRemove')\nvalue = Symbol('value', integer=True)\npath_conjunction = ((~((~(canRemove)))) & (LessThan(value, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 187,
          "throwingLine": 191,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultiset.MapBasedMultisetIterator.remove()",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(canRemove))",
          "symbolicPathConjunction": "(checkState(canRemove, \"no calls to next() since the last call to remove()\"))",
          "backwardsPathConjunction": "(!(canRemove))",
          "simplifiedPathConjunction": "!canRemove",
          "z3Inputs": "[canRemove0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncanRemove0 = Bool('canRemove0')\n\nconstraints = [\n  Not(canRemove0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncanRemove = Symbol('canRemove')\npath_conjunction = (~(canRemove))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 187,
          "throwingLine": 188,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException(\"count\" + \" cannot be negative but was: \" + count)",
          "pathCojunction": "(count < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(count < 0)",
          "simplifiedPathConjunction": "count < 0",
          "z3Inputs": "[count0 = -1]\n[count0 = -2]\n[count0 = -3]\n[count0 = -4]\n[count0 = -5]\n[count0 = -6]\n[count0 = -7]\n[count0 = -8]\n[count0 = -9]\n[count0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  count0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictLessThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 265,
          "throwingLine": 266,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableBiMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableBiMap.of(K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k1 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (v1 == null)",
          "symbolicPathConjunction": "((!(key == null)) && (value == null))",
          "backwardsPathConjunction": "(!(k1 == null)) && (v1 == null)",
          "simplifiedPathConjunction": "null == v1 && k1 != null",
          "z3Inputs": "[k10_isNull = False, v10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\n\nconstraints = [\n  And(Not(k10_isNull), v10_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(k1, null)))) & (Eq(v1, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 39,
          "throwingLine": 40,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableBiMap.of(K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v1)",
          "pathCojunction": "(k1 == null)",
          "symbolicPathConjunction": "(key == null)",
          "backwardsPathConjunction": "(k1 == null)",
          "simplifiedPathConjunction": "k1 == null",
          "z3Inputs": "[k10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\n\nconstraints = [\n  k10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nnull = Symbol('null')\npath_conjunction = (Eq(k1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 39,
          "throwingLine": 40,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableBiMap.forcePut(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 144,
          "throwingLine": 145,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/MoreObjects.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.MoreObjects.firstNonNull(T, T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(first != null)) && (second == null)",
          "symbolicPathConjunction": "(!(first != null)) && (checkNotNull(second))",
          "backwardsPathConjunction": "(!(first != null)) && (second == null)",
          "simplifiedPathConjunction": "first == null && null == second",
          "z3Inputs": "[second0_isNull = True, first0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfirst0_isNull = Bool('first0_isNull')\nsecond0_isNull = Bool('second0_isNull')\n\nconstraints = [\n  And(Not(Not(first0_isNull)), second0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfirst = Symbol('first')\nsecond = Symbol('second')\nnull = Symbol('null')\npath_conjunction = ((~((Ne(first, null)))) & (Eq(second, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 55,
          "throwingLine": 56,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Ordering.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Ordering.from(com.google.common.collect.Ordering<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(ordering == null)",
          "symbolicPathConjunction": "(checkNotNull(ordering))",
          "backwardsPathConjunction": "(ordering == null)",
          "simplifiedPathConjunction": "null == ordering",
          "z3Inputs": "[ordering0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nordering0_isNull = Bool('ordering0_isNull')\n\nconstraints = [\n  ordering0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nordering = Symbol('ordering')\nnull = Symbol('null')\npath_conjunction = (Eq(ordering, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Ordering.ArbitraryOrdering.compare(java.lang.Object, java.lang.Object)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "(!(left == right)) && (!(left == null)) && (!(right == null)) && (!(leftCode != rightCode)) && (result == 0)",
          "symbolicPathConjunction": "(!(left == right)) && (!(left == null)) && (!(right == null)) && (!(leftCode != rightCode)) && (result == 0)",
          "backwardsPathConjunction": "(!(left == right)) && (!(left == null)) && (!(right == null)) && (!(System.identityHashCode(left) != System.identityHashCode(right))) && (uids.get(left).compareTo(uids.get(right)) == 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleftCode0 = Int('leftCode0')\nrightCode0 = Int('rightCode0')\nresult0 = Int('result0')\nleft0_isNull = Bool('left0_isNull')\nright0_isNull = Bool('right0_isNull')\n\nconstraints = [\n  leftCode0 == System.identityHashCode(left0),\n  rightCode0 == System.identityHashCode(right0),\n  result0 == uids0.get(left0).compareTo(uids0.get(right0)),\n  And(And(And(And(Not(left0 == right0), Not(left0_isNull)), Not(right0_isNull)), Not(leftCode0 != rightCode0)), result0 == 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 322,
          "throwingLine": 339,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Ordering.compound(java.util.Comparator<? super U>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(secondaryComparator == null)",
          "symbolicPathConjunction": "(checkNotNull(secondaryComparator))",
          "backwardsPathConjunction": "(secondaryComparator == null)",
          "z3Inputs": "[secondaryComparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsecondaryComparator0_isNull = Bool('secondaryComparator0_isNull')\n\nconstraints = [\n  secondaryComparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(secondaryComparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 435,
          "throwingLine": 436,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Ordering.leastOf(java.util.Iterator<E>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "simplifiedPathConjunction": "elements == null",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk0 = Int('k0')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 692,
          "throwingLine": 693,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Ordering.leastOf(java.util.Iterator<E>, int)",
          "exception": "throw new IllegalArgumentException(\"k\" + \" cannot be negative but was: \" + k)",
          "pathCojunction": "(!(elements == null)) && (k < 0)",
          "symbolicPathConjunction": "(checkNotNull(elements)) && (value < 0)",
          "backwardsPathConjunction": "(!(elements == null)) && (k < 0)",
          "simplifiedPathConjunction": "k < 0 && elements != null",
          "z3Inputs": "[k0 = -1, elements0_isNull = False]\n[k0 = -2, elements0_isNull = False]\n[k0 = -3, elements0_isNull = False]\n[k0 = -4, elements0_isNull = False]\n[k0 = -5, elements0_isNull = False]\n[k0 = -6, elements0_isNull = False]\n[k0 = -7, elements0_isNull = False]\n[k0 = -8, elements0_isNull = False]\n[k0 = -9, elements0_isNull = False]\n[k0 = -10, elements0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk0 = Int('k0')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  And(Not(elements0_isNull), k0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nk = Symbol('k', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(elements, null)))) & (StrictLessThan(k, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 692,
          "throwingLine": 694,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Ordering.greatestOf(java.util.Iterator<E>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(reverse().leastOf(iterator, k))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk0 = Int('k0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 835,
          "throwingLine": 836,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Ordering.greatestOf(java.util.Iterator<E>, int)",
          "exception": "throw new IllegalArgumentException(\"k\" + \" cannot be negative but was: \" + k)",
          "pathCojunction": "(!(iterator == null)) && (k < 0)",
          "symbolicPathConjunction": "(reverse().leastOf(iterator, k))",
          "backwardsPathConjunction": "(!(iterator == null)) && (k < 0)",
          "simplifiedPathConjunction": "k < 0 && iterator != null",
          "z3Inputs": "[k0 = -1, iterator0_isNull = False]\n[iterator0_isNull = False, k0 = -2]\n[iterator0_isNull = False, k0 = -3]\n[iterator0_isNull = False, k0 = -4]\n[iterator0_isNull = False, k0 = -5]\n[iterator0_isNull = False, k0 = -6]\n[iterator0_isNull = False, k0 = -7]\n[iterator0_isNull = False, k0 = -8]\n[iterator0_isNull = False, k0 = -9]\n[iterator0_isNull = False, k0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk0 = Int('k0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(iterator0_isNull), k0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nk = Symbol('k', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterator, null)))) & (StrictLessThan(k, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 835,
          "throwingLine": 836,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(occurrences < 0)) && (!(occurrences == 0)) && (!(range.contains(element)))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(occurrences == 0)) && (!(checkArgument(range.contains(element))))",
          "backwardsPathConjunction": "(!(occurrences < 0)) && (!(occurrences == 0)) && (!(range.contains(element)))",
          "simplifiedPathConjunction": "!range.contains(element) && occurrences > 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  And(And(Not(occurrences0 < 0), Not(occurrences0 == 0)), Not(range.contains(element0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\noccurrences = Symbol('occurrences', integer=True)\nrange_contains = Symbol('range_contains')\npath_conjunction = (((~((StrictLessThan(occurrences, 0)))) & (~((Eq(occurrences, 0))))) & (~(range_contains)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 244,
          "throwingLine": 249,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException(\"occurrences\" + \" cannot be negative but was: \" + occurrences)",
          "pathCojunction": "(occurrences < 0)",
          "symbolicPathConjunction": "(!(value < 0))",
          "backwardsPathConjunction": "(occurrences < 0)",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  occurrences0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = (StrictLessThan(occurrences, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 244,
          "throwingLine": 245,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(occurrences < 0)) && (!(occurrences == 0)) && (!(!(range.contains(element)))) && (!(root == null)) && (!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (!((long) elemCount + count <= Integer.MAX_VALUE))",
          "symbolicPathConjunction": "(!(!(value < 0))) && (!(occurrences == 0)) && (!(checkArgument(range.contains(element)))) && (rootReference.get()) && (!(root == null)) && ((!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (checkArgument(resultCount <= Integer.MAX_VALUE)))",
          "backwardsPathConjunction": "(!(occurrences < 0)) && (!(occurrences == 0)) && (!(!(range.contains(element)))) && (!(value == null)) && (!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (!((long) elemCount + count <= Integer.MAX_VALUE))",
          "simplifiedPathConjunction": "range.contains(element) && comparator.compare(e, elem) == 0 && occurrences > 0 && Integer.MAX_VALUE < count + elemCount && null != value",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\nelemCount0 = Int('elemCount0')\ncount0 = Int('count0')\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0 == value0,\n  result0 == new int[1],\n  And(And(And(And(And(And(Not(occurrences0 < 0), Not(occurrences0 == 0)), Not(Not(range.contains(element0)))), Not(root0_isNull)), Not(comparator0.compare(e0, elem0) < 0)), Not(comparator0.compare(e0, elem0) > 0)), Not(elemCount0 + count0 <= 2147483647))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\noccurrences = Symbol('occurrences', integer=True)\nvalue = Symbol('value')\nelem = Symbol('elem')\nsuper = Symbol('super')\ne = Symbol('e')\nelemCount = Symbol('elemCount', integer=True)\ncount = Symbol('count', integer=True)\nrange_contains = Symbol('range_contains')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\nInteger_MAX_VALUE = Symbol('Integer_MAX_VALUE', integer=True)\npath_conjunction = (((((((~((StrictLessThan(occurrences, 0)))) & (~((Eq(occurrences, 0))))) & (~((~(range_contains))))) & (~((Eq(value, null))))) & (~((StrictLessThan(comparator_compare, 0))))) & (~((StrictGreaterThan(comparator_compare, 0))))) & (~((LessThan((elemCount + count), Integer_MAX_VALUE)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 244,
          "throwingLine": 259,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException(\"count\" + \" cannot be negative but was: \" + count)",
          "pathCojunction": "(count < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(count < 0)",
          "simplifiedPathConjunction": "count < 0",
          "z3Inputs": "[count0 = -1]\n[count0 = -2]\n[count0 = -3]\n[count0 = -4]\n[count0 = -5]\n[count0 = -6]\n[count0 = -7]\n[count0 = -8]\n[count0 = -9]\n[count0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  count0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictLessThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 290,
          "throwingLine": 291,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new ConcurrentModificationException()",
          "pathCojunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(!hasUpperBound)) && (!(!!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(root == null)) && (comparator.compare(e, elem) < 0) && (left == null) && (!(count > 0)) && (value != root)",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (rootReference.get()) && (!(root == null)) && ((comparator.compare(e, elem) < 0) && (left == null) && (!(count > 0))) && (rootReference.checkAndSet(root, newRoot))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(!hasUpperBound)) && (!(!!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(value == null)) && (comparator.compare(e, elem) < 0) && (left == null) && (!(count > 0)) && (value != value)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\nroot0_isNull = Bool('root0_isNull')\nleft0_isNull = Bool('left0_isNull')\n\nconstraints = [\n  root0 == value0,\n  result0 == new int[1],\n  newRoot0 == this,\n  And(And(And(And(And(And(And(And(Not(count0 < 0), Not(hasLowerBound0)), Not(Not(hasUpperBound0))), Not(And(Not(Not(False)), Not(comparator0.compare(element0, upperEndpoint)) > 0 | comparator0.compare(element0, upperEndpoint) == 0 & upperBoundType0 == OPEN))), Not(root0_isNull)), comparator0.compare(e0, elem0) < 0), left0_isNull), Not(count0 > 0)), value0 != root0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nsuper = Symbol('super')\nupperBoundType = Symbol('upperBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\nvalue = Symbol('value')\nelem = Symbol('elem')\ne = Symbol('e')\nleft = Symbol('left')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\npath_conjunction = (((((((((~((StrictLessThan(count, 0)))) & (~(hasLowerBound))) & (~((~(hasUpperBound))))) & (~(((~((~(False)))) & ((StrictGreaterThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(upperBoundType, OPEN)))))))) & (~((Eq(value, null))))) & (StrictLessThan(comparator_compare, 0))) & (Eq(left, null))) & (~((StrictGreaterThan(count, 0))))) & (Ne(value, value)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 290,
          "throwingLine": 306,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(!hasUpperBound)) && (!(!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(count == 0))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(checkArgument(count == 0)))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(!hasUpperBound)) && (!(!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(count == 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\n\nconstraints = [\n  And(And(And(And(Not(count0 < 0), Not(hasLowerBound0)), Not(Not(hasUpperBound0))), Not(And(Not(False), Not(comparator0.compare(element0, upperEndpoint)) > 0 | comparator0.compare(element0, upperEndpoint) == 0 & upperBoundType0 == OPEN))), Not(count0 == 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nsuper = Symbol('super')\nupperBoundType = Symbol('upperBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\ncomparator_compare = Symbol('comparator_compare')\npath_conjunction = (((((~((StrictLessThan(count, 0)))) & (~(hasLowerBound))) & (~((~(hasUpperBound))))) & (~(((~(False)) & ((StrictGreaterThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(upperBoundType, OPEN)))))))) & (~((Eq(count, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 290,
          "throwingLine": 293,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (!(count == 0))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (!(checkArgument(count == 0)))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (!(count == 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\n\nconstraints = [\n  And(And(And(And(Not(count0 < 0), Not(Not(hasLowerBound0))), Not(hasUpperBound0)), Not(And(Not(comparator0.compare(element0, lowerEndpoint)) < 0 | comparator0.compare(element0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN, Not(False)))), Not(count0 == 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nsuper = Symbol('super')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\ncomparator_compare = Symbol('comparator_compare')\npath_conjunction = (((((~((StrictLessThan(count, 0)))) & (~((~(hasLowerBound))))) & (~(hasUpperBound))) & (~((((StrictLessThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN)))) & (~(False)))))) & (~((Eq(count, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 290,
          "throwingLine": 293,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException(\"occurrences\" + \" cannot be negative but was: \" + count)",
          "pathCojunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(hasUpperBound)) && (!(!!false && !false)) && (root == null) && (count > 0) && (count < 0)",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!!false && !false)) && (rootReference.get()) && (root == null) && (count > 0) && (add(element, count))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(hasUpperBound)) && (!(!!false && !false)) && (value == null) && (count > 0) && (count < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0 == value0,\n  And(And(And(And(And(And(Not(count0 < 0), Not(hasLowerBound0)), Not(hasUpperBound0)), Not(And(Not(Not(False)), Not(False)))), root0_isNull), count0 > 0), count0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (((((((~((StrictLessThan(count, 0)))) & (~(hasLowerBound))) & (~(hasUpperBound))) & (~(((~((~(False)))) & (~(False)))))) & (Eq(value, null))) & (StrictGreaterThan(count, 0))) & (StrictLessThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 290,
          "throwingLine": 300,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(!hasUpperBound)) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(count == 0))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(checkArgument(count == 0)))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(!hasUpperBound)) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(count == 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\n\nconstraints = [\n  And(And(And(And(Not(count0 < 0), Not(Not(hasLowerBound0))), Not(Not(hasUpperBound0))), Not(And(Not(comparator0.compare(element0, lowerEndpoint)) < 0 | comparator0.compare(element0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN, Not(comparator0.compare(element0, upperEndpoint)) > 0 | comparator0.compare(element0, upperEndpoint) == 0 & upperBoundType0 == OPEN))), Not(count0 == 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nsuper = Symbol('super')\nupperBoundType = Symbol('upperBoundType')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\ncomparator_compare = Symbol('comparator_compare')\npath_conjunction = (((((~((StrictLessThan(count, 0)))) & (~((~(hasLowerBound))))) & (~((~(hasUpperBound))))) & (~((((StrictLessThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN)))) & ((StrictGreaterThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(upperBoundType, OPEN)))))))) & (~((Eq(count, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 290,
          "throwingLine": 293,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new ConcurrentModificationException()",
          "pathCojunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (root == null) && (count > 0) && (!(count < 0)) && (!(count == 0)) && (!(!(range.contains(element)))) && (value == null) && (value != value)",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (rootReference.get()) && (root == null) && (count > 0) && (add(element, count))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (value == null) && (count > 0) && (!(count < 0)) && (!(count == 0)) && (!(!(range.contains(element)))) && (value == null) && (value != value)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\nroot0_isNull = Bool('root0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  root0 == value0,\n  And(And(And(And(And(And(And(And(And(And(Not(count0 < 0), Not(Not(hasLowerBound0))), Not(hasUpperBound0)), Not(And(Not(Not(comparator0.compare(element0, lowerEndpoint))) < 0 | comparator0.compare(element0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN, Not(False)))), root0_isNull), count0 > 0), Not(count0 < 0)), Not(count0 == 0)), Not(Not(range0.contains(element0)))), value0_isNull), value0 != value0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nrange = Symbol('range')\nsuper = Symbol('super')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\nvalue = Symbol('value')\ncomparator_compare = Symbol('comparator_compare')\nrange_contains = Symbol('range_contains')\nnull = Symbol('null')\npath_conjunction = (((((((((((~((StrictLessThan(count, 0)))) & (~((~(hasLowerBound))))) & (~(hasUpperBound))) & (~((((StrictLessThan((~((~(comparator_compare)))), 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN)))) & (~(False)))))) & (Eq(value, null))) & (StrictGreaterThan(count, 0))) & (~((StrictLessThan(count, 0))))) & (~((Eq(count, 0))))) & (~((~(range_contains))))) & (Eq(value, null))) & (Ne(value, value)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 290,
          "throwingLine": 300,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(newCount < 0)) && (!(oldCount < 0)) && (!(range.contains(element)))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(value < 0)) && (checkArgument(range.contains(element)))",
          "backwardsPathConjunction": "(!(newCount < 0)) && (!(oldCount < 0)) && (!(range.contains(element)))",
          "simplifiedPathConjunction": "newCount >= 0 && oldCount >= 0 && !range.contains(element)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  And(And(Not(newCount0 < 0), Not(oldCount0 < 0)), Not(range.contains(element0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\noldCount = Symbol('oldCount', integer=True)\nnewCount = Symbol('newCount', integer=True)\nrange_contains = Symbol('range_contains')\npath_conjunction = (((~((StrictLessThan(newCount, 0)))) & (~((StrictLessThan(oldCount, 0))))) & (~(range_contains)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 311,
          "throwingLine": 314,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException(\"oldCount\" + \" cannot be negative but was: \" + oldCount)",
          "pathCojunction": "(!(newCount < 0)) && (oldCount < 0)",
          "symbolicPathConjunction": "(!(value < 0)) && (value < 0)",
          "backwardsPathConjunction": "(!(newCount < 0)) && (oldCount < 0)",
          "simplifiedPathConjunction": "newCount >= 0 && oldCount < 0",
          "z3Inputs": "[oldCount0 = -1, newCount0 = 0]\n[newCount0 = 1, oldCount0 = -1]\n[newCount0 = 1, oldCount0 = -2]\n[newCount0 = 1, oldCount0 = -3]\n[newCount0 = 2, oldCount0 = -3]\n[newCount0 = 3, oldCount0 = -3]\n[newCount0 = 4, oldCount0 = -4]\n[newCount0 = 4, oldCount0 = -3]\n[newCount0 = 3, oldCount0 = -2]\n[newCount0 = 3, oldCount0 = -4]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  And(Not(newCount0 < 0), oldCount0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noldCount = Symbol('oldCount', integer=True)\nnewCount = Symbol('newCount', integer=True)\npath_conjunction = ((~((StrictLessThan(newCount, 0)))) & (StrictLessThan(oldCount, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 311,
          "throwingLine": 313,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException(\"newCount\" + \" cannot be negative but was: \" + newCount)",
          "pathCojunction": "(newCount < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(newCount < 0)",
          "simplifiedPathConjunction": "newCount < 0",
          "z3Inputs": "[newCount0 = -1]\n[newCount0 = -2]\n[newCount0 = -3]\n[newCount0 = -4]\n[newCount0 = -5]\n[newCount0 = -6]\n[newCount0 = -7]\n[newCount0 = -8]\n[newCount0 = -9]\n[newCount0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  newCount0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnewCount = Symbol('newCount', integer=True)\npath_conjunction = (StrictLessThan(newCount, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 311,
          "throwingLine": 312,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.Anonymous-daf9f0b1-5694-47be-aef2-529d2997eeac.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(current == null)) && (!(!hasUpperBound)) && (!(comparator.compare(t, upperEndpoint) > 0 | (comparator.compare(t, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(true))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(current == null)) && (!(!hasUpperBound)) && (!(comparator.compare(t, upperEndpoint) > 0 | (comparator.compare(t, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(true))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhasUpperBound0 = Bool('hasUpperBound0')\ncurrent0_isNull = Bool('current0_isNull')\n\nconstraints = [\n  And(And(And(Not(current0_isNull), Not(Not(hasUpperBound0))), Not(comparator0.compare(t0, upperEndpoint) > 0 | comparator0.compare(t0, upperEndpoint) == 0 & upperBoundType0 == OPEN)), Not(True))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\ncurrent = Symbol('current')\nupperBoundType = Symbol('upperBoundType')\nt = Symbol('t')\nhasUpperBound = Symbol('hasUpperBound')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(current, null)))) & (~((~(hasUpperBound))))) & (~(((StrictGreaterThan(comparator_compare, 0)) | ((Eq(comparator_compare, 0)) & (Eq(upperBoundType, OPEN))))))) & (~(True)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 420,
          "throwingLine": 422,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.Anonymous-daf9f0b1-5694-47be-aef2-529d2997eeac.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(current == null) && (!(false))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(current == null) && (!(false))",
          "z3Inputs": "[current0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncurrent0_isNull = Bool('current0_isNull')\n\nconstraints = [\n  And(current0_isNull, Not(False))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncurrent = Symbol('current')\nnull = Symbol('null')\npath_conjunction = ((Eq(current, null)) & (~(False)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 420,
          "throwingLine": 422,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.Anonymous-dce51173-d4df-4d31-bf9e-e49230279674.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(current == null)) && (!(!hasLowerBound)) && (!(comparator.compare(t, lowerEndpoint) < 0 | (comparator.compare(t, lowerEndpoint) == 0 & lowerBoundType == OPEN))) && (!(true))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(current == null)) && (!(!hasLowerBound)) && (!(comparator.compare(t, lowerEndpoint) < 0 | (comparator.compare(t, lowerEndpoint) == 0 & lowerBoundType == OPEN))) && (!(true))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhasLowerBound0 = Bool('hasLowerBound0')\ncurrent0_isNull = Bool('current0_isNull')\n\nconstraints = [\n  And(And(And(Not(current0_isNull), Not(Not(hasLowerBound0))), Not(comparator0.compare(t0, lowerEndpoint) < 0 | comparator0.compare(t0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN)), Not(True))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\ncurrent = Symbol('current')\nt = Symbol('t')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(current, null)))) & (~((~(hasLowerBound))))) & (~(((StrictLessThan(comparator_compare, 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN))))))) & (~(True)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 462,
          "throwingLine": 464,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.Anonymous-dce51173-d4df-4d31-bf9e-e49230279674.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(current == null) && (!(false))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(current == null) && (!(false))",
          "z3Inputs": "[current0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncurrent0_isNull = Bool('current0_isNull')\n\nconstraints = [\n  And(current0_isNull, Not(False))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncurrent = Symbol('current')\nnull = Symbol('null')\npath_conjunction = ((Eq(current, null)) & (~(False)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 462,
          "throwingLine": 464,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.Reference.checkAndSet(T, T)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(value != expected)",
          "symbolicPathConjunction": "(value != expected)",
          "backwardsPathConjunction": "(value != expected)",
          "simplifiedPathConjunction": "expected != value",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  value0 != expected0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpected = Symbol('expected')\nvalue = Symbol('value')\npath_conjunction = (Ne(value, expected))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 513,
          "throwingLine": 515,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/hash/Hashing.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.hash.Hashing.goodFastHash(int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"Number of bits must be positive\"))",
          "pathCojunction": "(!(minimumBits > 0))",
          "symbolicPathConjunction": "(checkArgument(bits > 0, \"Number of bits must be positive\"))",
          "backwardsPathConjunction": "(!(minimumBits > 0))",
          "simplifiedPathConjunction": "minimumBits <= 0",
          "z3Inputs": "[minimumBits0 = 0]\n[minimumBits0 = -1]\n[minimumBits0 = -2]\n[minimumBits0 = -3]\n[minimumBits0 = -4]\n[minimumBits0 = -5]\n[minimumBits0 = -6]\n[minimumBits0 = -7]\n[minimumBits0 = -8]\n[minimumBits0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nminimumBits0 = Int('minimumBits0')\n\nconstraints = [\n  Not(minimumBits0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nminimumBits = Symbol('minimumBits', integer=True)\npath_conjunction = (~((StrictGreaterThan(minimumBits, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 65,
          "throwingLine": 66,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/MapMaker.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.initialCapacity(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(initialCapacity >= 0))",
          "symbolicPathConjunction": "(checkArgument(initialCapacity >= 0))",
          "backwardsPathConjunction": "(!(initialCapacity >= 0))",
          "simplifiedPathConjunction": "initialCapacity < 0",
          "z3Inputs": "[initialCapacity0 = -1]\n[initialCapacity0 = -2]\n[initialCapacity0 = -3]\n[initialCapacity0 = -4]\n[initialCapacity0 = -5]\n[initialCapacity0 = -6]\n[initialCapacity0 = -7]\n[initialCapacity0 = -8]\n[initialCapacity0 = -9]\n[initialCapacity0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninitialCapacity0 = Int('initialCapacity0')\n\nconstraints = [\n  Not(initialCapacity0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninitialCapacity = Symbol('initialCapacity', integer=True)\npath_conjunction = (~((GreaterThan(initialCapacity, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 168,
          "throwingLine": 173,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.concurrencyLevel(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(concurrencyLevel > 0))",
          "symbolicPathConjunction": "(checkArgument(concurrencyLevel > 0))",
          "backwardsPathConjunction": "(!(concurrencyLevel > 0))",
          "simplifiedPathConjunction": "concurrencyLevel <= 0",
          "z3Inputs": "[concurrencyLevel0 = 0]\n[concurrencyLevel0 = -1]\n[concurrencyLevel0 = -2]\n[concurrencyLevel0 = -3]\n[concurrencyLevel0 = -4]\n[concurrencyLevel0 = -5]\n[concurrencyLevel0 = -6]\n[concurrencyLevel0 = -7]\n[concurrencyLevel0 = -8]\n[concurrencyLevel0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nconcurrencyLevel0 = Int('concurrencyLevel0')\n\nconstraints = [\n  Not(concurrencyLevel0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nconcurrencyLevel = Symbol('concurrencyLevel', integer=True)\npath_conjunction = (~((StrictGreaterThan(concurrencyLevel, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 242,
          "throwingLine": 247,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.weakKeys()",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"Soft keys are not supported\"))",
          "pathCojunction": "(!(checkNotNull(strength) != SOFT))",
          "symbolicPathConjunction": "(checkArgument(keyStrength != SOFT, \"Soft keys are not supported\"))",
          "backwardsPathConjunction": "(!(checkNotNull(strength) != SOFT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(checkNotNull(strength0) != SOFT)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrength = Symbol('strength')\n_checkNotNull = Symbol('_checkNotNull')\npath_conjunction = (~((Ne(_checkNotNull, SOFT))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 269,
          "throwingLine": 270,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.NullConcurrentMap.put(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 794,
          "throwingLine": 796,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.NullConcurrentMap.put(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 794,
          "throwingLine": 795,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.NullConcurrentMap.putIfAbsent(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(put(key, value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 802,
          "throwingLine": 803,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.NullConcurrentMap.putIfAbsent(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(put(key, value))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 802,
          "throwingLine": 803,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.NullConcurrentMap.replace(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 817,
          "throwingLine": 818,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.NullConcurrentMap.replace(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 817,
          "throwingLine": 819,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.NullConcurrentMap.replace(K, V, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (newValue == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(newValue))",
          "backwardsPathConjunction": "(!(key == null)) && (newValue == null)",
          "simplifiedPathConjunction": "newValue == null && key != null",
          "z3Inputs": "[key0_isNull = False, newValue0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nnewValue0_isNull = Bool('newValue0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), newValue0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnewValue = Symbol('newValue')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(newValue, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 824,
          "throwingLine": 826,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.NullConcurrentMap.replace(K, V, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 824,
          "throwingLine": 825,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/LocalCacheTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.LocalCacheTest.Anonymous-5b5c758d-8efb-4104-a649-8ed44c5db402.load(java.lang.Object)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(computingSignal.countDown()) && (startSignal.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 678,
          "throwingLine": 680,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCacheTest.Anonymous-279177f1-2062-4a39-87c1-50a8d8d5fd46.onRemoval(com.google.common.cache.RemovalNotification<java.lang.Object, java.lang.Object>)",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 755,
          "throwingLine": 756,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCacheTest.Anonymous-9e872c2e-fbe2-4edd-9940-10e62f04019c.load(java.lang.Object)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(computingSignal.countDown()) && (startSignal.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 778,
          "throwingLine": 780,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/MinMaxPriorityQueue.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.Builder.expectedSize(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(expectedSize >= 0))",
          "symbolicPathConjunction": "(checkArgument(expectedSize >= 0))",
          "backwardsPathConjunction": "(!(expectedSize >= 0))",
          "simplifiedPathConjunction": "expectedSize < 0",
          "z3Inputs": "[expectedSize0 = -1]\n[expectedSize0 = -2]\n[expectedSize0 = -3]\n[expectedSize0 = -4]\n[expectedSize0 = -5]\n[expectedSize0 = -6]\n[expectedSize0 = -7]\n[expectedSize0 = -8]\n[expectedSize0 = -9]\n[expectedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedSize0 = Int('expectedSize0')\n\nconstraints = [\n  Not(expectedSize0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedSize = Symbol('expectedSize', integer=True)\npath_conjunction = (~((GreaterThan(expectedSize, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 186,
          "throwingLine": 187,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.Builder.maximumSize(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(maximumSize > 0))",
          "symbolicPathConjunction": "(checkArgument(maximumSize > 0))",
          "backwardsPathConjunction": "(!(maximumSize > 0))",
          "simplifiedPathConjunction": "maximumSize <= 0",
          "z3Inputs": "[maximumSize0 = 0]\n[maximumSize0 = -1]\n[maximumSize0 = -2]\n[maximumSize0 = -3]\n[maximumSize0 = -4]\n[maximumSize0 = -5]\n[maximumSize0 = -6]\n[maximumSize0 = -7]\n[maximumSize0 = -8]\n[maximumSize0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmaximumSize0 = Int('maximumSize0')\n\nconstraints = [\n  Not(maximumSize0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmaximumSize = Symbol('maximumSize', integer=True)\npath_conjunction = (~((StrictGreaterThan(maximumSize, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 198,
          "throwingLine": 199,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.add(E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(element == null)",
          "symbolicPathConjunction": "(offer(element))",
          "backwardsPathConjunction": "(element == null)",
          "simplifiedPathConjunction": "element == null",
          "z3Inputs": "[element0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  element0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nnull = Symbol('null')\npath_conjunction = (Eq(element, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 265,
          "throwingLine": 266,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.offer(E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(element == null)",
          "symbolicPathConjunction": "(checkNotNull(element))",
          "backwardsPathConjunction": "(element == null)",
          "simplifiedPathConjunction": "element == null",
          "z3Inputs": "[element0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  element0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nnull = Symbol('null')\npath_conjunction = (Eq(element, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 287,
          "throwingLine": 288,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.poll()",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, size, \"index\"))",
          "pathCojunction": "(!(isEmpty())) && (0 < 0 || 0 > size)",
          "symbolicPathConjunction": "(!(isEmpty())) && ((elementData(index)) && (removeAt(index)))",
          "backwardsPathConjunction": "(!(isEmpty())) && (0 < 0 || 0 > size)",
          "simplifiedPathConjunction": "!isEmpty() && size < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\n\nconstraints = [\n  And(Not(isEmpty()), Or(0 < 0, 0 > size0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsize = Symbol('size', integer=True)\n_isEmpty = Symbol('_isEmpty')\npath_conjunction = ((~(_isEmpty)) & ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 301,
          "throwingLine": 302,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.pollFirst()",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, size, \"index\"))",
          "pathCojunction": "(!(isEmpty())) && (0 < 0 || 0 > size)",
          "symbolicPathConjunction": "(poll())",
          "backwardsPathConjunction": "(!(isEmpty())) && (0 < 0 || 0 > size)",
          "simplifiedPathConjunction": "!isEmpty() && size < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\n\nconstraints = [\n  And(Not(isEmpty()), Or(0 < 0, 0 > size0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsize = Symbol('size', integer=True)\n_isEmpty = Symbol('_isEmpty')\npath_conjunction = ((~(_isEmpty)) & ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 335,
          "throwingLine": 336,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.removeLast()",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(getMaxElementIndex(), size, \"index\"))",
          "pathCojunction": "(!(isEmpty())) && (getMaxElementIndex() < 0 || getMaxElementIndex() > size)",
          "symbolicPathConjunction": "(!(isEmpty())) && ((elementData(index)) && (removeAt(index)))",
          "backwardsPathConjunction": "(!(isEmpty())) && (getMaxElementIndex() < 0 || getMaxElementIndex() > size)",
          "simplifiedPathConjunction": "!isEmpty() && (getMaxElementIndex() > size || getMaxElementIndex() < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\n\nconstraints = [\n  And(Not(isEmpty()), Or(getMaxElementIndex() < 0, getMaxElementIndex() > size0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsize = Symbol('size', integer=True)\n_isEmpty = Symbol('_isEmpty')\n_getMaxElementIndex = Symbol('_getMaxElementIndex')\npath_conjunction = ((~(_isEmpty)) & ((StrictLessThan(_getMaxElementIndex, 0)) | (StrictGreaterThan(_getMaxElementIndex, size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 369,
          "throwingLine": 373,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.QueueIterator.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 769,
          "throwingLine": 770,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.QueueIterator.next()",
          "exception": "throw new NoSuchElementException(\"iterator moved past last element in queue.\");",
          "pathCojunction": "(!(modCount != expectedModCount)) && (!(skipMe != null)) && (!(tempCursor < size)) && (forgetMeNot != null) && (!(lastFromForgetMeNot != null))",
          "symbolicPathConjunction": "(!(!(modCount != expectedModCount))) && (!(skipMe != null)) && (!(size())) && (!(tempCursor < size())) && (forgetMeNot != null) && (!(lastFromForgetMeNot != null))",
          "backwardsPathConjunction": "(!(modCount != expectedModCount)) && (!(skipMe != null)) && (!(cursor + 1 < size)) && (forgetMeNot != null) && (!(lastFromForgetMeNot != null))",
          "simplifiedPathConjunction": "expectedModCount == modCount && forgetMeNot.poll() == null && null == skipMe && size() - size >= -1 && forgetMeNot != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\ncursor0 = Int('cursor0')\ntempCursor0 = Int('tempCursor0')\nsize0 = Int('size0')\ncursor1 = Int('cursor1')\nskipMe0_isNull = Bool('skipMe0_isNull')\nforgetMeNot0_isNull = Bool('forgetMeNot0_isNull')\nlastFromForgetMeNot0_isNull = Bool('lastFromForgetMeNot0_isNull')\n\nconstraints = [\n  tempCursor0 == cursor0 + 1,\n  cursor1 == size(),\n  lastFromForgetMeNot0 == forgetMeNot0.poll(),\n  And(And(And(And(Not(modCount0 != expectedModCount0), Not(Not(skipMe0_isNull))), Not(tempCursor0 < size0)), Not(forgetMeNot0_isNull)), Not(Not(lastFromForgetMeNot0_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\nskipMe = Symbol('skipMe')\nsize = Symbol('size', integer=True)\nforgetMeNot = Symbol('forgetMeNot')\n_size = Symbol('_size')\nforgetMeNot_poll = Symbol('forgetMeNot_poll')\nnull = Symbol('null')\npath_conjunction = (((((~((Ne(modCount, expectedModCount)))) & (~((Ne(skipMe, null))))) & (~((StrictLessThan((_size + 1), size))))) & (Ne(forgetMeNot, null))) & (~((Ne(forgetMeNot_poll, null)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 776,
          "throwingLine": 791,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.QueueIterator.next()",
          "exception": "throw new NoSuchElementException(\"iterator moved past last element in queue.\");",
          "pathCojunction": "(!(modCount != expectedModCount)) && (skipMe != null) && (!(cursor + 1 < size && containsExact(skipMe, (E) queue[cursor + 1]))) && (!(tempCursor < size)) && (forgetMeNot != null) && (!(lastFromForgetMeNot != null))",
          "symbolicPathConjunction": "(!(modCount != expectedModCount)) && ((skipMe != null) && (!(size())) && (!(elementData(c))) && (!(c < size() && containsExact(skipMe, elementData(c))))) && (!(size())) && (!(tempCursor < size())) && (forgetMeNot != null) && (!(lastFromForgetMeNot != null))",
          "backwardsPathConjunction": "(!(modCount != expectedModCount)) && (skipMe != null) && (!(cursor + 1 < size && containsExact(skipMe, (E) queue[cursor + 1]))) && (!(cursor + 1 < size)) && (forgetMeNot != null) && (!(lastFromForgetMeNot != null))",
          "simplifiedPathConjunction": "expectedModCount == modCount && forgetMeNot.poll() == null && size() - size >= -1 && forgetMeNot != null && null != skipMe",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\ncursor0 = Int('cursor0')\nsize0 = Int('size0')\ntempCursor0 = Int('tempCursor0')\ncursor1 = Int('cursor1')\nskipMe0_isNull = Bool('skipMe0_isNull')\nforgetMeNot0_isNull = Bool('forgetMeNot0_isNull')\nlastFromForgetMeNot0_isNull = Bool('lastFromForgetMeNot0_isNull')\n\nconstraints = [\n  tempCursor0 == cursor0 + 1,\n  cursor1 == size(),\n  lastFromForgetMeNot0 == forgetMeNot0.poll(),\n  And(And(And(And(And(Not(modCount0 != expectedModCount0), Not(skipMe0_isNull)), Not(And(cursor1 + 1 < size0, containsExact(skipMe0, (E) queue0[cursor1 + 1])))), Not(tempCursor0 < size0)), Not(forgetMeNot0_isNull)), Not(Not(lastFromForgetMeNot0_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\nsize = Symbol('size', integer=True)\nskipMe = Symbol('skipMe')\nqueue = Symbol('queue')\nforgetMeNot = Symbol('forgetMeNot')\n_size = Symbol('_size')\n_containsExact = Symbol('_containsExact')\nforgetMeNot_poll = Symbol('forgetMeNot_poll')\nnull = Symbol('null')\npath_conjunction = ((((((~((Ne(modCount, expectedModCount)))) & (Ne(skipMe, null))) & (~(((StrictLessThan((_size + 1), size)) & _containsExact)))) & (~((StrictLessThan((_size + 1), size))))) & (Ne(forgetMeNot, null))) & (~((Ne(forgetMeNot_poll, null)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 776,
          "throwingLine": 791,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.QueueIterator.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(!(modCount != expectedModCount))",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 776,
          "throwingLine": 777,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.QueueIterator.next()",
          "exception": "throw new NoSuchElementException(\"iterator moved past last element in queue.\");",
          "pathCojunction": "(!(modCount != expectedModCount)) && (skipMe != null) && (!(cursor + 1 < size && containsExact(skipMe, (E) queue[cursor + 1]))) && (!(tempCursor < size)) && (!(forgetMeNot != null))",
          "symbolicPathConjunction": "(!(modCount != expectedModCount)) && ((skipMe != null) && (!(size())) && (!(elementData(c))) && (!(c < size() && containsExact(skipMe, elementData(c))))) && (!(size())) && (!(tempCursor < size())) && (!(forgetMeNot != null))",
          "backwardsPathConjunction": "(!(modCount != expectedModCount)) && (skipMe != null) && (!(cursor + 1 < size && containsExact(skipMe, (E) queue[cursor + 1]))) && (!(cursor + 1 < size)) && (!(forgetMeNot != null))",
          "simplifiedPathConjunction": "expectedModCount == modCount && forgetMeNot == null && cursor - size >= -1 && null != skipMe",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\ncursor0 = Int('cursor0')\nsize0 = Int('size0')\ntempCursor0 = Int('tempCursor0')\nskipMe0_isNull = Bool('skipMe0_isNull')\nforgetMeNot0_isNull = Bool('forgetMeNot0_isNull')\n\nconstraints = [\n  tempCursor0 == cursor0 + 1,\n  And(And(And(And(Not(modCount0 != expectedModCount0), Not(skipMe0_isNull)), Not(And(cursor0 + 1 < size0, containsExact(skipMe0, (E) queue0[cursor0 + 1])))), Not(tempCursor0 < size0)), Not(Not(forgetMeNot0_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\ncursor = Symbol('cursor', integer=True)\nsize = Symbol('size', integer=True)\nskipMe = Symbol('skipMe')\nqueue = Symbol('queue')\nforgetMeNot = Symbol('forgetMeNot')\n_containsExact = Symbol('_containsExact')\nnull = Symbol('null')\npath_conjunction = (((((~((Ne(modCount, expectedModCount)))) & (Ne(skipMe, null))) & (~(((StrictLessThan((cursor + 1), size)) & _containsExact)))) & (~((StrictLessThan((cursor + 1), size))))) & (~((Ne(forgetMeNot, null)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 776,
          "throwingLine": 791,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.QueueIterator.next()",
          "exception": "throw new NoSuchElementException(\"iterator moved past last element in queue.\");",
          "pathCojunction": "(!(modCount != expectedModCount)) && (!(skipMe != null)) && (!(tempCursor < size)) && (!(forgetMeNot != null))",
          "symbolicPathConjunction": "(!(modCount != expectedModCount)) && (!(skipMe != null)) && (!(size())) && (!(tempCursor < size())) && (!(forgetMeNot != null))",
          "backwardsPathConjunction": "(!(modCount != expectedModCount)) && (!(skipMe != null)) && (!(cursor + 1 < size)) && (!(forgetMeNot != null))",
          "simplifiedPathConjunction": "expectedModCount == modCount && forgetMeNot == null && null == skipMe && cursor - size >= -1",
          "z3Inputs": "[size0 = 0,\n tempCursor0 = 0,\n cursor0 = -1,\n expectedModCount0 = 0,\n modCount0 = 0,\n forgetMeNot0_isNull = True,\n skipMe0_isNull = True]\n[skipMe0_isNull = True,\n forgetMeNot0_isNull = True,\n size0 = -1,\n expectedModCount0 = 3,\n modCount0 = 3,\n tempCursor0 = -1,\n cursor0 = -2]\n[skipMe0_isNull = True,\n forgetMeNot0_isNull = True,\n size0 = -2,\n expectedModCount0 = 4,\n modCount0 = 4,\n tempCursor0 = -2,\n cursor0 = -3]\n[skipMe0_isNull = True,\n forgetMeNot0_isNull = True,\n size0 = -3,\n expectedModCount0 = 5,\n modCount0 = 5,\n tempCursor0 = -3,\n cursor0 = -4]\n[skipMe0_isNull = True,\n forgetMeNot0_isNull = True,\n size0 = -4,\n expectedModCount0 = 6,\n modCount0 = 6,\n tempCursor0 = -4,\n cursor0 = -5]\n[skipMe0_isNull = True,\n forgetMeNot0_isNull = True,\n size0 = -5,\n expectedModCount0 = 7,\n modCount0 = 7,\n tempCursor0 = -5,\n cursor0 = -6]\n[skipMe0_isNull = True,\n forgetMeNot0_isNull = True,\n size0 = -6,\n expectedModCount0 = 8,\n modCount0 = 8,\n tempCursor0 = -6,\n cursor0 = -7]\n[skipMe0_isNull = True,\n forgetMeNot0_isNull = True,\n size0 = -7,\n expectedModCount0 = 9,\n modCount0 = 9,\n tempCursor0 = -7,\n cursor0 = -8]\n[skipMe0_isNull = True,\n forgetMeNot0_isNull = True,\n size0 = -8,\n expectedModCount0 = 10,\n modCount0 = 10,\n tempCursor0 = -8,\n cursor0 = -9]\n[skipMe0_isNull = True,\n forgetMeNot0_isNull = True,\n size0 = -9,\n expectedModCount0 = 11,\n modCount0 = 11,\n tempCursor0 = -9,\n cursor0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\ncursor0 = Int('cursor0')\ntempCursor0 = Int('tempCursor0')\nsize0 = Int('size0')\nskipMe0_isNull = Bool('skipMe0_isNull')\nforgetMeNot0_isNull = Bool('forgetMeNot0_isNull')\n\nconstraints = [\n  tempCursor0 == cursor0 + 1,\n  And(And(And(Not(modCount0 != expectedModCount0), Not(Not(skipMe0_isNull))), Not(tempCursor0 < size0)), Not(Not(forgetMeNot0_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\ncursor = Symbol('cursor', integer=True)\nskipMe = Symbol('skipMe')\nsize = Symbol('size', integer=True)\nforgetMeNot = Symbol('forgetMeNot')\nnull = Symbol('null')\npath_conjunction = ((((~((Ne(modCount, expectedModCount)))) & (~((Ne(skipMe, null))))) & (~((StrictLessThan((cursor + 1), size))))) & (~((Ne(forgetMeNot, null)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 776,
          "throwingLine": 791,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.QueueIterator.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(!canRemove)) && (modCount != expectedModCount)",
          "symbolicPathConjunction": "(!(checkState(canRemove, \"no calls to next() since the last call to remove()\"))) && (!(modCount != expectedModCount))",
          "backwardsPathConjunction": "(!(!canRemove)) && (modCount != expectedModCount)",
          "simplifiedPathConjunction": "canRemove && expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0, canRemove0 = True]\n[canRemove0 = True, expectedModCount0 = 3, modCount0 = 2]\n[canRemove0 = True, expectedModCount0 = 5, modCount0 = 4]\n[canRemove0 = True, expectedModCount0 = 7, modCount0 = 6]\n[canRemove0 = True, expectedModCount0 = 9, modCount0 = 8]\n[canRemove0 = True, expectedModCount0 = 11, modCount0 = 10]\n[canRemove0 = True, expectedModCount0 = 13, modCount0 = 12]\n[canRemove0 = True, expectedModCount0 = 15, modCount0 = 14]\n[canRemove0 = True, expectedModCount0 = 17, modCount0 = 16]\n[canRemove0 = True, expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncanRemove0 = Bool('canRemove0')\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  And(Not(Not(canRemove0)), modCount0 != expectedModCount0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncanRemove = Symbol('canRemove')\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = ((~((~(canRemove)))) & (Ne(modCount, expectedModCount)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 795,
          "throwingLine": 797,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.QueueIterator.remove()",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(canRemove))",
          "symbolicPathConjunction": "(!(checkState(canRemove, \"no calls to next() since the last call to remove()\")))",
          "backwardsPathConjunction": "(!(canRemove))",
          "simplifiedPathConjunction": "!canRemove",
          "z3Inputs": "[canRemove0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncanRemove0 = Bool('canRemove0')\n\nconstraints = [\n  Not(canRemove0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncanRemove = Symbol('canRemove')\npath_conjunction = (~(canRemove))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 795,
          "throwingLine": 796,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MinMaxPriorityQueue.QueueIterator.remove()",
          "exception": "throw new IllegalStateException()",
          "pathCojunction": "(!(!canRemove)) && (!(modCount != expectedModCount)) && (!(cursor < size)) && (!(removeExact(lastFromForgetMeNot)))",
          "symbolicPathConjunction": "(!(checkState(canRemove, \"no calls to next() since the last call to remove()\"))) && (!(!(modCount != expectedModCount))) && (!(size())) && (!(cursor < size())) && (!(checkState(removeExact(lastFromForgetMeNot))))",
          "backwardsPathConjunction": "(!(!canRemove)) && (!(modCount != expectedModCount)) && (!(cursor < size)) && (!(removeExact(lastFromForgetMeNot)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncanRemove0 = Bool('canRemove0')\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\ncanRemove1 = Bool('canRemove1')\ncursor0 = Int('cursor0')\nsize0 = Int('size0')\n\nconstraints = [\n  canRemove1 == False,\n  And(And(And(Not(Not(canRemove1)), Not(modCount0 != expectedModCount0)), Not(cursor0 < size0)), Not(removeExact(lastFromForgetMeNot)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\ncursor = Symbol('cursor', integer=True)\nsize = Symbol('size', integer=True)\n_removeExact = Symbol('_removeExact')\npath_conjunction = ((((~((~(False)))) & (~((Ne(modCount, expectedModCount))))) & (~((StrictLessThan(cursor, size))))) & (~(_removeExact)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 795,
          "throwingLine": 812,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.copyOf(java.lang.Iterable<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 126,
          "throwingLine": 127,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.copyOf(E[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "simplifiedPathConjunction": "elements == null",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 150,
          "throwingLine": 151,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.addAll(int, java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 216,
          "throwingLine": 217,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.set(int, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 220,
          "throwingLine": 221,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.add(int, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 224,
          "throwingLine": 225,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.remove(int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 228,
          "throwingLine": 229,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableList.Builder.add(E...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "simplifiedPathConjunction": "elements == null",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 298,
          "throwingLine": 299,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Ascii.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Ascii.truncate(java.lang.CharSequence, int, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(seq == null)",
          "symbolicPathConjunction": "(checkNotNull(seq))",
          "backwardsPathConjunction": "(seq == null)",
          "simplifiedPathConjunction": "null == seq",
          "z3Inputs": "[seq0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseq0 = String('seq0')\nmaxLength0 = Int('maxLength0')\ntruncationIndicator0 = String('truncationIndicator0')\nseq0_isNull = Bool('seq0_isNull')\n\nconstraints = [\n  seq0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseq = Symbol('seq')\nnull = Symbol('null')\npath_conjunction = (Eq(seq, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 584,
          "throwingLine": 585,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/SimpleAbstractMultisetTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.SimpleAbstractMultisetTest.Anonymous-27fc9f3b-7f33-4180-943b-a6a6674f0800.add(java.lang.String, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(occurrences >= 0))",
          "symbolicPathConjunction": "(addCalls.incrementAndGet()) && (super.add(element, occurrences))",
          "backwardsPathConjunction": "(!(occurrences >= 0))",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0 = String('element0')\noccurrences0 = Int('occurrences0')\nvalue0 = Int('value0')\n\nconstraints = [\n  Not(occurrences0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = (~((GreaterThan(occurrences, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 70,
          "throwingLine": 72,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SimpleAbstractMultisetTest.NoRemoveMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(!(occurrences >= 0))) && (!(frequency == null)) && (!(occurrences == 0)) && (!(occurrences <= Integer.MAX_VALUE - frequency))",
          "symbolicPathConjunction": "(checkArgument(occurrences >= 0)) && (!(frequency == null)) && (!(occurrences == 0)) && (!(checkArgument(occurrences <= Integer.MAX_VALUE - frequency)))",
          "backwardsPathConjunction": "(!(!(occurrences >= 0))) && (!(backingMap.get(element) == null)) && (!(occurrences == 0)) && (!(occurrences <= Integer.MAX_VALUE - backingMap.get(element)))",
          "simplifiedPathConjunction": "occurrences > 0 && Integer.MAX_VALUE < Maps.newHashMap().get(element) + occurrences && Maps.newHashMap().get(element) != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\nfrequency0 = Int('frequency0')\nfrequency0_isNull = Bool('frequency0_isNull')\n\nconstraints = [\n  V > backingMap0 == Maps.newHashMap(),\n  frequency0 == backingMap0.get(element0),\n  And(And(And(Not(Not(occurrences0 >= 0)), Not(frequency0_isNull)), Not(occurrences0 == 0)), Not(occurrences0 <= 2147483647 - frequency0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\noccurrences = Symbol('occurrences', integer=True)\nMaps_newHashMap_get = Symbol('Maps_newHashMap_get')\nMaps_newHashMap = Symbol('Maps_newHashMap')\nnull = Symbol('null')\nInteger_MAX_VALUE = Symbol('Integer_MAX_VALUE', integer=True)\npath_conjunction = ((((~((~((GreaterThan(occurrences, 0)))))) & (~((Eq(Maps_newHashMap_get, null))))) & (~((Eq(occurrences, 0))))) & (~((LessThan(occurrences, (Integer_MAX_VALUE - Maps_newHashMap_get))))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 95,
          "throwingLine": 104,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.SimpleAbstractMultisetTest.NoRemoveMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(occurrences >= 0))",
          "symbolicPathConjunction": "(checkArgument(occurrences >= 0))",
          "backwardsPathConjunction": "(!(occurrences >= 0))",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  Not(occurrences0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = (~((GreaterThan(occurrences, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 95,
          "throwingLine": 96,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SimpleAbstractMultisetTest.NoRemoveMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(!(occurrences >= 0))) && (frequency == null) && (!(occurrences == 0)) && (!(occurrences <= Integer.MAX_VALUE - frequency))",
          "symbolicPathConjunction": "(!(checkArgument(occurrences >= 0))) && (frequency == null) && (!(occurrences == 0)) && (!(checkArgument(occurrences <= Integer.MAX_VALUE - frequency)))",
          "backwardsPathConjunction": "(!(!(occurrences >= 0))) && (0 == null) && (!(occurrences == 0)) && (!(occurrences <= Integer.MAX_VALUE - 0))",
          "simplifiedPathConjunction": "null == 0 && occurrences > 0 && Integer.MAX_VALUE < occurrences",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\nfrequency0 = Int('frequency0')\nfrequency1 = Int('frequency1')\nfrequency1_isNull = Bool('frequency1_isNull')\n\nconstraints = [\n  V > backingMap0 == Maps.newHashMap(),\n  frequency0 == backingMap0.get(element0),\n  frequency1 == 0,\n  And(And(And(Not(Not(occurrences0 >= 0)), frequency1_isNull), Not(occurrences0 == 0)), Not(occurrences0 <= 2147483647 - frequency1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\nnull = Symbol('null')\nInteger_MAX_VALUE = Symbol('Integer_MAX_VALUE', integer=True)\npath_conjunction = ((((~((~((GreaterThan(occurrences, 0)))))) & (Eq(0, null))) & (~((Eq(occurrences, 0))))) & (~((LessThan(occurrences, (Integer_MAX_VALUE - 0))))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 95,
          "throwingLine": 104,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/hash/AbstractByteHasher.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.hash.AbstractByteHasher.putBytes(byte[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(bytes == null)",
          "symbolicPathConjunction": "(checkNotNull(bytes))",
          "backwardsPathConjunction": "(bytes == null)",
          "simplifiedPathConjunction": "bytes == null",
          "z3Inputs": "[bytes0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbytes0_isNull = Bool('bytes0_isNull')\n\nconstraints = [\n  bytes0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbytes = Symbol('bytes')\nnull = Symbol('null')\npath_conjunction = (Eq(bytes, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 67,
          "throwingLine": 68,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.hash.AbstractByteHasher.putBytes(byte[], int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(off, off + len, bytes.length))",
          "pathCojunction": "(off < 0 || off + len < off || off + len > bytes.length)",
          "symbolicPathConjunction": "(checkPositionIndexes(off, off + len, bytes.length))",
          "backwardsPathConjunction": "(off < 0 || off + len < off || off + len > bytes.length)",
          "simplifiedPathConjunction": "bytes.length < len + off || len < 0 || off < 0",
          "z3Inputs": "[off0 = 2, len0 = -1, bytes0_length = 0]\n[len0 = -2, bytes0_length = 1]\n[off0 = -1, bytes0_length = 0]\n[off0 = -2, len0 = 3, bytes0_length = 0]\n[off0 = -3, len0 = 2, bytes0_length = 0]\n[off0 = -3, len0 = 1, bytes0_length = 0]\n[off0 = -3, len0 = 0, bytes0_length = 0]\n[off0 = -4, len0 = 1, bytes0_length = 0]\n[off0 = -5, len0 = 1, bytes0_length = 0]\n[off0 = -6, len0 = 1, bytes0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nbytes0_length = Int('bytes0_length')\n\nconstraints = [\n  bytes0_length >= 0, # implicit\n  Or(Or(off0 < 0, off0 + len0 < off0), off0 + len0 > bytes0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbytes = Symbol('bytes')\noff = Symbol('off', integer=True)\nlen = Symbol('len', integer=True)\nbytes_length = Symbol('bytes_length', integer=True)\npath_conjunction = (((StrictLessThan(off, 0)) | (StrictLessThan((off + len), off))) | (StrictGreaterThan((off + len), bytes_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 74,
          "throwingLine": 75,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/io/TestInputStream.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.TestInputStream.read(byte[], int, int)",
          "exception": "throw new IOException()",
          "pathCojunction": "(!(closed)) && (options.contains(READ_THROWS))",
          "symbolicPathConjunction": "(!(condition)) && (throwIf(options.contains(option)))",
          "backwardsPathConjunction": "(!(closed)) && (options.contains(READ_THROWS))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\n\nconstraints = [\n  And(Not(closed), options.contains(READ_THROWS))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noptions_contains = Symbol('options_contains')\npath_conjunction = ((~(closed)) & options_contains)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 62,
          "throwingLine": 64,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.TestInputStream.read(byte[], int, int)",
          "exception": "throw new IOException()",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(condition)",
          "backwardsPathConjunction": "(closed)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\n\nconstraints = [\n  closed\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 62,
          "throwingLine": 63,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.TestInputStream.skip(long)",
          "exception": "throw new IOException()",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(condition)",
          "backwardsPathConjunction": "(closed)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\n\nconstraints = [\n  n0 >= -9223372036854775808, n0 <= 9223372036854775807, # implicit\n  closed\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 69,
          "throwingLine": 70,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.TestInputStream.skip(long)",
          "exception": "throw new IOException()",
          "pathCojunction": "(!(closed)) && (options.contains(SKIP_THROWS))",
          "symbolicPathConjunction": "(!(condition)) && (throwIf(options.contains(option)))",
          "backwardsPathConjunction": "(!(closed)) && (options.contains(SKIP_THROWS))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\n\nconstraints = [\n  n0 >= -9223372036854775808, n0 <= 9223372036854775807, # implicit\n  And(Not(closed), options.contains(SKIP_THROWS))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noptions_contains = Symbol('options_contains')\npath_conjunction = ((~(closed)) & options_contains)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 69,
          "throwingLine": 71,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.TestInputStream.close()",
          "exception": "throw new IOException()",
          "pathCojunction": "(options.contains(CLOSE_THROWS))",
          "symbolicPathConjunction": "(throwIf(options.contains(option)))",
          "backwardsPathConjunction": "(options.contains(CLOSE_THROWS))",
          "simplifiedPathConjunction": "options.contains(CLOSE_THROWS)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nclosed0 = Bool('closed0')\n\nconstraints = [\n  closed0 == True,\n  options.contains(CLOSE_THROWS)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noptions_contains = Symbol('options_contains')\npath_conjunction = options_contains\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 82,
          "throwingLine": 84,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(start, length, \"index\"))",
          "pathCojunction": "(start < 0 || start > length)",
          "symbolicPathConjunction": "(checkPositionIndex(start, length))",
          "backwardsPathConjunction": "(start < 0 || start > sequence.length())",
          "simplifiedPathConjunction": "sequence.length() < start || start < 0",
          "z3Inputs": "[start0 = 1, sequence0 = \"\", length0 = 0]\n[start0 = -1, length0 = 1, sequence0 = \"A\"]\n[start0 = -2, length0 = 1, sequence0 = \"B\"]\n[start0 = -2, length0 = 0, sequence0 = \"\"]\n[start0 = -3, length0 = 0, sequence0 = \"\"]\n[start0 = -4, length0 = 0, sequence0 = \"\"]\n[start0 = -5, length0 = 0, sequence0 = \"\"]\n[start0 = -6, length0 = 0, sequence0 = \"\"]\n[start0 = -7, length0 = 0, sequence0 = \"\"]\n[start0 = -8, length0 = 0, sequence0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nstart0 = Int('start0')\nlength0 = Int('length0')\n\nconstraints = [\n  length0 == Length(sequence0),\n  Or(start0 < 0, start0 > length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nstart = Symbol('start', integer=True)\nsequence_length = Symbol('sequence_length')\npath_conjunction = ((StrictLessThan(start, 0)) | (StrictGreaterThan(start, sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 505,
          "throwingLine": 507,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.removeFrom(java.lang.CharSequence)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, length, \"index\"))",
          "pathCojunction": "(0 < 0 || 0 > string.length())",
          "symbolicPathConjunction": "(indexIn(string))",
          "backwardsPathConjunction": "(0 < 0 || 0 > sequence.toString().length())",
          "simplifiedPathConjunction": "sequence.toString().length() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nstring0 = String('string0')\n\nconstraints = [\n  string0 == sequence0.toString(),\n  Or(0 < 0, 0 > Length(string0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_toString_length = Symbol('sequence_toString_length')\nsequence_toString = Symbol('sequence_toString')\npath_conjunction = ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, sequence_toString_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 557,
          "throwingLine": 559,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.retainFrom(java.lang.CharSequence)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, length, \"index\"))",
          "pathCojunction": "(0 < 0 || 0 > sequence.toString().length())",
          "symbolicPathConjunction": "(negate().removeFrom(sequence))",
          "backwardsPathConjunction": "(0 < 0 || 0 > sequence.toString().length())",
          "simplifiedPathConjunction": "sequence.toString().length() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\n\nconstraints = [\n  Or(0 < 0, 0 > sequence0.toString().length())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_toString_length = Symbol('sequence_toString_length')\nsequence_toString = Symbol('sequence_toString')\npath_conjunction = ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, sequence_toString_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 595,
          "throwingLine": 596,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, char)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, length, \"index\"))",
          "pathCojunction": "(0 < 0 || 0 > string.length())",
          "symbolicPathConjunction": "(indexIn(string))",
          "backwardsPathConjunction": "(0 < 0 || 0 > sequence.toString().length())",
          "simplifiedPathConjunction": "sequence.toString().length() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nstring0 = String('string0')\n\nconstraints = [\n  string0 == sequence0.toString(),\n  Or(0 < 0, 0 > Length(string0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_toString_length = Symbol('sequence_toString_length')\nsequence_toString = Symbol('sequence_toString')\npath_conjunction = ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, sequence_toString_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 617,
          "throwingLine": 619,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, length, \"index\"))",
          "pathCojunction": "(!(replacementLen == 0)) && (replacementLen == 1) && (0 < 0 || 0 > sequence.toString().length())",
          "symbolicPathConjunction": "(!(replacementLen == 0)) && (replacementLen == 1) && (replaceFrom(sequence, replacement.charAt(0)))",
          "backwardsPathConjunction": "(!(replacement.length() == 0)) && (replacement.length() == 1) && (0 < 0 || 0 > sequence.toString().length())",
          "simplifiedPathConjunction": "replacement.length() == 1 && sequence.toString().length() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nreplacement0 = String('replacement0')\nreplacementLen0 = Int('replacementLen0')\n\nconstraints = [\n  replacementLen0 == Length(replacement0),\n  And(And(Not(replacementLen0 == 0), replacementLen0 == 1), Or(0 < 0, 0 > sequence0.toString().length()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nreplacement = Symbol('replacement')\nreplacement_length = Symbol('replacement_length')\nsequence_toString_length = Symbol('sequence_toString_length')\nsequence_toString = Symbol('sequence_toString')\npath_conjunction = (((~((Eq(replacement_length, 0)))) & (Eq(replacement_length, 1))) & ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, sequence_toString_length))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 650,
          "throwingLine": 656,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, length, \"index\"))",
          "pathCojunction": "(!(replacementLen == 0)) && (!(replacementLen == 1)) && (0 < 0 || 0 > string.length())",
          "symbolicPathConjunction": "(!(replacementLen == 0)) && (!(replacementLen == 1)) && (indexIn(string))",
          "backwardsPathConjunction": "(!(replacement.length() == 0)) && (!(replacement.length() == 1)) && (0 < 0 || 0 > sequence.toString().length())",
          "simplifiedPathConjunction": "sequence.toString().length() < 0 && replacement.length() != 0 && replacement.length() != 1",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nreplacement0 = String('replacement0')\nreplacementLen0 = Int('replacementLen0')\nstring0 = String('string0')\n\nconstraints = [\n  replacementLen0 == Length(replacement0),\n  string0 == sequence0.toString(),\n  And(And(Not(replacementLen0 == 0), Not(replacementLen0 == 1)), Or(0 < 0, 0 > Length(string0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nreplacement = Symbol('replacement')\nreplacement_length = Symbol('replacement_length')\nsequence_toString_length = Symbol('sequence_toString_length')\nsequence_toString = Symbol('sequence_toString')\npath_conjunction = (((~((Eq(replacement_length, 0)))) & (~((Eq(replacement_length, 1))))) & ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, sequence_toString_length))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 650,
          "throwingLine": 660,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, length, \"index\"))",
          "pathCojunction": "(replacementLen == 0) && (0 < 0 || 0 > sequence.toString().length())",
          "symbolicPathConjunction": "(replacementLen == 0) && (removeFrom(sequence))",
          "backwardsPathConjunction": "(replacement.length() == 0) && (0 < 0 || 0 > sequence.toString().length())",
          "simplifiedPathConjunction": "replacement.length() == 0 && sequence.toString().length() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nreplacement0 = String('replacement0')\nreplacementLen0 = Int('replacementLen0')\n\nconstraints = [\n  replacementLen0 == Length(replacement0),\n  And(replacementLen0 == 0, Or(0 < 0, 0 > sequence0.toString().length()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nreplacement = Symbol('replacement')\nreplacement_length = Symbol('replacement_length')\nsequence_toString_length = Symbol('sequence_toString_length')\nsequence_toString = Symbol('sequence_toString')\npath_conjunction = ((Eq(replacement_length, 0)) & ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, sequence_toString_length))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 650,
          "throwingLine": 653,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.indexIn(java.lang.CharSequence, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(start, length, \"index\"))",
          "pathCojunction": "(start < 0 || start > length)",
          "symbolicPathConjunction": "(checkPositionIndex(start, length))",
          "backwardsPathConjunction": "(start < 0 || start > sequence.length())",
          "simplifiedPathConjunction": "sequence.length() < start || start < 0",
          "z3Inputs": "[start0 = 1, sequence0 = \"\", length0 = 0]\n[start0 = -1, length0 = 1, sequence0 = \"A\"]\n[start0 = -2, length0 = 1, sequence0 = \"B\"]\n[start0 = -2, length0 = 0, sequence0 = \"\"]\n[start0 = -3, length0 = 0, sequence0 = \"\"]\n[start0 = -4, length0 = 0, sequence0 = \"\"]\n[start0 = -5, length0 = 0, sequence0 = \"\"]\n[start0 = -6, length0 = 0, sequence0 = \"\"]\n[start0 = -7, length0 = 0, sequence0 = \"\"]\n[start0 = -8, length0 = 0, sequence0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nstart0 = Int('start0')\nlength0 = Int('length0')\n\nconstraints = [\n  length0 == Length(sequence0),\n  Or(start0 < 0, start0 > length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nstart = Symbol('start', integer=True)\nsequence_length = Symbol('sequence_length')\npath_conjunction = ((StrictLessThan(start, 0)) | (StrictGreaterThan(start, sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 938,
          "throwingLine": 940,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.matchesAllOf(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 950,
          "throwingLine": 951,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.removeFrom(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 961,
          "throwingLine": 962,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.trimFrom(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 988,
          "throwingLine": 989,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.and(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 999,
          "throwingLine": 1000,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.or(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1004,
          "throwingLine": 1005,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.indexIn(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1030,
          "throwingLine": 1031,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.indexIn(java.lang.CharSequence, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(start, length, \"index\"))",
          "pathCojunction": "(start < 0 || start > length)",
          "symbolicPathConjunction": "(checkPositionIndex(start, length))",
          "backwardsPathConjunction": "(start < 0 || start > sequence.length())",
          "simplifiedPathConjunction": "sequence.length() < start || start < 0",
          "z3Inputs": "[start0 = 1, sequence0 = \"\", length0 = 0]\n[start0 = -1, length0 = 1, sequence0 = \"A\"]\n[start0 = -2, length0 = 1, sequence0 = \"B\"]\n[start0 = -2, length0 = 0, sequence0 = \"\"]\n[start0 = -3, length0 = 0, sequence0 = \"\"]\n[start0 = -4, length0 = 0, sequence0 = \"\"]\n[start0 = -5, length0 = 0, sequence0 = \"\"]\n[start0 = -6, length0 = 0, sequence0 = \"\"]\n[start0 = -7, length0 = 0, sequence0 = \"\"]\n[start0 = -8, length0 = 0, sequence0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nstart0 = Int('start0')\nlength0 = Int('length0')\n\nconstraints = [\n  length0 == Length(sequence0),\n  Or(start0 < 0, start0 > length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nstart = Symbol('start', integer=True)\nsequence_length = Symbol('sequence_length')\npath_conjunction = ((StrictLessThan(start, 0)) | (StrictGreaterThan(start, sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1036,
          "throwingLine": 1038,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.lastIndexIn(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1043,
          "throwingLine": 1044,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.matchesNoneOf(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1054,
          "throwingLine": 1055,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(replacement == null)",
          "symbolicPathConjunction": "(checkNotNull(replacement))",
          "backwardsPathConjunction": "(replacement == null)",
          "simplifiedPathConjunction": "null == replacement",
          "z3Inputs": "[replacement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nreplacement0 = String('replacement0')\nreplacement0_isNull = Bool('replacement0_isNull')\n\nconstraints = [\n  replacement0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreplacement = Symbol('replacement')\nnull = Symbol('null')\npath_conjunction = (Eq(replacement, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1070,
          "throwingLine": 1071,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.countIn(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1096,
          "throwingLine": 1097,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.and(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1102,
          "throwingLine": 1103,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.or(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1108,
          "throwingLine": 1109,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.copyOf(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(multiset == null)) && (elements == null)",
          "symbolicPathConjunction": "(LinkedHashMultiset.create()) && (Iterators.addAll(multiset, elements))",
          "backwardsPathConjunction": "(!(multiset == null)) && (elements == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultiset0_isNull = Bool('multiset0_isNull')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  multiset0 == new LinkedHashMultiset<E>(),\n  And(Not(multiset0_isNull), elements0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 193,
          "throwingLine": 195,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.copyOf(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(multiset == null)",
          "symbolicPathConjunction": "(LinkedHashMultiset.create()) && (Iterators.addAll(multiset, elements))",
          "backwardsPathConjunction": "(multiset == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultiset0_isNull = Bool('multiset0_isNull')\n\nconstraints = [\n  multiset0 == new LinkedHashMultiset<E>(),\n  multiset0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 193,
          "throwingLine": 195,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.add(E, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 239,
          "throwingLine": 240,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.remove(java.lang.Object, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 251,
          "throwingLine": 252,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.setCount(E, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 263,
          "throwingLine": 264,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.setCount(E, int, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 275,
          "throwingLine": 276,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ForwardingTestCase.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingTestCase.Anonymous-7aae5997-db54-4600-9139-bbf7b902944e.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
          "exception": "throw new IllegalStateException(\"Unexpected \" + method + \" invoked on \" + proxy);",
          "pathCojunction": "(!(\"test\".equals(method.getName()) || \"accept\".equals(method.getName())))",
          "symbolicPathConjunction": "(!(\"test\".equals(method.getName()) || \"accept\".equals(method.getName())))",
          "backwardsPathConjunction": "(!(\"test\".equals(method.getName()) || \"accept\".equals(method.getName())))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(Or(StringVal('test') == method0.getName(), StringVal('accept') == method0.getName()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmethod = Symbol('method')\n\"test\"_equals = Symbol('\"test\"_equals')\nmethod_getName = Symbol('method_getName')\n\"accept\"_equals = Symbol('\"accept\"_equals')\npath_conjunction = (~((\"test\"_equals | \"accept\"_equals)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 125,
          "throwingLine": 133,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/EmptyContiguousSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.EmptyContiguousSet.first()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 38,
          "throwingLine": 39,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.EmptyContiguousSet.last()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 43,
          "throwingLine": 44,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.EmptyContiguousSet.range()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 58,
          "throwingLine": 59,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.EmptyContiguousSet.range(com.google.common.collect.BoundType, com.google.common.collect.BoundType)",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 63,
          "throwingLine": 64,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableSortedMapFauxverideShim.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMapFauxverideShim.builder()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 37,
          "throwingLine": 38,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 51,
          "throwingLine": 52,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 65,
          "throwingLine": 66,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 80,
          "throwingLine": 81,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V, K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 95,
          "throwingLine": 96,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V, K, V, K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 111,
          "throwingLine": 112,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableListMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 338,
          "throwingLine": 339,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 350,
          "throwingLine": 351,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedHashMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.create(int, int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedValuesPerKey)",
          "pathCojunction": "(expectedKeys < 3) && (!(expectedKeys < 0)) && (expectedValuesPerKey < 3) && (expectedValuesPerKey < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\"))) && ((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedKeys < 3) && (!(expectedKeys < 0)) && (expectedValuesPerKey < 3) && (expectedValuesPerKey < 0)",
          "simplifiedPathConjunction": "expectedKeys >= 0 && expectedKeys < 3 && expectedValuesPerKey < 0",
          "z3Inputs": "[expectedValuesPerKey0 = -1, expectedKeys0 = 0]\n[expectedValuesPerKey0 = -1, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -2, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -3, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -3, expectedKeys0 = 2]\n[expectedValuesPerKey0 = -4, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -5, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -6, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -7, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -8, expectedKeys0 = 1]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedKeys0 = Int('expectedKeys0')\nexpectedValuesPerKey0 = Int('expectedValuesPerKey0')\n\nconstraints = [\n  And(And(And(expectedKeys0 < 3, Not(expectedKeys0 < 0)), expectedValuesPerKey0 < 3), expectedValuesPerKey0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedKeys = Symbol('expectedKeys', integer=True)\nexpectedValuesPerKey = Symbol('expectedValuesPerKey', integer=True)\npath_conjunction = ((((StrictLessThan(expectedKeys, 3)) & (~((StrictLessThan(expectedKeys, 0))))) & (StrictLessThan(expectedValuesPerKey, 3))) & (StrictLessThan(expectedValuesPerKey, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 98,
          "throwingLine": 99,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.create(int, int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedKeys)",
          "pathCojunction": "(expectedKeys < 3) && (expectedKeys < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedKeys < 3) && (expectedKeys < 0)",
          "simplifiedPathConjunction": "expectedKeys < 0",
          "z3Inputs": "[expectedKeys0 = -1]\n[expectedKeys0 = -2]\n[expectedKeys0 = -3]\n[expectedKeys0 = -4]\n[expectedKeys0 = -5]\n[expectedKeys0 = -6]\n[expectedKeys0 = -7]\n[expectedKeys0 = -8]\n[expectedKeys0 = -9]\n[expectedKeys0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedKeys0 = Int('expectedKeys0')\nexpectedValuesPerKey0 = Int('expectedValuesPerKey0')\n\nconstraints = [\n  And(expectedKeys0 < 3, expectedKeys0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedKeys = Symbol('expectedKeys', integer=True)\npath_conjunction = ((StrictLessThan(expectedKeys, 3)) & (StrictLessThan(expectedKeys, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 98,
          "throwingLine": 99,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + multimap.keySet().size())",
          "pathCojunction": "(multimap.keySet().size() < 3) && (multimap.keySet().size() < 0)",
          "symbolicPathConjunction": "(create(multimap.keySet().size(), DEFAULT_VALUE_SET_CAPACITY))",
          "backwardsPathConjunction": "(multimap.keySet().size() < 3) && (multimap.keySet().size() < 0)",
          "simplifiedPathConjunction": "multimap.keySet().size() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDEFAULT_VALUE_SET_CAPACITY0 = Int('DEFAULT_VALUE_SET_CAPACITY0')\n\nconstraints = [\n  DEFAULT_VALUE_SET_CAPACITY0 == 2,\n  And(multimap0.keySet().size() < 3, multimap0.keySet().size() < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nmultimap_keySet_size = Symbol('multimap_keySet_size')\nmultimap_keySet = Symbol('multimap_keySet')\npath_conjunction = ((StrictLessThan(multimap_keySet_size, 3)) & (StrictLessThan(multimap_keySet_size, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 113,
          "throwingLine": 114,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.ValueSet.iterator()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 357,
          "throwingLine": 358,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.ValueSet.Anonymous-563484b2-307e-472a-bca5-b0d7ef47fa1f.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 370,
          "throwingLine": 371,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.ValueSet.Anonymous-c1d4ef49-fee8-4053-9832-4de60ce77744.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(!(hasNext()))",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 376,
          "throwingLine": 377,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.ValueSet.Anonymous-f4d66904-3d76-452d-b407-3a7b124f202e.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 388,
          "throwingLine": 389,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.Anonymous-f6fb11f4-eb19-4281-8207-252809db9064.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(nextEntry != multimapHeaderEntry))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(nextEntry != multimapHeaderEntry))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(nextEntry0 != multimapHeaderEntry0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmultimapHeaderEntry = Symbol('multimapHeaderEntry')\nV> = Symbol('V>')\npath_conjunction = (~((Ne(nextEntry, multimapHeaderEntry))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 508,
          "throwingLine": 510,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractScheduledServiceTest.Anonymous-4191d9d7-ab12-4570-955c-f360b28faf63.running()",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 117,
          "throwingLine": 118,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/HashBiMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.HashBiMap.Itr.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 393,
          "throwingLine": 395,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.HashBiMap.Itr.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(modCount != expectedModCount)) && (!(next != null))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(modCount != expectedModCount)) && (!(next != null))",
          "z3Inputs": "[next0_isNull = True, expectedModCount0 = 0, modCount0 = 0]\n[expectedModCount0 = 2, modCount0 = 2, next0_isNull = True]\n[expectedModCount0 = 3, modCount0 = 3, next0_isNull = True]\n[expectedModCount0 = 4, modCount0 = 4, next0_isNull = True]\n[expectedModCount0 = 5, modCount0 = 5, next0_isNull = True]\n[expectedModCount0 = 6, modCount0 = 6, next0_isNull = True]\n[expectedModCount0 = 7, modCount0 = 7, next0_isNull = True]\n[expectedModCount0 = 8, modCount0 = 8, next0_isNull = True]\n[expectedModCount0 = 9, modCount0 = 9, next0_isNull = True]\n[expectedModCount0 = 10,\n modCount0 = 10,\n next0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\nnext0_isNull = Bool('next0_isNull')\n\nconstraints = [\n  And(Not(modCount0 != expectedModCount0), Not(Not(next0_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Ne(modCount, expectedModCount)))) & (~((Ne(next, null)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 401,
          "throwingLine": 403,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.HashBiMap.Itr.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 413,
          "throwingLine": 415,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/PredicatesTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.PredicatesTest.Anonymous-9b15ed17-1c75-4944-93c7-d4197d3f72ae.apply(java.lang.Integer)",
          "exception": "throw new AssertionFailedError(\"This predicate should never have been evaluated\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 49,
          "throwingLine": 50,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.PredicatesTest.CollectionThatThrowsNPE.contains(java.lang.Object)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(element == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(element))",
          "backwardsPathConjunction": "(element == null)",
          "simplifiedPathConjunction": "element == null",
          "z3Inputs": "[element0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  element0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nnull = Symbol('null')\npath_conjunction = (Eq(element, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 513,
          "throwingLine": 514,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.PredicatesTest.CollectionThatThrowsCCE.contains(java.lang.Object)",
          "exception": "throw new ClassCastException(\"\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 527,
          "throwingLine": 528,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Shorts.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.indexOf(short[], short[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 182,
          "throwingLine": 183,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.indexOf(short[], short[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 182,
          "throwingLine": 184,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.min(short...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 232,
          "throwingLine": 233,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.max(short...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 251,
          "throwingLine": 252,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.join(java.lang.String, short...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 362,
          "throwingLine": 363,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.ShortArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 492,
          "throwingLine": 493,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.ShortArrayAsList.set(int, java.lang.Short)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  element0 >= -32768, element0 <= 32767, # implicit\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 528,
          "throwingLine": 529,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Shorts.ShortArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 537,
          "throwingLine": 539,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/AbstractRangeSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractRangeSet.add(com.google.common.collect.Range<C>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 41,
          "throwingLine": 42,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractRangeSet.remove(com.google.common.collect.Range<C>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 46,
          "throwingLine": 47,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/SimpleAbstractMultisetTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.SimpleAbstractMultisetTest.Anonymous-150099a2-d211-455a-b1eb-3eff135128dc.add(java.lang.String, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(occurrences >= 0))",
          "symbolicPathConjunction": "(addCalls.incrementAndGet()) && (super.add(element, occurrences))",
          "backwardsPathConjunction": "(!(occurrences >= 0))",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0 = String('element0')\noccurrences0 = Int('occurrences0')\nvalue0 = Int('value0')\n\nconstraints = [\n  Not(occurrences0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = (~((GreaterThan(occurrences, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 44,
          "throwingLine": 46,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SimpleAbstractMultisetTest.NoRemoveMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(!(occurrences >= 0))) && (!(frequency == null)) && (!(occurrences == 0)) && (!(occurrences <= Integer.MAX_VALUE - frequency))",
          "symbolicPathConjunction": "(checkArgument(occurrences >= 0)) && (!(frequency == null)) && (!(occurrences == 0)) && (!(checkArgument(occurrences <= Integer.MAX_VALUE - frequency)))",
          "backwardsPathConjunction": "(!(!(occurrences >= 0))) && (!(backingMap.get(element) == null)) && (!(occurrences == 0)) && (!(occurrences <= Integer.MAX_VALUE - backingMap.get(element)))",
          "simplifiedPathConjunction": "occurrences > 0 && Integer.MAX_VALUE < Maps.newHashMap().get(element) + occurrences && Maps.newHashMap().get(element) != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\nfrequency0 = Int('frequency0')\nfrequency0_isNull = Bool('frequency0_isNull')\n\nconstraints = [\n  V > backingMap0 == Maps.newHashMap(),\n  frequency0 == backingMap0.get(element0),\n  And(And(And(Not(Not(occurrences0 >= 0)), Not(frequency0_isNull)), Not(occurrences0 == 0)), Not(occurrences0 <= 2147483647 - frequency0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\noccurrences = Symbol('occurrences', integer=True)\nMaps_newHashMap_get = Symbol('Maps_newHashMap_get')\nMaps_newHashMap = Symbol('Maps_newHashMap')\nnull = Symbol('null')\nInteger_MAX_VALUE = Symbol('Integer_MAX_VALUE', integer=True)\npath_conjunction = ((((~((~((GreaterThan(occurrences, 0)))))) & (~((Eq(Maps_newHashMap_get, null))))) & (~((Eq(occurrences, 0))))) & (~((LessThan(occurrences, (Integer_MAX_VALUE - Maps_newHashMap_get))))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 69,
          "throwingLine": 78,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.SimpleAbstractMultisetTest.NoRemoveMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(occurrences >= 0))",
          "symbolicPathConjunction": "(!(checkArgument(occurrences >= 0)))",
          "backwardsPathConjunction": "(!(occurrences >= 0))",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  Not(occurrences0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = (~((GreaterThan(occurrences, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 69,
          "throwingLine": 70,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SimpleAbstractMultisetTest.NoRemoveMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(!(occurrences >= 0))) && (frequency == null) && (!(occurrences == 0)) && (!(occurrences <= Integer.MAX_VALUE - frequency))",
          "symbolicPathConjunction": "(!(checkArgument(occurrences >= 0))) && (frequency == null) && (!(occurrences == 0)) && (!(checkArgument(occurrences <= Integer.MAX_VALUE - frequency)))",
          "backwardsPathConjunction": "(!(!(occurrences >= 0))) && (0 == null) && (!(occurrences == 0)) && (!(occurrences <= Integer.MAX_VALUE - 0))",
          "simplifiedPathConjunction": "null == 0 && occurrences > 0 && Integer.MAX_VALUE < occurrences",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\nfrequency0 = Int('frequency0')\nfrequency1 = Int('frequency1')\nfrequency1_isNull = Bool('frequency1_isNull')\n\nconstraints = [\n  V > backingMap0 == Maps.newHashMap(),\n  frequency0 == backingMap0.get(element0),\n  frequency1 == 0,\n  And(And(And(Not(Not(occurrences0 >= 0)), frequency1_isNull), Not(occurrences0 == 0)), Not(occurrences0 <= 2147483647 - frequency1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\nnull = Symbol('null')\nInteger_MAX_VALUE = Symbol('Integer_MAX_VALUE', integer=True)\npath_conjunction = ((((~((~((GreaterThan(occurrences, 0)))))) & (Eq(0, null))) & (~((Eq(occurrences, 0))))) & (~((LessThan(occurrences, (Integer_MAX_VALUE - 0))))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 69,
          "throwingLine": 78,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableRangeSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeSet.of(com.google.common.collect.Range<C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(range == null)",
          "symbolicPathConjunction": "(checkNotNull(range))",
          "backwardsPathConjunction": "(range == null)",
          "simplifiedPathConjunction": "null == range",
          "z3Inputs": "[range0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrange0_isNull = Bool('range0_isNull')\n\nconstraints = [\n  range0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrange = Symbol('range')\nnull = Symbol('null')\npath_conjunction = (Eq(range, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 73,
          "throwingLine": 74,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeSet.span()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(ranges.isEmpty())",
          "symbolicPathConjunction": "(ranges.isEmpty())",
          "backwardsPathConjunction": "(ranges.isEmpty())",
          "simplifiedPathConjunction": "ranges.isEmpty()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  ranges0.isEmpty()\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nranges = Symbol('ranges')\nranges_isEmpty = Symbol('ranges_isEmpty')\npath_conjunction = ranges_isEmpty\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 146,
          "throwingLine": 148,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeSet.add(com.google.common.collect.Range<C>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 159,
          "throwingLine": 160,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeSet.addAll(com.google.common.collect.RangeSet<C>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 164,
          "throwingLine": 165,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeSet.remove(com.google.common.collect.Range<C>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeSet.removeAll(com.google.common.collect.RangeSet<C>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 174,
          "throwingLine": 175,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeSet.ComplementRanges.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size, \"index\"))",
          "pathCojunction": "(index < 0 || index >= size)",
          "symbolicPathConjunction": "(checkElementIndex(index, size))",
          "backwardsPathConjunction": "(index < 0 || index >= size)",
          "simplifiedPathConjunction": "index >= size || index < 0",
          "z3Inputs": "[index0 = -1, size0 = 0]\n[size0 = -1, index0 = -1]\n[size0 = -2, index0 = -2]\n[index0 = -3]\n[index0 = -4]\n[size0 = -3, index0 = -5]\n[size0 = -4, index0 = -6]\n[index0 = -7]\n[size0 = -5, index0 = -8]\n[size0 = -6, index0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nsize0 = Int('size0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nsize = Symbol('size', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 226,
          "throwingLine": 227,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeSet.Anonymous-d70e6666-173a-4217-a12e-c99a1f4570a6.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, length, \"index\"))",
          "pathCojunction": "(index < 0 || index >= length)",
          "symbolicPathConjunction": "(checkElementIndex(index, length))",
          "backwardsPathConjunction": "(index < 0 || index >= length)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 315,
          "throwingLine": 316,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/Futures.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.base.Function<? super java.lang.Exception, X>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(future == null)",
          "symbolicPathConjunction": "(checkNotNull(future))",
          "backwardsPathConjunction": "(future == null)",
          "simplifiedPathConjunction": "future == null",
          "z3Inputs": "[future0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfuture0_isNull = Bool('future0_isNull')\n\nconstraints = [\n  future0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfuture = Symbol('future')\nnull = Symbol('null')\npath_conjunction = (Eq(future, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 138,
          "throwingLine": 139,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.ImmediateFuture.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unit == null)",
          "symbolicPathConjunction": "(checkNotNull(unit))",
          "backwardsPathConjunction": "(unit == null)",
          "simplifiedPathConjunction": "null == unit",
          "z3Inputs": "[timeout0 = -9223372036854775808, unit0_isNull = True]\n[unit0_isNull = True, timeout0 = 0]\n[unit0_isNull = True, timeout0 = -1]\n[unit0_isNull = True, timeout0 = -2]\n[unit0_isNull = True, timeout0 = -3]\n[unit0_isNull = True, timeout0 = -4]\n[unit0_isNull = True, timeout0 = -5]\n[unit0_isNull = True, timeout0 = -6]\n[unit0_isNull = True, timeout0 = -7]\n[unit0_isNull = True, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\nunit0_isNull = Bool('unit0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  unit0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunit = Symbol('unit')\nnull = Symbol('null')\npath_conjunction = (Eq(unit, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 171,
          "throwingLine": 172,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.ImmediateSuccessfulCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unit == null)",
          "symbolicPathConjunction": "(checkNotNull(unit))",
          "backwardsPathConjunction": "(unit == null)",
          "simplifiedPathConjunction": "null == unit",
          "z3Inputs": "[timeout0 = -9223372036854775808, unit0_isNull = True]\n[unit0_isNull = True, timeout0 = 0]\n[unit0_isNull = True, timeout0 = -1]\n[unit0_isNull = True, timeout0 = -2]\n[unit0_isNull = True, timeout0 = -3]\n[unit0_isNull = True, timeout0 = -4]\n[unit0_isNull = True, timeout0 = -5]\n[unit0_isNull = True, timeout0 = -6]\n[unit0_isNull = True, timeout0 = -7]\n[unit0_isNull = True, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\nunit0_isNull = Bool('unit0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  unit0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunit = Symbol('unit')\nnull = Symbol('null')\npath_conjunction = (Eq(unit, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 224,
          "throwingLine": 225,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.ImmediateFailedFuture.get()",
          "exception": "throw new ExecutionException(thrown);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 239,
          "throwingLine": 240,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.ImmediateCancelledFuture.get()",
          "exception": "throw AbstractFuture.cancellationExceptionWithCause(\"Task was cancelled.\", thrown);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 259,
          "throwingLine": 260,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.ImmediateFailedCheckedFuture.get()",
          "exception": "throw new ExecutionException(thrown);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 276,
          "throwingLine": 277,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.ImmediateFailedCheckedFuture.checkedGet()",
          "exception": "throw thrown;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 281,
          "throwingLine": 282,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.ImmediateFailedCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)",
          "exception": "throw thrown;",
          "pathCojunction": "(!(unit == null))",
          "symbolicPathConjunction": "(checkNotNull(unit))",
          "backwardsPathConjunction": "(!(unit == null))",
          "simplifiedPathConjunction": "null != unit",
          "z3Inputs": "[timeout0 = -9223372036854775808, unit0_isNull = False]\n[unit0_isNull = False, timeout0 = 0]\n[unit0_isNull = False, timeout0 = -1]\n[unit0_isNull = False, timeout0 = -2]\n[unit0_isNull = False, timeout0 = -3]\n[unit0_isNull = False, timeout0 = -4]\n[unit0_isNull = False, timeout0 = -5]\n[unit0_isNull = False, timeout0 = -6]\n[unit0_isNull = False, timeout0 = -7]\n[unit0_isNull = False, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\nunit0_isNull = Bool('unit0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  Not(unit0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunit = Symbol('unit')\nnull = Symbol('null')\npath_conjunction = (~((Eq(unit, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 286,
          "throwingLine": 288,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.ImmediateFailedCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unit == null)",
          "symbolicPathConjunction": "(checkNotNull(unit))",
          "backwardsPathConjunction": "(unit == null)",
          "simplifiedPathConjunction": "null == unit",
          "z3Inputs": "[timeout0 = -9223372036854775808, unit0_isNull = True]\n[unit0_isNull = True, timeout0 = 0]\n[unit0_isNull = True, timeout0 = -1]\n[unit0_isNull = True, timeout0 = -2]\n[unit0_isNull = True, timeout0 = -3]\n[unit0_isNull = True, timeout0 = -4]\n[unit0_isNull = True, timeout0 = -5]\n[unit0_isNull = True, timeout0 = -6]\n[unit0_isNull = True, timeout0 = -7]\n[unit0_isNull = True, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\nunit0_isNull = Bool('unit0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  unit0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunit = Symbol('unit')\nnull = Symbol('null')\npath_conjunction = (Eq(unit, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 286,
          "throwingLine": 287,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.immediateFailedFuture(java.lang.Throwable)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(throwable == null)",
          "symbolicPathConjunction": "(checkNotNull(throwable))",
          "backwardsPathConjunction": "(throwable == null)",
          "simplifiedPathConjunction": "null == throwable",
          "z3Inputs": "[throwable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  throwable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\nnull = Symbol('null')\npath_conjunction = (Eq(throwable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 335,
          "throwingLine": 336,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.immediateFailedCheckedFuture(X)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(exception == null)",
          "symbolicPathConjunction": "(checkNotNull(exception))",
          "backwardsPathConjunction": "(exception == null)",
          "simplifiedPathConjunction": "exception == null",
          "z3Inputs": "[exception0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexception0_isNull = Bool('exception0_isNull')\n\nconstraints = [\n  exception0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexception = Symbol('exception')\nnull = Symbol('null')\npath_conjunction = (Eq(exception, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 365,
          "throwingLine": 366,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(executor == null)",
          "symbolicPathConjunction": "(transformAsync(input, function, executor))",
          "backwardsPathConjunction": "(executor == null)",
          "simplifiedPathConjunction": "executor == null",
          "z3Inputs": "[executor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  executor0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = (Eq(executor, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1065,
          "throwingLine": 1066,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.transformAsync(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(executor == null)",
          "symbolicPathConjunction": "(checkNotNull(executor))",
          "backwardsPathConjunction": "(executor == null)",
          "simplifiedPathConjunction": "executor == null",
          "z3Inputs": "[executor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  executor0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = (Eq(executor, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1150,
          "throwingLine": 1151,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1231,
          "throwingLine": 1232,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1277,
          "throwingLine": 1278,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.lazyTransform(java.util.concurrent.Future<I>, com.google.common.base.Function<? super I, ? extends O>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(input == null)) && (function == null)",
          "symbolicPathConjunction": "(checkNotNull(input)) && (checkNotNull(function))",
          "backwardsPathConjunction": "(!(input == null)) && (function == null)",
          "z3Inputs": "[input0_isNull = False, function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0_isNull = Bool('input0_isNull')\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  And(Not(input0_isNull), function0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninput = Symbol('input')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(input, null)))) & (Eq(function, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1310,
          "throwingLine": 1312,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.lazyTransform(java.util.concurrent.Future<I>, com.google.common.base.Function<? super I, ? extends O>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(input == null)",
          "symbolicPathConjunction": "(checkNotNull(input))",
          "backwardsPathConjunction": "(input == null)",
          "simplifiedPathConjunction": "input == null",
          "z3Inputs": "[input0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0_isNull = Bool('input0_isNull')\n\nconstraints = [\n  input0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninput = Symbol('input')\nnull = Symbol('null')\npath_conjunction = (Eq(input, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1310,
          "throwingLine": 1311,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.allAsList(com.google.common.util.concurrent.ListenableFuture<? extends V>...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(futures == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(futures))",
          "backwardsPathConjunction": "(futures == null)",
          "z3Inputs": "[futures0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfutures0_isNull = Bool('futures0_isNull')\n\nconstraints = [\n  futures0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(futures, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1526,
          "throwingLine": 1527,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.allAsList(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(futures == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(futures))",
          "backwardsPathConjunction": "(futures == null)",
          "z3Inputs": "[futures0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfutures0_isNull = Bool('futures0_isNull')\n\nconstraints = [\n  futures0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(futures, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1549,
          "throwingLine": 1550,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.successfulAsList(com.google.common.util.concurrent.ListenableFuture<? extends V>...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(futures == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(futures))",
          "backwardsPathConjunction": "(futures == null)",
          "z3Inputs": "[futures0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfutures0_isNull = Bool('futures0_isNull')\n\nconstraints = [\n  futures0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(futures, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1604,
          "throwingLine": 1605,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.successfulAsList(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(futures == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(futures))",
          "backwardsPathConjunction": "(futures == null)",
          "z3Inputs": "[futures0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfutures0_isNull = Bool('futures0_isNull')\n\nconstraints = [\n  futures0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(futures, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1626,
          "throwingLine": 1627,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.addCallback(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.util.concurrent.FutureCallback<? super V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(callback == null)",
          "symbolicPathConjunction": "(addCallback(future, callback, directExecutor()))",
          "backwardsPathConjunction": "(callback == null)",
          "z3Inputs": "[callback0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(callback, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1712,
          "throwingLine": 1713,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.addCallback(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.util.concurrent.FutureCallback<? super V>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(callback == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(callback))",
          "backwardsPathConjunction": "(callback == null)",
          "z3Inputs": "[callback0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(callback, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1753,
          "throwingLine": 1754,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/net/InternetDomainName.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.net.InternetDomainName.from(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(domain == null)",
          "symbolicPathConjunction": "(checkNotNull(domain))",
          "backwardsPathConjunction": "(domain == null)",
          "simplifiedPathConjunction": "domain == null",
          "z3Inputs": "[domain0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndomain0 = String('domain0')\ndomain0_isNull = Bool('domain0_isNull')\n\nconstraints = [\n  domain0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndomain = Symbol('domain')\nnull = Symbol('null')\npath_conjunction = (Eq(domain, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 212,
          "throwingLine": 213,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/UnsignedInteger.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInteger.valueOf(java.math.BigInteger)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(value == null)",
          "symbolicPathConjunction": "(checkNotNull(value))",
          "backwardsPathConjunction": "(value == null)",
          "simplifiedPathConjunction": "null == value",
          "z3Inputs": "[value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  value0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (Eq(value, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 92,
          "throwingLine": 93,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInteger.compareTo(com.google.common.primitives.UnsignedInteger)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 226,
          "throwingLine": 227,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/IterablesTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.IterablesTest.Anonymous-492eb776-17a4-4d20-aca5-bf19c612ff66.iterator()",
          "exception": "throw new AssertionFailedError(\"Don't iterate me!\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 87,
          "throwingLine": 88,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.IterablesTest.DiesOnIteratorArrayList.iterator()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 871,
          "throwingLine": 872,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.IterablesTest.DiesOnIteratorTreeSet.iterator()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 894,
          "throwingLine": 895,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.IterablesTest.UnIterableQueue.iterator()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1205,
          "throwingLine": 1206,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableCollection.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.add(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 49,
          "throwingLine": 50,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.remove(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 53,
          "throwingLine": 54,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 57,
          "throwingLine": 58,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.removeAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 61,
          "throwingLine": 62,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.retainAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 65,
          "throwingLine": 66,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 69,
          "throwingLine": 70,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.Builder.addAll(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 123,
          "throwingLine": 124,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Splitter.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Splitter.on(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separatorMatcher == null)",
          "symbolicPathConjunction": "(checkNotNull(separatorMatcher))",
          "backwardsPathConjunction": "(separatorMatcher == null)",
          "simplifiedPathConjunction": "null == separatorMatcher",
          "z3Inputs": "[separatorMatcher0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparatorMatcher0_isNull = Bool('separatorMatcher0_isNull')\n\nconstraints = [\n  separatorMatcher0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparatorMatcher = Symbol('separatorMatcher')\nnull = Symbol('null')\npath_conjunction = (Eq(separatorMatcher, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 144,
          "throwingLine": 145,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.on(java.lang.String)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"The separator may not be the empty string.\"))",
          "pathCojunction": "(!(separator.length() != 0))",
          "symbolicPathConjunction": "(checkArgument(separator.length() != 0, \"The separator may not be the empty string.\"))",
          "backwardsPathConjunction": "(!(separator.length() != 0))",
          "simplifiedPathConjunction": "separator.length() == 0",
          "z3Inputs": "[separator0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\n\nconstraints = [\n  Not(Length(separator0) != 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nseparator_length = Symbol('separator_length')\npath_conjunction = (~((Ne(separator_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 175,
          "throwingLine": 176,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.on(java.util.regex.Pattern)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separatorPattern == null)",
          "symbolicPathConjunction": "(checkNotNull(separatorPattern))",
          "backwardsPathConjunction": "(separatorPattern == null)",
          "simplifiedPathConjunction": "null == separatorPattern",
          "z3Inputs": "[separatorPattern0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparatorPattern0_isNull = Bool('separatorPattern0_isNull')\n\nconstraints = [\n  separatorPattern0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparatorPattern = Symbol('separatorPattern')\nnull = Symbol('null')\npath_conjunction = (Eq(separatorPattern, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 224,
          "throwingLine": 225,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.fixedLength(int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"The length may not be less than 1\"))",
          "pathCojunction": "(!(length > 0))",
          "symbolicPathConjunction": "(checkArgument(length > 0, \"The length may not be less than 1\"))",
          "backwardsPathConjunction": "(!(length > 0))",
          "simplifiedPathConjunction": "length <= 0",
          "z3Inputs": "[length0 = 0]\n[length0 = -1]\n[length0 = -2]\n[length0 = -3]\n[length0 = -4]\n[length0 = -5]\n[length0 = -6]\n[length0 = -7]\n[length0 = -8]\n[length0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlength0 = Int('length0')\n\nconstraints = [\n  Not(length0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlength = Symbol('length', integer=True)\npath_conjunction = (~((StrictGreaterThan(length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 292,
          "throwingLine": 293,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.trimResults()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(CharMatcher.WHITESPACE == null)",
          "symbolicPathConjunction": "(trimResults(CharMatcher.WHITESPACE))",
          "backwardsPathConjunction": "(CharMatcher.WHITESPACE == null)",
          "z3Inputs": "[CharMatcher_WHITESPACE0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nCharMatcher_WHITESPACE0_isNull = Bool('CharMatcher_WHITESPACE0_isNull')\n\nconstraints = [\n  CharMatcher_WHITESPACE0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 375,
          "throwingLine": 376,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.trimResults(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(trimmer == null)",
          "symbolicPathConjunction": "(checkNotNull(trimmer))",
          "backwardsPathConjunction": "(trimmer == null)",
          "simplifiedPathConjunction": "null == trimmer",
          "z3Inputs": "[trimmer0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntrimmer0_isNull = Bool('trimmer0_isNull')\n\nconstraints = [\n  trimmer0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntrimmer = Symbol('trimmer')\nnull = Symbol('null')\npath_conjunction = (Eq(trimmer, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 392,
          "throwingLine": 393,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.split(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 406,
          "throwingLine": 407,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.splitToList(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 440,
          "throwingLine": 441,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/reflect/ClassPath.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.reflect.ClassPath.ResourceInfo.url()",
          "exception": "throw new NoSuchElementException(resourceName);",
          "pathCojunction": "(url == null)",
          "symbolicPathConjunction": "(url == null)",
          "backwardsPathConjunction": "(loader.getResource(resourceName) == null)",
          "simplifiedPathConjunction": "loader.getResource(resourceName) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nurl0_isNull = Bool('url0_isNull')\n\nconstraints = [\n  url0 == loader0.getResource(resourceName0),\n  url0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nloader = Symbol('loader')\nresourceName = Symbol('resourceName')\nloader_getResource = Symbol('loader_getResource')\nnull = Symbol('null')\npath_conjunction = (Eq(loader_getResource, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 177,
          "throwingLine": 180,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/UnsignedInteger.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInteger.valueOf(java.math.BigInteger)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(value == null)",
          "symbolicPathConjunction": "(checkNotNull(value))",
          "backwardsPathConjunction": "(value == null)",
          "simplifiedPathConjunction": "null == value",
          "z3Inputs": "[value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  value0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (Eq(value, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 91,
          "throwingLine": 92,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInteger.compareTo(com.google.common.primitives.UnsignedInteger)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 213,
          "throwingLine": 214,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/CharSequenceReader.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.CharSequenceReader.read(java.nio.CharBuffer)",
          "exception": "throw new IOException(\"reader closed\");",
          "pathCojunction": "(!(target == null)) && (seq == null)",
          "symbolicPathConjunction": "(checkNotNull(target)) && (seq == null)",
          "backwardsPathConjunction": "(!(target == null)) && (seq == null)",
          "simplifiedPathConjunction": "null == seq && null != target",
          "z3Inputs": "[seq0_isNull = True, target0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntarget0_isNull = Bool('target0_isNull')\nseq0_isNull = Bool('seq0_isNull')\n\nconstraints = [\n  And(Not(target0_isNull), seq0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntarget = Symbol('target')\nseq = Symbol('seq')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(target, null)))) & (Eq(seq, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 62,
          "throwingLine": 64,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CharSequenceReader.read(java.nio.CharBuffer)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(target == null)",
          "symbolicPathConjunction": "(checkNotNull(target))",
          "backwardsPathConjunction": "(target == null)",
          "simplifiedPathConjunction": "null == target",
          "z3Inputs": "[target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  target0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = (Eq(target, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 62,
          "throwingLine": 63,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharSequenceReader.read()",
          "exception": "throw new IOException(\"reader closed\");",
          "pathCojunction": "(seq == null)",
          "symbolicPathConjunction": "(seq == null)",
          "backwardsPathConjunction": "(seq == null)",
          "simplifiedPathConjunction": "null == seq",
          "z3Inputs": "[seq0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseq0_isNull = Bool('seq0_isNull')\n\nconstraints = [\n  seq0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseq = Symbol('seq')\nnull = Symbol('null')\npath_conjunction = (Eq(seq, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 76,
          "throwingLine": 77,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CharSequenceReader.read(char[], int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(off, off + len, cbuf.length))",
          "pathCojunction": "(off < 0 || off + len < off || off + len > cbuf.length)",
          "symbolicPathConjunction": "(checkPositionIndexes(off, off + len, cbuf.length))",
          "backwardsPathConjunction": "(off < 0 || off + len < off || off + len > cbuf.length)",
          "simplifiedPathConjunction": "cbuf.length < len + off || len < 0 || off < 0",
          "z3Inputs": "[off0 = 2, len0 = -1, cbuf0_length = 0]\n[len0 = -2, cbuf0_length = 1]\n[off0 = -1, cbuf0_length = 0]\n[off0 = -2, len0 = 3, cbuf0_length = 0]\n[off0 = -3, len0 = 2, cbuf0_length = 0]\n[off0 = -3, len0 = 1, cbuf0_length = 0]\n[off0 = -3, len0 = 0, cbuf0_length = 0]\n[off0 = -4, len0 = 1, cbuf0_length = 0]\n[off0 = -5, len0 = 1, cbuf0_length = 0]\n[off0 = -6, len0 = 1, cbuf0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\ncbuf0_length = Int('cbuf0_length')\n\nconstraints = [\n  cbuf0_length >= 0, # implicit\n  Or(Or(off0 < 0, off0 + len0 < off0), off0 + len0 > cbuf0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncbuf = Symbol('cbuf')\noff = Symbol('off', integer=True)\nlen = Symbol('len', integer=True)\ncbuf_length = Symbol('cbuf_length', integer=True)\npath_conjunction = (((StrictLessThan(off, 0)) | (StrictLessThan((off + len), off))) | (StrictGreaterThan((off + len), cbuf_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharSequenceReader.read(char[], int, int)",
          "exception": "throw new IOException(\"reader closed\");",
          "pathCojunction": "(!(off < 0 || off + len < off || off + len > cbuf.length)) && (seq == null)",
          "symbolicPathConjunction": "(checkPositionIndexes(off, off + len, cbuf.length)) && (seq == null)",
          "backwardsPathConjunction": "(!(off < 0 || off + len < off || off + len > cbuf.length)) && (seq == null)",
          "simplifiedPathConjunction": "null == seq && cbuf.length >= len + off && len >= 0 && off >= 0",
          "z3Inputs": "[off0 = 0, len0 = 0, cbuf0_length = 0, seq0_isNull = True]\n[off0 = 1, seq0_isNull = True, len0 = 1, cbuf0_length = 2]\n[off0 = 1, seq0_isNull = True, len0 = 0, cbuf0_length = 1]\n[off0 = 2, seq0_isNull = True, len0 = 0, cbuf0_length = 2]\n[off0 = 3, seq0_isNull = True, len0 = 0, cbuf0_length = 3]\n[off0 = 1, seq0_isNull = True, len0 = 0, cbuf0_length = 4]\n[off0 = 1, seq0_isNull = True, len0 = 0, cbuf0_length = 5]\n[off0 = 1, seq0_isNull = True, len0 = 0, cbuf0_length = 6]\n[off0 = 1, seq0_isNull = True, len0 = 0, cbuf0_length = 7]\n[off0 = 1, seq0_isNull = True, len0 = 0, cbuf0_length = 8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nseq0_isNull = Bool('seq0_isNull')\ncbuf0_length = Int('cbuf0_length')\n\nconstraints = [\n  cbuf0_length >= 0, # implicit\n  And(Not(Or(Or(off0 < 0, off0 + len0 < off0), off0 + len0 > cbuf0_length)), seq0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncbuf = Symbol('cbuf')\noff = Symbol('off', integer=True)\nlen = Symbol('len', integer=True)\nseq = Symbol('seq')\ncbuf_length = Symbol('cbuf_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((((StrictLessThan(off, 0)) | (StrictLessThan((off + len), off))) | (StrictGreaterThan((off + len), cbuf_length))))) & (Eq(seq, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 84,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CharSequenceReader.skip(long)",
          "exception": "throw new IOException(\"reader closed\");",
          "pathCojunction": "(seq == null)",
          "symbolicPathConjunction": "(seq == null)",
          "backwardsPathConjunction": "(seq == null)",
          "simplifiedPathConjunction": "null == seq",
          "z3Inputs": "[n0 = -9223372036854775808, seq0_isNull = True]\n[seq0_isNull = True, n0 = 0]\n[seq0_isNull = True, n0 = -1]\n[seq0_isNull = True, n0 = -2]\n[seq0_isNull = True, n0 = -3]\n[seq0_isNull = True, n0 = -4]\n[seq0_isNull = True, n0 = -5]\n[seq0_isNull = True, n0 = -6]\n[seq0_isNull = True, n0 = -7]\n[seq0_isNull = True, n0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\nseq0_isNull = Bool('seq0_isNull')\n\nconstraints = [\n  n0 >= -9223372036854775808, n0 <= 9223372036854775807, # implicit\n  seq0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseq = Symbol('seq')\nnull = Symbol('null')\npath_conjunction = (Eq(seq, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 96,
          "throwingLine": 98,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CharSequenceReader.ready()",
          "exception": "throw new IOException(\"reader closed\");",
          "pathCojunction": "(seq == null)",
          "symbolicPathConjunction": "(seq == null)",
          "backwardsPathConjunction": "(seq == null)",
          "simplifiedPathConjunction": "null == seq",
          "z3Inputs": "[seq0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseq0_isNull = Bool('seq0_isNull')\n\nconstraints = [\n  seq0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseq = Symbol('seq')\nnull = Symbol('null')\npath_conjunction = (Eq(seq, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 105,
          "throwingLine": 106,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CharSequenceReader.mark(int)",
          "exception": "throw new IOException(\"reader closed\");",
          "pathCojunction": "(seq == null)",
          "symbolicPathConjunction": "(seq == null)",
          "backwardsPathConjunction": "(seq == null)",
          "simplifiedPathConjunction": "null == seq",
          "z3Inputs": "[seq0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreadAheadLimit0 = Int('readAheadLimit0')\nseq0_isNull = Bool('seq0_isNull')\n\nconstraints = [\n  seq0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseq = Symbol('seq')\nnull = Symbol('null')\npath_conjunction = (Eq(seq, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 116,
          "throwingLine": 118,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CharSequenceReader.reset()",
          "exception": "throw new IOException(\"reader closed\");",
          "pathCojunction": "(seq == null)",
          "symbolicPathConjunction": "(seq == null)",
          "backwardsPathConjunction": "(seq == null)",
          "simplifiedPathConjunction": "null == seq",
          "z3Inputs": "[seq0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseq0_isNull = Bool('seq0_isNull')\n\nconstraints = [\n  seq0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseq = Symbol('seq')\nnull = Symbol('null')\npath_conjunction = (Eq(seq, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 123,
          "throwingLine": 124,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/FuturesTransformAsyncTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTransformAsyncTest.BadFuture.get()",
          "exception": "throw new RuntimeException(\"Oops\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 183,
          "throwingLine": 184,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/Files.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.Files.newReader(java.io.File, java.nio.charset.Charset)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(file == null)",
          "symbolicPathConjunction": "(checkNotNull(file))",
          "backwardsPathConjunction": "(file == null)",
          "simplifiedPathConjunction": "file == null",
          "z3Inputs": "[file0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\n\nconstraints = [\n  file0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nnull = Symbol('null')\npath_conjunction = (Eq(file, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 83,
          "throwingLine": 84,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.newReader(java.io.File, java.nio.charset.Charset)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(file == null)) && (charset == null)",
          "symbolicPathConjunction": "(checkNotNull(file)) && (checkNotNull(charset))",
          "backwardsPathConjunction": "(!(file == null)) && (charset == null)",
          "simplifiedPathConjunction": "charset == null && file != null",
          "z3Inputs": "[file0_isNull = False, charset0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\ncharset0_isNull = Bool('charset0_isNull')\n\nconstraints = [\n  And(Not(file0_isNull), charset0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\ncharset = Symbol('charset')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(file, null)))) & (Eq(charset, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 83,
          "throwingLine": 85,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.newWriter(java.io.File, java.nio.charset.Charset)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(file == null)",
          "symbolicPathConjunction": "(checkNotNull(file))",
          "backwardsPathConjunction": "(file == null)",
          "simplifiedPathConjunction": "file == null",
          "z3Inputs": "[file0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\n\nconstraints = [\n  file0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nnull = Symbol('null')\npath_conjunction = (Eq(file, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 100,
          "throwingLine": 101,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.newWriter(java.io.File, java.nio.charset.Charset)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(file == null)) && (charset == null)",
          "symbolicPathConjunction": "(checkNotNull(file)) && (checkNotNull(charset))",
          "backwardsPathConjunction": "(!(file == null)) && (charset == null)",
          "simplifiedPathConjunction": "charset == null && file != null",
          "z3Inputs": "[file0_isNull = False, charset0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\ncharset0_isNull = Bool('charset0_isNull')\n\nconstraints = [\n  And(Not(file0_isNull), charset0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\ncharset = Symbol('charset')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(file, null)))) & (Eq(charset, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 100,
          "throwingLine": 102,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.FileByteSource.size()",
          "exception": "throw new FileNotFoundException(file.toString());",
          "pathCojunction": "(!(file.isFile()))",
          "symbolicPathConjunction": "(!file.isFile())",
          "backwardsPathConjunction": "(!(file.isFile()))",
          "simplifiedPathConjunction": "!file.isFile()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(file0.isFile())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nfile_isFile = Symbol('file_isFile')\npath_conjunction = (~(file_isFile))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 139,
          "throwingLine": 141,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.equal(java.io.File, java.io.File)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(file1 == null)",
          "symbolicPathConjunction": "(checkNotNull(file1))",
          "backwardsPathConjunction": "(file1 == null)",
          "simplifiedPathConjunction": "file1 == null",
          "z3Inputs": "[file10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile10_isNull = Bool('file10_isNull')\n\nconstraints = [\n  file10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile1 = Symbol('file1')\nnull = Symbol('null')\npath_conjunction = (Eq(file1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 384,
          "throwingLine": 385,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.equal(java.io.File, java.io.File)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(file1 == null)) && (file2 == null)",
          "symbolicPathConjunction": "(checkNotNull(file1)) && (checkNotNull(file2))",
          "backwardsPathConjunction": "(!(file1 == null)) && (file2 == null)",
          "simplifiedPathConjunction": "file2 == null && file1 != null",
          "z3Inputs": "[file10_isNull = False, file20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile10_isNull = Bool('file10_isNull')\nfile20_isNull = Bool('file20_isNull')\n\nconstraints = [\n  And(Not(file10_isNull), file20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile1 = Symbol('file1')\nfile2 = Symbol('file2')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(file1, null)))) & (Eq(file2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 384,
          "throwingLine": 386,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.createTempDir()",
          "exception": "throw new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \" + baseName + \"0 to \" + baseName + (TEMP_DIR_ATTEMPTS - 1) + ')');",
          "pathCojunction": "(counter < TEMP_DIR_ATTEMPTS) && (!(tempDir.mkdir()))",
          "symbolicPathConjunction": "(counter < TEMP_DIR_ATTEMPTS) && (!(tempDir.mkdir()))",
          "backwardsPathConjunction": "(0 < TEMP_DIR_ATTEMPTS) && (!(new File(new File(System.getProperty(\"java.io.tmpdir\")), baseName + counter).mkdir()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbaseName0 = String('baseName0')\ncounter0 = Int('counter0')\nTEMP_DIR_ATTEMPTS0 = Int('TEMP_DIR_ATTEMPTS0')\n\nconstraints = [\n  baseDir0 == new File(System.getProperty(\"java.io.tmpdir\")),\n  baseName0 == System.currentTimeMillis() + \"-\",\n  counter0 == 0,\n  TEMP_DIR_ATTEMPTS0 == 10000,\n  tempDir0 == new File(baseDir0, baseName0 + counter0),\n  And(counter0 < TEMP_DIR_ATTEMPTS0, Not(tempDir0.mkdir()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nBUG_IN_SIMPLIFICATION\nSystem_getProperty = Symbol('System_getProperty')\npath_conjunction = ((StrictLessThan(0, 10000)) & (~(new File(new File(System.getProperty(\"java.io.tmpdir\")), baseName + counter)_mkdir)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 423,
          "throwingLine": 433,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.touch(java.io.File)",
          "exception": "throw new IOException(\"Unable to update modification time of \" + file);",
          "pathCojunction": "(!(file == null)) && (!file.createNewFile() && !file.setLastModified(System.currentTimeMillis()))",
          "symbolicPathConjunction": "(!(checkNotNull(file))) && (!file.createNewFile() && !file.setLastModified(System.currentTimeMillis()))",
          "backwardsPathConjunction": "(!(file == null)) && (!file.createNewFile() && !file.setLastModified(System.currentTimeMillis()))",
          "simplifiedPathConjunction": "!file.createNewFile() && !file.setLastModified(System.currentTimeMillis()) && file != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\n\nconstraints = [\n  And(Not(file0_isNull), And(Not(file0.createNewFile()), Not(file0.setLastModified(System.currentTimeMillis()))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nfile_createNewFile = Symbol('file_createNewFile')\nfile_setLastModified = Symbol('file_setLastModified')\nSystem_currentTimeMillis = Symbol('System_currentTimeMillis')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(file, null)))) & ((~(file_createNewFile)) & (~(file_setLastModified))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 445,
          "throwingLine": 449,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.touch(java.io.File)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(file == null)",
          "symbolicPathConjunction": "(checkNotNull(file))",
          "backwardsPathConjunction": "(file == null)",
          "simplifiedPathConjunction": "file == null",
          "z3Inputs": "[file0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\n\nconstraints = [\n  file0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nnull = Symbol('null')\npath_conjunction = (Eq(file, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 445,
          "throwingLine": 446,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.createParentDirs(java.io.File)",
          "exception": "throw new IOException(\"Unable to create parent directories of \" + file);",
          "pathCojunction": "(!(file == null)) && (!(parent == null)) && (!(parent.isDirectory()))",
          "symbolicPathConjunction": "(checkNotNull(file)) && (!(parent == null)) && (!parent.isDirectory())",
          "backwardsPathConjunction": "(!(file == null)) && (!(file.getCanonicalFile().getParentFile() == null)) && (!(file.getCanonicalFile().getParentFile().isDirectory()))",
          "simplifiedPathConjunction": "!file.getCanonicalFile().getParentFile()_isDirectory && file != null && file.getCanonicalFile().getParentFile() != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\nparent0_isNull = Bool('parent0_isNull')\n\nconstraints = [\n  parent0 == file0.getCanonicalFile().getParentFile(),\n  And(And(Not(file0_isNull), Not(parent0_isNull)), Not(parent0.isDirectory()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nfile_getCanonicalFile_getParentFile = Symbol('file_getCanonicalFile_getParentFile')\nfile_getCanonicalFile = Symbol('file_getCanonicalFile')\nfile_getCanonicalFile_getParentFile_isDirectory = Symbol('file_getCanonicalFile_getParentFile_isDirectory')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(file, null)))) & (~((Eq(file_getCanonicalFile_getParentFile, null))))) & (~(file_getCanonicalFile_getParentFile_isDirectory)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 463,
          "throwingLine": 478,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.createParentDirs(java.io.File)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(file == null)",
          "symbolicPathConjunction": "(!(checkNotNull(file)))",
          "backwardsPathConjunction": "(file == null)",
          "simplifiedPathConjunction": "file == null",
          "z3Inputs": "[file0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\n\nconstraints = [\n  file0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nnull = Symbol('null')\npath_conjunction = (Eq(file, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 463,
          "throwingLine": 464,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.move(java.io.File, java.io.File)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(from == null)",
          "symbolicPathConjunction": "(!(checkNotNull(from)))",
          "backwardsPathConjunction": "(from == null)",
          "z3Inputs": "[from0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0_isNull = Bool('from0_isNull')\n\nconstraints = [\n  from0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfrom = Symbol('from')\nnull = Symbol('null')\npath_conjunction = (Eq(from, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 493,
          "throwingLine": 494,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.move(java.io.File, java.io.File)",
          "exception": "throw new IOException(\"Unable to delete \" + from);",
          "pathCojunction": "(!(from == null)) && (!(to == null)) && (!(from.renameTo(to))) && (!(from.delete())) && (!(!to.delete()))",
          "symbolicPathConjunction": "(!(checkNotNull(from))) && (!(checkNotNull(to))) && (!from.renameTo(to)) && (!(copy(from, to))) && (!from.delete()) && (!(!to.delete()))",
          "backwardsPathConjunction": "(!(from == null)) && (!(to == null)) && (!(from.renameTo(to))) && (!(from.delete())) && (!(!to.delete()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0_isNull = Bool('from0_isNull')\nto0_isNull = Bool('to0_isNull')\n\nconstraints = [\n  And(And(And(And(Not(from0_isNull), Not(to0_isNull)), Not(from0.renameTo(to0))), Not(from0.delete())), Not(Not(to0.delete())))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfrom = Symbol('from')\nto = Symbol('to')\nfrom_renameTo = Symbol('from_renameTo')\nfrom_delete = Symbol('from_delete')\nto_delete = Symbol('to_delete')\nnull = Symbol('null')\npath_conjunction = (((((~((Eq(from, null)))) & (~((Eq(to, null))))) & (~(from_renameTo))) & (~(from_delete))) & (~((~(to_delete)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 493,
          "throwingLine": 505,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.move(java.io.File, java.io.File)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(from == null)) && (to == null)",
          "symbolicPathConjunction": "(!(checkNotNull(from))) && (!(checkNotNull(to)))",
          "backwardsPathConjunction": "(!(from == null)) && (to == null)",
          "z3Inputs": "[to0_isNull = True, from0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0_isNull = Bool('from0_isNull')\nto0_isNull = Bool('to0_isNull')\n\nconstraints = [\n  And(Not(from0_isNull), to0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfrom = Symbol('from')\nto = Symbol('to')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(from, null)))) & (Eq(to, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 493,
          "throwingLine": 495,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.move(java.io.File, java.io.File)",
          "exception": "throw new IOException(\"Unable to delete \" + to);",
          "pathCojunction": "(!(from == null)) && (!(to == null)) && (!(from.renameTo(to))) && (!(from.delete())) && (!(to.delete()))",
          "symbolicPathConjunction": "(!(checkNotNull(from))) && (!(checkNotNull(to))) && (!from.renameTo(to)) && (!(copy(from, to))) && (!from.delete()) && (!to.delete())",
          "backwardsPathConjunction": "(!(from == null)) && (!(to == null)) && (!(from.renameTo(to))) && (!(from.delete())) && (!(to.delete()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0_isNull = Bool('from0_isNull')\nto0_isNull = Bool('to0_isNull')\n\nconstraints = [\n  And(And(And(And(Not(from0_isNull), Not(to0_isNull)), Not(from0.renameTo(to0))), Not(from0.delete())), Not(to0.delete()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfrom = Symbol('from')\nto = Symbol('to')\nfrom_renameTo = Symbol('from_renameTo')\nfrom_delete = Symbol('from_delete')\nto_delete = Symbol('to_delete')\nnull = Symbol('null')\npath_conjunction = (((((~((Eq(from, null)))) & (~((Eq(to, null))))) & (~(from_renameTo))) & (~(from_delete))) & (~(to_delete)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 493,
          "throwingLine": 503,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.map(java.io.File)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(file == null)) && (!(file == null)) && (MapMode.READ_ONLY == null)",
          "symbolicPathConjunction": "(checkNotNull(file)) && (map(file, MapMode.READ_ONLY))",
          "backwardsPathConjunction": "(!(file == null)) && (!(file == null)) && (MapMode.READ_ONLY == null)",
          "z3Inputs": "[file0_isNull = False, MapMode_READ_ONLY0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\nMapMode_READ_ONLY0_isNull = Bool('MapMode_READ_ONLY0_isNull')\n\nconstraints = [\n  And(And(Not(file0_isNull), Not(file0_isNull)), MapMode_READ_ONLY0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 623,
          "throwingLine": 625,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.map(java.io.File)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(file == null)",
          "symbolicPathConjunction": "(checkNotNull(file))",
          "backwardsPathConjunction": "(file == null)",
          "simplifiedPathConjunction": "file == null",
          "z3Inputs": "[file0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\n\nconstraints = [\n  file0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nnull = Symbol('null')\npath_conjunction = (Eq(file, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 623,
          "throwingLine": 624,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.map(java.io.File)",
          "exception": "throw new FileNotFoundException(file.toString())",
          "pathCojunction": "(!(file == null)) && (!(file == null)) && (!(MapMode.READ_ONLY == null)) && (!(file.exists()))",
          "symbolicPathConjunction": "(checkNotNull(file)) && (map(file, MapMode.READ_ONLY))",
          "backwardsPathConjunction": "(!(file == null)) && (!(file == null)) && (!(MapMode.READ_ONLY == null)) && (!(file.exists()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\nMapMode_READ_ONLY0_isNull = Bool('MapMode_READ_ONLY0_isNull')\n\nconstraints = [\n  And(And(And(Not(file0_isNull), Not(file0_isNull)), Not(MapMode_READ_ONLY0_isNull)), Not(file0.exists()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 623,
          "throwingLine": 625,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel.MapMode)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(file == null)",
          "symbolicPathConjunction": "(!(checkNotNull(file)))",
          "backwardsPathConjunction": "(file == null)",
          "simplifiedPathConjunction": "file == null",
          "z3Inputs": "[file0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\n\nconstraints = [\n  file0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nnull = Symbol('null')\npath_conjunction = (Eq(file, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 647,
          "throwingLine": 648,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel.MapMode)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(file == null)) && (mode == null)",
          "symbolicPathConjunction": "(checkNotNull(file)) && (checkNotNull(mode))",
          "backwardsPathConjunction": "(!(file == null)) && (mode == null)",
          "simplifiedPathConjunction": "mode == null && file != null",
          "z3Inputs": "[file0_isNull = False, mode0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\nmode0_isNull = Bool('mode0_isNull')\n\nconstraints = [\n  And(Not(file0_isNull), mode0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nmode = Symbol('mode')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(file, null)))) & (Eq(mode, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 647,
          "throwingLine": 649,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel.MapMode)",
          "exception": "throw new FileNotFoundException(file.toString());",
          "pathCojunction": "(!(file == null)) && (!(mode == null)) && (!(file.exists()))",
          "symbolicPathConjunction": "(checkNotNull(file)) && (checkNotNull(mode)) && (!file.exists())",
          "backwardsPathConjunction": "(!(file == null)) && (!(mode == null)) && (!(file.exists()))",
          "simplifiedPathConjunction": "!file.exists() && file != null && mode != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0_isNull = Bool('file0_isNull')\nmode0_isNull = Bool('mode0_isNull')\n\nconstraints = [\n  And(And(Not(file0_isNull), Not(mode0_isNull)), Not(file0.exists()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nmode = Symbol('mode')\nfile_exists = Symbol('file_exists')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(file, null)))) & (~((Eq(mode, null))))) & (~(file_exists)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 647,
          "throwingLine": 651,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.getFileExtension(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fullName == null)",
          "symbolicPathConjunction": "(checkNotNull(fullName))",
          "backwardsPathConjunction": "(fullName == null)",
          "simplifiedPathConjunction": "fullName == null",
          "z3Inputs": "[fullName0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfullName0 = String('fullName0')\nfullName0_isNull = Bool('fullName0_isNull')\n\nconstraints = [\n  fullName0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfullName = Symbol('fullName')\nnull = Symbol('null')\npath_conjunction = (Eq(fullName, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 779,
          "throwingLine": 780,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Files.getNameWithoutExtension(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(file == null)",
          "symbolicPathConjunction": "(checkNotNull(file))",
          "backwardsPathConjunction": "(file == null)",
          "simplifiedPathConjunction": "file == null",
          "z3Inputs": "[file0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfile0 = String('file0')\nfile0_isNull = Bool('file0_isNull')\n\nconstraints = [\n  file0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfile = Symbol('file')\nnull = Symbol('null')\npath_conjunction = (Eq(file, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 796,
          "throwingLine": 797,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFuture.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unit == null)",
          "symbolicPathConjunction": "(checkNotNull(unit))",
          "backwardsPathConjunction": "(unit == null)",
          "simplifiedPathConjunction": "null == unit",
          "z3Inputs": "[timeout0 = -9223372036854775808, unit0_isNull = True]\n[unit0_isNull = True, timeout0 = 0]\n[unit0_isNull = True, timeout0 = -1]\n[unit0_isNull = True, timeout0 = -2]\n[unit0_isNull = True, timeout0 = -3]\n[unit0_isNull = True, timeout0 = -4]\n[unit0_isNull = True, timeout0 = -5]\n[unit0_isNull = True, timeout0 = -6]\n[unit0_isNull = True, timeout0 = -7]\n[unit0_isNull = True, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\nunit0_isNull = Bool('unit0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  unit0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunit = Symbol('unit')\nnull = Symbol('null')\npath_conjunction = (Eq(unit, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 114,
          "throwingLine": 115,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ConstraintsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ConstraintsTest.Anonymous-dbee24aa-d9b2-4abc-824d-486910690410.checkElement(java.lang.String)",
          "exception": "throw new TestElementException();",
          "pathCojunction": "(TEST_ELEMENT.equals(element))",
          "symbolicPathConjunction": "(TEST_ELEMENT.equals(element))",
          "backwardsPathConjunction": "(TEST_ELEMENT.equals(element))",
          "z3Inputs": "[TEST_ELEMENT0 = \"test\", element0 = \"test\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0 = String('element0')\nTEST_ELEMENT0 = String('TEST_ELEMENT0')\n\nconstraints = [\n  TEST_ELEMENT0 == StringVal(\"test\"), \n  TEST_ELEMENT0 == element0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\n\"test\"_equals = Symbol('\"test\"_equals')\npath_conjunction = \"test\"_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 55,
          "throwingLine": 57,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/base/ConverterTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.ConverterTest.testSerialization_andThen()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(reverse == null) && (reverseConverter == null)",
          "symbolicPathConjunction": "(Longs.stringConverter()) && (Longs.stringConverter().reverse()) && (converterA.andThen(reverseConverter))",
          "backwardsPathConjunction": "(reverse == null) && (reverse = new ReverseConverter<A, B>(this) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreverse0_isNull = Bool('reverse0_isNull')\nreverseConverter0_isNull = Bool('reverseConverter0_isNull')\n\nconstraints = [\n  java.lang.Long > converterA0 == LongConverter.INSTANCE,\n  java.lang.String > reverseConverter0 == reverse0 == new ReverseConverter<A, B>(this),\n  And(reverse0_isNull, reverseConverter0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 208,
          "throwingLine": 211,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.ConverterTest.testSerialization_andThen()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(reverse == null)) && (reverseConverter == null)",
          "symbolicPathConjunction": "(Longs.stringConverter()) && (Longs.stringConverter().reverse()) && (converterA.andThen(reverseConverter))",
          "backwardsPathConjunction": "(!(reverse == null)) && (result == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreverse0_isNull = Bool('reverse0_isNull')\nreverseConverter0_isNull = Bool('reverseConverter0_isNull')\n\nconstraints = [\n  java.lang.Long > converterA0 == LongConverter.INSTANCE,\n  A > result0 == reverse,\n  java.lang.String > reverseConverter0 == result0,\n  And(Not(reverse0_isNull), reverseConverter0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreverse = Symbol('reverse')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(reverse, null)))) & (Eq(result, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 208,
          "throwingLine": 211,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/math/IntMath.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.math.IntMath.mod(int, int)",
          "exception": "throw new ArithmeticException(\"Modulus \" + m + \" must be > 0\");",
          "pathCojunction": "(m <= 0)",
          "symbolicPathConjunction": "(m <= 0)",
          "backwardsPathConjunction": "(m <= 0)",
          "simplifiedPathConjunction": "m <= 0",
          "z3Inputs": "[m0 = 0]\n[m0 = -1]\n[m0 = -2]\n[m0 = -3]\n[m0 = -4]\n[m0 = -5]\n[m0 = -6]\n[m0 = -7]\n[m0 = -8]\n[m0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Int('x0')\nm0 = Int('m0')\n\nconstraints = [\n  m0 <= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nm = Symbol('m', integer=True)\npath_conjunction = (LessThan(m, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 350,
          "throwingLine": 352,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.IntMath.gcd(int, int)",
          "exception": "throw new IllegalArgumentException(\"b\" + \" (\" + b + \") must be >= 0\")",
          "pathCojunction": "(!(a < 0)) && (b < 0)",
          "symbolicPathConjunction": "(!(x < 0)) && (x < 0)",
          "backwardsPathConjunction": "(!(a < 0)) && (b < 0)",
          "simplifiedPathConjunction": "a >= 0 && b < 0",
          "z3Inputs": "[b0 = -1, a0 = 0]\n[b0 = -1, a0 = 1]\n[b0 = -2, a0 = 1]\n[b0 = -3, a0 = 1]\n[b0 = -3, a0 = 2]\n[b0 = -3, a0 = 3]\n[b0 = -4, a0 = 4]\n[b0 = -4, a0 = 5]\n[b0 = -4, a0 = 6]\n[b0 = -4, a0 = 7]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\n\nconstraints = [\n  And(Not(a0 < 0), b0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a', integer=True)\nb = Symbol('b', integer=True)\npath_conjunction = ((~((StrictLessThan(a, 0)))) & (StrictLessThan(b, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 364,
          "throwingLine": 371,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.IntMath.gcd(int, int)",
          "exception": "throw new IllegalArgumentException(\"a\" + \" (\" + a + \") must be >= 0\")",
          "pathCojunction": "(a < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(a < 0)",
          "simplifiedPathConjunction": "a < 0",
          "z3Inputs": "[a0 = -1]\n[a0 = -2]\n[a0 = -3]\n[a0 = -4]\n[a0 = -5]\n[a0 = -6]\n[a0 = -7]\n[a0 = -8]\n[a0 = -9]\n[a0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\n\nconstraints = [\n  a0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a', integer=True)\npath_conjunction = (StrictLessThan(a, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 364,
          "throwingLine": 370,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.IntMath.factorial(int)",
          "exception": "throw new IllegalArgumentException(\"n\" + \" (\" + n + \") must be >= 0\")",
          "pathCojunction": "(n < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(n < 0)",
          "simplifiedPathConjunction": "n < 0",
          "z3Inputs": "[n0 = -1]\n[n0 = -2]\n[n0 = -3]\n[n0 = -4]\n[n0 = -5]\n[n0 = -6]\n[n0 = -7]\n[n0 = -8]\n[n0 = -9]\n[n0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\n\nconstraints = [\n  n0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\npath_conjunction = (StrictLessThan(n, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 497,
          "throwingLine": 498,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/EmptyContiguousSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.EmptyContiguousSet.first()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 36,
          "throwingLine": 37,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.EmptyContiguousSet.last()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 41,
          "throwingLine": 42,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.EmptyContiguousSet.range()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 56,
          "throwingLine": 57,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.EmptyContiguousSet.range(com.google.common.collect.BoundType, com.google.common.collect.BoundType)",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 61,
          "throwingLine": 62,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.unmodifiableMultimap(com.google.common.collect.ImmutableMultimap<K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(delegate == null)",
          "symbolicPathConjunction": "(checkNotNull(delegate))",
          "backwardsPathConjunction": "(delegate == null)",
          "z3Inputs": "[delegate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndelegate0_isNull = Bool('delegate0_isNull')\n\nconstraints = [\n  delegate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(delegate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 395,
          "throwingLine": 396,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 418,
          "throwingLine": 419,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.put(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 473,
          "throwingLine": 474,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.putAll(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 478,
          "throwingLine": 479,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 483,
          "throwingLine": 484,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.remove(java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 488,
          "throwingLine": 489,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 493,
          "throwingLine": 494,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 498,
          "throwingLine": 499,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableListMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 531,
          "throwingLine": 532,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 536,
          "throwingLine": 537,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableSetMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 569,
          "throwingLine": 570,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 574,
          "throwingLine": 575,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 598,
          "throwingLine": 599,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 603,
          "throwingLine": 604,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap<K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(delegate == null)",
          "symbolicPathConjunction": "(checkNotNull(delegate))",
          "backwardsPathConjunction": "(delegate == null)",
          "z3Inputs": "[delegate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndelegate0_isNull = Bool('delegate0_isNull')\n\nconstraints = [\n  delegate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(delegate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 664,
          "throwingLine": 665,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap<K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(delegate == null)",
          "symbolicPathConjunction": "(checkNotNull(delegate))",
          "backwardsPathConjunction": "(delegate == null)",
          "z3Inputs": "[delegate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndelegate0_isNull = Bool('delegate0_isNull')\n\nconstraints = [\n  delegate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(delegate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 757,
          "throwingLine": 758,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.get(K)",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(i == 1))",
          "symbolicPathConjunction": "(hasNext()) && (checkState(canRemove, \"no calls to next() since the last call to remove()\"))",
          "backwardsPathConjunction": "(!(i == 1))",
          "simplifiedPathConjunction": "i != 1",
          "z3Inputs": "[i0 = 2]\n[i0 = 3]\n[i0 = 4]\n[i0 = 5]\n[i0 = 6]\n[i0 = 7]\n[i0 = 8]\n[i0 = 9]\n[i0 = 10]\n[i0 = 11]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\n\nconstraints = [\n  Not(i0 == 1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\npath_conjunction = (~((Eq(i, 1))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 899,
          "throwingLine": 900,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.Anonymous-f636f9a6-3b27-48d4-be7f-9eae33f49746.iterator()",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(i == 1))",
          "symbolicPathConjunction": "(hasNext()) && (checkState(canRemove, \"no calls to next() since the last call to remove()\"))",
          "backwardsPathConjunction": "(!(i == 1))",
          "simplifiedPathConjunction": "i != 1",
          "z3Inputs": "[i0 = 2]\n[i0 = 3]\n[i0 = 4]\n[i0 = 5]\n[i0 = 6]\n[i0 = 7]\n[i0 = 8]\n[i0 = 9]\n[i0 = 10]\n[i0 = 11]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\n\nconstraints = [\n  Not(i0 == 1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\npath_conjunction = (~((Eq(i, 1))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 902,
          "throwingLine": 903,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.Anonymous-5ab236b8-c1f1-4cea-961f-590a44e318f1.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(i == 0) && map.containsKey(key))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(i == 0) && map.containsKey(key))",
          "simplifiedPathConjunction": "map.containsKey(key) && i != 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\n\nconstraints = [\n  And(Not(i0 == 0), map0.containsKey(key))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\nmap = Symbol('map')\nmap_containsKey = Symbol('map_containsKey')\npath_conjunction = ((~((Eq(i, 0)))) & map_containsKey)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 912,
          "throwingLine": 914,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.put(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 937,
          "throwingLine": 938,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.putAll(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 942,
          "throwingLine": 943,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 947,
          "throwingLine": 948,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 952,
          "throwingLine": 953,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.transformValues(com.google.common.collect.Multimap<K, V1>, com.google.common.base.Function<? super V1, V2>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1054,
          "throwingLine": 1055,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.TransformedEntriesMultimap.put(K, V2)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1189,
          "throwingLine": 1190,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.TransformedEntriesMultimap.putAll(K, java.lang.Iterable<? extends V2>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1194,
          "throwingLine": 1195,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.TransformedEntriesMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V2>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1199,
          "throwingLine": 1200,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.TransformedEntriesMultimap.replaceValues(K, java.lang.Iterable<? extends V2>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1216,
          "throwingLine": 1217,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.transformValues(com.google.common.collect.ListMultimap<K, V1>, com.google.common.base.Function<? super V1, V2>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1274,
          "throwingLine": 1275,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.TransformedEntriesListMultimap.replaceValues(K, java.lang.Iterable<? extends V2>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1362,
          "throwingLine": 1363,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.index(java.lang.Iterable<V>, com.google.common.base.Function<? super V, K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyFunction == null)",
          "symbolicPathConjunction": "(index(values.iterator(), keyFunction))",
          "backwardsPathConjunction": "(keyFunction == null)",
          "z3Inputs": "[keyFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyFunction0_isNull = Bool('keyFunction0_isNull')\n\nconstraints = [\n  keyFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1410,
          "throwingLine": 1411,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.index(java.util.Iterator<V>, com.google.common.base.Function<? super V, K>)",
          "exception": "throw new NullPointerException(String.valueOf(values))",
          "pathCojunction": "(!(keyFunction == null)) && (values.hasNext()) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(keyFunction)) && (ImmutableListMultimap.builder()) && (values.hasNext()) && (checkNotNull(value, values))",
          "backwardsPathConjunction": "(!(keyFunction == null)) && (values.hasNext()) && (values.next() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyFunction0_isNull = Bool('keyFunction0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  V > builder0 == new Builder<K, V>(),\n  value0 == values0.next(),\n  And(And(Not(keyFunction0_isNull), values0.hasNext()), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nsuper = Symbol('super')\nvalues_hasNext = Symbol('values_hasNext')\nvalues_next = Symbol('values_next')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(keyFunction, null)))) & values_hasNext) & (Eq(values_next, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 1458,
          "throwingLine": 1463,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.index(java.util.Iterator<V>, com.google.common.base.Function<? super V, K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyFunction == null)",
          "symbolicPathConjunction": "(checkNotNull(keyFunction))",
          "backwardsPathConjunction": "(keyFunction == null)",
          "z3Inputs": "[keyFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyFunction0_isNull = Bool('keyFunction0_isNull')\n\nconstraints = [\n  keyFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1458,
          "throwingLine": 1459,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.Keys.remove(java.lang.Object, int)",
          "exception": "throw new IllegalArgumentException(\"occurrences\" + \" cannot be negative but was: \" + occurrences)",
          "pathCojunction": "(occurrences < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(occurrences < 0)",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  occurrences0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = (StrictLessThan(occurrences, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1570,
          "throwingLine": 1571,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.filterEntries(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(checkNotNull(entryPredicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1965,
          "throwingLine": 1966,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.filterEntries(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(checkNotNull(entryPredicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2005,
          "throwingLine": 2006,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Splitter.on(com.google.common.base.CharMatcher)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(start, length, \"index\"))",
          "pathCojunction": "(!(separatorMatcher == null)) && (start < 0 || start > sequence.length())",
          "symbolicPathConjunction": "(checkNotNull(separatorMatcher)) && (separatorMatcher.indexIn(toSplit, start))",
          "backwardsPathConjunction": "(!(separatorMatcher == null)) && (start < 0 || start > sequence.length())",
          "simplifiedPathConjunction": "(sequence.length() < start || start < 0) && null != separatorMatcher",
          "z3Inputs": "[start0 = 1,\n sequence0 = \"\",\n separatorMatcher0_isNull = False]\n[start0 = -1,\n separatorMatcher0_isNull = False,\n sequence0 = \"A\"]\n[start0 = -2,\n separatorMatcher0_isNull = False,\n sequence0 = \"\"]\n[start0 = -3,\n separatorMatcher0_isNull = False,\n sequence0 = \"\"]\n[start0 = -4,\n separatorMatcher0_isNull = False,\n sequence0 = \"\"]\n[start0 = -5,\n separatorMatcher0_isNull = False,\n sequence0 = \"\"]\n[start0 = -6,\n separatorMatcher0_isNull = False,\n sequence0 = \"\"]\n[start0 = -7,\n separatorMatcher0_isNull = False,\n sequence0 = \"\"]\n[start0 = -8,\n separatorMatcher0_isNull = False,\n sequence0 = \"\"]\n[start0 = -9,\n separatorMatcher0_isNull = False,\n sequence0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nstart0 = Int('start0')\nseparatorMatcher0_isNull = Bool('separatorMatcher0_isNull')\n\nconstraints = [\n  And(Not(separatorMatcher0_isNull), Or(start0 < 0, start0 > Length(sequence0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparatorMatcher = Symbol('separatorMatcher')\nsequence = Symbol('sequence')\nstart = Symbol('start', integer=True)\nsequence_length = Symbol('sequence_length')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(separatorMatcher, null)))) & ((StrictLessThan(start, 0)) | (StrictGreaterThan(start, sequence_length))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 141,
          "throwingLine": 144,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.on(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separatorMatcher == null)",
          "symbolicPathConjunction": "(checkNotNull(separatorMatcher))",
          "backwardsPathConjunction": "(separatorMatcher == null)",
          "simplifiedPathConjunction": "null == separatorMatcher",
          "z3Inputs": "[separatorMatcher0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparatorMatcher0_isNull = Bool('separatorMatcher0_isNull')\n\nconstraints = [\n  separatorMatcher0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparatorMatcher = Symbol('separatorMatcher')\nnull = Symbol('null')\npath_conjunction = (Eq(separatorMatcher, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 141,
          "throwingLine": 142,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.Anonymous-4006d33d-1941-442e-81d9-b7de8d580168.iterator(com.google.common.base.Splitter, java.lang.CharSequence)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(start, length, \"index\"))",
          "pathCojunction": "(start < 0 || start > sequence.length())",
          "symbolicPathConjunction": "(separatorMatcher.indexIn(toSplit, start))",
          "backwardsPathConjunction": "(start < 0 || start > sequence.length())",
          "simplifiedPathConjunction": "sequence.length() < start || start < 0",
          "z3Inputs": "[start0 = 1, sequence0 = \"\"]\n[start0 = -1, sequence0 = \"A\"]\n[start0 = -2, sequence0 = \"\"]\n[start0 = -3, sequence0 = \"\"]\n[start0 = -4, sequence0 = \"\"]\n[start0 = -5, sequence0 = \"\"]\n[start0 = -6, sequence0 = \"\"]\n[start0 = -7, sequence0 = \"\"]\n[start0 = -8, sequence0 = \"\"]\n[start0 = -9, sequence0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoSplit0 = String('toSplit0')\nsequence0 = String('sequence0')\nstart0 = Int('start0')\n\nconstraints = [\n  Or(start0 < 0, start0 > Length(sequence0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nstart = Symbol('start', integer=True)\nsequence_length = Symbol('sequence_length')\npath_conjunction = ((StrictLessThan(start, 0)) | (StrictGreaterThan(start, sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 147,
          "throwingLine": 148,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.on(java.lang.String)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"The separator may not be the empty string.\"))",
          "pathCojunction": "(!(separator.length() != 0))",
          "symbolicPathConjunction": "(checkArgument(separator.length() != 0, \"The separator may not be the empty string.\"))",
          "backwardsPathConjunction": "(!(separator.length() != 0))",
          "simplifiedPathConjunction": "separator.length() == 0",
          "z3Inputs": "[separator0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\n\nconstraints = [\n  Not(Length(separator0) != 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nseparator_length = Symbol('separator_length')\npath_conjunction = (~((Ne(separator_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 172,
          "throwingLine": 173,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.fixedLength(int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"The length may not be less than 1\"))",
          "pathCojunction": "(!(length > 0))",
          "symbolicPathConjunction": "(checkArgument(length > 0, \"The length may not be less than 1\"))",
          "backwardsPathConjunction": "(!(length > 0))",
          "simplifiedPathConjunction": "length <= 0",
          "z3Inputs": "[length0 = 0]\n[length0 = -1]\n[length0 = -2]\n[length0 = -3]\n[length0 = -4]\n[length0 = -5]\n[length0 = -6]\n[length0 = -7]\n[length0 = -8]\n[length0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlength0 = Int('length0')\n\nconstraints = [\n  Not(length0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlength = Symbol('length', integer=True)\npath_conjunction = (~((StrictGreaterThan(length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 227,
          "throwingLine": 228,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.trimResults()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(CharMatcher.WHITESPACE == null)",
          "symbolicPathConjunction": "(trimResults(CharMatcher.WHITESPACE))",
          "backwardsPathConjunction": "(CharMatcher.WHITESPACE == null)",
          "z3Inputs": "[CharMatcher_WHITESPACE0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nCharMatcher_WHITESPACE0_isNull = Bool('CharMatcher_WHITESPACE0_isNull')\n\nconstraints = [\n  CharMatcher_WHITESPACE0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 310,
          "throwingLine": 311,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.trimResults(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(trimmer == null)",
          "symbolicPathConjunction": "(checkNotNull(trimmer))",
          "backwardsPathConjunction": "(trimmer == null)",
          "simplifiedPathConjunction": "null == trimmer",
          "z3Inputs": "[trimmer0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntrimmer0_isNull = Bool('trimmer0_isNull')\n\nconstraints = [\n  trimmer0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntrimmer = Symbol('trimmer')\nnull = Symbol('null')\npath_conjunction = (Eq(trimmer, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 327,
          "throwingLine": 328,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.split(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 341,
          "throwingLine": 342,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Splitter.splitToList(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 375,
          "throwingLine": 376,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/Floats.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.indexOf(float[], float[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 166,
          "throwingLine": 168,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.indexOf(float[], float[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 166,
          "throwingLine": 167,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.min(float...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 218,
          "throwingLine": 219,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.max(float...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 236,
          "throwingLine": 237,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.join(java.lang.String, float...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 350,
          "throwingLine": 351,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.FloatArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 483,
          "throwingLine": 484,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.FloatArrayAsList.set(int, java.lang.Float)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nelement0 = Real('element0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 519,
          "throwingLine": 520,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.FloatArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 528,
          "throwingLine": 530,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-5abb204f-f6ee-49dd-954a-4475a541167e.apply(com.google.common.util.concurrent.FuturesTest.Foo)",
          "exception": "throw new AssertionFailedError(\"Unexpeted call to apply.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 172,
          "throwingLine": 173,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-314252fe-b4d3-4edf-87b7-95df838ba218.apply(com.google.common.util.concurrent.FuturesTest.Foo)",
          "exception": "throw new AssertionFailedError(\"Unexpeted call to apply.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-ae0f63e2-569e-44f5-a3da-e0249992a282.apply(com.google.common.util.concurrent.FuturesTest.Foo)",
          "exception": "throw new AssertionFailedError(\"Unexpeted call to apply.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 227,
          "throwingLine": 228,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-5ec4a9b2-59b8-4f11-b141-c32734ccea9d.apply(com.google.common.util.concurrent.FuturesTest.Foo)",
          "exception": "throw new AssertionFailedError(\"Unexpeted call to apply.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 240,
          "throwingLine": 241,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-3c913f07-695f-4f93-b51a-4d8cbfceb3d7.apply(X)",
          "exception": "throw newAssertionError(\"Unexpected fallback\", t);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 392,
          "throwingLine": 393,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-0cd77559-ce27-41cf-a181-d4d0e30be5c9.create(java.lang.Throwable)",
          "exception": "throw newAssertionError(\"Unexpected fallback\", t);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 425,
          "throwingLine": 426,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-ffb26833-79fc-47f4-89f0-bcab8d30dab3.apply(X)",
          "exception": "throw newAssertionError(\"Unexpected fallback\", t);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 457,
          "throwingLine": 458,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-9d807784-2aa4-4987-abc1-1701076f5778.create(java.lang.Throwable)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 507,
          "throwingLine": 508,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-37b6d824-2832-4b3b-b6e8-5f7b3e18905c.create(java.lang.Throwable)",
          "exception": "throw expectedException;",
          "pathCojunction": "(!(wrapInFuture))",
          "symbolicPathConjunction": "(!(wrapInFuture))",
          "backwardsPathConjunction": "(!(wrapInFuture))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(wrapInFuture)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~(wrapInFuture))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 535,
          "throwingLine": 537,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-adcb259b-e828-4c44-af31-b7997ec52fb2.apply(java.lang.Throwable)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 648,
          "throwingLine": 649,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-55f5b4a1-f80b-4899-8ad3-c850959a0beb.apply(java.lang.Throwable)",
          "exception": "throw expectedException;",
          "pathCojunction": "(!(wrapInFuture))",
          "symbolicPathConjunction": "(!(wrapInFuture))",
          "backwardsPathConjunction": "(!(wrapInFuture))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(wrapInFuture)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~(wrapInFuture))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 676,
          "throwingLine": 678,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-d92d7e64-3013-4b51-a8f3-9c45c9d0c252.apply(java.lang.Throwable)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 790,
          "throwingLine": 791,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-1f20af15-e8c9-47a4-986e-b7c96586cb71.apply(java.lang.Throwable)",
          "exception": "throw expectedException;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 812,
          "throwingLine": 813,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-6137859a-7acc-4185-ad04-e2afcce2844f.apply(java.lang.String)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = String('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 928,
          "throwingLine": 929,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-530bd790-aad0-432f-beaa-e0c0cd14e7bd.apply(java.lang.String)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = String('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 985,
          "throwingLine": 986,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.BuggyFuture.get()",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1502,
          "throwingLine": 1503,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/Doubles.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.indexOf(double[], double[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 170,
          "throwingLine": 172,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.indexOf(double[], double[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 170,
          "throwingLine": 171,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.min(double...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 222,
          "throwingLine": 223,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.max(double...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 240,
          "throwingLine": 241,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.join(java.lang.String, double...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 354,
          "throwingLine": 355,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.DoubleArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 487,
          "throwingLine": 488,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.DoubleArrayAsList.set(int, java.lang.Double)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nelement0 = Real('element0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 524,
          "throwingLine": 525,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.DoubleArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 533,
          "throwingLine": 535,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/base/CharMatcherTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.CharMatcherTest.Anonymous-4968e434-1294-4dec-ae13-0a484ff0348f.matches(char)",
          "exception": "throw new AssertionFailedError(\"You weren't supposed to actually invoke me!\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 59,
          "throwingLine": 60,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/RegularImmutableSortedSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.RegularImmutableSortedSet.first()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(delegate.isEmpty())",
          "symbolicPathConjunction": "(isEmpty()) && (isEmpty())",
          "backwardsPathConjunction": "(delegate.isEmpty())",
          "simplifiedPathConjunction": "delegate.isEmpty()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  delegate0.isEmpty()\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\ndelegate_isEmpty = Symbol('delegate_isEmpty')\npath_conjunction = delegate_isEmpty\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 184,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.RegularImmutableSortedSet.last()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(delegate.isEmpty())",
          "symbolicPathConjunction": "(isEmpty()) && (isEmpty())",
          "backwardsPathConjunction": "(delegate.isEmpty())",
          "simplifiedPathConjunction": "delegate.isEmpty()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  delegate0.isEmpty()\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\ndelegate_isEmpty = Symbol('delegate_isEmpty')\npath_conjunction = delegate_isEmpty\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 192,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 344,
          "throwingLine": 345,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 350,
          "throwingLine": 351,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 360,
          "throwingLine": 361,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.hasPrevious()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 375,
          "throwingLine": 376,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.previous()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 381,
          "throwingLine": 382,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.set(java.util.Map.Entry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 401,
          "throwingLine": 402,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.NodeIterator.add(java.util.Map.Entry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 406,
          "throwingLine": 407,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.DistinctKeyIterator.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 430,
          "throwingLine": 431,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.DistinctKeyIterator.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 436,
          "throwingLine": 437,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedListMultimap.DistinctKeyIterator.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 448,
          "throwingLine": 449,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/test/com/google/common/testing/FakeTickerTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.testing.FakeTickerTest.Anonymous-9870c3b5-395c-447a-92a3-b10198da73ac.call()",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(startLatch.countDown()) && (startLatch.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 156,
          "throwingLine": 158,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/testing/super/com/google/common/collect/testing/Helpers.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.Helpers.Anonymous-52e70d4d-33fd-4dd3-aa9c-2fe9d69f406e.remove()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 224,
          "throwingLine": 225,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.Helpers.Anonymous-d2ff3379-94d5-47b5-a586-482ae00f1226.setValue(V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 363,
          "throwingLine": 364,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/ExecutionList.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionList.add(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Runnable was null.\"))",
          "pathCojunction": "(runnable == null)",
          "symbolicPathConjunction": "(checkNotNull(runnable, \"Runnable was null.\"))",
          "backwardsPathConjunction": "(runnable == null)",
          "simplifiedPathConjunction": "null == runnable",
          "z3Inputs": "[runnable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrunnable0_isNull = Bool('runnable0_isNull')\n\nconstraints = [\n  runnable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrunnable = Symbol('runnable')\nnull = Symbol('null')\npath_conjunction = (Eq(runnable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 70,
          "throwingLine": 73,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionList.add(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Executor was null.\"))",
          "pathCojunction": "(!(runnable == null)) && (executor == null)",
          "symbolicPathConjunction": "(checkNotNull(runnable, \"Runnable was null.\")) && (checkNotNull(executor, \"Executor was null.\"))",
          "backwardsPathConjunction": "(!(runnable == null)) && (executor == null)",
          "simplifiedPathConjunction": "executor == null && null != runnable",
          "z3Inputs": "[runnable0_isNull = False, executor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrunnable0_isNull = Bool('runnable0_isNull')\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  And(Not(runnable0_isNull), executor0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrunnable = Symbol('runnable')\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(runnable, null)))) & (Eq(executor, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 70,
          "throwingLine": 74,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/LinkedHashMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.create(int, int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedValuesPerKey)",
          "pathCojunction": "(expectedKeys < 3) && (!(expectedKeys < 0)) && (expectedValuesPerKey < 3) && (expectedValuesPerKey < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\"))) && ((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedKeys < 3) && (!(expectedKeys < 0)) && (expectedValuesPerKey < 3) && (expectedValuesPerKey < 0)",
          "simplifiedPathConjunction": "expectedKeys >= 0 && expectedKeys < 3 && expectedValuesPerKey < 0",
          "z3Inputs": "[expectedValuesPerKey0 = -1, expectedKeys0 = 0]\n[expectedValuesPerKey0 = -1, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -2, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -3, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -3, expectedKeys0 = 2]\n[expectedValuesPerKey0 = -4, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -5, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -6, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -7, expectedKeys0 = 1]\n[expectedValuesPerKey0 = -8, expectedKeys0 = 1]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedKeys0 = Int('expectedKeys0')\nexpectedValuesPerKey0 = Int('expectedValuesPerKey0')\n\nconstraints = [\n  And(And(And(expectedKeys0 < 3, Not(expectedKeys0 < 0)), expectedValuesPerKey0 < 3), expectedValuesPerKey0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedKeys = Symbol('expectedKeys', integer=True)\nexpectedValuesPerKey = Symbol('expectedValuesPerKey', integer=True)\npath_conjunction = ((((StrictLessThan(expectedKeys, 3)) & (~((StrictLessThan(expectedKeys, 0))))) & (StrictLessThan(expectedValuesPerKey, 3))) & (StrictLessThan(expectedValuesPerKey, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 102,
          "throwingLine": 103,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.create(int, int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedKeys)",
          "pathCojunction": "(expectedKeys < 3) && (expectedKeys < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedKeys < 3) && (expectedKeys < 0)",
          "simplifiedPathConjunction": "expectedKeys < 0",
          "z3Inputs": "[expectedKeys0 = -1]\n[expectedKeys0 = -2]\n[expectedKeys0 = -3]\n[expectedKeys0 = -4]\n[expectedKeys0 = -5]\n[expectedKeys0 = -6]\n[expectedKeys0 = -7]\n[expectedKeys0 = -8]\n[expectedKeys0 = -9]\n[expectedKeys0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedKeys0 = Int('expectedKeys0')\nexpectedValuesPerKey0 = Int('expectedValuesPerKey0')\n\nconstraints = [\n  And(expectedKeys0 < 3, expectedKeys0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedKeys = Symbol('expectedKeys', integer=True)\npath_conjunction = ((StrictLessThan(expectedKeys, 3)) & (StrictLessThan(expectedKeys, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 102,
          "throwingLine": 103,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + multimap.keySet().size())",
          "pathCojunction": "(multimap.keySet().size() < 3) && (multimap.keySet().size() < 0)",
          "symbolicPathConjunction": "(create(multimap.keySet().size(), DEFAULT_VALUE_SET_CAPACITY))",
          "backwardsPathConjunction": "(multimap.keySet().size() < 3) && (multimap.keySet().size() < 0)",
          "simplifiedPathConjunction": "multimap.keySet().size() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nDEFAULT_VALUE_SET_CAPACITY0 = Int('DEFAULT_VALUE_SET_CAPACITY0')\n\nconstraints = [\n  DEFAULT_VALUE_SET_CAPACITY0 == 2,\n  And(multimap0.keySet().size() < 3, multimap0.keySet().size() < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nmultimap_keySet_size = Symbol('multimap_keySet_size')\nmultimap_keySet = Symbol('multimap_keySet')\npath_conjunction = ((StrictLessThan(multimap_keySet_size, 3)) & (StrictLessThan(multimap_keySet_size, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 117,
          "throwingLine": 118,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.ValueSet.Anonymous-b7a058d9-d8d1-473b-8186-4513ef414598.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 374,
          "throwingLine": 375,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.ValueSet.Anonymous-b48c0d58-cefb-46da-8ae2-aafa113488eb.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(!(hasNext()))",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 380,
          "throwingLine": 381,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.ValueSet.Anonymous-045a35aa-89af-4142-9201-f071804e6708.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(modCount != expectedModCount)",
          "symbolicPathConjunction": "(modCount != expectedModCount)",
          "backwardsPathConjunction": "(modCount != expectedModCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[modCount0 = 1, expectedModCount0 = 0]\n[expectedModCount0 = 3, modCount0 = 2]\n[expectedModCount0 = 5, modCount0 = 4]\n[expectedModCount0 = 7, modCount0 = 6]\n[expectedModCount0 = 9, modCount0 = 8]\n[expectedModCount0 = 11, modCount0 = 10]\n[expectedModCount0 = 13, modCount0 = 12]\n[expectedModCount0 = 15, modCount0 = 14]\n[expectedModCount0 = 17, modCount0 = 16]\n[expectedModCount0 = 19, modCount0 = 18]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  modCount0 != expectedModCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(modCount, expectedModCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 392,
          "throwingLine": 393,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimap.Anonymous-614977d5-acdd-4c0c-9788-5b60c4e60289.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(nextEntry != multimapHeaderEntry))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(nextEntry != multimapHeaderEntry))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(nextEntry0 != multimapHeaderEntry0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmultimapHeaderEntry = Symbol('multimapHeaderEntry')\nV> = Symbol('V>')\npath_conjunction = (~((Ne(nextEntry, multimapHeaderEntry))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 512,
          "throwingLine": 514,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ConstrainedSetMultimapTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ConstrainedSetMultimapTest.Constraint.checkKeyValue(java.lang.String, java.lang.String)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(!\"test\".equals(key)))",
          "symbolicPathConjunction": "(checkArgument(!\"test\".equals(key)))",
          "backwardsPathConjunction": "(!(!\"test\".equals(key)))",
          "z3Inputs": "[key0 = \"test\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\n\nconstraints = [\n  Not(Not(StringVal('test') == key0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\n\"test\"_equals = Symbol('\"test\"_equals')\npath_conjunction = (~((~(\"test\"_equals))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 44,
          "throwingLine": 45,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConstrainedSetMultimapTest.Constraint.checkKeyValue(java.lang.String, java.lang.String)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(!(!\"test\".equals(key)))) && (!(!\"test\".equals(value)))",
          "symbolicPathConjunction": "(checkArgument(!\"test\".equals(key))) && (checkArgument(!\"test\".equals(value)))",
          "backwardsPathConjunction": "(!(!(!\"test\".equals(key)))) && (!(!\"test\".equals(value)))",
          "z3Inputs": "[key0 = \"\", value0 = \"test\"]\n[key0 = \"A\", value0 = \"test\"]\n[key0 = \"B\", value0 = \"test\"]\n[key0 = \"C\", value0 = \"test\"]\n[key0 = \"D\", value0 = \"test\"]\n[key0 = \"E\", value0 = \"test\"]\n[key0 = \"F\", value0 = \"test\"]\n[key0 = \"G\", value0 = \"test\"]\n[key0 = \"H\", value0 = \"test\"]\n[key0 = \"I\", value0 = \"test\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\n\nconstraints = [\n  And(Not(Not(Not(StringVal('test') == key0))), Not(Not(StringVal('test') == value0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n\"test\"_equals = Symbol('\"test\"_equals')\npath_conjunction = ((~((~((~(\"test\"_equals)))))) & (~((~(\"test\"_equals)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 44,
          "throwingLine": 46,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Lists.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayList(E...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "simplifiedPathConjunction": "elements == null",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 110,
          "throwingLine": 111,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayList(java.lang.Iterable<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 141,
          "throwingLine": 142,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayList(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(list == null)",
          "symbolicPathConjunction": "(newArrayList()) && (Iterators.addAll(list, elements))",
          "backwardsPathConjunction": "(list == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  list0 == new ArrayList<E>(),\n  list0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 158,
          "throwingLine": 160,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayList(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(list == null)) && (elements == null)",
          "symbolicPathConjunction": "(newArrayList()) && (Iterators.addAll(list, elements))",
          "backwardsPathConjunction": "(!(list == null)) && (elements == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlist0_isNull = Bool('list0_isNull')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  list0 == new ArrayList<E>(),\n  And(Not(list0_isNull), elements0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 158,
          "throwingLine": 160,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayListWithCapacity(int)",
          "exception": "throw new IllegalArgumentException(\"initialArraySize\" + \" cannot be negative but was: \" + initialArraySize)",
          "pathCojunction": "(initialArraySize < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(initialArraySize < 0)",
          "simplifiedPathConjunction": "initialArraySize < 0",
          "z3Inputs": "[initialArraySize0 = -1]\n[initialArraySize0 = -2]\n[initialArraySize0 = -3]\n[initialArraySize0 = -4]\n[initialArraySize0 = -5]\n[initialArraySize0 = -6]\n[initialArraySize0 = -7]\n[initialArraySize0 = -8]\n[initialArraySize0 = -9]\n[initialArraySize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninitialArraySize0 = Int('initialArraySize0')\n\nconstraints = [\n  initialArraySize0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninitialArraySize = Symbol('initialArraySize', integer=True)\npath_conjunction = (StrictLessThan(initialArraySize, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.newArrayListWithExpectedSize(int)",
          "exception": "throw new IllegalArgumentException(\"arraySize\" + \" cannot be negative but was: \" + estimatedSize)",
          "pathCojunction": "(estimatedSize < 0)",
          "symbolicPathConjunction": "(checkNonnegative(arraySize, \"arraySize\"))",
          "backwardsPathConjunction": "(estimatedSize < 0)",
          "simplifiedPathConjunction": "estimatedSize < 0",
          "z3Inputs": "[estimatedSize0 = -1]\n[estimatedSize0 = -2]\n[estimatedSize0 = -3]\n[estimatedSize0 = -4]\n[estimatedSize0 = -5]\n[estimatedSize0 = -6]\n[estimatedSize0 = -7]\n[estimatedSize0 = -8]\n[estimatedSize0 = -9]\n[estimatedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nestimatedSize0 = Int('estimatedSize0')\n\nconstraints = [\n  estimatedSize0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nestimatedSize = Symbol('estimatedSize', integer=True)\npath_conjunction = (StrictLessThan(estimatedSize, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 207,
          "throwingLine": 208,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.OnePlusArrayList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 332,
          "throwingLine": 334,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.partition(java.util.List<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(list == null)",
          "symbolicPathConjunction": "(checkNotNull(list))",
          "backwardsPathConjunction": "(list == null)",
          "simplifiedPathConjunction": "list == null",
          "z3Inputs": "[list0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  list0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlist = Symbol('list')\nnull = Symbol('null')\npath_conjunction = (Eq(list, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 681,
          "throwingLine": 682,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.partition(java.util.List<T>, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(list == null)) && (!(size > 0))",
          "symbolicPathConjunction": "(checkNotNull(list)) && (checkArgument(size > 0))",
          "backwardsPathConjunction": "(!(list == null)) && (!(size > 0))",
          "simplifiedPathConjunction": "size <= 0 && list != null",
          "z3Inputs": "[size0 = 0, list0_isNull = False]\n[size0 = -1, list0_isNull = False]\n[size0 = -2, list0_isNull = False]\n[size0 = -3, list0_isNull = False]\n[size0 = -4, list0_isNull = False]\n[size0 = -5, list0_isNull = False]\n[size0 = -6, list0_isNull = False]\n[size0 = -7, list0_isNull = False]\n[size0 = -8, list0_isNull = False]\n[size0 = -9, list0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  And(Not(list0_isNull), Not(size0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlist = Symbol('list')\nsize = Symbol('size', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(list, null)))) & (~((StrictGreaterThan(size, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 681,
          "throwingLine": 683,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.Partition.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 699,
          "throwingLine": 700,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.charactersOf(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 730,
          "throwingLine": 731,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.StringAsImmutableList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size()))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size())",
          "symbolicPathConjunction": "(checkPositionIndexes(fromIndex, toIndex, size()))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size())",
          "simplifiedPathConjunction": "fromIndex > toIndex || size() < toIndex || fromIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\n\nconstraints = [\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\n_size = Symbol('_size')\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 754,
          "throwingLine": 755,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.StringAsImmutableList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 765,
          "throwingLine": 766,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.charactersOf(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 788,
          "throwingLine": 789,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.CharSequenceAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 800,
          "throwingLine": 801,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size()))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size())",
          "symbolicPathConjunction": "(checkPositionIndexes(fromIndex, toIndex, size()))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size())",
          "simplifiedPathConjunction": "fromIndex > toIndex || size() < toIndex || fromIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\n\nconstraints = [\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\n_size = Symbol('_size')\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 895,
          "throwingLine": 896,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.listIterator(int)",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(index < 0 || index > forwardList.size())) && (!(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())) && (!(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())) && (!(canRemoveOrSet))",
          "symbolicPathConjunction": "((size()) && (checkPositionIndex(index, size))) && (hasNext()) && ((size()) && (checkPositionIndex(index, size))) && (hasPrevious()) && (nextIndex()) && (checkState(canRemove, \"no calls to next() since the last call to remove()\"))",
          "backwardsPathConjunction": "(!(index < 0 || index > forwardList.size())) && (!(forwardList.listIterator(forwardList.size() - index).nextIndex() < 0 || forwardList.listIterator(forwardList.size() - index).nextIndex() > forwardList.size())) && (!(forwardList.listIterator(forwardList.size() - index).nextIndex() < 0 || forwardList.listIterator(forwardList.size() - index).nextIndex() > forwardList.size())) && (!(canRemoveOrSet))",
          "simplifiedPathConjunction": "forwardList.listIterator(forwardList.size() - index).nextIndex() >= 0 && forwardList.size() >= index && index >= 0 && forwardList.listIterator(forwardList.size() - index).nextIndex() <= forwardList.size() && !canRemoveOrSet",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nstart0 = Int('start0')\ncanRemoveOrSet0 = Bool('canRemoveOrSet0')\n\nconstraints = [\n  start0 == forwardList0.size() - index0,\n  forwardIterator0 == forwardList0.listIterator(start0),\n  And(And(And(Not(Or(index0 < 0, index0 > forwardList0.size())), Not(Or(forwardIterator0.nextIndex() < 0, forwardIterator0.nextIndex() > forwardList0.size()))), Not(Or(forwardIterator0.nextIndex() < 0, forwardIterator0.nextIndex() > forwardList0.size()))), Not(canRemoveOrSet0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nforwardList = Symbol('forwardList')\ncanRemoveOrSet = Symbol('canRemoveOrSet')\nforwardList_size = Symbol('forwardList_size')\nforwardList_listIterator_nextIndex = Symbol('forwardList_listIterator_nextIndex')\nforwardList_listIterator = Symbol('forwardList_listIterator')\npath_conjunction = ((((~(((StrictLessThan(index, 0)) | (StrictGreaterThan(index, forwardList_size))))) & (~(((StrictLessThan(forwardList_listIterator_nextIndex, 0)) | (StrictGreaterThan(forwardList_listIterator_nextIndex, forwardList_size)))))) & (~(((StrictLessThan(forwardList_listIterator_nextIndex, 0)) | (StrictGreaterThan(forwardList_listIterator_nextIndex, forwardList_size)))))) & (~(canRemoveOrSet)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 906,
          "throwingLine": 909,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.listIterator(int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(index, size, \"index\"))",
          "pathCojunction": "(index < 0 || index > forwardList.size())",
          "symbolicPathConjunction": "((size()) && (checkPositionIndex(index, size)))",
          "backwardsPathConjunction": "(index < 0 || index > forwardList.size())",
          "simplifiedPathConjunction": "forwardList.size() < index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 > forwardList0.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nforwardList = Symbol('forwardList')\nforwardList_size = Symbol('forwardList_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (StrictGreaterThan(index, forwardList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 906,
          "throwingLine": 907,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.listIterator(int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(forwardIterator.nextIndex(), size, \"index\"))",
          "pathCojunction": "(!(index < 0 || index > forwardList.size())) && (forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())",
          "symbolicPathConjunction": "((size()) && (checkPositionIndex(index, size))) && (hasNext()) && ((size()) && (checkPositionIndex(index, size)))",
          "backwardsPathConjunction": "(!(index < 0 || index > forwardList.size())) && (forwardList.listIterator(forwardList.size() - index).nextIndex() < 0 || forwardList.listIterator(forwardList.size() - index).nextIndex() > forwardList.size())",
          "simplifiedPathConjunction": "forwardList.size() >= index && index >= 0 && (forwardList.listIterator(forwardList.size() - index).nextIndex() > forwardList.size() || forwardList.listIterator(forwardList.size() - index).nextIndex() < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nstart0 = Int('start0')\ncanRemoveOrSet0 = Bool('canRemoveOrSet0')\n\nconstraints = [\n  start0 == forwardList0.size() - index0,\n  forwardIterator0 == forwardList0.listIterator(start0),\n  And(Not(Or(index0 < 0, index0 > forwardList0.size())), Or(forwardIterator0.nextIndex() < 0, forwardIterator0.nextIndex() > forwardList0.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nforwardList = Symbol('forwardList')\nforwardList_size = Symbol('forwardList_size')\nforwardList_listIterator_nextIndex = Symbol('forwardList_listIterator_nextIndex')\nforwardList_listIterator = Symbol('forwardList_listIterator')\npath_conjunction = ((~(((StrictLessThan(index, 0)) | (StrictGreaterThan(index, forwardList_size))))) & ((StrictLessThan(forwardList_listIterator_nextIndex, 0)) | (StrictGreaterThan(forwardList_listIterator_nextIndex, forwardList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 906,
          "throwingLine": 909,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.Anonymous-ee8ca5ca-9959-4de3-8f7e-0368dcc83dab.nextIndex()",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(forwardIterator.nextIndex(), size, \"index\"))",
          "pathCojunction": "(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())",
          "symbolicPathConjunction": "((size()) && (checkPositionIndex(index, size)))",
          "backwardsPathConjunction": "(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())",
          "simplifiedPathConjunction": "forwardIterator.nextIndex() > forwardList.size() || forwardIterator.nextIndex() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Or(forwardIterator.nextIndex() < 0, forwardIterator.nextIndex() > forwardList0.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nforwardList = Symbol('forwardList')\nforwardIterator_nextIndex = Symbol('forwardIterator_nextIndex')\nforwardList_size = Symbol('forwardList_size')\npath_conjunction = ((StrictLessThan(forwardIterator_nextIndex, 0)) | (StrictGreaterThan(forwardIterator_nextIndex, forwardList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 940,
          "throwingLine": 941,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.Anonymous-2d90001f-cc59-4398-b496-f487e2ffd666.previousIndex()",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(forwardIterator.nextIndex(), size, \"index\"))",
          "pathCojunction": "(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())",
          "symbolicPathConjunction": "(nextIndex())",
          "backwardsPathConjunction": "(forwardIterator.nextIndex() < 0 || forwardIterator.nextIndex() > forwardList.size())",
          "simplifiedPathConjunction": "forwardIterator.nextIndex() > forwardList.size() || forwardIterator.nextIndex() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Or(forwardIterator.nextIndex() < 0, forwardIterator.nextIndex() > forwardList0.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nforwardList = Symbol('forwardList')\nforwardIterator_nextIndex = Symbol('forwardIterator_nextIndex')\nforwardList_size = Symbol('forwardList_size')\npath_conjunction = ((StrictLessThan(forwardIterator_nextIndex, 0)) | (StrictGreaterThan(forwardIterator_nextIndex, forwardList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 954,
          "throwingLine": 955,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Lists.ReverseList.Anonymous-ca9524f7-4711-47d7-93f0-d565c4b1baaa.set(T)",
          "exception": "throw new IllegalStateException()",
          "pathCojunction": "(!(canRemoveOrSet))",
          "symbolicPathConjunction": "(checkState(canRemoveOrSet))",
          "backwardsPathConjunction": "(!(canRemoveOrSet))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(canRemoveOrSet)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~(canRemoveOrSet))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 966,
          "throwingLine": 967,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/DiscreteDomain.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.DiscreteDomain.minValue()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 257,
          "throwingLine": 258,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.DiscreteDomain.maxValue()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 272,
          "throwingLine": 273,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.OneArg.staticOneArgCorrectlyThrowsNpe(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 74,
          "throwingLine": 75,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.OneArg.staticOneArgThrowsOtherThanNpe(java.lang.String)",
          "exception": "throw new FooException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 77,
          "throwingLine": 78,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.OneArg.staticOneArgNullableCorrectlyThrowsOtherThanNPE(java.lang.String)",
          "exception": "throw new FooException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 88,
          "throwingLine": 89,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.OneArg.staticOneArgNullableThrowsNPE(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 92,
          "throwingLine": 93,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.OneArg.oneArgCorrectlyThrowsNpe(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 96,
          "throwingLine": 97,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.OneArg.oneArgThrowsOtherThanNpe(java.lang.String)",
          "exception": "throw new FooException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 99,
          "throwingLine": 100,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.OneArg.oneArgNullableCorrectlyThrowsOtherThanNPE(java.lang.String)",
          "exception": "throw new FooException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 108,
          "throwingLine": 109,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.OneArg.oneArgNullableThrowsNPE(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 111,
          "throwingLine": 112,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.ThrowsIae.christenPoodle(java.lang.String)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(name != null))",
          "symbolicPathConjunction": "(checkArgument(name != null))",
          "backwardsPathConjunction": "(!(name != null))",
          "simplifiedPathConjunction": "name == null",
          "z3Inputs": "[name0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\nname0_isNull = Bool('name0_isNull')\n\nconstraints = [\n  Not(Not(name0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nname = Symbol('name')\nnull = Symbol('null')\npath_conjunction = (~((Ne(name, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 138,
          "throwingLine": 139,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.ThrowsNpe.christenPoodle(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(name == null)",
          "symbolicPathConjunction": "(checkNotNull(name))",
          "backwardsPathConjunction": "(name == null)",
          "simplifiedPathConjunction": "name == null",
          "z3Inputs": "[name0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\nname0_isNull = Bool('name0_isNull')\n\nconstraints = [\n  name0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nname = Symbol('name')\nnull = Symbol('null')\npath_conjunction = (Eq(name, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 144,
          "throwingLine": 145,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.ThrowsUoe.christenPoodle(java.lang.String)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 150,
          "throwingLine": 151,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.ThrowsSomethingElse.christenPoodle(java.lang.String)",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 156,
          "throwingLine": 157,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassObject.doThrow(java.lang.Object)",
          "exception": "throw new FooException();",
          "pathCojunction": "(arg == null)",
          "symbolicPathConjunction": "(arg == null)",
          "backwardsPathConjunction": "(arg == null)",
          "simplifiedPathConjunction": "arg == null",
          "z3Inputs": "[arg0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narg0_isNull = Bool('arg0_isNull')\n\nconstraints = [\n  arg0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narg = Symbol('arg')\nnull = Symbol('null')\npath_conjunction = (Eq(arg, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 386,
          "throwingLine": 388,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassObject.twoMixedArgsThrows(java.lang.String, java.lang.Integer)",
          "exception": "throw new FooException()",
          "pathCojunction": "(!(s == null)) && (i == null)",
          "symbolicPathConjunction": "(checkNotNull(s)) && (doThrow(i))",
          "backwardsPathConjunction": "(!(s == null)) && (i == null)",
          "simplifiedPathConjunction": "i == null && null != s",
          "z3Inputs": "[i0_isNull = True, s0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\ni0_isNull = Bool('i0_isNull')\n\nconstraints = [\n  And(Not(s0_isNull), i0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\ni = Symbol('i', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(s, null)))) & (Eq(i, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 400,
          "throwingLine": 401,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassObject.twoMixedArgsThrows(java.lang.String, java.lang.Integer)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 400,
          "throwingLine": 401,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassObject.twoMixedArgsThrows(java.lang.Integer, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 404,
          "throwingLine": 405,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassObject.twoMixedArgsThrows(java.lang.Integer, java.lang.String)",
          "exception": "throw new FooException()",
          "pathCojunction": "(!(s == null)) && (i == null)",
          "symbolicPathConjunction": "(checkNotNull(s)) && (doThrow(i))",
          "backwardsPathConjunction": "(!(s == null)) && (i == null)",
          "simplifiedPathConjunction": "i == null && null != s",
          "z3Inputs": "[i0_isNull = True, s0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\ni0_isNull = Bool('i0_isNull')\n\nconstraints = [\n  And(Not(s0_isNull), i0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(s, null)))) & (Eq(i, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 404,
          "throwingLine": 405,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassObject.twoNullableArgsThrowsFirstArg(java.lang.String, java.lang.Integer)",
          "exception": "throw new FooException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(doThrow(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 410,
          "throwingLine": 411,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassObject.twoNullableArgsThrowsSecondArg(java.lang.String, java.lang.Integer)",
          "exception": "throw new FooException()",
          "pathCojunction": "(i == null)",
          "symbolicPathConjunction": "(doThrow(i))",
          "backwardsPathConjunction": "(i == null)",
          "simplifiedPathConjunction": "i == null",
          "z3Inputs": "[i0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ni0_isNull = Bool('i0_isNull')\n\nconstraints = [\n  i0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\nnull = Symbol('null')\npath_conjunction = (Eq(i, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 414,
          "throwingLine": 415,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassObject.staticOneNullableArgThrows(java.lang.String)",
          "exception": "throw new FooException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(doThrow(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 419,
          "throwingLine": 420,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.FailOneArgThrowsWrongType.oneArg(java.lang.String)",
          "exception": "throw new FooException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(doThrow(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 439,
          "throwingLine": 440,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassOneNullableArgThrowsNPE.oneNullableArg(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 449,
          "throwingLine": 450,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.FailTwoArgsFirstArgThrowsWrongType.twoArg(java.lang.String, java.lang.Integer)",
          "exception": "throw new FooException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(doThrow(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 470,
          "throwingLine": 471,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.FailTwoArgsSecondArgDoesntThrowNPE.twoArg(java.lang.String, java.lang.Integer)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 481,
          "throwingLine": 482,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.FailTwoArgsSecondArgThrowsWrongType.twoArg(java.lang.String, java.lang.Integer)",
          "exception": "throw new FooException()",
          "pathCojunction": "(!(s == null)) && (i == null)",
          "symbolicPathConjunction": "(checkNotNull(s)) && (doThrow(i))",
          "backwardsPathConjunction": "(!(s == null)) && (i == null)",
          "simplifiedPathConjunction": "i == null && null != s",
          "z3Inputs": "[i0_isNull = True, s0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\ni0_isNull = Bool('i0_isNull')\n\nconstraints = [\n  And(Not(s0_isNull), i0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\ni = Symbol('i', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(s, null)))) & (Eq(i, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 492,
          "throwingLine": 494,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.FailTwoArgsSecondArgThrowsWrongType.twoArg(java.lang.String, java.lang.Integer)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 492,
          "throwingLine": 493,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.FailTwoMixedArgsFirstArgThrowsWrongType.twoMixedArgs(java.lang.String, java.lang.Integer)",
          "exception": "throw new FooException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(doThrow(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 515,
          "throwingLine": 516,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassTwoMixedArgsNullableArgThrowsNPE.twoMixedArgs(java.lang.String, java.lang.Integer)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 525,
          "throwingLine": 526,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassTwoMixedArgSecondNullableArgThrowsOther.twoMixedArgs(java.lang.String, java.lang.Integer)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 537,
          "throwingLine": 538,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassTwoMixedArgSecondNullableArgThrowsOther.twoMixedArgs(java.lang.String, java.lang.Integer)",
          "exception": "throw new FooException()",
          "pathCojunction": "(!(s == null)) && (i == null)",
          "symbolicPathConjunction": "(checkNotNull(s)) && (doThrow(i))",
          "backwardsPathConjunction": "(!(s == null)) && (i == null)",
          "simplifiedPathConjunction": "i == null && null != s",
          "z3Inputs": "[i0_isNull = True, s0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\ni0_isNull = Bool('i0_isNull')\n\nconstraints = [\n  And(Not(s0_isNull), i0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\ni = Symbol('i', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(s, null)))) & (Eq(i, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 537,
          "throwingLine": 539,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.FailTwoMixedArgsSecondArgThrowsWrongType.twoMixedArgs(java.lang.Integer, java.lang.String)",
          "exception": "throw new FooException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(doThrow(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 560,
          "throwingLine": 561,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassTwoNullableArgsFirstThrowsNPE.twoNullableArgs(java.lang.String, java.lang.Integer)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 571,
          "throwingLine": 572,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassTwoNullableArgsFirstThrowsOther.twoNullableArgs(java.lang.String, java.lang.Integer)",
          "exception": "throw new FooException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(doThrow(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 582,
          "throwingLine": 583,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.PassTwoNullableArgsSecondThrowsOther.twoNullableArgs(java.lang.String, java.lang.Integer)",
          "exception": "throw new FooException()",
          "pathCojunction": "(i == null)",
          "symbolicPathConjunction": "(doThrow(i))",
          "backwardsPathConjunction": "(i == null)",
          "simplifiedPathConjunction": "i == null",
          "z3Inputs": "[i0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ni0 = Int('i0')\ni0_isNull = Bool('i0_isNull')\n\nconstraints = [\n  i0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\nnull = Symbol('null')\npath_conjunction = (Eq(i, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 604,
          "throwingLine": 605,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.CanCreateDefault.foo(com.google.common.testing.NullPointerTesterTest.HardToCreate, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(required == null)",
          "symbolicPathConjunction": "(checkNotNull(required))",
          "backwardsPathConjunction": "(required == null)",
          "simplifiedPathConjunction": "null == required",
          "z3Inputs": "[required0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrequired0 = String('required0')\nrequired0_isNull = Bool('required0_isNull')\n\nconstraints = [\n  required0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrequired = Symbol('required')\nnull = Symbol('null')\npath_conjunction = (Eq(required, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 713,
          "throwingLine": 714,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.CannotCreateDefault.foo(com.google.common.testing.NullPointerTesterTest.HardToCreate, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(ignored == null)) && (required == null)",
          "symbolicPathConjunction": "(checkNotNull(ignored)) && (checkNotNull(required))",
          "backwardsPathConjunction": "(!(ignored == null)) && (required == null)",
          "simplifiedPathConjunction": "null == required && ignored != null",
          "z3Inputs": "[ignored0_isNull = False, required0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrequired0 = String('required0')\nignored0_isNull = Bool('ignored0_isNull')\nrequired0_isNull = Bool('required0_isNull')\n\nconstraints = [\n  And(Not(ignored0_isNull), required0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nignored = Symbol('ignored')\nrequired = Symbol('required')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(ignored, null)))) & (Eq(required, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 724,
          "throwingLine": 726,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.CannotCreateDefault.foo(com.google.common.testing.NullPointerTesterTest.HardToCreate, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(ignored == null)",
          "symbolicPathConjunction": "(checkNotNull(ignored))",
          "backwardsPathConjunction": "(ignored == null)",
          "simplifiedPathConjunction": "ignored == null",
          "z3Inputs": "[ignored0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrequired0 = String('required0')\nignored0_isNull = Bool('ignored0_isNull')\n\nconstraints = [\n  ignored0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nignored = Symbol('ignored')\nnull = Symbol('null')\npath_conjunction = (Eq(ignored, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 724,
          "throwingLine": 725,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.StringFoo.doSomething(java.lang.String, java.lang.Integer)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(bar == null)",
          "symbolicPathConjunction": "(checkNotNull(bar))",
          "backwardsPathConjunction": "(bar == null)",
          "simplifiedPathConjunction": "bar == null",
          "z3Inputs": "[bar0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbar0 = String('bar0')\nbaz0 = Int('baz0')\nbar0_isNull = Bool('bar0_isNull')\n\nconstraints = [\n  bar0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbar = Symbol('bar')\nnull = Symbol('null')\npath_conjunction = (Eq(bar, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 793,
          "throwingLine": 794,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.NullPointerTesterTest.StringFoo.doSomething(java.lang.String, java.lang.Integer)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(bar == null)) && (baz == null)",
          "symbolicPathConjunction": "(checkNotNull(bar)) && (checkNotNull(baz))",
          "backwardsPathConjunction": "(!(bar == null)) && (baz == null)",
          "simplifiedPathConjunction": "baz == null && bar != null",
          "z3Inputs": "[bar0_isNull = False, baz0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbar0 = String('bar0')\nbaz0 = Int('baz0')\nbar0_isNull = Bool('bar0_isNull')\nbaz0_isNull = Bool('baz0_isNull')\n\nconstraints = [\n  And(Not(bar0_isNull), baz0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbar = Symbol('bar')\nbaz = Symbol('baz', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(bar, null)))) & (Eq(baz, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 793,
          "throwingLine": 795,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/cache/CacheBuilderSpec.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderSpec.RecordStatsParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"recordStats does not take values\"))",
          "pathCojunction": "(!(value == null))",
          "symbolicPathConjunction": "(checkArgument(value == null, \"recordStats does not take values\"))",
          "backwardsPathConjunction": "(!(value == null))",
          "simplifiedPathConjunction": "null != value",
          "z3Inputs": "[value0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  Not(value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (~((Eq(value, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 400,
          "throwingLine": 401,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/TreeMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(occurrences < 0)) && (!(occurrences == 0)) && (!(!(range.contains(element)))) && (!(root == null)) && (!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (!((long) elemCount + count <= Integer.MAX_VALUE))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(occurrences == 0)) && (!(checkArgument(range.contains(element)))) && (rootReference.get()) && (!(root == null)) && ((!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (checkArgument(resultCount <= Integer.MAX_VALUE)))",
          "backwardsPathConjunction": "(!(occurrences < 0)) && (!(occurrences == 0)) && (!(!(range.contains(element)))) && (!(value == null)) && (!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (!((long) elemCount + count <= Integer.MAX_VALUE))",
          "simplifiedPathConjunction": "range.contains(element) && comparator.compare(e, elem) == 0 && occurrences > 0 && Integer.MAX_VALUE < count + elemCount && null != value",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\nelemCount0 = Int('elemCount0')\ncount0 = Int('count0')\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0 == value0,\n  result0 == new int[1],\n  And(And(And(And(And(And(Not(occurrences0 < 0), Not(occurrences0 == 0)), Not(Not(range.contains(element0)))), Not(root0_isNull)), Not(comparator0.compare(e0, elem0) < 0)), Not(comparator0.compare(e0, elem0) > 0)), Not(elemCount0 + count0 <= 2147483647))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\noccurrences = Symbol('occurrences', integer=True)\nvalue = Symbol('value')\nelem = Symbol('elem')\nsuper = Symbol('super')\ne = Symbol('e')\nelemCount = Symbol('elemCount', integer=True)\ncount = Symbol('count', integer=True)\nrange_contains = Symbol('range_contains')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\nInteger_MAX_VALUE = Symbol('Integer_MAX_VALUE', integer=True)\npath_conjunction = (((((((~((StrictLessThan(occurrences, 0)))) & (~((Eq(occurrences, 0))))) & (~((~(range_contains))))) & (~((Eq(value, null))))) & (~((StrictLessThan(comparator_compare, 0))))) & (~((StrictGreaterThan(comparator_compare, 0))))) & (~((LessThan((elemCount + count), Integer_MAX_VALUE)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 248,
          "throwingLine": 263,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(occurrences < 0)) && (!(occurrences == 0)) && (!(range.contains(element)))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(occurrences == 0)) && (!(checkArgument(range.contains(element))))",
          "backwardsPathConjunction": "(!(occurrences < 0)) && (!(occurrences == 0)) && (!(range.contains(element)))",
          "simplifiedPathConjunction": "!range.contains(element) && occurrences > 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  And(And(Not(occurrences0 < 0), Not(occurrences0 == 0)), Not(range.contains(element0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\noccurrences = Symbol('occurrences', integer=True)\nrange_contains = Symbol('range_contains')\npath_conjunction = (((~((StrictLessThan(occurrences, 0)))) & (~((Eq(occurrences, 0))))) & (~(range_contains)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 248,
          "throwingLine": 253,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.add(E, int)",
          "exception": "throw new IllegalArgumentException(\"occurrences\" + \" cannot be negative but was: \" + occurrences)",
          "pathCojunction": "(occurrences < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(occurrences < 0)",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  occurrences0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = (StrictLessThan(occurrences, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 248,
          "throwingLine": 249,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new ConcurrentModificationException()",
          "pathCojunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(hasUpperBound)) && (!(!!false && !false)) && (root == null) && (count > 0) && (!(count < 0)) && (!(count == 0)) && (!(!(range.contains(element)))) && (value == null) && (value != value)",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!!false && !false)) && (rootReference.get()) && (root == null) && (count > 0) && (add(element, count))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(hasUpperBound)) && (!(!!false && !false)) && (value == null) && (count > 0) && (!(count < 0)) && (!(count == 0)) && (!(!(range.contains(element)))) && (value == null) && (value != value)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\nroot0_isNull = Bool('root0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  root0 == value0,\n  And(And(And(And(And(And(And(And(And(And(Not(count0 < 0), Not(hasLowerBound0)), Not(hasUpperBound0)), Not(And(Not(Not(False)), Not(False)))), root0_isNull), count0 > 0), Not(count0 < 0)), Not(count0 == 0)), Not(Not(range0.contains(element0)))), value0_isNull), value0 != value0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nrange = Symbol('range')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\nvalue = Symbol('value')\nrange_contains = Symbol('range_contains')\nnull = Symbol('null')\npath_conjunction = (((((((((((~((StrictLessThan(count, 0)))) & (~(hasLowerBound))) & (~(hasUpperBound))) & (~(((~((~(False)))) & (~(False)))))) & (Eq(value, null))) & (StrictGreaterThan(count, 0))) & (~((StrictLessThan(count, 0))))) & (~((Eq(count, 0))))) & (~((~(range_contains))))) & (Eq(value, null))) & (Ne(value, value)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 294,
          "throwingLine": 304,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (!(count == 0))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (!(checkArgument(count == 0)))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (!(count == 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\n\nconstraints = [\n  And(And(And(And(Not(count0 < 0), Not(Not(hasLowerBound0))), Not(hasUpperBound0)), Not(And(Not(comparator0.compare(element0, lowerEndpoint)) < 0 | comparator0.compare(element0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN, Not(False)))), Not(count0 == 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nsuper = Symbol('super')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\ncomparator_compare = Symbol('comparator_compare')\npath_conjunction = (((((~((StrictLessThan(count, 0)))) & (~((~(hasLowerBound))))) & (~(hasUpperBound))) & (~((((StrictLessThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN)))) & (~(False)))))) & (~((Eq(count, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 294,
          "throwingLine": 297,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new ConcurrentModificationException()",
          "pathCojunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(!hasUpperBound)) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(root == null)) && (!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (!(count == 0)) && (value != root)",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (rootReference.get()) && (!(root == null)) && ((!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (!(count == 0))) && (rootReference.checkAndSet(root, newRoot))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(!hasUpperBound)) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(value == null)) && (!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (!(count == 0)) && (value != value)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0 == value0,\n  result0 == new int[1],\n  newRoot0 == this,\n  And(And(And(And(And(And(And(And(Not(count0 < 0), Not(Not(hasLowerBound0))), Not(Not(hasUpperBound0))), Not(And(Not(Not(comparator0.compare(element0, lowerEndpoint))) < 0 | comparator0.compare(element0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN, Not(comparator0.compare(element0, upperEndpoint)) > 0 | comparator0.compare(element0, upperEndpoint) == 0 & upperBoundType0 == OPEN))), Not(root0_isNull)), Not(comparator0.compare(e0, elem0) < 0)), Not(comparator0.compare(e0, elem0) > 0)), Not(count0 == 0)), value0 != root0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nsuper = Symbol('super')\nupperBoundType = Symbol('upperBoundType')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\nvalue = Symbol('value')\nelem = Symbol('elem')\ne = Symbol('e')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\npath_conjunction = (((((((((~((StrictLessThan(count, 0)))) & (~((~(hasLowerBound))))) & (~((~(hasUpperBound))))) & (~((((StrictLessThan((~((~(comparator_compare)))), 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN)))) & ((StrictGreaterThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(upperBoundType, OPEN)))))))) & (~((Eq(value, null))))) & (~((StrictLessThan(comparator_compare, 0))))) & (~((StrictGreaterThan(comparator_compare, 0))))) & (~((Eq(count, 0))))) & (Ne(value, value)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 294,
          "throwingLine": 310,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(!hasUpperBound)) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(count == 0))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(checkArgument(count == 0)))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(!hasUpperBound)) && (!(!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(count == 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\n\nconstraints = [\n  And(And(And(And(Not(count0 < 0), Not(Not(hasLowerBound0))), Not(Not(hasUpperBound0))), Not(And(Not(comparator0.compare(element0, lowerEndpoint)) < 0 | comparator0.compare(element0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN, Not(comparator0.compare(element0, upperEndpoint)) > 0 | comparator0.compare(element0, upperEndpoint) == 0 & upperBoundType0 == OPEN))), Not(count0 == 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nsuper = Symbol('super')\nupperBoundType = Symbol('upperBoundType')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\ncomparator_compare = Symbol('comparator_compare')\npath_conjunction = (((((~((StrictLessThan(count, 0)))) & (~((~(hasLowerBound))))) & (~((~(hasUpperBound))))) & (~((((StrictLessThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN)))) & ((StrictGreaterThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(upperBoundType, OPEN)))))))) & (~((Eq(count, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 294,
          "throwingLine": 297,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (root == null) && (count > 0) && (!(count < 0)) && (!(count == 0)) && (!(range.contains(element)))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (rootReference.get()) && (root == null) && (count > 0) && (add(element, count))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (value == null) && (count > 0) && (!(count < 0)) && (!(count == 0)) && (!(range.contains(element)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0 == value0,\n  And(And(And(And(And(And(And(And(Not(count0 < 0), Not(Not(hasLowerBound0))), Not(hasUpperBound0)), Not(And(Not(Not(comparator0.compare(element0, lowerEndpoint))) < 0 | comparator0.compare(element0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN, Not(False)))), root0_isNull), count0 > 0), Not(count0 < 0)), Not(count0 == 0)), Not(range0.contains(element0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nrange = Symbol('range')\nsuper = Symbol('super')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\nvalue = Symbol('value')\ncomparator_compare = Symbol('comparator_compare')\nrange_contains = Symbol('range_contains')\nnull = Symbol('null')\npath_conjunction = (((((((((~((StrictLessThan(count, 0)))) & (~((~(hasLowerBound))))) & (~(hasUpperBound))) & (~((((StrictLessThan((~((~(comparator_compare)))), 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN)))) & (~(False)))))) & (Eq(value, null))) & (StrictGreaterThan(count, 0))) & (~((StrictLessThan(count, 0))))) & (~((Eq(count, 0))))) & (~(range_contains)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 294,
          "throwingLine": 304,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new ConcurrentModificationException()",
          "pathCojunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (root == null) && (count > 0) && (!(count < 0)) && (!(count == 0)) && (!(!(range.contains(element)))) && (value == null) && (value != value)",
          "symbolicPathConjunction": "(!(!(value < 0))) && (!(tooLow(t)) && (tooHigh(t))) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (rootReference.get()) && (root == null) && (count > 0) && (add(element, count))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (value == null) && (count > 0) && (!(count < 0)) && (!(count == 0)) && (!(!(range.contains(element)))) && (value == null) && (value != value)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\nroot0_isNull = Bool('root0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  root0 == value0,\n  And(And(And(And(And(And(And(And(And(And(Not(count0 < 0), Not(Not(hasLowerBound0))), Not(hasUpperBound0)), Not(And(Not(Not(comparator0.compare(element0, lowerEndpoint))) < 0 | comparator0.compare(element0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN, Not(False)))), root0_isNull), count0 > 0), Not(count0 < 0)), Not(count0 == 0)), Not(Not(range0.contains(element0)))), value0_isNull), value0 != value0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nrange = Symbol('range')\nsuper = Symbol('super')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\nvalue = Symbol('value')\ncomparator_compare = Symbol('comparator_compare')\nrange_contains = Symbol('range_contains')\nnull = Symbol('null')\npath_conjunction = (((((((((((~((StrictLessThan(count, 0)))) & (~((~(hasLowerBound))))) & (~(hasUpperBound))) & (~((((StrictLessThan((~((~(comparator_compare)))), 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN)))) & (~(False)))))) & (Eq(value, null))) & (StrictGreaterThan(count, 0))) & (~((StrictLessThan(count, 0))))) & (~((Eq(count, 0))))) & (~((~(range_contains))))) & (Eq(value, null))) & (Ne(value, value)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 294,
          "throwingLine": 304,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException(\"occurrences\" + \" cannot be negative but was: \" + count)",
          "pathCojunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(!hasUpperBound)) && (!(!!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (root == null) && (count > 0) && (count < 0)",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (rootReference.get()) && (root == null) && (count > 0) && (add(element, count))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(!hasUpperBound)) && (!(!!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (value == null) && (count > 0) && (count < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0 == value0,\n  And(And(And(And(And(And(Not(count0 < 0), Not(hasLowerBound0)), Not(Not(hasUpperBound0))), Not(And(Not(Not(False)), Not(comparator0.compare(element0, upperEndpoint)) > 0 | comparator0.compare(element0, upperEndpoint) == 0 & upperBoundType0 == OPEN))), root0_isNull), count0 > 0), count0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nsuper = Symbol('super')\nupperBoundType = Symbol('upperBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\nvalue = Symbol('value')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\npath_conjunction = (((((((~((StrictLessThan(count, 0)))) & (~(hasLowerBound))) & (~((~(hasUpperBound))))) & (~(((~((~(False)))) & ((StrictGreaterThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(upperBoundType, OPEN)))))))) & (Eq(value, null))) & (StrictGreaterThan(count, 0))) & (StrictLessThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 294,
          "throwingLine": 304,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException(\"count\" + \" cannot be negative but was: \" + count)",
          "pathCojunction": "(count < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(count < 0)",
          "simplifiedPathConjunction": "count < 0",
          "z3Inputs": "[count0 = -1]\n[count0 = -2]\n[count0 = -3]\n[count0 = -4]\n[count0 = -5]\n[count0 = -6]\n[count0 = -7]\n[count0 = -8]\n[count0 = -9]\n[count0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  count0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictLessThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 294,
          "throwingLine": 295,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new ConcurrentModificationException()",
          "pathCojunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (!(root == null)) && (!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (!(count == 0)) && (value != root)",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (rootReference.get()) && (!(root == null)) && ((!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (!(count == 0))) && (rootReference.checkAndSet(root, newRoot))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(!hasLowerBound)) && (!(hasUpperBound)) && (!(!!comparator.compare(element, lowerEndpoint) < 0 | (comparator.compare(element, lowerEndpoint) == 0 & lowerBoundType == OPEN) && !false)) && (!(value == null)) && (!(comparator.compare(e, elem) < 0)) && (!(comparator.compare(e, elem) > 0)) && (!(count == 0)) && (value != value)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0 == value0,\n  result0 == new int[1],\n  newRoot0 == this,\n  And(And(And(And(And(And(And(And(Not(count0 < 0), Not(Not(hasLowerBound0))), Not(hasUpperBound0)), Not(And(Not(Not(comparator0.compare(element0, lowerEndpoint))) < 0 | comparator0.compare(element0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN, Not(False)))), Not(root0_isNull)), Not(comparator0.compare(e0, elem0) < 0)), Not(comparator0.compare(e0, elem0) > 0)), Not(count0 == 0)), value0 != root0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nsuper = Symbol('super')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\nvalue = Symbol('value')\nelem = Symbol('elem')\ne = Symbol('e')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\npath_conjunction = (((((((((~((StrictLessThan(count, 0)))) & (~((~(hasLowerBound))))) & (~(hasUpperBound))) & (~((((StrictLessThan((~((~(comparator_compare)))), 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN)))) & (~(False)))))) & (~((Eq(value, null))))) & (~((StrictLessThan(comparator_compare, 0))))) & (~((StrictGreaterThan(comparator_compare, 0))))) & (~((Eq(count, 0))))) & (Ne(value, value)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 294,
          "throwingLine": 310,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(!hasUpperBound)) && (!(!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(count == 0))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(tooLow(t)) && (tooHigh(t))) && (!(!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(checkArgument(count == 0)))",
          "backwardsPathConjunction": "(!(count < 0)) && (!(hasLowerBound)) && (!(!hasUpperBound)) && (!(!false && !comparator.compare(element, upperEndpoint) > 0 | (comparator.compare(element, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(count == 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nhasLowerBound0 = Bool('hasLowerBound0')\nhasUpperBound0 = Bool('hasUpperBound0')\n\nconstraints = [\n  And(And(And(And(Not(count0 < 0), Not(hasLowerBound0)), Not(Not(hasUpperBound0))), Not(And(Not(False), Not(comparator0.compare(element0, upperEndpoint)) > 0 | comparator0.compare(element0, upperEndpoint) == 0 & upperBoundType0 == OPEN))), Not(count0 == 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nsuper = Symbol('super')\nupperBoundType = Symbol('upperBoundType')\nhasLowerBound = Symbol('hasLowerBound')\nhasUpperBound = Symbol('hasUpperBound')\ncomparator_compare = Symbol('comparator_compare')\npath_conjunction = (((((~((StrictLessThan(count, 0)))) & (~(hasLowerBound))) & (~((~(hasUpperBound))))) & (~(((~(False)) & ((StrictGreaterThan((~(comparator_compare)), 0)) | ((Eq(comparator_compare, 0)) & (Eq(upperBoundType, OPEN)))))))) & (~((Eq(count, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 294,
          "throwingLine": 297,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException(\"oldCount\" + \" cannot be negative but was: \" + oldCount)",
          "pathCojunction": "(!(newCount < 0)) && (oldCount < 0)",
          "symbolicPathConjunction": "(!(value < 0)) && (value < 0)",
          "backwardsPathConjunction": "(!(newCount < 0)) && (oldCount < 0)",
          "simplifiedPathConjunction": "newCount >= 0 && oldCount < 0",
          "z3Inputs": "[oldCount0 = -1, newCount0 = 0]\n[newCount0 = 1, oldCount0 = -1]\n[newCount0 = 1, oldCount0 = -2]\n[newCount0 = 1, oldCount0 = -3]\n[newCount0 = 2, oldCount0 = -3]\n[newCount0 = 3, oldCount0 = -3]\n[newCount0 = 4, oldCount0 = -4]\n[newCount0 = 4, oldCount0 = -3]\n[newCount0 = 3, oldCount0 = -2]\n[newCount0 = 3, oldCount0 = -4]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  And(Not(newCount0 < 0), oldCount0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noldCount = Symbol('oldCount', integer=True)\nnewCount = Symbol('newCount', integer=True)\npath_conjunction = ((~((StrictLessThan(newCount, 0)))) & (StrictLessThan(oldCount, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 315,
          "throwingLine": 317,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException(\"newCount\" + \" cannot be negative but was: \" + newCount)",
          "pathCojunction": "(newCount < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(newCount < 0)",
          "simplifiedPathConjunction": "newCount < 0",
          "z3Inputs": "[newCount0 = -1]\n[newCount0 = -2]\n[newCount0 = -3]\n[newCount0 = -4]\n[newCount0 = -5]\n[newCount0 = -6]\n[newCount0 = -7]\n[newCount0 = -8]\n[newCount0 = -9]\n[newCount0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  newCount0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnewCount = Symbol('newCount', integer=True)\npath_conjunction = (StrictLessThan(newCount, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 315,
          "throwingLine": 316,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(newCount < 0)) && (!(oldCount < 0)) && (!(range.contains(element)))",
          "symbolicPathConjunction": "(!(value < 0)) && (!(value < 0)) && (checkArgument(range.contains(element)))",
          "backwardsPathConjunction": "(!(newCount < 0)) && (!(oldCount < 0)) && (!(range.contains(element)))",
          "simplifiedPathConjunction": "newCount >= 0 && oldCount >= 0 && !range.contains(element)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  And(And(Not(newCount0 < 0), Not(oldCount0 < 0)), Not(range.contains(element0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\noldCount = Symbol('oldCount', integer=True)\nnewCount = Symbol('newCount', integer=True)\nrange_contains = Symbol('range_contains')\npath_conjunction = (((~((StrictLessThan(newCount, 0)))) & (~((StrictLessThan(oldCount, 0))))) & (~(range_contains)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 315,
          "throwingLine": 318,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.Anonymous-bc844e19-11fc-4466-9a34-1a19db81597d.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(current == null) && (!(false))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(current == null) && (!(false))",
          "z3Inputs": "[current0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncurrent0_isNull = Bool('current0_isNull')\n\nconstraints = [\n  And(current0_isNull, Not(False))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncurrent = Symbol('current')\nnull = Symbol('null')\npath_conjunction = ((Eq(current, null)) & (~(False)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 424,
          "throwingLine": 426,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.Anonymous-bc844e19-11fc-4466-9a34-1a19db81597d.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(current == null)) && (!(!hasUpperBound)) && (!(comparator.compare(t, upperEndpoint) > 0 | (comparator.compare(t, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(true))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(current == null)) && (!(!hasUpperBound)) && (!(comparator.compare(t, upperEndpoint) > 0 | (comparator.compare(t, upperEndpoint) == 0 & upperBoundType == OPEN))) && (!(true))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhasUpperBound0 = Bool('hasUpperBound0')\ncurrent0_isNull = Bool('current0_isNull')\n\nconstraints = [\n  And(And(And(Not(current0_isNull), Not(Not(hasUpperBound0))), Not(comparator0.compare(t0, upperEndpoint) > 0 | comparator0.compare(t0, upperEndpoint) == 0 & upperBoundType0 == OPEN)), Not(True))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\ncurrent = Symbol('current')\nupperBoundType = Symbol('upperBoundType')\nt = Symbol('t')\nhasUpperBound = Symbol('hasUpperBound')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(current, null)))) & (~((~(hasUpperBound))))) & (~(((StrictGreaterThan(comparator_compare, 0)) | ((Eq(comparator_compare, 0)) & (Eq(upperBoundType, OPEN))))))) & (~(True)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 424,
          "throwingLine": 426,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.Anonymous-fe361cca-d265-4182-802f-e62eb99668eb.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(current == null) && (!(false))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(current == null) && (!(false))",
          "z3Inputs": "[current0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncurrent0_isNull = Bool('current0_isNull')\n\nconstraints = [\n  And(current0_isNull, Not(False))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncurrent = Symbol('current')\nnull = Symbol('null')\npath_conjunction = ((Eq(current, null)) & (~(False)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 466,
          "throwingLine": 468,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.Anonymous-fe361cca-d265-4182-802f-e62eb99668eb.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(current == null)) && (!(!hasLowerBound)) && (!(comparator.compare(t, lowerEndpoint) < 0 | (comparator.compare(t, lowerEndpoint) == 0 & lowerBoundType == OPEN))) && (!(true))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(current == null)) && (!(!hasLowerBound)) && (!(comparator.compare(t, lowerEndpoint) < 0 | (comparator.compare(t, lowerEndpoint) == 0 & lowerBoundType == OPEN))) && (!(true))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhasLowerBound0 = Bool('hasLowerBound0')\ncurrent0_isNull = Bool('current0_isNull')\n\nconstraints = [\n  And(And(And(Not(current0_isNull), Not(Not(hasLowerBound0))), Not(comparator0.compare(t0, lowerEndpoint) < 0 | comparator0.compare(t0, lowerEndpoint) == 0 & lowerBoundType0 == OPEN)), Not(True))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\ncurrent = Symbol('current')\nt = Symbol('t')\nlowerBoundType = Symbol('lowerBoundType')\nhasLowerBound = Symbol('hasLowerBound')\ncomparator_compare = Symbol('comparator_compare')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(current, null)))) & (~((~(hasLowerBound))))) & (~(((StrictLessThan(comparator_compare, 0)) | ((Eq(comparator_compare, 0)) & (Eq(lowerBoundType, OPEN))))))) & (~(True)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 466,
          "throwingLine": 468,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultiset.Reference.checkAndSet(T, T)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(value != expected)",
          "symbolicPathConjunction": "(value != expected)",
          "backwardsPathConjunction": "(value != expected)",
          "simplifiedPathConjunction": "expected != value",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  value0 != expected0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpected = Symbol('expected')\nvalue = Symbol('value')\npath_conjunction = (Ne(value, expected))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 517,
          "throwingLine": 519,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/io/CloserTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.CloserTest.TestCloseable.close()",
          "exception": "throw IOException.class.cast(throwOnClose)",
          "pathCojunction": "(throwOnClose != null) && (throwOnClose != null && IOException.class.isInstance(throwOnClose))",
          "symbolicPathConjunction": "(throwOnClose != null) && (Throwables.propagateIfPossible(throwOnClose, IOException.class))",
          "backwardsPathConjunction": "(throwOnClose != null) && (throwOnClose != null && IOException.class.isInstance(throwOnClose))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nclosed0 = Bool('closed0')\nthrowOnClose0_isNull = Bool('throwOnClose0_isNull')\n\nconstraints = [\n  closed0 == True,\n  And(Not(throwOnClose0_isNull), And(Not(throwOnClose0_isNull), IOException.class.isInstance(throwOnClose0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowOnClose = Symbol('throwOnClose')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((Ne(throwOnClose, null)) & ((Ne(throwOnClose, null)) & IOException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 463,
          "throwingLine": 466,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CloserTest.TestCloseable.close()",
          "exception": "throw RuntimeException.class.cast(throwOnClose)",
          "pathCojunction": "(throwOnClose != null) && (!(throwOnClose != null && IOException.class.isInstance(throwOnClose))) && (!(throwOnClose != null && Error.class.isInstance(throwOnClose))) && (throwOnClose != null && RuntimeException.class.isInstance(throwOnClose))",
          "symbolicPathConjunction": "(throwOnClose != null) && (Throwables.propagateIfPossible(throwOnClose, IOException.class))",
          "backwardsPathConjunction": "(throwOnClose != null) && (!(throwOnClose != null && IOException.class.isInstance(throwOnClose))) && (!(throwOnClose != null && Error.class.isInstance(throwOnClose))) && (throwOnClose != null && RuntimeException.class.isInstance(throwOnClose))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nclosed0 = Bool('closed0')\nthrowOnClose0_isNull = Bool('throwOnClose0_isNull')\n\nconstraints = [\n  closed0 == True,\n  And(And(And(Not(throwOnClose0_isNull), Not(And(Not(throwOnClose0_isNull), IOException.class.isInstance(throwOnClose0)))), Not(And(Not(throwOnClose0_isNull), Error.class.isInstance(throwOnClose0)))), And(Not(throwOnClose0_isNull), RuntimeException.class.isInstance(throwOnClose0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowOnClose = Symbol('throwOnClose')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((((Ne(throwOnClose, null)) & (~(((Ne(throwOnClose, null)) & IOException.class_isInstance)))) & (~(((Ne(throwOnClose, null)) & Error.class_isInstance)))) & ((Ne(throwOnClose, null)) & RuntimeException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 463,
          "throwingLine": 466,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CloserTest.TestCloseable.close()",
          "exception": "throw Error.class.cast(throwOnClose)",
          "pathCojunction": "(throwOnClose != null) && (!(throwOnClose != null && IOException.class.isInstance(throwOnClose))) && (throwOnClose != null && Error.class.isInstance(throwOnClose))",
          "symbolicPathConjunction": "(throwOnClose != null) && (Throwables.propagateIfPossible(throwOnClose, IOException.class))",
          "backwardsPathConjunction": "(throwOnClose != null) && (!(throwOnClose != null && IOException.class.isInstance(throwOnClose))) && (throwOnClose != null && Error.class.isInstance(throwOnClose))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nclosed0 = Bool('closed0')\nthrowOnClose0_isNull = Bool('throwOnClose0_isNull')\n\nconstraints = [\n  closed0 == True,\n  And(And(Not(throwOnClose0_isNull), Not(And(Not(throwOnClose0_isNull), IOException.class.isInstance(throwOnClose0)))), And(Not(throwOnClose0_isNull), Error.class.isInstance(throwOnClose0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowOnClose = Symbol('throwOnClose')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = (((Ne(throwOnClose, null)) & (~(((Ne(throwOnClose, null)) & IOException.class_isInstance)))) & ((Ne(throwOnClose, null)) & Error.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 463,
          "throwingLine": 466,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CloserTest.TestCloseable.close()",
          "exception": "throw new AssertionError(throwOnClose);",
          "pathCojunction": "(throwOnClose != null) && (!(throwOnClose != null && IOException.class.isInstance(throwOnClose))) && (!(throwOnClose != null && Error.class.isInstance(throwOnClose))) && (!(throwOnClose != null && RuntimeException.class.isInstance(throwOnClose)))",
          "symbolicPathConjunction": "(throwOnClose != null) && (Throwables.propagateIfPossible(throwOnClose, IOException.class))",
          "backwardsPathConjunction": "(throwOnClose != null) && (!(throwOnClose != null && IOException.class.isInstance(throwOnClose))) && (!(throwOnClose != null && Error.class.isInstance(throwOnClose))) && (!(throwOnClose != null && RuntimeException.class.isInstance(throwOnClose)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nclosed0 = Bool('closed0')\nthrowOnClose0_isNull = Bool('throwOnClose0_isNull')\n\nconstraints = [\n  closed0 == True,\n  And(And(And(Not(throwOnClose0_isNull), Not(And(Not(throwOnClose0_isNull), IOException.class.isInstance(throwOnClose0)))), Not(And(Not(throwOnClose0_isNull), Error.class.isInstance(throwOnClose0)))), Not(And(Not(throwOnClose0_isNull), RuntimeException.class.isInstance(throwOnClose0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowOnClose = Symbol('throwOnClose')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((((Ne(throwOnClose, null)) & (~(((Ne(throwOnClose, null)) & IOException.class_isInstance)))) & (~(((Ne(throwOnClose, null)) & Error.class_isInstance)))) & (~(((Ne(throwOnClose, null)) & RuntimeException.class_isInstance))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 463,
          "throwingLine": 467,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.unmodifiableIterable(java.lang.Iterable<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 63,
          "throwingLine": 64,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.unmodifiableIterable(com.google.common.collect.ImmutableCollection<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 78,
          "throwingLine": 79,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (iterable.iterator().hasNext())",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator()))",
          "backwardsPathConjunction": "(!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (iterable.iterator().hasNext())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(Not(Not((iterable0.iterator()).hasNext())), Not(And(0 < 4, iterable0.iterator().hasNext()))), iterable0.iterator().hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nBUG_IN_SIMPLIFICATION\niterable_iterator = Symbol('iterable_iterator')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\npath_conjunction = (((~((~((iterable.iterator())_hasNext)))) & (~(((StrictLessThan(0, 4)) & iterable_iterator_hasNext)))) & iterable_iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 281,
          "throwingLine": 282,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (iterable.iterator().hasNext())",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator()))",
          "backwardsPathConjunction": "(!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (iterable.iterator().hasNext())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(Not(Not((iterable0.iterator()).hasNext())), And(0 < 4, iterable0.iterator().hasNext())), iterable0.iterator().hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nBUG_IN_SIMPLIFICATION\niterable_iterator = Symbol('iterable_iterator')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\npath_conjunction = (((~((~((iterable.iterator())_hasNext)))) & ((StrictLessThan(0, 4)) & iterable_iterator_hasNext)) & iterable_iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 281,
          "throwingLine": 282,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (!(iterable.iterator().hasNext()))",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator()))",
          "backwardsPathConjunction": "(!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (!(iterable.iterator().hasNext()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(Not(Not((iterable0.iterator()).hasNext())), Not(And(0 < 4, iterable0.iterator().hasNext()))), Not(iterable0.iterator().hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nBUG_IN_SIMPLIFICATION\niterable_iterator = Symbol('iterable_iterator')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\npath_conjunction = (((~((~((iterable.iterator())_hasNext)))) & (~(((StrictLessThan(0, 4)) & iterable_iterator_hasNext)))) & (~(iterable_iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 281,
          "throwingLine": 282,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (!(iterable.iterator().hasNext()))",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator()))",
          "backwardsPathConjunction": "(!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (!(iterable.iterator().hasNext()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(Not(Not((iterable0.iterator()).hasNext())), And(0 < 4, iterable0.iterator().hasNext())), Not(iterable0.iterator().hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nBUG_IN_SIMPLIFICATION\niterable_iterator = Symbol('iterable_iterator')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\npath_conjunction = (((~((~((iterable.iterator())_hasNext)))) & ((StrictLessThan(0, 4)) & iterable_iterator_hasNext)) & (~(iterable_iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 281,
          "throwingLine": 282,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (!(iterable.iterator().hasNext()))",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator(), defaultValue))",
          "backwardsPathConjunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (!(iterable.iterator().hasNext()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(And(iterable0.iterator().hasNext(), Not(Not((iterable0.iterator()).hasNext()))), Not(And(0 < 4, iterable0.iterator().hasNext()))), Not(iterable0.iterator().hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\niterable_iterator = Symbol('iterable_iterator')\nBUG_IN_SIMPLIFICATION\npath_conjunction = (((iterable_iterator_hasNext & (~((~((iterable.iterator())_hasNext))))) & (~(((StrictLessThan(0, 4)) & iterable_iterator_hasNext)))) & (~(iterable_iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 293,
          "throwingLine": 294,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (!(iterable.iterator().hasNext()))",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator(), defaultValue))",
          "backwardsPathConjunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (!(iterable.iterator().hasNext()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(And(iterable0.iterator().hasNext(), Not(Not((iterable0.iterator()).hasNext()))), And(0 < 4, iterable0.iterator().hasNext())), Not(iterable0.iterator().hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\niterable_iterator = Symbol('iterable_iterator')\nBUG_IN_SIMPLIFICATION\npath_conjunction = (((iterable_iterator_hasNext & (~((~((iterable.iterator())_hasNext))))) & ((StrictLessThan(0, 4)) & iterable_iterator_hasNext)) & (~(iterable_iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 293,
          "throwingLine": 294,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (iterable.iterator().hasNext())",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator(), defaultValue))",
          "backwardsPathConjunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (iterable.iterator().hasNext())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(And(iterable0.iterator().hasNext(), Not(Not((iterable0.iterator()).hasNext()))), And(0 < 4, iterable0.iterator().hasNext())), iterable0.iterator().hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\niterable_iterator = Symbol('iterable_iterator')\nBUG_IN_SIMPLIFICATION\npath_conjunction = (((iterable_iterator_hasNext & (~((~((iterable.iterator())_hasNext))))) & ((StrictLessThan(0, 4)) & iterable_iterator_hasNext)) & iterable_iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 293,
          "throwingLine": 294,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (iterable.iterator().hasNext())",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator(), defaultValue))",
          "backwardsPathConjunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (iterable.iterator().hasNext())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(And(iterable0.iterator().hasNext(), Not(Not((iterable0.iterator()).hasNext()))), Not(And(0 < 4, iterable0.iterator().hasNext()))), iterable0.iterator().hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\niterable_iterator = Symbol('iterable_iterator')\nBUG_IN_SIMPLIFICATION\npath_conjunction = (((iterable_iterator_hasNext & (~((~((iterable.iterator())_hasNext))))) & (~(((StrictLessThan(0, 4)) & iterable_iterator_hasNext)))) & iterable_iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 293,
          "throwingLine": 294,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.cycle(java.lang.Iterable<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 371,
          "throwingLine": 372,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.Anonymous-36cb90a2-4eb1-48e4-92df-4ae30860cde2.iterator()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(Iterators.cycle(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 375,
          "throwingLine": 376,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(inputs == null)",
          "symbolicPathConjunction": "(checkNotNull(inputs))",
          "backwardsPathConjunction": "(inputs == null)",
          "z3Inputs": "[inputs0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninputs0_isNull = Bool('inputs0_isNull')\n\nconstraints = [\n  inputs0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(inputs, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 476,
          "throwingLine": 477,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.partition(java.lang.Iterable<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 520,
          "throwingLine": 521,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.partition(java.lang.Iterable<T>, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(iterable == null)) && (!(size > 0))",
          "symbolicPathConjunction": "(checkNotNull(iterable)) && (checkArgument(size > 0))",
          "backwardsPathConjunction": "(!(iterable == null)) && (!(size > 0))",
          "simplifiedPathConjunction": "size <= 0 && iterable != null",
          "z3Inputs": "[size0 = 0, iterable0_isNull = False]\n[size0 = -1, iterable0_isNull = False]\n[size0 = -2, iterable0_isNull = False]\n[size0 = -3, iterable0_isNull = False]\n[size0 = -4, iterable0_isNull = False]\n[size0 = -5, iterable0_isNull = False]\n[size0 = -6, iterable0_isNull = False]\n[size0 = -7, iterable0_isNull = False]\n[size0 = -8, iterable0_isNull = False]\n[size0 = -9, iterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  And(Not(iterable0_isNull), Not(size0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nsize = Symbol('size', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterable, null)))) & (~((StrictGreaterThan(size, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 520,
          "throwingLine": 522,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.paddedPartition(java.lang.Iterable<T>, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(iterable == null)) && (!(size > 0))",
          "symbolicPathConjunction": "(checkNotNull(iterable)) && (checkArgument(size > 0))",
          "backwardsPathConjunction": "(!(iterable == null)) && (!(size > 0))",
          "simplifiedPathConjunction": "size <= 0 && iterable != null",
          "z3Inputs": "[size0 = 0, iterable0_isNull = False]\n[size0 = -1, iterable0_isNull = False]\n[size0 = -2, iterable0_isNull = False]\n[size0 = -3, iterable0_isNull = False]\n[size0 = -4, iterable0_isNull = False]\n[size0 = -5, iterable0_isNull = False]\n[size0 = -6, iterable0_isNull = False]\n[size0 = -7, iterable0_isNull = False]\n[size0 = -8, iterable0_isNull = False]\n[size0 = -9, iterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  And(Not(iterable0_isNull), Not(size0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nsize = Symbol('size', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterable, null)))) & (~((StrictGreaterThan(size, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 548,
          "throwingLine": 550,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.paddedPartition(java.lang.Iterable<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 548,
          "throwingLine": 549,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.filter(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unfiltered == null)",
          "symbolicPathConjunction": "(checkNotNull(unfiltered))",
          "backwardsPathConjunction": "(unfiltered == null)",
          "simplifiedPathConjunction": "null == unfiltered",
          "z3Inputs": "[unfiltered0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\n\nconstraints = [\n  unfiltered0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunfiltered = Symbol('unfiltered')\nnull = Symbol('null')\npath_conjunction = (Eq(unfiltered, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 565,
          "throwingLine": 566,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.filter(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(unfiltered == null)) && (predicate == null)",
          "symbolicPathConjunction": "(checkNotNull(unfiltered)) && (checkNotNull(predicate))",
          "backwardsPathConjunction": "(!(unfiltered == null)) && (predicate == null)",
          "z3Inputs": "[predicate0_isNull = True, unfiltered0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  And(Not(unfiltered0_isNull), predicate0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunfiltered = Symbol('unfiltered')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(unfiltered, null)))) & (Eq(predicate, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 565,
          "throwingLine": 567,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.any(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException(String.valueOf(\"predicate\"))",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(Iterators.any(iterable.iterator(), predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 579,
          "throwingLine": 580,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.indexOf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException(String.valueOf(\"predicate\"))",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(Iterators.indexOf(iterable.iterator(), predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 643,
          "throwingLine": 644,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.transform(java.lang.Iterable<F>, com.google.common.base.Function<? super F, ? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromIterable == null)",
          "symbolicPathConjunction": "(checkNotNull(fromIterable))",
          "backwardsPathConjunction": "(fromIterable == null)",
          "simplifiedPathConjunction": "fromIterable == null",
          "z3Inputs": "[fromIterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIterable0_isNull = Bool('fromIterable0_isNull')\n\nconstraints = [\n  fromIterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIterable = Symbol('fromIterable')\nnull = Symbol('null')\npath_conjunction = (Eq(fromIterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 661,
          "throwingLine": 662,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.transform(java.lang.Iterable<F>, com.google.common.base.Function<? super F, ? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromIterable == null)) && (function == null)",
          "symbolicPathConjunction": "(checkNotNull(fromIterable)) && (checkNotNull(function))",
          "backwardsPathConjunction": "(!(fromIterable == null)) && (function == null)",
          "z3Inputs": "[function0_isNull = True, fromIterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIterable0_isNull = Bool('fromIterable0_isNull')\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  And(Not(fromIterable0_isNull), function0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIterable = Symbol('fromIterable')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(fromIterable, null)))) & (Eq(function, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 661,
          "throwingLine": 663,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.Anonymous-f8ec8a13-96d8-41fe-92fe-4e9030d1ad2a.iterator()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(Iterators.transform(fromIterable.iterator(), function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 666,
          "throwingLine": 667,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.get(java.lang.Iterable<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 680,
          "throwingLine": 681,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.get(java.lang.Iterable<? extends T>, int, T)",
          "exception": "throw new IndexOutOfBoundsException(\"position (\" + position + \") must not be negative\");",
          "pathCojunction": "(!(iterable == null)) && (position < 0)",
          "symbolicPathConjunction": "(checkNotNull(iterable)) && (position < 0)",
          "backwardsPathConjunction": "(!(iterable == null)) && (position < 0)",
          "z3Inputs": "[position0 = -1, iterable0_isNull = False]\n[position0 = -2, iterable0_isNull = False]\n[position0 = -3, iterable0_isNull = False]\n[position0 = -4, iterable0_isNull = False]\n[position0 = -5, iterable0_isNull = False]\n[position0 = -6, iterable0_isNull = False]\n[position0 = -7, iterable0_isNull = False]\n[position0 = -8, iterable0_isNull = False]\n[position0 = -9, iterable0_isNull = False]\n[position0 = -10, iterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  And(Not(iterable0_isNull), position0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nposition = Symbol('position', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterable, null)))) & (StrictLessThan(position, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 701,
          "throwingLine": 703,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.get(java.lang.Iterable<? extends T>, int, T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 701,
          "throwingLine": 702,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.skip(java.lang.Iterable<T>, int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"number to skip cannot be negative\"))",
          "pathCojunction": "(!(iterable == null)) && (!(numberToSkip >= 0))",
          "symbolicPathConjunction": "(checkNotNull(iterable)) && (checkArgument(numberToSkip >= 0, \"number to skip cannot be negative\"))",
          "backwardsPathConjunction": "(!(iterable == null)) && (!(numberToSkip >= 0))",
          "simplifiedPathConjunction": "numberToSkip < 0 && iterable != null",
          "z3Inputs": "[numberToSkip0 = -1, iterable0_isNull = False]\n[numberToSkip0 = -2, iterable0_isNull = False]\n[numberToSkip0 = -3, iterable0_isNull = False]\n[numberToSkip0 = -4, iterable0_isNull = False]\n[numberToSkip0 = -5, iterable0_isNull = False]\n[numberToSkip0 = -6, iterable0_isNull = False]\n[numberToSkip0 = -7, iterable0_isNull = False]\n[numberToSkip0 = -8, iterable0_isNull = False]\n[numberToSkip0 = -9, iterable0_isNull = False]\n[numberToSkip0 = -10, iterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumberToSkip0 = Int('numberToSkip0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  And(Not(iterable0_isNull), Not(numberToSkip0 >= 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnumberToSkip = Symbol('numberToSkip', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterable, null)))) & (~((GreaterThan(numberToSkip, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 797,
          "throwingLine": 799,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.skip(java.lang.Iterable<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumberToSkip0 = Int('numberToSkip0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 797,
          "throwingLine": 798,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.Anonymous-edf2e402-8c55-4f8b-8638-e7717a2d4668.iterator()",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(iterator == null)) && (!(!(numberToSkip >= 0))) && (i < numberToSkip && iterator.hasNext()) && (!(!atStart))",
          "symbolicPathConjunction": "(Iterators.advance(iterator, numberToSkip)) && (checkState(canRemove, \"no calls to next() since the last call to remove()\"))",
          "backwardsPathConjunction": "(!(iterable.iterator() == null)) && (!(!(numberToSkip >= 0))) && (i < numberToSkip && iterable.iterator().hasNext()) && (!(!atStart))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\natStart0 = Bool('atStart0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0 == iterable0.iterator(),\n  And(And(And(Not(iterator0_isNull), Not(Not(numberToSkip >= 0))), And(i0 < numberToSkip, iterator0.hasNext())), Not(Not(atStart0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\ni = Symbol('i', integer=True)\natStart = Symbol('atStart')\niterable_iterator = Symbol('iterable_iterator')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(iterable_iterator, null)))) & (~((~((GreaterThan(numberToSkip, 0))))))) & ((StrictLessThan(i, numberToSkip)) & iterable_iterator_hasNext)) & (~((~(atStart)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 815,
          "throwingLine": 825,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.Anonymous-edf2e402-8c55-4f8b-8638-e7717a2d4668.iterator()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(Iterators.advance(iterator, numberToSkip))",
          "backwardsPathConjunction": "(iterable.iterator() == null)",
          "simplifiedPathConjunction": "iterable.iterator() == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0 == iterable0.iterator(),\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\niterable_iterator = Symbol('iterable_iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable_iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 815,
          "throwingLine": 818,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.Anonymous-edf2e402-8c55-4f8b-8638-e7717a2d4668.iterator()",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(iterator == null)) && (!(!(numberToSkip >= 0))) && (!(i < numberToSkip && iterator.hasNext())) && (!(!atStart))",
          "symbolicPathConjunction": "(Iterators.advance(iterator, numberToSkip)) && (checkState(canRemove, \"no calls to next() since the last call to remove()\"))",
          "backwardsPathConjunction": "(!(iterable.iterator() == null)) && (!(!(numberToSkip >= 0))) && (!(i < numberToSkip && iterable.iterator().hasNext())) && (!(!atStart))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\natStart0 = Bool('atStart0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0 == iterable0.iterator(),\n  And(And(And(Not(iterator0_isNull), Not(Not(numberToSkip >= 0))), Not(And(i0 < numberToSkip, iterator0.hasNext()))), Not(Not(atStart0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\ni = Symbol('i', integer=True)\natStart = Symbol('atStart')\niterable_iterator = Symbol('iterable_iterator')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(iterable_iterator, null)))) & (~((~((GreaterThan(numberToSkip, 0))))))) & (~(((StrictLessThan(i, numberToSkip)) & iterable_iterator_hasNext)))) & (~((~(atStart)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 815,
          "throwingLine": 825,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.limit(java.lang.Iterable<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlimitSize0 = Int('limitSize0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 862,
          "throwingLine": 863,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.limit(java.lang.Iterable<T>, int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"limit is negative\"))",
          "pathCojunction": "(!(iterable == null)) && (!(limitSize >= 0))",
          "symbolicPathConjunction": "(checkNotNull(iterable)) && (checkArgument(limitSize >= 0, \"limit is negative\"))",
          "backwardsPathConjunction": "(!(iterable == null)) && (!(limitSize >= 0))",
          "simplifiedPathConjunction": "limitSize < 0 && iterable != null",
          "z3Inputs": "[limitSize0 = -1, iterable0_isNull = False]\n[limitSize0 = -2, iterable0_isNull = False]\n[limitSize0 = -3, iterable0_isNull = False]\n[limitSize0 = -4, iterable0_isNull = False]\n[limitSize0 = -5, iterable0_isNull = False]\n[limitSize0 = -6, iterable0_isNull = False]\n[limitSize0 = -7, iterable0_isNull = False]\n[limitSize0 = -8, iterable0_isNull = False]\n[limitSize0 = -9, iterable0_isNull = False]\n[limitSize0 = -10, iterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlimitSize0 = Int('limitSize0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  And(Not(iterable0_isNull), Not(limitSize0 >= 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nlimitSize = Symbol('limitSize', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterable, null)))) & (~((GreaterThan(limitSize, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 862,
          "throwingLine": 864,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.LocalLoadingCache.refresh(K)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 456,
          "throwingLine": 457,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.EntryIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(nextEntry == null) && (nextEntry == null) && (!(iterator.hasNext())) && (nextEntry == null)",
          "symbolicPathConjunction": "(nextEntry == null) && (hasNext()) && (nextEntry == null)",
          "backwardsPathConjunction": "(nextEntry == null) && (nextEntry == null) && (!(iterator.hasNext())) && (nextEntry == null)",
          "simplifiedPathConjunction": "nextEntry == null && !iterator.hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnextEntry0_isNull = Bool('nextEntry0_isNull')\n\nconstraints = [\n  And(And(And(nextEntry0_isNull, nextEntry0_isNull), Not(iterator0.hasNext())), nextEntry0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnextEntry = Symbol('nextEntry')\niterator = Symbol('iterator')\niterator_hasNext = Symbol('iterator_hasNext')\nnull = Symbol('null')\npath_conjunction = ((((Eq(nextEntry, null)) & (Eq(nextEntry, null))) & (~(iterator_hasNext))) & (Eq(nextEntry, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 551,
          "throwingLine": 556,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WriteThroughEntry.setValue(V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 707,
          "throwingLine": 708,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/SingletonImmutableList.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.SingletonImmutableList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, 1, \"index\"))",
          "pathCojunction": "(index < 0 || index >= 1)",
          "symbolicPathConjunction": "(Preconditions.checkElementIndex(index, 1))",
          "backwardsPathConjunction": "(index < 0 || index >= 1)",
          "simplifiedPathConjunction": "index >= 1 || index < 0",
          "z3Inputs": "[index0 = -1]\n[index0 = -2]\n[index0 = -3]\n[index0 = -4]\n[index0 = -5]\n[index0 = -6]\n[index0 = -7]\n[index0 = -8]\n[index0 = -9]\n[index0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= 1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, 1)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 40,
          "throwingLine": 41,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SingletonImmutableList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, 1))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > 1)",
          "symbolicPathConjunction": "(Preconditions.checkPositionIndexes(fromIndex, toIndex, 1))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > 1)",
          "simplifiedPathConjunction": "fromIndex > toIndex || toIndex > 1 || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = 3, toIndex0 = 2]\n[fromIndex0 = 1, toIndex0 = 0]\n[fromIndex0 = -1]\n[fromIndex0 = 0, toIndex0 = -1]\n[fromIndex0 = 1, toIndex0 = -2]\n[fromIndex0 = 1, toIndex0 = -3]\n[fromIndex0 = 1, toIndex0 = -4]\n[fromIndex0 = 1, toIndex0 = -5]\n[fromIndex0 = 1, toIndex0 = -6]\n[fromIndex0 = 1, toIndex0 = -7]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\n\nconstraints = [\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > 1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, 1)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 56,
          "throwingLine": 57,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/UnsignedInts.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInts.min(int...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 91,
          "throwingLine": 92,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInts.max(int...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 112,
          "throwingLine": 113,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInts.join(java.lang.String, int...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 133,
          "throwingLine": 134,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(parseUnsignedInt(s, 10))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 241,
          "throwingLine": 242,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String)",
          "exception": "throw new NumberFormatException(\"Input \" + s + \" in base \" + 10 + \" is not in the range of an unsigned integer\")",
          "pathCojunction": "(!(s == null)) && ((Long.parseLong(string, radix) & 0xffffffffL) != Long.parseLong(string, radix))",
          "symbolicPathConjunction": "(parseUnsignedInt(s, 10))",
          "backwardsPathConjunction": "(!(s == null)) && ((Long.parseLong(string, radix) & 0xffffffffL) != Long.parseLong(string, radix))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\nradix0 = Int('radix0')\nstring0 = String('string0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  And(Not(s0_isNull), Long.parseLong(string0, radix0) & 0xffffffffL != Long.parseLong(string0, radix0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nradix = Symbol('radix', integer=True)\nstring = Symbol('string')\nLong_parseLong = Symbol('Long_parseLong')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(s, null)))) & (Ne((Long_parseLong & 0xffffffffL), Long_parseLong)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 241,
          "throwingLine": 242,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String, int)",
          "exception": "throw new NumberFormatException(\"Input \" + string + \" in base \" + radix + \" is not in the range of an unsigned integer\");",
          "pathCojunction": "(!(string == null)) && ((result & INT_MASK) != result)",
          "symbolicPathConjunction": "(checkNotNull(string)) && ((result & INT_MASK) != result)",
          "backwardsPathConjunction": "(!(string == null)) && ((Long.parseLong(string, radix) & INT_MASK) != Long.parseLong(string, radix))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nradix0 = Int('radix0')\nresult0 = Int('result0')\nINT_MASK0 = Int('INT_MASK0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  result0 == Long.parseLong(string0, radix0),\n  INT_MASK0 == 0xffffffffL,\n  result0 >= -9223372036854775808, result0 <= 9223372036854775807, # implicit\n  INT_MASK0 >= -9223372036854775808, INT_MASK0 <= 9223372036854775807, # implicit\n  And(Not(string0_isNull), result0 & INT_MASK0 != result0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nradix = Symbol('radix', integer=True)\nLong_parseLong = Symbol('Long_parseLong')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(string, null)))) & (Ne((Long_parseLong & 0xffffffffL), Long_parseLong)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 256,
          "throwingLine": 260,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nradix0 = Int('radix0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 256,
          "throwingLine": 257,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ListsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.testReverseViewRandomAccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_LIST == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(SOME_LIST))",
          "backwardsPathConjunction": "(SOME_LIST == null)",
          "simplifiedPathConjunction": "Lists.newArrayList(1, 2, 3, 4) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_LIST0_isNull = Bool('SOME_LIST0_isNull')\n\nconstraints = [\n  SOME_LIST0 == Lists.newArrayList(1, 2, 3, 4),\n  SOME_LIST0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nLists_newArrayList = Symbol('Lists_newArrayList')\nnull = Symbol('null')\npath_conjunction = (Eq(Lists_newArrayList, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 264,
          "throwingLine": 265,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.testTransformModifiableRandomAccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_LIST == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(SOME_LIST))",
          "backwardsPathConjunction": "(SOME_LIST == null)",
          "simplifiedPathConjunction": "Lists.newArrayList(1, 2, 3, 4) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_LIST0_isNull = Bool('SOME_LIST0_isNull')\n\nconstraints = [\n  SOME_LIST0 == Lists.newArrayList(1, 2, 3, 4),\n  SOME_LIST0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nLists_newArrayList = Symbol('Lists_newArrayList')\nnull = Symbol('null')\npath_conjunction = (Eq(Lists_newArrayList, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 376,
          "throwingLine": 377,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.testTransformViewRandomAccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_LIST == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(SOME_LIST))",
          "backwardsPathConjunction": "(SOME_LIST == null)",
          "simplifiedPathConjunction": "Lists.newArrayList(1, 2, 3, 4) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_LIST0_isNull = Bool('SOME_LIST0_isNull')\n\nconstraints = [\n  SOME_LIST0 == Lists.newArrayList(1, 2, 3, 4),\n  SOME_LIST0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nLists_newArrayList = Symbol('Lists_newArrayList')\nnull = Symbol('null')\npath_conjunction = (Eq(Lists_newArrayList, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 405,
          "throwingLine": 406,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.testTransformListIteratorRandomAccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_LIST == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(SOME_LIST))",
          "backwardsPathConjunction": "(SOME_LIST == null)",
          "simplifiedPathConjunction": "Lists.newArrayList(1, 2, 3, 4) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_LIST0_isNull = Bool('SOME_LIST0_isNull')\n\nconstraints = [\n  SOME_LIST0 == Lists.newArrayList(1, 2, 3, 4),\n  SOME_LIST0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nLists_newArrayList = Symbol('Lists_newArrayList')\nnull = Symbol('null')\npath_conjunction = (Eq(Lists_newArrayList, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 448,
          "throwingLine": 449,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.Anonymous-c92627ad-0311-4967-b0d2-5b808817b19e.apply(java.lang.String)",
          "exception": "throw new IndexOutOfBoundsException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = String('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 464,
          "throwingLine": 465,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.testTransformIteratorRandomAccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_LIST == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(SOME_LIST))",
          "backwardsPathConjunction": "(SOME_LIST == null)",
          "simplifiedPathConjunction": "Lists.newArrayList(1, 2, 3, 4) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_LIST0_isNull = Bool('SOME_LIST0_isNull')\n\nconstraints = [\n  SOME_LIST0 == Lists.newArrayList(1, 2, 3, 4),\n  SOME_LIST0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nLists_newArrayList = Symbol('Lists_newArrayList')\nnull = Symbol('null')\npath_conjunction = (Eq(Lists_newArrayList, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 514,
          "throwingLine": 515,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/hash/AbstractStreamingHashFunction.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.hash.AbstractStreamingHashFunction.newHasher(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(expectedInputSize >= 0))",
          "symbolicPathConjunction": "(Preconditions.checkArgument(expectedInputSize >= 0))",
          "backwardsPathConjunction": "(!(expectedInputSize >= 0))",
          "simplifiedPathConjunction": "expectedInputSize < 0",
          "z3Inputs": "[expectedInputSize0 = -1]\n[expectedInputSize0 = -2]\n[expectedInputSize0 = -3]\n[expectedInputSize0 = -4]\n[expectedInputSize0 = -5]\n[expectedInputSize0 = -6]\n[expectedInputSize0 = -7]\n[expectedInputSize0 = -8]\n[expectedInputSize0 = -9]\n[expectedInputSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedInputSize0 = Int('expectedInputSize0')\n\nconstraints = [\n  Not(expectedInputSize0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedInputSize = Symbol('expectedInputSize', integer=True)\npath_conjunction = (~((GreaterThan(expectedInputSize, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 72,
          "throwingLine": 73,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/AbstractIterator.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.AbstractIterator.remove()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 87,
          "throwingLine": 88,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/CallablesTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.CallablesTest.Anonymous-873e209e-8144-4028-8000-831dfe2d4ed0.call()",
          "exception": "throw new MyException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 67,
          "throwingLine": 69,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.CallablesTest.Anonymous-b85fcd71-3824-4c0d-8912-7d7ccb3bf37b.checkAccess(java.lang.Thread)",
          "exception": "throw new SecurityException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 83,
          "throwingLine": 84,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/FuturesTransformAsyncFunctionTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTransformAsyncFunctionTest.BadFuture.get()",
          "exception": "throw new RuntimeException(\"Oops\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 183,
          "throwingLine": 184,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Defaults.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Defaults.defaultValue(java.lang.Class<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(type == null)",
          "symbolicPathConjunction": "(checkNotNull(type))",
          "backwardsPathConjunction": "(type == null)",
          "simplifiedPathConjunction": "null == type",
          "z3Inputs": "[type0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\n\nconstraints = [\n  type0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nnull = Symbol('null')\npath_conjunction = (Eq(type, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 64,
          "throwingLine": 66,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/hash/BloomFilter.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.hash.BloomFilter.isCompatible(com.google.common.hash.BloomFilter<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(that == null)",
          "symbolicPathConjunction": "(checkNotNull(that))",
          "backwardsPathConjunction": "(that == null)",
          "simplifiedPathConjunction": "null == that",
          "z3Inputs": "[that0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthat0_isNull = Bool('that0_isNull')\n\nconstraints = [\n  that0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthat = Symbol('that')\nnull = Symbol('null')\npath_conjunction = (Eq(that, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 211,
          "throwingLine": 212,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.hash.BloomFilter.putAll(com.google.common.hash.BloomFilter<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(that == null)",
          "symbolicPathConjunction": "(checkNotNull(that))",
          "backwardsPathConjunction": "(that == null)",
          "simplifiedPathConjunction": "null == that",
          "z3Inputs": "[that0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthat0_isNull = Bool('that0_isNull')\n\nconstraints = [\n  that0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthat = Symbol('that')\nnull = Symbol('null')\npath_conjunction = (Eq(that, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 230,
          "throwingLine": 231,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/LongMath.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.math.LongMath.gcd(long, long)",
          "exception": "throw new IllegalArgumentException(\"b\" + \" (\" + b + \") must be >= 0\")",
          "pathCojunction": "(!(a < 0)) && (b < 0)",
          "symbolicPathConjunction": "(!(x < 0)) && (x < 0)",
          "backwardsPathConjunction": "(!(a < 0)) && (b < 0)",
          "simplifiedPathConjunction": "a >= 0 && b < 0",
          "z3Inputs": "[b0 = -1, a0 = 0]\n[b0 = -1, a0 = 1]\n[b0 = -2, a0 = 1]\n[b0 = -3, a0 = 1]\n[b0 = -3, a0 = 2]\n[b0 = -3, a0 = 3]\n[b0 = -4, a0 = 4]\n[b0 = -4, a0 = 5]\n[b0 = -4, a0 = 6]\n[b0 = -4, a0 = 7]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\n\nconstraints = [\n  a0 >= -9223372036854775808, a0 <= 9223372036854775807, # implicit\n  b0 >= -9223372036854775808, b0 <= 9223372036854775807, # implicit\n  And(Not(a0 < 0), b0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\nb = Symbol('b')\npath_conjunction = ((~((StrictLessThan(a, 0)))) & (StrictLessThan(b, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 127,
          "throwingLine": 134,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.LongMath.gcd(long, long)",
          "exception": "throw new IllegalArgumentException(\"a\" + \" (\" + a + \") must be >= 0\")",
          "pathCojunction": "(a < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(a < 0)",
          "simplifiedPathConjunction": "a < 0",
          "z3Inputs": "[b0 = 0, a0 = -1]\n[b0 = -1, a0 = -2]\n[b0 = -1, a0 = -3]\n[b0 = -2, a0 = -3]\n[b0 = -3, a0 = -3]\n[b0 = -4, a0 = -4]\n[b0 = -5, a0 = -5]\n[b0 = -6, a0 = -6]\n[b0 = -7, a0 = -7]\n[b0 = -8, a0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\n\nconstraints = [\n  a0 >= -9223372036854775808, a0 <= 9223372036854775807, # implicit\n  b0 >= -9223372036854775808, b0 <= 9223372036854775807, # implicit\n  a0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\npath_conjunction = (StrictLessThan(a, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 127,
          "throwingLine": 133,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MapsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MapsTest.testSortedMapDifferenceEquals()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(left == null)",
          "symbolicPathConjunction": "(ImmutableSortedMap.of(1, \"a\", 2, \"b\", 3, \"c\", 4, \"d\", 5, \"e\")) && (ImmutableSortedMap.of(1, \"a\", 3, \"f\", 5, \"g\", 6, \"z\")) && (ImmutableSortedMap.of(1, \"a\", 3, \"h\", 5, \"g\", 6, \"z\")) && (Maps.difference(left, right))",
          "backwardsPathConjunction": "(new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(2, \"b\").put(3, \"c\").put(4, \"d\").put(5, \"e\").build() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\n\nconstraints = [\n  java.lang.String > left0 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(2, \"b\").put(3, \"c\").put(4, \"d\").put(5, \"e\").build(),\n  java.lang.String > right0 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(3, \"f\").put(5, \"g\").put(6, \"z\").build(),\n  java.lang.String > right20 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(3, \"h\").put(5, \"g\").put(6, \"z\").build(),\n  left0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nBUG_IN_SIMPLIFICATION\nOrdering_natural = Symbol('Ordering_natural')\nnull = Symbol('null')\npath_conjunction = (Eq(new Builder<K, V>(Ordering.natural())_put_put_put_put_put_build, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 528,
          "throwingLine": 535,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapsTest.testSortedMapDifferenceEquals()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(left == null)) && (right == null)",
          "symbolicPathConjunction": "(ImmutableSortedMap.of(1, \"a\", 2, \"b\", 3, \"c\", 4, \"d\", 5, \"e\")) && (ImmutableSortedMap.of(1, \"a\", 3, \"f\", 5, \"g\", 6, \"z\")) && (ImmutableSortedMap.of(1, \"a\", 3, \"h\", 5, \"g\", 6, \"z\")) && (Maps.difference(left, right))",
          "backwardsPathConjunction": "(!(new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(2, \"b\").put(3, \"c\").put(4, \"d\").put(5, \"e\").build() == null)) && (new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(3, \"f\").put(5, \"g\").put(6, \"z\").build() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\nright0_isNull = Bool('right0_isNull')\n\nconstraints = [\n  java.lang.String > left0 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(2, \"b\").put(3, \"c\").put(4, \"d\").put(5, \"e\").build(),\n  java.lang.String > right0 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(3, \"f\").put(5, \"g\").put(6, \"z\").build(),\n  java.lang.String > right20 == new Builder<K, V>(Ordering.natural()).put(1, \"a\").put(3, \"h\").put(5, \"g\").put(6, \"z\").build(),\n  And(Not(left0_isNull), right0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nBUG_IN_SIMPLIFICATION\nOrdering_natural = Symbol('Ordering_natural')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(new Builder<K, V>(Ordering.natural())_put_put_put_put_put_build, null)))) & (Eq(new Builder<K, V>(Ordering.natural())_put_put_put_put_build, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 528,
          "throwingLine": 535,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Absent.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Absent.get()",
          "exception": "throw new IllegalStateException(\"Optional.get() cannot be called on an absent value\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 48,
          "throwingLine": 49,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Absent.or(T)",
          "exception": "throw new NullPointerException(String.valueOf(\"use Optional.orNull() instead of Optional.or(null)\"))",
          "pathCojunction": "(defaultValue == null)",
          "symbolicPathConjunction": "(checkNotNull(defaultValue, \"use Optional.orNull() instead of Optional.or(null)\"))",
          "backwardsPathConjunction": "(defaultValue == null)",
          "simplifiedPathConjunction": "defaultValue == null",
          "z3Inputs": "[defaultValue0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndefaultValue0_isNull = Bool('defaultValue0_isNull')\n\nconstraints = [\n  defaultValue0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndefaultValue = Symbol('defaultValue')\nnull = Symbol('null')\npath_conjunction = (Eq(defaultValue, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 53,
          "throwingLine": 54,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Absent.or(com.google.common.base.Optional<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(secondChoice == null)",
          "symbolicPathConjunction": "(checkNotNull(secondChoice))",
          "backwardsPathConjunction": "(secondChoice == null)",
          "z3Inputs": "[secondChoice0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsecondChoice0_isNull = Bool('secondChoice0_isNull')\n\nconstraints = [\n  secondChoice0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(secondChoice, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 59,
          "throwingLine": 60,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Absent.transform(com.google.common.base.Function<? super T, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 81,
          "throwingLine": 82,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/UnmodifiableListIteratorTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.UnmodifiableListIteratorTest.Anonymous-3074fc02-9fcc-4521-b8bd-08189ffa8154.previous()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(i > 0))",
          "symbolicPathConjunction": "(!(hasPrevious())) && (!hasPrevious())",
          "backwardsPathConjunction": "(!(i > 0))",
          "simplifiedPathConjunction": "i <= 0",
          "z3Inputs": "[i0 = 0]\n[i0 = -1]\n[i0 = -2]\n[i0 = -3]\n[i0 = -4]\n[i0 = -5]\n[i0 = -6]\n[i0 = -7]\n[i0 = -8]\n[i0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\n\nconstraints = [\n  Not(i0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\npath_conjunction = (~((StrictGreaterThan(i, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 93,
          "throwingLine": 95,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractSortedMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractSortedMultiset.subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromBoundType == null)",
          "symbolicPathConjunction": "(checkNotNull(fromBoundType))",
          "backwardsPathConjunction": "(fromBoundType == null)",
          "simplifiedPathConjunction": "fromBoundType == null",
          "z3Inputs": "[fromBoundType0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromBoundType0_isNull = Bool('fromBoundType0_isNull')\n\nconstraints = [\n  fromBoundType0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromBoundType = Symbol('fromBoundType')\nnull = Symbol('null')\npath_conjunction = (Eq(fromBoundType, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 103,
          "throwingLine": 105,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/cache/AbstractLoadingCache.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.AbstractLoadingCache.refresh(K)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 74,
          "throwingLine": 75,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/testing/FakeTicker.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.testing.FakeTicker.setAutoIncrementStep(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"May not auto-increment by a negative amount\"))",
          "pathCojunction": "(!(autoIncrementStep >= 0))",
          "symbolicPathConjunction": "(checkArgument(autoIncrementStep >= 0, \"May not auto-increment by a negative amount\"))",
          "backwardsPathConjunction": "(!(autoIncrementStep >= 0))",
          "simplifiedPathConjunction": "autoIncrementStep < 0",
          "z3Inputs": "[autoIncrementStep0 = -9223372036854775808]\n[autoIncrementStep0 = -1]\n[autoIncrementStep0 = -2]\n[autoIncrementStep0 = -3]\n[autoIncrementStep0 = -4]\n[autoIncrementStep0 = -5]\n[autoIncrementStep0 = -6]\n[autoIncrementStep0 = -7]\n[autoIncrementStep0 = -8]\n[autoIncrementStep0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nautoIncrementStep0 = Int('autoIncrementStep0')\n\nconstraints = [\n  autoIncrementStep0 >= -9223372036854775808, autoIncrementStep0 <= 9223372036854775807, # implicit\n  Not(autoIncrementStep0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nautoIncrementStep = Symbol('autoIncrementStep')\npath_conjunction = (~((GreaterThan(autoIncrementStep, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 63,
          "throwingLine": 64,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/TreeBasedTable.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.TreeBasedTable.create(java.util.Comparator<? super R>, java.util.Comparator<? super C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(rowComparator == null)) && (columnComparator == null)",
          "symbolicPathConjunction": "(checkNotNull(rowComparator)) && (checkNotNull(columnComparator))",
          "backwardsPathConjunction": "(!(rowComparator == null)) && (columnComparator == null)",
          "z3Inputs": "[columnComparator0_isNull = True,\n rowComparator0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowComparator0_isNull = Bool('rowComparator0_isNull')\ncolumnComparator0_isNull = Bool('columnComparator0_isNull')\n\nconstraints = [\n  And(Not(rowComparator0_isNull), columnComparator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(rowComparator, null)))) & (Eq(columnComparator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 118,
          "throwingLine": 120,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeBasedTable.create(java.util.Comparator<? super R>, java.util.Comparator<? super C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(rowComparator == null)",
          "symbolicPathConjunction": "(checkNotNull(rowComparator))",
          "backwardsPathConjunction": "(rowComparator == null)",
          "z3Inputs": "[rowComparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowComparator0_isNull = Bool('rowComparator0_isNull')\n\nconstraints = [\n  rowComparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(rowComparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 118,
          "throwingLine": 119,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeBasedTable.TreeRow.subMap(C, C)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(rangeContains(checkNotNull(fromKey)) && rangeContains(checkNotNull(toKey))))",
          "symbolicPathConjunction": "(checkArgument(rangeContains(checkNotNull(fromKey)) && rangeContains(checkNotNull(toKey))))",
          "backwardsPathConjunction": "(!(rangeContains(checkNotNull(fromKey)) && rangeContains(checkNotNull(toKey))))",
          "simplifiedPathConjunction": "!rangeContains(checkNotNull(fromKey))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(And(rangeContains(checkNotNull(fromKey0)), rangeContains(checkNotNull(toKey0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\ntoKey = Symbol('toKey')\n_rangeContains = Symbol('_rangeContains')\n_checkNotNull = Symbol('_checkNotNull')\npath_conjunction = (~((_rangeContains & _rangeContains)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 215,
          "throwingLine": 216,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeBasedTable.TreeRow.headMap(C)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(rangeContains(checkNotNull(toKey))))",
          "symbolicPathConjunction": "(checkArgument(rangeContains(checkNotNull(toKey))))",
          "backwardsPathConjunction": "(!(rangeContains(checkNotNull(toKey))))",
          "simplifiedPathConjunction": "!rangeContains(checkNotNull(toKey))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(rangeContains(checkNotNull(toKey0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntoKey = Symbol('toKey')\n_rangeContains = Symbol('_rangeContains')\n_checkNotNull = Symbol('_checkNotNull')\npath_conjunction = (~(_rangeContains))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 221,
          "throwingLine": 222,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeBasedTable.TreeRow.tailMap(C)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(rangeContains(checkNotNull(fromKey))))",
          "symbolicPathConjunction": "(checkArgument(rangeContains(checkNotNull(fromKey))))",
          "backwardsPathConjunction": "(!(rangeContains(checkNotNull(fromKey))))",
          "simplifiedPathConjunction": "!rangeContains(checkNotNull(fromKey))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(rangeContains(checkNotNull(fromKey0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\n_rangeContains = Symbol('_rangeContains')\n_checkNotNull = Symbol('_checkNotNull')\npath_conjunction = (~(_rangeContains))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 227,
          "throwingLine": 228,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeBasedTable.TreeRow.firstKey()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(backing == null)",
          "symbolicPathConjunction": "(backing == null)",
          "backwardsPathConjunction": "((SortedMap<C, V>) super.backingRowMap() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbacking0_isNull = Bool('backing0_isNull')\n\nconstraints = [\n  V > backing0 == (SortedMap<C, V>) super.backingRowMap(),\n  backing0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 233,
          "throwingLine": 236,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeBasedTable.TreeRow.lastKey()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(backing == null)",
          "symbolicPathConjunction": "(backing == null)",
          "backwardsPathConjunction": "((SortedMap<C, V>) super.backingRowMap() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbacking0_isNull = Bool('backing0_isNull')\n\nconstraints = [\n  V > backing0 == (SortedMap<C, V>) super.backingRowMap(),\n  backing0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 242,
          "throwingLine": 245,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeBasedTable.TreeRow.put(C, V)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(rangeContains(checkNotNull(key))))",
          "symbolicPathConjunction": "(checkArgument(rangeContains(checkNotNull(key))))",
          "backwardsPathConjunction": "(!(rangeContains(checkNotNull(key))))",
          "simplifiedPathConjunction": "!rangeContains(checkNotNull(key))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(rangeContains(checkNotNull(key0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\n_rangeContains = Symbol('_rangeContains')\n_checkNotNull = Symbol('_checkNotNull')\npath_conjunction = (~(_rangeContains))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 298,
          "throwingLine": 299,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.Builder.put(K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + value);",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(key == null)",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 165,
          "throwingLine": 166,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.Builder.put(K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + key + \"=null\");",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "((!(key == null)) && (value == null))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 165,
          "throwingLine": 166,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 345,
          "throwingLine": 346,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 357,
          "throwingLine": 358,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 369,
          "throwingLine": 370,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.put(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 399,
          "throwingLine": 400,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.putAll(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 411,
          "throwingLine": 412,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 423,
          "throwingLine": 424,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.remove(java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 435,
          "throwingLine": 436,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ForwardingSortedMultisetTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingSortedMultisetTest.StandardImplForwardingSortedMultiset.retainAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(collection == null)",
          "symbolicPathConjunction": "(checkNotNull(elementsToRetain))",
          "backwardsPathConjunction": "(collection == null)",
          "simplifiedPathConjunction": "collection == null",
          "z3Inputs": "[collection0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncollection0_isNull = Bool('collection0_isNull')\n\nconstraints = [\n  collection0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncollection = Symbol('collection')\nnull = Symbol('null')\npath_conjunction = (Eq(collection, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 160,
          "throwingLine": 161,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/AllEqualOrdering.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AllEqualOrdering.sortedCopy(java.lang.Iterable<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 41,
          "throwingLine": 42,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AllEqualOrdering.immutableSortedCopy(java.lang.Iterable<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 46,
          "throwingLine": 47,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.MoreExecutorsTest.ThrowingRunnable.run()",
          "exception": "throw thrown;",
          "pathCojunction": "(++count >= throwAfterCount)",
          "symbolicPathConjunction": "(++count >= throwAfterCount)",
          "backwardsPathConjunction": "(++count >= throwAfterCount)",
          "simplifiedPathConjunction": "count >= throwAfterCount",
          "z3Inputs": "[count0 = 0, throwAfterCount0 = 0]\n[throwAfterCount0 = -1, count0 = -1]\n[throwAfterCount0 = -2, count0 = -2]\n[throwAfterCount0 = -3, count0 = -3]\n[throwAfterCount0 = -4, count0 = -4]\n[throwAfterCount0 = -5, count0 = -5]\n[throwAfterCount0 = -6, count0 = -6]\n[throwAfterCount0 = -7, count0 = -7]\n[throwAfterCount0 = -8, count0 = -8]\n[throwAfterCount0 = -9, count0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nthrowAfterCount0 = Int('throwAfterCount0')\n\nconstraints = [\n  ++count0 >= throwAfterCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\nthrowAfterCount = Symbol('throwAfterCount', integer=True)\npath_conjunction = (GreaterThan(++count, throwAfterCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 445,
          "throwingLine": 447,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.MoreExecutorsTest.Anonymous-93004d1d-909e-45d8-bfb4-d83b1f8cf79e.call()",
          "exception": "throw new ArithmeticException(\"/ by zero\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 497,
          "throwingLine": 498,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/EvictingQueue.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.EvictingQueue.offer(E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(add(e))",
          "backwardsPathConjunction": "(e == null)",
          "simplifiedPathConjunction": "e == null",
          "z3Inputs": "[e0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nnull = Symbol('null')\npath_conjunction = (Eq(e, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 90,
          "throwingLine": 91,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.EvictingQueue.add(E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(checkNotNull(e))",
          "backwardsPathConjunction": "(e == null)",
          "simplifiedPathConjunction": "e == null",
          "z3Inputs": "[e0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nnull = Symbol('null')\npath_conjunction = (Eq(e, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 101,
          "throwingLine": 102,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/CharMatcher.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(start, length, \"index\"))",
          "pathCojunction": "(start < 0 || start > length)",
          "symbolicPathConjunction": "(checkPositionIndex(start, length))",
          "backwardsPathConjunction": "(start < 0 || start > sequence.length())",
          "simplifiedPathConjunction": "sequence.length() < start || start < 0",
          "z3Inputs": "[start0 = 1, sequence0 = \"\", length0 = 0]\n[start0 = -1, length0 = 1, sequence0 = \"A\"]\n[start0 = -2, length0 = 1, sequence0 = \"B\"]\n[start0 = -2, length0 = 0, sequence0 = \"\"]\n[start0 = -3, length0 = 0, sequence0 = \"\"]\n[start0 = -4, length0 = 0, sequence0 = \"\"]\n[start0 = -5, length0 = 0, sequence0 = \"\"]\n[start0 = -6, length0 = 0, sequence0 = \"\"]\n[start0 = -7, length0 = 0, sequence0 = \"\"]\n[start0 = -8, length0 = 0, sequence0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nstart0 = Int('start0')\nlength0 = Int('length0')\n\nconstraints = [\n  length0 == Length(sequence0),\n  Or(start0 < 0, start0 > length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nstart = Symbol('start', integer=True)\nsequence_length = Symbol('sequence_length')\npath_conjunction = ((StrictLessThan(start, 0)) | (StrictGreaterThan(start, sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 585,
          "throwingLine": 587,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.removeFrom(java.lang.CharSequence)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, length, \"index\"))",
          "pathCojunction": "(0 < 0 || 0 > string.length())",
          "symbolicPathConjunction": "(indexIn(string))",
          "backwardsPathConjunction": "(0 < 0 || 0 > sequence.toString().length())",
          "simplifiedPathConjunction": "sequence.toString().length() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nstring0 = String('string0')\n\nconstraints = [\n  string0 == sequence0.toString(),\n  Or(0 < 0, 0 > Length(string0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_toString_length = Symbol('sequence_toString_length')\nsequence_toString = Symbol('sequence_toString')\npath_conjunction = ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, sequence_toString_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 637,
          "throwingLine": 639,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.retainFrom(java.lang.CharSequence)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, length, \"index\"))",
          "pathCojunction": "(0 < 0 || 0 > sequence.toString().length())",
          "symbolicPathConjunction": "(negate().removeFrom(sequence))",
          "backwardsPathConjunction": "(0 < 0 || 0 > sequence.toString().length())",
          "simplifiedPathConjunction": "sequence.toString().length() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\n\nconstraints = [\n  Or(0 < 0, 0 > sequence0.toString().length())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nsequence_toString_length = Symbol('sequence_toString_length')\nsequence_toString = Symbol('sequence_toString')\npath_conjunction = ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, sequence_toString_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 675,
          "throwingLine": 676,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, length, \"index\"))",
          "pathCojunction": "(!(replacementLen == 0)) && (!(replacementLen == 1)) && (0 < 0 || 0 > string.length())",
          "symbolicPathConjunction": "(!(replacementLen == 0)) && (!(replacementLen == 1)) && (indexIn(string))",
          "backwardsPathConjunction": "(!(replacement.length() == 0)) && (!(replacement.length() == 1)) && (0 < 0 || 0 > sequence.toString().length())",
          "simplifiedPathConjunction": "sequence.toString().length() < 0 && replacement.length() != 0 && replacement.length() != 1",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nreplacement0 = String('replacement0')\nreplacementLen0 = Int('replacementLen0')\nstring0 = String('string0')\n\nconstraints = [\n  replacementLen0 == Length(replacement0),\n  string0 == sequence0.toString(),\n  And(And(Not(replacementLen0 == 0), Not(replacementLen0 == 1)), Or(0 < 0, 0 > Length(string0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nreplacement = Symbol('replacement')\nreplacement_length = Symbol('replacement_length')\nsequence_toString_length = Symbol('sequence_toString_length')\nsequence_toString = Symbol('sequence_toString')\npath_conjunction = (((~((Eq(replacement_length, 0)))) & (~((Eq(replacement_length, 1))))) & ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, sequence_toString_length))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 730,
          "throwingLine": 740,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(0, length, \"index\"))",
          "pathCojunction": "(replacementLen == 0) && (0 < 0 || 0 > sequence.toString().length())",
          "symbolicPathConjunction": "(replacementLen == 0) && (removeFrom(sequence))",
          "backwardsPathConjunction": "(replacement.length() == 0) && (0 < 0 || 0 > sequence.toString().length())",
          "simplifiedPathConjunction": "replacement.length() == 0 && sequence.toString().length() < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nreplacement0 = String('replacement0')\nreplacementLen0 = Int('replacementLen0')\n\nconstraints = [\n  replacementLen0 == Length(replacement0),\n  And(replacementLen0 == 0, Or(0 < 0, 0 > sequence0.toString().length()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nreplacement = Symbol('replacement')\nreplacement_length = Symbol('replacement_length')\nsequence_toString_length = Symbol('sequence_toString_length')\nsequence_toString = Symbol('sequence_toString')\npath_conjunction = ((Eq(replacement_length, 0)) & ((StrictLessThan(0, 0)) | (StrictGreaterThan(0, sequence_toString_length))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 730,
          "throwingLine": 733,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.indexIn(java.lang.CharSequence, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(start, length, \"index\"))",
          "pathCojunction": "(start < 0 || start > length)",
          "symbolicPathConjunction": "(checkPositionIndex(start, length))",
          "backwardsPathConjunction": "(start < 0 || start > sequence.length())",
          "simplifiedPathConjunction": "sequence.length() < start || start < 0",
          "z3Inputs": "[start0 = 1, sequence0 = \"\", length0 = 0]\n[start0 = -1, length0 = 1, sequence0 = \"A\"]\n[start0 = -2, length0 = 1, sequence0 = \"B\"]\n[start0 = -2, length0 = 0, sequence0 = \"\"]\n[start0 = -3, length0 = 0, sequence0 = \"\"]\n[start0 = -4, length0 = 0, sequence0 = \"\"]\n[start0 = -5, length0 = 0, sequence0 = \"\"]\n[start0 = -6, length0 = 0, sequence0 = \"\"]\n[start0 = -7, length0 = 0, sequence0 = \"\"]\n[start0 = -8, length0 = 0, sequence0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nstart0 = Int('start0')\nlength0 = Int('length0')\n\nconstraints = [\n  length0 == Length(sequence0),\n  Or(start0 < 0, start0 > length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nstart = Symbol('start', integer=True)\nsequence_length = Symbol('sequence_length')\npath_conjunction = ((StrictLessThan(start, 0)) | (StrictGreaterThan(start, sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1044,
          "throwingLine": 1046,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.matchesAllOf(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1056,
          "throwingLine": 1057,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.removeFrom(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1067,
          "throwingLine": 1068,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.trimFrom(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1094,
          "throwingLine": 1095,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.and(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1105,
          "throwingLine": 1106,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.Any.or(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1110,
          "throwingLine": 1111,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.indexIn(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1136,
          "throwingLine": 1137,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.indexIn(java.lang.CharSequence, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(start, length, \"index\"))",
          "pathCojunction": "(start < 0 || start > length)",
          "symbolicPathConjunction": "(checkPositionIndex(start, length))",
          "backwardsPathConjunction": "(start < 0 || start > sequence.length())",
          "simplifiedPathConjunction": "sequence.length() < start || start < 0",
          "z3Inputs": "[start0 = 1, sequence0 = \"\", length0 = 0]\n[start0 = -1, length0 = 1, sequence0 = \"A\"]\n[start0 = -2, length0 = 1, sequence0 = \"B\"]\n[start0 = -2, length0 = 0, sequence0 = \"\"]\n[start0 = -3, length0 = 0, sequence0 = \"\"]\n[start0 = -4, length0 = 0, sequence0 = \"\"]\n[start0 = -5, length0 = 0, sequence0 = \"\"]\n[start0 = -6, length0 = 0, sequence0 = \"\"]\n[start0 = -7, length0 = 0, sequence0 = \"\"]\n[start0 = -8, length0 = 0, sequence0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nstart0 = Int('start0')\nlength0 = Int('length0')\n\nconstraints = [\n  length0 == Length(sequence0),\n  Or(start0 < 0, start0 > length0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nstart = Symbol('start', integer=True)\nsequence_length = Symbol('sequence_length')\npath_conjunction = ((StrictLessThan(start, 0)) | (StrictGreaterThan(start, sequence_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1142,
          "throwingLine": 1144,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.lastIndexIn(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1149,
          "throwingLine": 1150,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.matchesNoneOf(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1160,
          "throwingLine": 1161,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(replacement == null)",
          "symbolicPathConjunction": "(checkNotNull(replacement))",
          "backwardsPathConjunction": "(replacement == null)",
          "simplifiedPathConjunction": "null == replacement",
          "z3Inputs": "[replacement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nreplacement0 = String('replacement0')\nreplacement0_isNull = Bool('replacement0_isNull')\n\nconstraints = [\n  replacement0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreplacement = Symbol('replacement')\nnull = Symbol('null')\npath_conjunction = (Eq(replacement, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1176,
          "throwingLine": 1177,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.countIn(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sequence == null)",
          "symbolicPathConjunction": "(checkNotNull(sequence))",
          "backwardsPathConjunction": "(sequence == null)",
          "simplifiedPathConjunction": "null == sequence",
          "z3Inputs": "[sequence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsequence0 = String('sequence0')\nsequence0_isNull = Bool('sequence0_isNull')\n\nconstraints = [\n  sequence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsequence = Symbol('sequence')\nnull = Symbol('null')\npath_conjunction = (Eq(sequence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1202,
          "throwingLine": 1203,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.and(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1208,
          "throwingLine": 1209,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CharMatcher.None.or(com.google.common.base.CharMatcher)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1214,
          "throwingLine": 1215,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Multisets.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.unmodifiableMultiset(com.google.common.collect.ImmutableMultiset<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(multiset == null)",
          "symbolicPathConjunction": "(checkNotNull(multiset))",
          "backwardsPathConjunction": "(multiset == null)",
          "simplifiedPathConjunction": "multiset == null",
          "z3Inputs": "[multiset0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultiset0_isNull = Bool('multiset0_isNull')\n\nconstraints = [\n  multiset0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmultiset = Symbol('multiset')\nnull = Symbol('null')\npath_conjunction = (Eq(multiset, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 90,
          "throwingLine": 91,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.UnmodifiableMultiset.add(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 141,
          "throwingLine": 142,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.UnmodifiableMultiset.add(E, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurences0 = Int('occurences0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 146,
          "throwingLine": 147,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.UnmodifiableMultiset.addAll(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 151,
          "throwingLine": 152,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.UnmodifiableMultiset.remove(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 156,
          "throwingLine": 157,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.UnmodifiableMultiset.remove(java.lang.Object, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 161,
          "throwingLine": 162,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.UnmodifiableMultiset.removeAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 166,
          "throwingLine": 167,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.UnmodifiableMultiset.retainAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 171,
          "throwingLine": 172,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.UnmodifiableMultiset.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 176,
          "throwingLine": 177,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.UnmodifiableMultiset.setCount(E, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.UnmodifiableMultiset.setCount(E, int, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 186,
          "throwingLine": 187,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(sortedMultiset == null)",
          "symbolicPathConjunction": "(checkNotNull(sortedMultiset))",
          "backwardsPathConjunction": "(sortedMultiset == null)",
          "simplifiedPathConjunction": "null == sortedMultiset",
          "z3Inputs": "[sortedMultiset0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsortedMultiset0_isNull = Bool('sortedMultiset0_isNull')\n\nconstraints = [\n  sortedMultiset0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsortedMultiset = Symbol('sortedMultiset')\nnull = Symbol('null')\npath_conjunction = (Eq(sortedMultiset, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 208,
          "throwingLine": 210,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.FilteredMultiset.remove(java.lang.Object, int)",
          "exception": "throw new IllegalArgumentException(\"occurrences\" + \" cannot be negative but was: \" + occurrences)",
          "pathCojunction": "(occurrences < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(occurrences < 0)",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  occurrences0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = (StrictLessThan(occurrences, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 352,
          "throwingLine": 353,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.union(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(multiset1 == null)",
          "symbolicPathConjunction": "(checkNotNull(multiset1))",
          "backwardsPathConjunction": "(multiset1 == null)",
          "z3Inputs": "[multiset10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultiset10_isNull = Bool('multiset10_isNull')\n\nconstraints = [\n  multiset10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(multiset1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 397,
          "throwingLine": 398,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.intersection(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(multiset1 == null)",
          "symbolicPathConjunction": "(checkNotNull(multiset1))",
          "backwardsPathConjunction": "(multiset1 == null)",
          "simplifiedPathConjunction": "multiset1 == null",
          "z3Inputs": "[multiset10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultiset10_isNull = Bool('multiset10_isNull')\n\nconstraints = [\n  multiset10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmultiset1 = Symbol('multiset1')\nnull = Symbol('null')\npath_conjunction = (Eq(multiset1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 470,
          "throwingLine": 471,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.sum(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(multiset1 == null)",
          "symbolicPathConjunction": "(checkNotNull(multiset1))",
          "backwardsPathConjunction": "(multiset1 == null)",
          "z3Inputs": "[multiset10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultiset10_isNull = Bool('multiset10_isNull')\n\nconstraints = [\n  multiset10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(multiset1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 530,
          "throwingLine": 531,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.difference(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(multiset1 == null)",
          "symbolicPathConjunction": "(checkNotNull(multiset1))",
          "backwardsPathConjunction": "(multiset1 == null)",
          "simplifiedPathConjunction": "multiset1 == null",
          "z3Inputs": "[multiset10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultiset10_isNull = Bool('multiset10_isNull')\n\nconstraints = [\n  multiset10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmultiset1 = Symbol('multiset1')\nnull = Symbol('null')\npath_conjunction = (Eq(multiset1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 610,
          "throwingLine": 611,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.difference(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(multiset1 == null)) && (multiset2 == null)",
          "symbolicPathConjunction": "(checkNotNull(multiset1)) && (checkNotNull(multiset2))",
          "backwardsPathConjunction": "(!(multiset1 == null)) && (multiset2 == null)",
          "simplifiedPathConjunction": "multiset2 == null && multiset1 != null",
          "z3Inputs": "[multiset10_isNull = False, multiset20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultiset10_isNull = Bool('multiset10_isNull')\nmultiset20_isNull = Bool('multiset20_isNull')\n\nconstraints = [\n  And(Not(multiset10_isNull), multiset20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmultiset1 = Symbol('multiset1')\nmultiset2 = Symbol('multiset2')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(multiset1, null)))) & (Eq(multiset2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 610,
          "throwingLine": 612,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.retainOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(multisetToModify == null)",
          "symbolicPathConjunction": "(checkNotNull(multisetToModify))",
          "backwardsPathConjunction": "(multisetToModify == null)",
          "simplifiedPathConjunction": "multisetToModify == null",
          "z3Inputs": "[multisetToModify0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultisetToModify0_isNull = Bool('multisetToModify0_isNull')\n\nconstraints = [\n  multisetToModify0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmultisetToModify = Symbol('multisetToModify')\nnull = Symbol('null')\npath_conjunction = (Eq(multisetToModify, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 686,
          "throwingLine": 687,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.retainOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(multisetToModify == null)) && (multisetToRetain == null)",
          "symbolicPathConjunction": "((checkNotNull(multisetToModify)) && (checkNotNull(occurrencesToRetain)))",
          "backwardsPathConjunction": "(!(multisetToModify == null)) && (multisetToRetain == null)",
          "simplifiedPathConjunction": "multisetToRetain == null && multisetToModify != null",
          "z3Inputs": "[multisetToRetain0_isNull = True,\n multisetToModify0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultisetToModify0_isNull = Bool('multisetToModify0_isNull')\nmultisetToRetain0_isNull = Bool('multisetToRetain0_isNull')\n\nconstraints = [\n  And(Not(multisetToModify0_isNull), multisetToRetain0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmultisetToModify = Symbol('multisetToModify')\nmultisetToRetain = Symbol('multisetToRetain')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(multisetToModify, null)))) & (Eq(multisetToRetain, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 686,
          "throwingLine": 687,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.removeOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(multisetToModify == null)",
          "symbolicPathConjunction": "(checkNotNull(multisetToModify))",
          "backwardsPathConjunction": "(multisetToModify == null)",
          "simplifiedPathConjunction": "multisetToModify == null",
          "z3Inputs": "[multisetToModify0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultisetToModify0_isNull = Bool('multisetToModify0_isNull')\n\nconstraints = [\n  multisetToModify0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmultisetToModify = Symbol('multisetToModify')\nnull = Symbol('null')\npath_conjunction = (Eq(multisetToModify, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 777,
          "throwingLine": 778,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multisets.MultisetIteratorImpl.remove()",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(canRemove))",
          "symbolicPathConjunction": "(checkState(canRemove, \"no calls to next() since the last call to remove()\"))",
          "backwardsPathConjunction": "(!(canRemove))",
          "simplifiedPathConjunction": "!canRemove",
          "z3Inputs": "[canRemove0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncanRemove0 = Bool('canRemove0')\n\nconstraints = [\n  Not(canRemove0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncanRemove = Symbol('canRemove')\npath_conjunction = (~(canRemove))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1078,
          "throwingLine": 1079,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/RegularImmutableList.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.RegularImmutableList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size, \"index\"))",
          "pathCojunction": "(index < 0 || index >= size)",
          "symbolicPathConjunction": "(Preconditions.checkElementIndex(index, size))",
          "backwardsPathConjunction": "(index < 0 || index >= size)",
          "simplifiedPathConjunction": "index >= size || index < 0",
          "z3Inputs": "[index0 = -1, size0 = 0]\n[size0 = -1, index0 = -1]\n[size0 = -2, index0 = -2]\n[index0 = -3]\n[index0 = -4]\n[size0 = -3, index0 = -5]\n[size0 = -4, index0 = -6]\n[index0 = -7]\n[size0 = -5, index0 = -8]\n[size0 = -6, index0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nsize0 = Int('size0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nsize = Symbol('size', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 66,
          "throwingLine": 67,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.RegularImmutableList.listIterator(int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(offset, end, array.length))",
          "pathCojunction": "(!(!(size >= 0))) && (offset < 0 || offset + length < offset || offset + length > array.length)",
          "symbolicPathConjunction": "((checkArgument(length >= 0)) && (Preconditions.checkPositionIndexes(offset, end, array.length)))",
          "backwardsPathConjunction": "(!(!(size >= 0))) && (offset < 0 || offset + length < offset || offset + length > array.length)",
          "simplifiedPathConjunction": "size >= 0 && (array.length < length + offset || length < 0 || offset < 0)",
          "z3Inputs": "[size0 = 0, offset0 = -1, array0_length = 0, length0 = 2]\n[size0 = 1, array0_length = 1, offset0 = -1]\n[size0 = 0, array0_length = 0, length0 = -1]\n[size0 = 0, array0_length = 0, offset0 = 3, length0 = -2]\n[size0 = 0, array0_length = 0, offset0 = 4, length0 = -3]\n[size0 = 0, array0_length = 0, offset0 = 5, length0 = -4]\n[size0 = 0, array0_length = 0, length0 = -5]\n[size0 = 0, array0_length = 0, length0 = -6]\n[size0 = 0, array0_length = 0, length0 = -7]\n[size0 = 0, array0_length = 0, offset0 = 9, length0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\noffset0 = Int('offset0')\nsize0 = Int('size0')\nlength0 = Int('length0')\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  And(Not(Not(size0 >= 0)), Or(Or(offset0 < 0, offset0 + length0 < offset0), offset0 + length0 > array0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\noffset = Symbol('offset', integer=True)\nsize = Symbol('size', integer=True)\nlength = Symbol('length', integer=True)\narray_length = Symbol('array_length', integer=True)\npath_conjunction = ((~((~((GreaterThan(size, 0)))))) & (((StrictLessThan(offset, 0)) | (StrictLessThan((offset + length), offset))) | (StrictGreaterThan((offset + length), array_length))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 78,
          "throwingLine": 81,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.RegularImmutableList.listIterator(int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(index, size, \"index\"))",
          "pathCojunction": "(!(!(size >= 0))) && (!(offset < 0 || offset + length < offset || offset + length > array.length)) && (index < 0 || index > size)",
          "symbolicPathConjunction": "((checkArgument(length >= 0)) && (Preconditions.checkPositionIndexes(offset, end, array.length)) && (Preconditions.checkPositionIndex(index, length)))",
          "backwardsPathConjunction": "(!(!(size >= 0))) && (!(offset < 0 || offset + length < offset || offset + length > array.length)) && (index < 0 || index > size)",
          "simplifiedPathConjunction": "array.length >= length + offset && length >= 0 && offset >= 0 && size >= 0 && (index > size || index < 0)",
          "z3Inputs": "[size0 = 0,\n array0_length = 0,\n offset0 = 0,\n length0 = 0,\n index0 = 1]\n[size0 = 1,\n array0_length = 2,\n offset0 = 1,\n length0 = 1,\n index0 = -1]\n[size0 = 1,\n array0_length = 2,\n offset0 = 1,\n length0 = 1,\n index0 = -2]\n[size0 = 1,\n array0_length = 2,\n offset0 = 1,\n length0 = 1,\n index0 = -3]\n[size0 = 1,\n array0_length = 2,\n offset0 = 1,\n length0 = 1,\n index0 = -4]\n[size0 = 2,\n array0_length = 4,\n offset0 = 2,\n length0 = 2,\n index0 = -5]\n[size0 = 1,\n array0_length = 2,\n offset0 = 1,\n length0 = 1,\n index0 = -5]\n[size0 = 1,\n array0_length = 2,\n offset0 = 1,\n length0 = 1,\n index0 = -6]\n[size0 = 1,\n array0_length = 2,\n offset0 = 1,\n length0 = 1,\n index0 = -7]\n[size0 = 1,\n array0_length = 2,\n offset0 = 1,\n length0 = 1,\n index0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\noffset0 = Int('offset0')\nsize0 = Int('size0')\nlength0 = Int('length0')\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  And(And(Not(Not(size0 >= 0)), Not(Or(Or(offset0 < 0, offset0 + length0 < offset0), offset0 + length0 > array0_length))), Or(index0 < 0, index0 > size0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\narray = Symbol('array')\noffset = Symbol('offset', integer=True)\nsize = Symbol('size', integer=True)\nlength = Symbol('length', integer=True)\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (((~((~((GreaterThan(size, 0)))))) & (~((((StrictLessThan(offset, 0)) | (StrictLessThan((offset + length), offset))) | (StrictGreaterThan((offset + length), array_length)))))) & ((StrictLessThan(index, 0)) | (StrictGreaterThan(index, size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 78,
          "throwingLine": 81,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.RegularImmutableList.listIterator(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(size >= 0))",
          "symbolicPathConjunction": "(checkArgument(length >= 0))",
          "backwardsPathConjunction": "(!(size >= 0))",
          "simplifiedPathConjunction": "size < 0",
          "z3Inputs": "[size0 = -1]\n[size0 = -2]\n[size0 = -3]\n[size0 = -4]\n[size0 = -5]\n[size0 = -6]\n[size0 = -7]\n[size0 = -8]\n[size0 = -9]\n[size0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\noffset0 = Int('offset0')\nsize0 = Int('size0')\n\nconstraints = [\n  Not(size0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsize = Symbol('size', integer=True)\npath_conjunction = (~((GreaterThan(size, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 78,
          "throwingLine": 81,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/IterablesTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.IterablesTest.Anonymous-16d5b341-bd6d-46e8-9d87-8e3d86abbec2.iterator()",
          "exception": "throw new AssertionFailedError(\"Don't iterate me!\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 81,
          "throwingLine": 82,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.IterablesTest.DiesOnIteratorArrayList.iterator()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 786,
          "throwingLine": 787,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.IterablesTest.DiesOnIteratorTreeSet.iterator()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 809,
          "throwingLine": 810,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.IterablesTest.UnIterableQueue.iterator()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1101,
          "throwingLine": 1102,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ConstrainedBiMapTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ConstrainedBiMapTest.TestConstraint.checkKeyValue(java.lang.String, java.lang.String)",
          "exception": "throw new TestKeyException();",
          "pathCojunction": "(TEST_KEY.equals(key))",
          "symbolicPathConjunction": "(TEST_KEY.equals(key))",
          "backwardsPathConjunction": "(TEST_KEY.equals(key))",
          "z3Inputs": "[key0 = \"42\", TEST_KEY0 = \"42\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nTEST_KEY0 = String('TEST_KEY0')\n\nconstraints = [\n  TEST_KEY0 == StringVal(\"42\"), \n  TEST_KEY0 == key0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\n\"42\"_equals = Symbol('\"42\"_equals')\npath_conjunction = \"42\"_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 95,
          "throwingLine": 97,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConstrainedBiMapTest.TestConstraint.checkKeyValue(java.lang.String, java.lang.String)",
          "exception": "throw new TestValueException();",
          "pathCojunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "symbolicPathConjunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "backwardsPathConjunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "z3Inputs": "[key0 = \"\",\n value0 = \"test\",\n TEST_VALUE0 = \"test\",\n TEST_KEY0 = \"42\"]\n[TEST_KEY0 = \"42\",\n key0 = \"A\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"B\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"C\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"D\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"E\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"F\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"G\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"H\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"I\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nTEST_KEY0 = String('TEST_KEY0')\nTEST_VALUE0 = String('TEST_VALUE0')\n\nconstraints = [\n  TEST_KEY0 == StringVal(\"42\"), \n  TEST_VALUE0 == StringVal(\"test\"), \n  And(Not(TEST_KEY0 == key0), TEST_VALUE0 == value0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n\"42\"_equals = Symbol('\"42\"_equals')\n\"test\"_equals = Symbol('\"test\"_equals')\npath_conjunction = ((~(\"42\"_equals)) & \"test\"_equals)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 95,
          "throwingLine": 100,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTaskTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ListenableFutureTaskTest.Anonymous-3b39323b-58cf-4a13-8a23-9592a062c1c4.call()",
          "exception": "throw new IllegalStateException(\"Fail\");",
          "pathCojunction": "(!(count > 0)) && (!(count > 0)) && (throwException)",
          "symbolicPathConjunction": "(runLatch.countDown()) && (taskLatch.await()) && (throwException)",
          "backwardsPathConjunction": "(!(count > 0)) && (!(count > 0)) && (throwException)",
          "simplifiedPathConjunction": "throwException && count <= 0",
          "z3Inputs": "[count0 = 0, throwException0 = True]\n[count0 = -1, throwException0 = True]\n[count0 = -2, throwException0 = True]\n[count0 = -3, throwException0 = True]\n[count0 = -4, throwException0 = True]\n[count0 = -5, throwException0 = True]\n[count0 = -6, throwException0 = True]\n[count0 = -7, throwException0 = True]\n[count0 = -8, throwException0 = True]\n[count0 = -9, throwException0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nthrowException0 = Bool('throwException0')\n\nconstraints = [\n  And(And(Not(count0 > 0), Not(count0 > 0)), throwException0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\nthrowException = Symbol('throwException')\npath_conjunction = (((~((StrictGreaterThan(count, 0)))) & (~((StrictGreaterThan(count, 0))))) & throwException)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 48,
          "throwingLine": 52,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ListenableFutureTaskTest.Anonymous-3b39323b-58cf-4a13-8a23-9592a062c1c4.call()",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(runLatch.countDown()) && (taskLatch.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 48,
          "throwingLine": 50,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/AbstractIteratorTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractIteratorTest.Anonymous-88a3e58d-87d4-4b11-8571-b58b8df4436b.computeNext()",
          "exception": "throw exception;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 209,
          "throwingLine": 210,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractIteratorTest.Anonymous-c0c662bb-b248-4cbf-ae31-f6ff60bae076.computeNext()",
          "exception": "throw new SomeUncheckedException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 225,
          "throwingLine": 227,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.copyOf(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(multiset == null)) && (elements == null)",
          "symbolicPathConjunction": "(LinkedHashMultiset.create()) && (Iterators.addAll(multiset, elements))",
          "backwardsPathConjunction": "(!(multiset == null)) && (elements == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultiset0_isNull = Bool('multiset0_isNull')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  multiset0 == new LinkedHashMultiset<E>(),\n  And(Not(multiset0_isNull), elements0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 195,
          "throwingLine": 197,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.copyOf(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(multiset == null)",
          "symbolicPathConjunction": "(LinkedHashMultiset.create()) && (Iterators.addAll(multiset, elements))",
          "backwardsPathConjunction": "(multiset == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmultiset0_isNull = Bool('multiset0_isNull')\n\nconstraints = [\n  multiset0 == new LinkedHashMultiset<E>(),\n  multiset0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 195,
          "throwingLine": 197,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.add(E, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 241,
          "throwingLine": 242,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.remove(java.lang.Object, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 253,
          "throwingLine": 254,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.setCount(E, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 265,
          "throwingLine": 266,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultiset.setCount(E, int, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 277,
          "throwingLine": 278,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/java/util/super/java/util/concurrent/Executors.java",
      "methods": [
        {
          "qualifiedSignature": "java.util.concurrent.Executors.callable(java.lang.Runnable, T)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(task == null)",
          "symbolicPathConjunction": "(task == null)",
          "backwardsPathConjunction": "(task == null)",
          "simplifiedPathConjunction": "null == task",
          "z3Inputs": "[task0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntask0_isNull = Bool('task0_isNull')\n\nconstraints = [\n  task0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntask = Symbol('task')\nnull = Symbol('null')\npath_conjunction = (Eq(task, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 18,
          "throwingLine": 20,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.Executors.callable(java.lang.Runnable)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(task == null)",
          "symbolicPathConjunction": "(task == null)",
          "backwardsPathConjunction": "(task == null)",
          "simplifiedPathConjunction": "null == task",
          "z3Inputs": "[task0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntask0_isNull = Bool('task0_isNull')\n\nconstraints = [\n  task0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntask = Symbol('task')\nnull = Symbol('null')\npath_conjunction = (Eq(task, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 25,
          "throwingLine": 27,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/TransformedListIterator.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.TransformedListIterator.set(T)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 63,
          "throwingLine": 64,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TransformedListIterator.add(T)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 68,
          "throwingLine": 69,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/reflect/ImmutableTypeToInstanceMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.reflect.ImmutableTypeToInstanceMap.putInstance(com.google.common.reflect.TypeToken<T>, T)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 113,
          "throwingLine": 114,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.reflect.ImmutableTypeToInstanceMap.putInstance(java.lang.Class<T>, T)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 126,
          "throwingLine": 127,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src/com/google/common/base/GwtSerializationDependencies.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.isPresent()",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 46,
          "throwingLine": 47,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.get()",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 51,
          "throwingLine": 52,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.or(T)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 56,
          "throwingLine": 57,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.or(com.google.common.base.Optional<? extends T>)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 61,
          "throwingLine": 62,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.or(com.google.common.base.Supplier<? extends T>)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 66,
          "throwingLine": 67,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.orNull()",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 71,
          "throwingLine": 72,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.asSet()",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 76,
          "throwingLine": 77,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.transform(com.google.common.base.Function<? super T, V>)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 81,
          "throwingLine": 82,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.equals(java.lang.Object)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 86,
          "throwingLine": 87,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.hashCode()",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 91,
          "throwingLine": 92,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.GwtSerializationDependencies.OptionalDependencies.toString()",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 96,
          "throwingLine": 97,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Maps.newHashMapWithExpectedSize(int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedSize)",
          "pathCojunction": "(expectedSize < 3) && (expectedSize < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedSize < 3) && (expectedSize < 0)",
          "simplifiedPathConjunction": "expectedSize < 0",
          "z3Inputs": "[expectedSize0 = -1]\n[expectedSize0 = -2]\n[expectedSize0 = -3]\n[expectedSize0 = -4]\n[expectedSize0 = -5]\n[expectedSize0 = -6]\n[expectedSize0 = -7]\n[expectedSize0 = -8]\n[expectedSize0 = -9]\n[expectedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedSize0 = Int('expectedSize0')\n\nconstraints = [\n  And(expectedSize0 < 3, expectedSize0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedSize = Symbol('expectedSize', integer=True)\npath_conjunction = ((StrictLessThan(expectedSize, 3)) & (StrictLessThan(expectedSize, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 176,
          "throwingLine": 177,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.newLinkedHashMapWithExpectedSize(int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedSize)",
          "pathCojunction": "(expectedSize < 3) && (expectedSize < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedSize < 3) && (expectedSize < 0)",
          "simplifiedPathConjunction": "expectedSize < 0",
          "z3Inputs": "[expectedSize0 = -1]\n[expectedSize0 = -2]\n[expectedSize0 = -3]\n[expectedSize0 = -4]\n[expectedSize0 = -5]\n[expectedSize0 = -6]\n[expectedSize0 = -7]\n[expectedSize0 = -8]\n[expectedSize0 = -9]\n[expectedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedSize0 = Int('expectedSize0')\n\nconstraints = [\n  And(expectedSize0 < 3, expectedSize0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedSize = Symbol('expectedSize', integer=True)\npath_conjunction = ((StrictLessThan(expectedSize, 3)) & (StrictLessThan(expectedSize, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 244,
          "throwingLine": 245,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.newEnumMap(java.lang.Class<K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(type == null)",
          "symbolicPathConjunction": "(checkNotNull(type))",
          "backwardsPathConjunction": "(type == null)",
          "simplifiedPathConjunction": "null == type",
          "z3Inputs": "[type0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\n\nconstraints = [\n  type0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nnull = Symbol('null')\npath_conjunction = (Eq(type, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 336,
          "throwingLine": 337,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>, com.google.common.base.Equivalence<? super V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(valueEquivalence == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(valueEquivalence))",
          "backwardsPathConjunction": "(valueEquivalence == null)",
          "z3Inputs": "[valueEquivalence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalueEquivalence0_isNull = Bool('valueEquivalence0_isNull')\n\nconstraints = [\n  valueEquivalence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(valueEquivalence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 412,
          "throwingLine": 413,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(left == null)",
          "symbolicPathConjunction": "(checkNotNull(left))",
          "backwardsPathConjunction": "(left == null)",
          "z3Inputs": "[left0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\n\nconstraints = [\n  left0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n? = Symbol('?')\nnull = Symbol('null')\npath_conjunction = (Eq(left, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 602,
          "throwingLine": 603,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(left == null)) && (right == null)",
          "symbolicPathConjunction": "(checkNotNull(left)) && (checkNotNull(right))",
          "backwardsPathConjunction": "(!(left == null)) && (right == null)",
          "z3Inputs": "[left0_isNull = False, right0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\nright0_isNull = Bool('right0_isNull')\n\nconstraints = [\n  And(Not(left0_isNull), right0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n? = Symbol('?')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(left, null)))) & (Eq(right, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 602,
          "throwingLine": 604,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-6d52a084-7c33-46bb-b978-148062b24d86.add(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 873,
          "throwingLine": 874,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-d52575b6-ae2e-4976-8ee1-a78c94a38901.addAll(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 878,
          "throwingLine": 879,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-b12309a3-b7c1-4ce3-8438-fac43207909c.add(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 892,
          "throwingLine": 893,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-64ae0e52-9e37-4c7f-b936-1aae9463ac87.addAll(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 897,
          "throwingLine": 898,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.toMap(java.lang.Iterable<K>, com.google.common.base.Function<? super K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(valueFunction == null)",
          "symbolicPathConjunction": "(toMap(keys.iterator(), valueFunction))",
          "backwardsPathConjunction": "(valueFunction == null)",
          "z3Inputs": "[valueFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalueFunction0_isNull = Bool('valueFunction0_isNull')\n\nconstraints = [\n  valueFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(valueFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 938,
          "throwingLine": 939,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.toMap(java.util.Iterator<K>, com.google.common.base.Function<? super K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(valueFunction == null)",
          "symbolicPathConjunction": "(checkNotNull(valueFunction))",
          "backwardsPathConjunction": "(valueFunction == null)",
          "z3Inputs": "[valueFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalueFunction0_isNull = Bool('valueFunction0_isNull')\n\nconstraints = [\n  valueFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(valueFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 959,
          "throwingLine": 960,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.UnmodifiableBiMap.forcePut(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1295,
          "throwingLine": 1296,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-008d0fb8-d787-4f6a-a1b0-ed568168f1ba.apply(java.util.Map.Entry<K, V1>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(transformer == null)",
          "symbolicPathConjunction": "(checkNotNull(transformer))",
          "backwardsPathConjunction": "(transformer == null)",
          "z3Inputs": "[transformer0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntransformer0_isNull = Bool('transformer0_isNull')\n\nconstraints = [\n  transformer0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(transformer, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1622,
          "throwingLine": 1623,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterKeys(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(keyPredicate == null)) && (unfiltered == null)",
          "symbolicPathConjunction": "(checkNotNull(keyPredicate)) && (filterEntries(unfiltered, Maps.<K>keyPredicateOnEntries(keyPredicate)))",
          "backwardsPathConjunction": "(!(keyPredicate == null)) && (unfiltered == null)",
          "z3Inputs": "[keyPredicate0_isNull = False, unfiltered0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyPredicate0_isNull = Bool('keyPredicate0_isNull')\nunfiltered0_isNull = Bool('unfiltered0_isNull')\n\nconstraints = [\n  And(Not(keyPredicate0_isNull), unfiltered0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(keyPredicate, null)))) & (Eq(unfiltered, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1848,
          "throwingLine": 1850,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterKeys(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyPredicate == null)",
          "symbolicPathConjunction": "(checkNotNull(keyPredicate))",
          "backwardsPathConjunction": "(keyPredicate == null)",
          "z3Inputs": "[keyPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyPredicate0_isNull = Bool('keyPredicate0_isNull')\n\nconstraints = [\n  keyPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1848,
          "throwingLine": 1849,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterValues(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unfiltered == null)",
          "symbolicPathConjunction": "(filterEntries(unfiltered, Maps.<V>valuePredicateOnEntries(valuePredicate)))",
          "backwardsPathConjunction": "(unfiltered == null)",
          "z3Inputs": "[unfiltered0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\n\nconstraints = [\n  unfiltered0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(unfiltered, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1960,
          "throwingLine": 1961,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterEntries(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(Maps.filterSortedIgnoreNavigable(unfiltered, predicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2040,
          "throwingLine": 2041,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unfiltered == null)",
          "symbolicPathConjunction": "(checkNotNull(unfiltered))",
          "backwardsPathConjunction": "(unfiltered == null)",
          "z3Inputs": "[unfiltered0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\n\nconstraints = [\n  unfiltered0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(unfiltered, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2081,
          "throwingLine": 2082,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(unfiltered == null)) && (entryPredicate == null)",
          "symbolicPathConjunction": "(checkNotNull(unfiltered)) && (checkNotNull(entryPredicate))",
          "backwardsPathConjunction": "(!(unfiltered == null)) && (entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True, unfiltered0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  And(Not(unfiltered0_isNull), entryPredicate0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(unfiltered, null)))) & (Eq(entryPredicate, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2081,
          "throwingLine": 2083,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.AbstractFilteredMap.put(K, V)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(apply(key, value)))",
          "symbolicPathConjunction": "(checkArgument(apply(key, value)))",
          "backwardsPathConjunction": "(!(apply(key, value)))",
          "simplifiedPathConjunction": "!apply(key, value)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(apply(key0, value0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n_apply = Symbol('_apply')\npath_conjunction = (~(_apply))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 2117,
          "throwingLine": 2118,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.FilteredEntryMap.EntrySet.iterator()",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(apply(getKey(), newValue)))",
          "symbolicPathConjunction": "(checkArgument(apply(getKey(), newValue)))",
          "backwardsPathConjunction": "(!(apply(getKey(), newValue)))",
          "simplifiedPathConjunction": "!apply(getKey(), newValue)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(apply(getKey(), newValue))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_apply = Symbol('_apply')\n_getKey = Symbol('_getKey')\npath_conjunction = (~(_apply))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 2259,
          "throwingLine": 2260,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.FilteredEntryMap.EntrySet.Anonymous-04bd088f-02ad-47b3-9fda-032c08f85c83.setValue(V)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(apply(getKey(), newValue)))",
          "symbolicPathConjunction": "(checkArgument(apply(getKey(), newValue)))",
          "backwardsPathConjunction": "(!(apply(getKey(), newValue)))",
          "simplifiedPathConjunction": "!apply(getKey(), newValue)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(apply(getKey(), newValue0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnewValue = Symbol('newValue')\n_apply = Symbol('_apply')\n_getKey = Symbol('_getKey')\npath_conjunction = (~(_apply))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 2270,
          "throwingLine": 2271,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.FilteredEntryBiMap.forcePut(K, V)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(apply(key, value)))",
          "symbolicPathConjunction": "(checkArgument(apply(key, value)))",
          "backwardsPathConjunction": "(!(apply(key, value)))",
          "simplifiedPathConjunction": "!apply(key, value)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(apply(key0, value0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n_apply = Symbol('_apply')\npath_conjunction = (~(_apply))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 2475,
          "throwingLine": 2476,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/net/PercentEscaper.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.net.PercentEscaper.escape(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 159,
          "throwingLine": 160,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Doubles.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.indexOf(double[], double[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 166,
          "throwingLine": 167,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.indexOf(double[], double[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 166,
          "throwingLine": 168,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.min(double...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 218,
          "throwingLine": 219,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.max(double...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 236,
          "throwingLine": 237,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.join(java.lang.String, double...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 350,
          "throwingLine": 351,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.DoubleArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 483,
          "throwingLine": 484,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.DoubleArrayAsList.set(int, java.lang.Double)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nelement0 = Real('element0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 520,
          "throwingLine": 521,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Doubles.DoubleArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 529,
          "throwingLine": 531,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/escape/UnicodeEscaper.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.escape.UnicodeEscaper.escape(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 151,
          "throwingLine": 152,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/reflect/TypeToken.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.reflect.TypeToken.where(com.google.common.reflect.TypeParameter<X>, com.google.common.reflect.TypeToken<X>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(runtimeType == null)",
          "symbolicPathConjunction": "(resolver.resolveType(runtimeType))",
          "backwardsPathConjunction": "(runtimeType == null)",
          "simplifiedPathConjunction": "null == runtimeType",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nruntimeType0_isNull = Bool('runtimeType0_isNull')\n\nconstraints = [\n  resolver0 == new TypeResolver(typeTable0.where(ImmutableMap.of(new TypeResolver.TypeVariableKey(typeParam0.typeVariable), typeArg0.runtimeType))),\n  runtimeType0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nruntimeType = Symbol('runtimeType')\nnull = Symbol('null')\npath_conjunction = (Eq(runtimeType, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 204,
          "throwingLine": 210,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.reflect.TypeToken.where(com.google.common.reflect.TypeParameter<X>, java.lang.Class<X>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(runtimeType == null)",
          "symbolicPathConjunction": "(where(typeParam, of(typeArg)))",
          "backwardsPathConjunction": "(runtimeType == null)",
          "simplifiedPathConjunction": "null == runtimeType",
          "z3Inputs": "[runtimeType0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nruntimeType0_isNull = Bool('runtimeType0_isNull')\n\nconstraints = [\n  runtimeType0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nruntimeType = Symbol('runtimeType')\nnull = Symbol('null')\npath_conjunction = (Eq(runtimeType, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 228,
          "throwingLine": 229,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.reflect.TypeToken.resolveType(java.lang.reflect.Type)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(type == null)",
          "symbolicPathConjunction": "(checkNotNull(type))",
          "backwardsPathConjunction": "(type == null)",
          "simplifiedPathConjunction": "null == type",
          "z3Inputs": "[type0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\n\nconstraints = [\n  type0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nnull = Symbol('null')\npath_conjunction = (Eq(type, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 239,
          "throwingLine": 240,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.reflect.TypeToken.isSubtypeOf(java.lang.reflect.Type)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(supertype == null)",
          "symbolicPathConjunction": "(checkNotNull(supertype))",
          "backwardsPathConjunction": "(supertype == null)",
          "simplifiedPathConjunction": "null == supertype",
          "z3Inputs": "[supertype0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsupertype0_isNull = Bool('supertype0_isNull')\n\nconstraints = [\n  supertype0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsupertype = Symbol('supertype')\nnull = Symbol('null')\npath_conjunction = (Eq(supertype, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 511,
          "throwingLine": 512,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.reflect.TypeToken.isArray()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(runtimeType == null)",
          "symbolicPathConjunction": "(getComponentType())",
          "backwardsPathConjunction": "(runtimeType == null)",
          "simplifiedPathConjunction": "null == runtimeType",
          "z3Inputs": "[runtimeType0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nruntimeType0_isNull = Bool('runtimeType0_isNull')\n\nconstraints = [\n  runtimeType0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nruntimeType = Symbol('runtimeType')\nnull = Symbol('null')\npath_conjunction = (Eq(runtimeType, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 550,
          "throwingLine": 551,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.reflect.TypeToken.getComponentType()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(runtimeType == null)",
          "symbolicPathConjunction": "(checkNotNull(type))",
          "backwardsPathConjunction": "(runtimeType == null)",
          "simplifiedPathConjunction": "null == runtimeType",
          "z3Inputs": "[runtimeType0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nruntimeType0_isNull = Bool('runtimeType0_isNull')\n\nconstraints = [\n  runtimeType0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nruntimeType = Symbol('runtimeType')\nnull = Symbol('null')\npath_conjunction = (Eq(runtimeType, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 601,
          "throwingLine": 602,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.reflect.TypeToken.InterfaceSet.classes()",
          "exception": "throw new UnsupportedOperationException(\"interfaces().classes() not supported.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 748,
          "throwingLine": 749,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.reflect.TypeToken.ClassSet.interfaces()",
          "exception": "throw new UnsupportedOperationException(\"classes().interfaces() not supported.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 789,
          "throwingLine": 790,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/CharMatcherTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.CharMatcherTest.Anonymous-4afc4f35-2070-492f-ab2b-25de62713053.matches(char)",
          "exception": "throw new AssertionFailedError(\"You weren't supposed to actually invoke me!\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 48,
          "throwingLine": 49,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ConstrainedMapTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ConstrainedMapTest.TestConstraint.checkKeyValue(java.lang.String, java.lang.String)",
          "exception": "throw new TestValueException();",
          "pathCojunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "symbolicPathConjunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "backwardsPathConjunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "z3Inputs": "[key0 = \"\",\n value0 = \"test\",\n TEST_VALUE0 = \"test\",\n TEST_KEY0 = \"42\"]\n[TEST_KEY0 = \"42\",\n key0 = \"A\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"B\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"C\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"D\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"E\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"F\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"G\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"H\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"I\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nTEST_KEY0 = String('TEST_KEY0')\nTEST_VALUE0 = String('TEST_VALUE0')\n\nconstraints = [\n  TEST_KEY0 == StringVal(\"42\"), \n  TEST_VALUE0 == StringVal(\"test\"), \n  And(Not(TEST_KEY0 == key0), TEST_VALUE0 == value0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n\"42\"_equals = Symbol('\"42\"_equals')\n\"test\"_equals = Symbol('\"test\"_equals')\npath_conjunction = ((~(\"42\"_equals)) & \"test\"_equals)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 99,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConstrainedMapTest.TestConstraint.checkKeyValue(java.lang.String, java.lang.String)",
          "exception": "throw new TestKeyException();",
          "pathCojunction": "(TEST_KEY.equals(key))",
          "symbolicPathConjunction": "(TEST_KEY.equals(key))",
          "backwardsPathConjunction": "(TEST_KEY.equals(key))",
          "z3Inputs": "[key0 = \"42\", TEST_KEY0 = \"42\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nTEST_KEY0 = String('TEST_KEY0')\n\nconstraints = [\n  TEST_KEY0 == StringVal(\"42\"), \n  TEST_KEY0 == key0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\n\"42\"_equals = Symbol('\"42\"_equals')\npath_conjunction = \"42\"_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 96,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Tables.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Tables.newCustomTable(java.util.Map<R, java.util.Map<C, V>>, com.google.common.base.Supplier<? extends java.util.Map<C, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(!(backingMap.isEmpty()))) && (factory == null)",
          "symbolicPathConjunction": "(checkArgument(backingMap.isEmpty())) && (checkNotNull(factory))",
          "backwardsPathConjunction": "(!(!(backingMap.isEmpty()))) && (factory == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfactory0_isNull = Bool('factory0_isNull')\n\nconstraints = [\n  And(Not(Not(backingMap0.isEmpty())), factory0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 299,
          "throwingLine": 301,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Tables.newCustomTable(java.util.Map<R, java.util.Map<C, V>>, com.google.common.base.Supplier<? extends java.util.Map<C, V>>)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(backingMap.isEmpty()))",
          "symbolicPathConjunction": "(checkArgument(backingMap.isEmpty()))",
          "backwardsPathConjunction": "(!(backingMap.isEmpty()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(backingMap0.isEmpty())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 299,
          "throwingLine": 300,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Tables.TransformedTable.put(R, C, V2)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 370,
          "throwingLine": 371,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Tables.TransformedTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V2>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 375,
          "throwingLine": 376,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Tables.UnmodifiableTable.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 491,
          "throwingLine": 492,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Tables.UnmodifiableTable.put(R, C, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 512,
          "throwingLine": 513,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Tables.UnmodifiableTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 517,
          "throwingLine": 518,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Tables.UnmodifiableTable.remove(java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 522,
          "throwingLine": 523,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 333,
          "throwingLine": 334,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 345,
          "throwingLine": 346,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/collect/testing/google/ListGenerators.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.google.ListGenerators.UnhashableElementsImmutableListGenerator.create(com.google.common.collect.testing.UnhashableObject[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "simplifiedPathConjunction": "elements == null",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 145,
          "throwingLine": 146,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ForwardingMultisetTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.StandardImplForwardingMultiset.retainAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(collection == null)",
          "symbolicPathConjunction": "(checkNotNull(elementsToRetain))",
          "backwardsPathConjunction": "(collection == null)",
          "simplifiedPathConjunction": "collection == null",
          "z3Inputs": "[collection0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncollection0_isNull = Bool('collection0_isNull')\n\nconstraints = [\n  collection0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncollection = Symbol('collection')\nnull = Symbol('null')\npath_conjunction = (Eq(collection, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 87,
          "throwingLine": 88,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.StandardImplForwardingMultiset.setCount(T, int, int)",
          "exception": "throw new IllegalArgumentException(\"oldCount\" + \" cannot be negative but was: \" + oldCount)",
          "pathCojunction": "(oldCount < 0)",
          "symbolicPathConjunction": "(checkNonnegative(oldCount, \"oldCount\"))",
          "backwardsPathConjunction": "(oldCount < 0)",
          "simplifiedPathConjunction": "oldCount < 0",
          "z3Inputs": "[oldCount0 = -1]\n[oldCount0 = -2]\n[oldCount0 = -3]\n[oldCount0 = -4]\n[oldCount0 = -5]\n[oldCount0 = -6]\n[oldCount0 = -7]\n[oldCount0 = -8]\n[oldCount0 = -9]\n[oldCount0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  oldCount0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noldCount = Symbol('oldCount', integer=True)\npath_conjunction = (StrictLessThan(oldCount, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 111,
          "throwingLine": 112,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-2fc32eb5-7bdd-4056-84a3-ae85283f836c.add(java.lang.String, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0 = String('element0')\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 187,
          "throwingLine": 188,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-cf5884f1-e60e-4993-9e4d-317865cf768f.add(com.google.common.collect.Multiset.Entry<java.lang.String>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 196,
          "throwingLine": 197,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-4ac3cf7d-5dbd-407a-be6b-9491722a0da8.addAll(java.util.Collection<? extends com.google.common.collect.Multiset.Entry<java.lang.String>>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 200,
          "throwingLine": 201,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-6644051e-2df5-475a-a3d6-6d506412a1ec.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 203,
          "throwingLine": 204,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-738a2e70-077a-47ba-8007-6c2578465b52.contains(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 206,
          "throwingLine": 207,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-acbcdfda-9555-4e03-ad01-eae4ccb524ec.containsAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 209,
          "throwingLine": 210,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-81da7747-21e7-4b28-aea2-985f8ec10a58.isEmpty()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 212,
          "throwingLine": 213,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-84daf932-dabf-4fd5-92be-a43ff87aa9d6.remove(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 215,
          "throwingLine": 216,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-1abb85c1-238f-4ec1-9a5d-c62bfb6e211b.removeAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 218,
          "throwingLine": 219,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-c1202a13-4206-49cf-8ee7-a8a6efb6a85f.retainAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 221,
          "throwingLine": 222,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-14568ba1-f75f-4878-a5fd-583b0d8fd8f1.equals(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 226,
          "throwingLine": 227,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-57bb1a08-a693-45f4-9096-27093d39eb18.remove(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 229,
          "throwingLine": 230,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-d7d363e4-5d47-4373-bd9a-64f39f14a319.setCount(java.lang.String, int, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0 = String('element0')\noldCount0 = Int('oldCount0')\nnewCount0 = Int('newCount0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 233,
          "throwingLine": 234,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-1ae65c88-bb59-4dec-9f11-5ee61f1ee67d.setCount(java.lang.String, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0 = String('element0')\ncount0 = Int('count0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 236,
          "throwingLine": 237,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-1a8dcf47-eda4-4f43-85cb-5bf2e03aa81d.add(java.lang.String)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0 = String('element0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 239,
          "throwingLine": 240,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-b1147126-712f-49b2-8c30-a2717ff07c4f.addAll(java.util.Collection<? extends java.lang.String>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 243,
          "throwingLine": 244,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-10bfc544-e66c-4c4e-adbe-ba676c9f03f7.iterator()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 246,
          "throwingLine": 247,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-af99f1aa-e98f-42ec-b2a7-8851f7c8e03b.removeAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 249,
          "throwingLine": 250,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-1224227b-c31a-4150-ae93-0deb1f2a3de5.retainAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 252,
          "throwingLine": 253,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingMultisetTest.Anonymous-38306f4a-f6e5-40a8-8a9a-b9a32790273e.size()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 255,
          "throwingLine": 256,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/cache/CacheBuilder.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.initialCapacity(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(initialCapacity >= 0))",
          "symbolicPathConjunction": "(checkArgument(initialCapacity >= 0))",
          "backwardsPathConjunction": "(!(initialCapacity >= 0))",
          "simplifiedPathConjunction": "initialCapacity < 0",
          "z3Inputs": "[initialCapacity0 = -1]\n[initialCapacity0 = -2]\n[initialCapacity0 = -3]\n[initialCapacity0 = -4]\n[initialCapacity0 = -5]\n[initialCapacity0 = -6]\n[initialCapacity0 = -7]\n[initialCapacity0 = -8]\n[initialCapacity0 = -9]\n[initialCapacity0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninitialCapacity0 = Int('initialCapacity0')\n\nconstraints = [\n  Not(initialCapacity0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninitialCapacity = Symbol('initialCapacity', integer=True)\npath_conjunction = (~((GreaterThan(initialCapacity, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 329,
          "throwingLine": 332,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.concurrencyLevel(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(concurrencyLevel > 0))",
          "symbolicPathConjunction": "(checkArgument(concurrencyLevel > 0))",
          "backwardsPathConjunction": "(!(concurrencyLevel > 0))",
          "simplifiedPathConjunction": "concurrencyLevel <= 0",
          "z3Inputs": "[concurrencyLevel0 = 0]\n[concurrencyLevel0 = -1]\n[concurrencyLevel0 = -2]\n[concurrencyLevel0 = -3]\n[concurrencyLevel0 = -4]\n[concurrencyLevel0 = -5]\n[concurrencyLevel0 = -6]\n[concurrencyLevel0 = -7]\n[concurrencyLevel0 = -8]\n[concurrencyLevel0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nconcurrencyLevel0 = Int('concurrencyLevel0')\n\nconstraints = [\n  Not(concurrencyLevel0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nconcurrencyLevel = Symbol('concurrencyLevel', integer=True)\npath_conjunction = (~((StrictGreaterThan(concurrencyLevel, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 371,
          "throwingLine": 374,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.maximumWeight(long)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"maximum weight must not be negative\"))",
          "pathCojunction": "(!(weight >= 0))",
          "symbolicPathConjunction": "(checkArgument(weight >= 0, \"maximum weight must not be negative\"))",
          "backwardsPathConjunction": "(!(weight >= 0))",
          "simplifiedPathConjunction": "weight < 0",
          "z3Inputs": "[weight0 = -9223372036854775808,\n maximumWeight0 = -9223372036854775808]\n[maximumWeight0 = -1, weight0 = -1]\n[maximumWeight0 = -2, weight0 = -2]\n[maximumWeight0 = -3, weight0 = -3]\n[maximumWeight0 = -4, weight0 = -4]\n[maximumWeight0 = -5, weight0 = -5]\n[maximumWeight0 = -6, weight0 = -6]\n[maximumWeight0 = -7, weight0 = -7]\n[maximumWeight0 = -8, weight0 = -8]\n[maximumWeight0 = -9, weight0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweight0 = Int('weight0')\nmaximumWeight0 = Int('maximumWeight0')\n\nconstraints = [\n  maximumWeight0 == weight0,\n  weight0 >= -9223372036854775808, weight0 <= 9223372036854775807, # implicit\n  maximumWeight0 >= -9223372036854775808, maximumWeight0 <= 9223372036854775807, # implicit\n  Not(weight0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nweight = Symbol('weight')\npath_conjunction = (~((GreaterThan(weight, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 434,
          "throwingLine": 440,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.refreshAfterWrite(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unit == null)",
          "symbolicPathConjunction": "(checkNotNull(unit))",
          "backwardsPathConjunction": "(unit == null)",
          "simplifiedPathConjunction": "null == unit",
          "z3Inputs": "[duration0 = -9223372036854775808, unit0_isNull = True]\n[unit0_isNull = True, duration0 = 0]\n[unit0_isNull = True, duration0 = -1]\n[unit0_isNull = True, duration0 = -2]\n[unit0_isNull = True, duration0 = -3]\n[unit0_isNull = True, duration0 = -4]\n[unit0_isNull = True, duration0 = -5]\n[unit0_isNull = True, duration0 = -6]\n[unit0_isNull = True, duration0 = -7]\n[unit0_isNull = True, duration0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\nunit0_isNull = Bool('unit0_isNull')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  unit0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunit = Symbol('unit')\nnull = Symbol('null')\npath_conjunction = (Eq(unit, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 676,
          "throwingLine": 677,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build(com.google.common.cache.CacheLoader<? super K1, V1>)",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "((!(weigher == null)) && (strictParsing) && (checkState(maximumWeight != UNSET_INT, \"weigher requires maximumWeight\")))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 784,
          "throwingLine": 785,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build(com.google.common.cache.CacheLoader<? super K1, V1>)",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "((weigher == null) && (checkState(maximumWeight == UNSET_INT, \"maximumWeight requires weigher\")))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 784,
          "throwingLine": 785,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "((!(weigher == null)) && (strictParsing) && (checkState(maximumWeight != UNSET_INT, \"weigher requires maximumWeight\")))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 801,
          "throwingLine": 802,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"refreshAfterWrite requires a LoadingCache\"))",
          "pathCojunction": "(!(weigher == null)) && (!(strictParsing)) && (maximumWeight == -1) && (!(refreshNanos == UNSET_INT))",
          "symbolicPathConjunction": "((!(weigher == null)) && (!(strictParsing)) && (maximumWeight == -1)) && (checkState(refreshNanos == UNSET_INT, \"refreshAfterWrite requires a LoadingCache\"))",
          "backwardsPathConjunction": "(!(weigher == null)) && (!(strictParsing)) && (maximumWeight == -1) && (!(refreshNanos == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nmaximumWeight0 = Int('maximumWeight0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(And(Not(weigher0_isNull), Not(strictParsing0)), maximumWeight0 == -1), Not(refreshNanos == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nmaximumWeight = Symbol('maximumWeight', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(weigher, null)))) & (~(strictParsing))) & (Eq(maximumWeight, -1))) & (~((Eq(refreshNanos, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 801,
          "throwingLine": 803,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "((weigher == null) && (checkState(maximumWeight == UNSET_INT, \"maximumWeight requires weigher\")))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 801,
          "throwingLine": 802,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"refreshAfterWrite requires a LoadingCache\"))",
          "pathCojunction": "(!(weigher == null)) && (!(strictParsing)) && (!(maximumWeight == -1)) && (!(refreshNanos == UNSET_INT))",
          "symbolicPathConjunction": "((!(weigher == null)) && (!(strictParsing)) && (!(maximumWeight == -1))) && (checkState(refreshNanos == UNSET_INT, \"refreshAfterWrite requires a LoadingCache\"))",
          "backwardsPathConjunction": "(!(weigher == null)) && (!(strictParsing)) && (!(maximumWeight == -1)) && (!(refreshNanos == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nmaximumWeight0 = Int('maximumWeight0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(And(Not(weigher0_isNull), Not(strictParsing0)), Not(maximumWeight0 == -1)), Not(refreshNanos == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nmaximumWeight = Symbol('maximumWeight', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(weigher, null)))) & (~(strictParsing))) & (~((Eq(maximumWeight, -1))))) & (~((Eq(refreshNanos, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 801,
          "throwingLine": 803,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"refreshAfterWrite requires a LoadingCache\"))",
          "pathCojunction": "(weigher == null) && (!(!(maximumWeight == UNSET_INT))) && (!(refreshNanos == UNSET_INT))",
          "symbolicPathConjunction": "((weigher == null) && (checkState(maximumWeight == UNSET_INT, \"maximumWeight requires weigher\"))) && (checkState(refreshNanos == UNSET_INT, \"refreshAfterWrite requires a LoadingCache\"))",
          "backwardsPathConjunction": "(weigher == null) && (!(!(maximumWeight == UNSET_INT))) && (!(refreshNanos == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(weigher0_isNull, Not(Not(maximumWeight == UNSET_INT))), Not(refreshNanos == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((Eq(weigher, null)) & (~((~((Eq(maximumWeight, UNSET_INT))))))) & (~((Eq(refreshNanos, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 801,
          "throwingLine": 803,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilder.build()",
          "exception": "throw new IllegalStateException(String.valueOf(\"refreshAfterWrite requires a LoadingCache\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(!(maximumWeight != UNSET_INT))) && (!(refreshNanos == UNSET_INT))",
          "symbolicPathConjunction": "((!(weigher == null)) && (strictParsing) && (checkState(maximumWeight != UNSET_INT, \"weigher requires maximumWeight\"))) && (checkState(refreshNanos == UNSET_INT, \"refreshAfterWrite requires a LoadingCache\"))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(!(maximumWeight != UNSET_INT))) && (!(refreshNanos == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(And(Not(weigher0_isNull), strictParsing0), Not(Not(maximumWeight != UNSET_INT))), Not(refreshNanos == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(weigher, null)))) & strictParsing) & (~((~((Ne(maximumWeight, UNSET_INT))))))) & (~((Eq(refreshNanos, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 801,
          "throwingLine": 803,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/RateLimiter.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiter.create(double)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(permitsPerSecond > 0.0 && !Double.isNaN(permitsPerSecond)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(permitsPerSecond > 0.0 && !Double.isNaN(permitsPerSecond)))",
          "simplifiedPathConjunction": "Double.isNaN(permitsPerSecond) || permitsPerSecond <= 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npermitsPerSecond0 = Real('permitsPerSecond0')\n\nconstraints = [\n  Not(And(permitsPerSecond0 > 0.0, Not(Double.isNaN(permitsPerSecond0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npermitsPerSecond = Symbol('permitsPerSecond', integer=True)\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(permitsPerSecond, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 116,
          "throwingLine": 130,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiter.create(double, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(permitsPerSecond > 0.0 && !Double.isNaN(permitsPerSecond)))",
          "symbolicPathConjunction": "(rateLimiter.setRate(permitsPerSecond))",
          "backwardsPathConjunction": "(!(permitsPerSecond > 0.0 && !Double.isNaN(permitsPerSecond)))",
          "simplifiedPathConjunction": "Double.isNaN(permitsPerSecond) || permitsPerSecond <= 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npermitsPerSecond0 = Real('permitsPerSecond0')\nwarmupPeriod0 = Int('warmupPeriod0')\n\nconstraints = [\n  warmupPeriod0 >= -9223372036854775808, warmupPeriod0 <= 9223372036854775807, # implicit\n  Not(And(permitsPerSecond0 > 0.0, Not(Double.isNaN(permitsPerSecond0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npermitsPerSecond = Symbol('permitsPerSecond', integer=True)\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(permitsPerSecond, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 168,
          "throwingLine": 170,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.RateLimiter.setRate(double)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"rate must be positive\"))",
          "pathCojunction": "(!(permitsPerSecond > 0.0 && !Double.isNaN(permitsPerSecond)))",
          "symbolicPathConjunction": "(checkArgument(permitsPerSecond > 0.0 && !Double.isNaN(permitsPerSecond), \"rate must be positive\"))",
          "backwardsPathConjunction": "(!(permitsPerSecond > 0.0 && !Double.isNaN(permitsPerSecond)))",
          "simplifiedPathConjunction": "Double.isNaN(permitsPerSecond) || permitsPerSecond <= 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npermitsPerSecond0 = Real('permitsPerSecond0')\n\nconstraints = [\n  Not(And(permitsPerSecond0 > 0.0, Not(Double.isNaN(permitsPerSecond0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npermitsPerSecond = Symbol('permitsPerSecond', integer=True)\nDouble_isNaN = Symbol('Double_isNaN')\npath_conjunction = (~(((StrictGreaterThan(permitsPerSecond, 0.0)) & (~(Double_isNaN)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 228,
          "throwingLine": 229,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.JSR166TestCase.tearDown()",
          "exception": "throw new AssertionFailedError(\"interrupt status set in main thread\");",
          "pathCojunction": "(!(t != null)) && (Thread.interrupted())",
          "symbolicPathConjunction": "(!(t != null)) && (Thread.interrupted())",
          "backwardsPathConjunction": "(!(threadFailure.getAndSet(null) != null)) && (Thread.interrupted())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nt0_isNull = Bool('t0_isNull')\n\nconstraints = [\n  threadFailure0 == new AtomicReference<Throwable>(null),\n  t0 == threadFailure0.getAndSet(null),\n  And(Not(Not(t0_isNull)), Thread.interrupted())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnew AtomicReference<Throwable>(null)_getAndSet = Symbol('new AtomicReference<Throwable>(null)_getAndSet')\nThread_interrupted = Symbol('Thread_interrupted')\nnull = Symbol('null')\npath_conjunction = ((~((Ne(new AtomicReference<Throwable>(null)_getAndSet, null)))) & Thread_interrupted)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 327,
          "throwingLine": 345,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.JSR166TestCase.NPETask.call()",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 965,
          "throwingLine": 965,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/AbstractIteratorTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.AbstractIteratorTest.Anonymous-11fc041e-d7fc-4d2d-922c-4ce535660255.computeNext()",
          "exception": "throw exception;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 112,
          "throwingLine": 113,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.AbstractIteratorTest.Anonymous-d3017cf6-8e39-495b-8da4-6ac8c7c20e72.computeNext()",
          "exception": "throw new SomeUncheckedException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 128,
          "throwingLine": 130,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Stopwatch.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Stopwatch.createStarted(com.google.common.base.Ticker)",
          "exception": "throw new IllegalStateException(String.valueOf(\"This stopwatch is already running.\"))",
          "pathCojunction": "(!(!isRunning))",
          "symbolicPathConjunction": "(new Stopwatch(ticker).start())",
          "backwardsPathConjunction": "(!(!isRunning))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(Not(isRunning))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~((~(isRunning))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 123,
          "throwingLine": 124,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError()",
          "pathCojunction": "(true)",
          "symbolicPathConjunction": "(desiredUnit.convert(elapsedNanos(), NANOSECONDS))",
          "backwardsPathConjunction": "(true)",
          "simplifiedPathConjunction": "true",
          "z3Inputs": "[]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = True\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 200,
          "throwingLine": 201,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Stopwatch.toString()",
          "exception": "throw new AssertionError()",
          "pathCojunction": "(true)",
          "symbolicPathConjunction": "(!(DAYS.convert(nanos, NANOSECONDS)))",
          "backwardsPathConjunction": "(true)",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnanos0 = Int('nanos0')\n\nconstraints = [\n  nanos0 == elapsedNanos(),\n  nanos0 >= -9223372036854775808, nanos0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = True\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 209,
          "throwingLine": 212,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableBiMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableBiMap.forcePut(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 318,
          "throwingLine": 319,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/MapConstraintsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MapConstraintsTest.TestConstraint.checkKeyValue(java.lang.String, java.lang.Integer)",
          "exception": "throw new TestKeyException();",
          "pathCojunction": "(TEST_KEY.equals(key))",
          "symbolicPathConjunction": "(TEST_KEY.equals(key))",
          "backwardsPathConjunction": "(TEST_KEY.equals(key))",
          "z3Inputs": "[key0 = \"test\", TEST_KEY0 = \"test\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Int('value0')\nTEST_KEY0 = String('TEST_KEY0')\n\nconstraints = [\n  TEST_KEY0 == StringVal(\"test\"), \n  TEST_KEY0 == key0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\n\"test\"_equals = Symbol('\"test\"_equals')\npath_conjunction = \"test\"_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 72,
          "throwingLine": 74,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapConstraintsTest.Anonymous-ae822527-d708-444c-a514-69d3d044d34f.keySet()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 658,
          "throwingLine": 659,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapConstraintsTest.Anonymous-7fe28ab2-10d0-4217-bc14-c24a8c4bf26a.values()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 661,
          "throwingLine": 662,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/cache/LocalCache.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.getValueReference()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 932,
          "throwingLine": 933,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.setValueReference(com.google.common.cache.LocalCache.ValueReference<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 937,
          "throwingLine": 938,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.getNext()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 942,
          "throwingLine": 943,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.getHash()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 947,
          "throwingLine": 948,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.getKey()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 952,
          "throwingLine": 953,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.getAccessTime()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 957,
          "throwingLine": 958,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.setAccessTime(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntime0 = Int('time0')\n\nconstraints = [\n  time0 >= -9223372036854775808, time0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 962,
          "throwingLine": 963,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.getNextInAccessQueue()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 967,
          "throwingLine": 968,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.setNextInAccessQueue(com.google.common.cache.LocalCache.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 972,
          "throwingLine": 973,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.getPreviousInAccessQueue()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 977,
          "throwingLine": 978,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 982,
          "throwingLine": 983,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.getWriteTime()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 987,
          "throwingLine": 988,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.setWriteTime(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntime0 = Int('time0')\n\nconstraints = [\n  time0 >= -9223372036854775808, time0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 992,
          "throwingLine": 993,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.getNextInWriteQueue()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 997,
          "throwingLine": 998,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.setNextInWriteQueue(com.google.common.cache.LocalCache.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1002,
          "throwingLine": 1003,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.getPreviousInWriteQueue()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1007,
          "throwingLine": 1008,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.AbstractReferenceEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1012,
          "throwingLine": 1013,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.getAccessTime()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1310,
          "throwingLine": 1311,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.setAccessTime(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntime0 = Int('time0')\n\nconstraints = [\n  time0 >= -9223372036854775808, time0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1315,
          "throwingLine": 1316,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.getNextInAccessQueue()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1320,
          "throwingLine": 1321,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.setNextInAccessQueue(com.google.common.cache.LocalCache.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1325,
          "throwingLine": 1326,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.getPreviousInAccessQueue()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1330,
          "throwingLine": 1331,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1335,
          "throwingLine": 1336,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.getWriteTime()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1342,
          "throwingLine": 1343,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.setWriteTime(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntime0 = Int('time0')\n\nconstraints = [\n  time0 >= -9223372036854775808, time0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1347,
          "throwingLine": 1348,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.getNextInWriteQueue()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1352,
          "throwingLine": 1353,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.setNextInWriteQueue(com.google.common.cache.LocalCache.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1357,
          "throwingLine": 1358,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.getPreviousInWriteQueue()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1362,
          "throwingLine": 1363,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WeakEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1367,
          "throwingLine": 1368,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.put(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 4160,
          "throwingLine": 4162,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.put(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 4160,
          "throwingLine": 4161,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.putIfAbsent(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 4168,
          "throwingLine": 4169,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.putIfAbsent(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 4168,
          "throwingLine": 4170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.replace(K, V, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 4201,
          "throwingLine": 4202,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.replace(K, V, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (newValue == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(newValue))",
          "backwardsPathConjunction": "(!(key == null)) && (newValue == null)",
          "simplifiedPathConjunction": "newValue == null && key != null",
          "z3Inputs": "[key0_isNull = False, newValue0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nnewValue0_isNull = Bool('newValue0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), newValue0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnewValue = Symbol('newValue')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(newValue, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 4201,
          "throwingLine": 4203,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.replace(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 4212,
          "throwingLine": 4214,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.replace(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 4212,
          "throwingLine": 4213,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.WriteThroughEntry.setValue(V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 4432,
          "throwingLine": 4433,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.LocalManualCache.get(K, java.util.concurrent.Callable<? extends V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(valueLoader == null)",
          "symbolicPathConjunction": "(checkNotNull(valueLoader))",
          "backwardsPathConjunction": "(valueLoader == null)",
          "z3Inputs": "[valueLoader0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalueLoader0_isNull = Bool('valueLoader0_isNull')\n\nconstraints = [\n  valueLoader0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(valueLoader, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 4788,
          "throwingLine": 4789,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.LocalCache.LocalManualCache.invalidate(java.lang.Object)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 4814,
          "throwingLine": 4815,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ContiguousSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ContiguousSet.subSet(C, boolean, C, boolean)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromElement == null)",
          "symbolicPathConjunction": "(checkNotNull(fromElement))",
          "backwardsPathConjunction": "(fromElement == null)",
          "simplifiedPathConjunction": "fromElement == null",
          "z3Inputs": "[fromElement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromInclusive0 = Bool('fromInclusive0')\ntoInclusive0 = Bool('toInclusive0')\nfromElement0_isNull = Bool('fromElement0_isNull')\n\nconstraints = [\n  fromElement0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\nnull = Symbol('null')\npath_conjunction = (Eq(fromElement, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 116,
          "throwingLine": 117,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ContiguousSet.builder()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 195,
          "throwingLine": 196,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-9b66491e-29b2-47dc-8316-d5504973939b.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 79,
          "throwingLine": 80,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-f7a3c438-461b-491e-8cd8-b1afe9bca0fb.previous()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 89,
          "throwingLine": 90,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-42b62723-3e19-4a58-94a9-53a88652fb26.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 139,
          "throwingLine": 140,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 162,
          "throwingLine": 163,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.unmodifiableIterator(com.google.common.collect.UnmodifiableIterator<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 187,
          "throwingLine": 188,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.removeIf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(checkNotNull(predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 236,
          "throwingLine": 237,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<T>)",
          "exception": "throw new IllegalArgumentException(sb.toString());",
          "pathCojunction": "(!(!iterator.hasNext())) && (i < 4 && iterator.hasNext()) && (iterator.hasNext())",
          "symbolicPathConjunction": "(!(!iterator.hasNext())) && (i < 4 && iterator.hasNext()) && (iterator.hasNext())",
          "backwardsPathConjunction": "(!(!iterator.hasNext())) && (0 < 4 && iterator.hasNext()) && (iterator.hasNext())",
          "simplifiedPathConjunction": "iterator.hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\n\nconstraints = [\n  first0 == iterator0.next(),\n  sb0 == new StringBuilder(),\n  i0 == 0,\n  And(And(Not(Not(iterator0.hasNext())), And(i0 < 4, iterator0.hasNext())), iterator0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\niterator_hasNext = Symbol('iterator_hasNext')\npath_conjunction = (((~((~(iterator_hasNext)))) & ((StrictLessThan(0, 4)) & iterator_hasNext)) & iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 304,
          "throwingLine": 320,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<? extends T>, T)",
          "exception": "throw new IllegalArgumentException(sb.toString());",
          "pathCojunction": "(iterator.hasNext()) && (!(!iterator.hasNext())) && (0 < 4 && iterator.hasNext()) && (iterator.hasNext())",
          "symbolicPathConjunction": "(iterator.hasNext()) && (getOnlyElement(iterator))",
          "backwardsPathConjunction": "(iterator.hasNext()) && (!(!iterator.hasNext())) && (0 < 4 && iterator.hasNext()) && (iterator.hasNext())",
          "simplifiedPathConjunction": "iterator.hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(And(iterator0.hasNext(), Not(Not(iterator0.hasNext()))), And(0 < 4, iterator0.hasNext())), iterator0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterator_hasNext = Symbol('iterator_hasNext')\npath_conjunction = (((iterator_hasNext & (~((~(iterator_hasNext))))) & ((StrictLessThan(0, 4)) & iterator_hasNext)) & iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 331,
          "throwingLine": 332,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(addTo == null)) && (iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(addTo)) && (checkNotNull(iterator))",
          "backwardsPathConjunction": "(!(addTo == null)) && (iterator == null)",
          "z3Inputs": "[iterator0_isNull = True, addTo0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\naddTo0_isNull = Bool('addTo0_isNull')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(addTo0_isNull), iterator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\naddTo = Symbol('addTo')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(addTo, null)))) & (Eq(iterator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 343,
          "throwingLine": 345,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(addTo == null)",
          "symbolicPathConjunction": "(checkNotNull(addTo))",
          "backwardsPathConjunction": "(addTo == null)",
          "simplifiedPathConjunction": "addTo == null",
          "z3Inputs": "[addTo0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\naddTo0_isNull = Bool('addTo0_isNull')\n\nconstraints = [\n  addTo0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\naddTo = Symbol('addTo')\nnull = Symbol('null')\npath_conjunction = (Eq(addTo, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 343,
          "throwingLine": 344,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.cycle(java.lang.Iterable<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 378,
          "throwingLine": 379,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-6643fc25-da8a-41a3-9f11-10057a4ea606.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(iterator.hasNext())) && (!(iterator.hasNext()))",
          "symbolicPathConjunction": "(!iterator.hasNext()) && (!iterator.hasNext())",
          "backwardsPathConjunction": "(!(iterator.hasNext())) && (!(iterator.hasNext()))",
          "simplifiedPathConjunction": "!iterable.iterator().hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  iterator1 == iterable.iterator(),\n  And(Not(iterator1.hasNext()), Not(iterator1.hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\niterable_iterator = Symbol('iterable_iterator')\npath_conjunction = ((~(iterable_iterator_hasNext)) & (~(iterable_iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 398,
          "throwingLine": 402,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (b == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b))",
          "backwardsPathConjunction": "(!(a == null)) && (b == null)",
          "z3Inputs": "[b0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(a0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(a, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 445,
          "throwingLine": 447,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(a == null)",
          "symbolicPathConjunction": "(checkNotNull(a))",
          "backwardsPathConjunction": "(a == null)",
          "z3Inputs": "[a0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\n\nconstraints = [\n  a0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(a, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 445,
          "throwingLine": 446,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (b == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b))",
          "backwardsPathConjunction": "(!(a == null)) && (b == null)",
          "z3Inputs": "[b0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(a0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(a, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 466,
          "throwingLine": 468,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (!(b == null)) && (c == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b)) && (checkNotNull(c))",
          "backwardsPathConjunction": "(!(a == null)) && (!(b == null)) && (c == null)",
          "z3Inputs": "[b0_isNull = False, c0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  And(And(Not(a0_isNull), Not(b0_isNull)), c0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(a, null)))) & (~((Eq(b, null))))) & (Eq(c, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 466,
          "throwingLine": 469,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(a == null)",
          "symbolicPathConjunction": "(checkNotNull(a))",
          "backwardsPathConjunction": "(a == null)",
          "z3Inputs": "[a0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\n\nconstraints = [\n  a0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(a, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 466,
          "throwingLine": 467,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (b == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b))",
          "backwardsPathConjunction": "(!(a == null)) && (b == null)",
          "z3Inputs": "[b0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(a0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(a, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 491,
          "throwingLine": 493,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (!(b == null)) && (!(c == null)) && (d == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b)) && (checkNotNull(c)) && (checkNotNull(d))",
          "backwardsPathConjunction": "(!(a == null)) && (!(b == null)) && (!(c == null)) && (d == null)",
          "z3Inputs": "[d0_isNull = True,\n b0_isNull = False,\n c0_isNull = False,\n a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\nc0_isNull = Bool('c0_isNull')\nd0_isNull = Bool('d0_isNull')\n\nconstraints = [\n  And(And(And(Not(a0_isNull), Not(b0_isNull)), Not(c0_isNull)), d0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(a, null)))) & (~((Eq(b, null))))) & (~((Eq(c, null))))) & (Eq(d, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 491,
          "throwingLine": 495,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(a == null)) && (!(b == null)) && (c == null)",
          "symbolicPathConjunction": "(checkNotNull(a)) && (checkNotNull(b)) && (checkNotNull(c))",
          "backwardsPathConjunction": "(!(a == null)) && (!(b == null)) && (c == null)",
          "z3Inputs": "[b0_isNull = False, c0_isNull = True, a0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\nb0_isNull = Bool('b0_isNull')\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  And(And(Not(a0_isNull), Not(b0_isNull)), c0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(a, null)))) & (~((Eq(b, null))))) & (Eq(c, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 491,
          "throwingLine": 494,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(a == null)",
          "symbolicPathConjunction": "(checkNotNull(a))",
          "backwardsPathConjunction": "(a == null)",
          "z3Inputs": "[a0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0_isNull = Bool('a0_isNull')\n\nconstraints = [\n  a0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(a, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 491,
          "throwingLine": 492,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.partition(java.util.Iterator<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 590,
          "throwingLine": 591,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.partition(java.util.Iterator<T>, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(iterator == null)) && (!(size > 0))",
          "symbolicPathConjunction": "((checkNotNull(iterator)) && (checkArgument(size > 0)))",
          "backwardsPathConjunction": "(!(iterator == null)) && (!(size > 0))",
          "simplifiedPathConjunction": "size <= 0 && iterator != null",
          "z3Inputs": "[size0 = 0, iterator0_isNull = False]\n[iterator0_isNull = False, size0 = -1]\n[iterator0_isNull = False, size0 = -2]\n[iterator0_isNull = False, size0 = -3]\n[iterator0_isNull = False, size0 = -4]\n[iterator0_isNull = False, size0 = -5]\n[iterator0_isNull = False, size0 = -6]\n[iterator0_isNull = False, size0 = -7]\n[iterator0_isNull = False, size0 = -8]\n[iterator0_isNull = False, size0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(iterator0_isNull), Not(size0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nsize = Symbol('size', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterator, null)))) & (~((StrictGreaterThan(size, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 590,
          "throwingLine": 591,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.paddedPartition(java.util.Iterator<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 610,
          "throwingLine": 611,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.paddedPartition(java.util.Iterator<T>, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(iterator == null)) && (!(size > 0))",
          "symbolicPathConjunction": "((checkNotNull(iterator)) && (checkArgument(size > 0)))",
          "backwardsPathConjunction": "(!(iterator == null)) && (!(size > 0))",
          "simplifiedPathConjunction": "size <= 0 && iterator != null",
          "z3Inputs": "[size0 = 0, iterator0_isNull = False]\n[iterator0_isNull = False, size0 = -1]\n[iterator0_isNull = False, size0 = -2]\n[iterator0_isNull = False, size0 = -3]\n[iterator0_isNull = False, size0 = -4]\n[iterator0_isNull = False, size0 = -5]\n[iterator0_isNull = False, size0 = -6]\n[iterator0_isNull = False, size0 = -7]\n[iterator0_isNull = False, size0 = -8]\n[iterator0_isNull = False, size0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(iterator0_isNull), Not(size0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nsize = Symbol('size', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterator, null)))) & (~((StrictGreaterThan(size, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 610,
          "throwingLine": 611,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-816f66cf-677b-41d0-b0b7-9dea8aa024b8.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(iterator.hasNext()))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(iterator.hasNext()))",
          "simplifiedPathConjunction": "!iterator.hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(iterator0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterator_hasNext = Symbol('iterator_hasNext')\npath_conjunction = (~(iterator_hasNext))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 625,
          "throwingLine": 627,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.all(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(checkNotNull(predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 680,
          "throwingLine": 681,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.transform(java.util.Iterator<F>, com.google.common.base.Function<? super F, ? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 778,
          "throwingLine": 779,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.get(java.util.Iterator<T>, int)",
          "exception": "throw new IndexOutOfBoundsException(\"position (\" + position + \") must be less than the number of elements that remained (\" + skipped + \")\");",
          "pathCojunction": "(!(position < 0)) && (!(iterator == null)) && (!(!(position >= 0))) && (!(i < position && iterator.hasNext())) && (!(iterator.hasNext()))",
          "symbolicPathConjunction": "(!(position < 0)) && (advance(iterator, position)) && (!iterator.hasNext())",
          "backwardsPathConjunction": "(!(position < 0)) && (!(iterator == null)) && (!(!(position >= 0))) && (!(i < position && iterator.hasNext())) && (!(iterator.hasNext()))",
          "simplifiedPathConjunction": "position >= 0 && !iterator.hasNext() && iterator != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\ni0 = Int('i0')\nskipped0 = Int('skipped0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  skipped0 == i0,\n  And(And(And(And(Not(position0 < 0), Not(iterator0_isNull)), Not(Not(position0 >= 0))), Not(And(i0 < position0, iterator0.hasNext()))), Not(iterator0.hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nposition = Symbol('position', integer=True)\ni = Symbol('i', integer=True)\niterator_hasNext = Symbol('iterator_hasNext')\nnull = Symbol('null')\npath_conjunction = (((((~((StrictLessThan(position, 0)))) & (~((Eq(iterator, null))))) & (~((~((GreaterThan(position, 0))))))) & (~(((StrictLessThan(i, position)) & iterator_hasNext)))) & (~(iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 798,
          "throwingLine": 802,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.get(java.util.Iterator<T>, int)",
          "exception": "throw new IndexOutOfBoundsException(\"position (\" + position + \") must not be negative\");",
          "pathCojunction": "(position < 0)",
          "symbolicPathConjunction": "(position < 0)",
          "backwardsPathConjunction": "(position < 0)",
          "simplifiedPathConjunction": "position < 0",
          "z3Inputs": "[position0 = -1]\n[position0 = -2]\n[position0 = -3]\n[position0 = -4]\n[position0 = -5]\n[position0 = -6]\n[position0 = -7]\n[position0 = -8]\n[position0 = -9]\n[position0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\n\nconstraints = [\n  position0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nposition = Symbol('position', integer=True)\npath_conjunction = (StrictLessThan(position, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 798,
          "throwingLine": 799,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.get(java.util.Iterator<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(position < 0)) && (iterator == null)",
          "symbolicPathConjunction": "(!(position < 0)) && (advance(iterator, position))",
          "backwardsPathConjunction": "(!(position < 0)) && (iterator == null)",
          "simplifiedPathConjunction": "iterator == null && position >= 0",
          "z3Inputs": "[position0 = 0, iterator0_isNull = True]\n[position0 = 1, iterator0_isNull = True]\n[position0 = 2, iterator0_isNull = True]\n[position0 = 3, iterator0_isNull = True]\n[position0 = 4, iterator0_isNull = True]\n[position0 = 5, iterator0_isNull = True]\n[position0 = 6, iterator0_isNull = True]\n[position0 = 7, iterator0_isNull = True]\n[position0 = 8, iterator0_isNull = True]\n[position0 = 9, iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(position0 < 0), iterator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nposition = Symbol('position', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((StrictLessThan(position, 0)))) & (Eq(iterator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 798,
          "throwingLine": 800,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.get(java.util.Iterator<? extends T>, int, T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(position < 0)) && (iterator == null)",
          "symbolicPathConjunction": "(!(position < 0)) && (advance(iterator, position))",
          "backwardsPathConjunction": "(!(position < 0)) && (iterator == null)",
          "z3Inputs": "[position0 = 0, iterator0_isNull = True]\n[position0 = 1, iterator0_isNull = True]\n[position0 = 2, iterator0_isNull = True]\n[position0 = 3, iterator0_isNull = True]\n[position0 = 4, iterator0_isNull = True]\n[position0 = 5, iterator0_isNull = True]\n[position0 = 6, iterator0_isNull = True]\n[position0 = 7, iterator0_isNull = True]\n[position0 = 8, iterator0_isNull = True]\n[position0 = 9, iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(position0 < 0), iterator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nposition = Symbol('position', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((StrictLessThan(position, 0)))) & (Eq(iterator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 834,
          "throwingLine": 836,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.get(java.util.Iterator<? extends T>, int, T)",
          "exception": "throw new IndexOutOfBoundsException(\"position (\" + position + \") must not be negative\");",
          "pathCojunction": "(position < 0)",
          "symbolicPathConjunction": "(position < 0)",
          "backwardsPathConjunction": "(position < 0)",
          "simplifiedPathConjunction": "position < 0",
          "z3Inputs": "[position0 = -1]\n[position0 = -2]\n[position0 = -3]\n[position0 = -4]\n[position0 = -5]\n[position0 = -6]\n[position0 = -7]\n[position0 = -8]\n[position0 = -9]\n[position0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\n\nconstraints = [\n  position0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nposition = Symbol('position', integer=True)\npath_conjunction = (StrictLessThan(position, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 834,
          "throwingLine": 835,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.advance(java.util.Iterator<?>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumberToAdvance0 = Int('numberToAdvance0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 889,
          "throwingLine": 890,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.advance(java.util.Iterator<?>, int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"numberToAdvance must be nonnegative\"))",
          "pathCojunction": "(!(iterator == null)) && (!(numberToAdvance >= 0))",
          "symbolicPathConjunction": "(checkNotNull(iterator)) && (checkArgument(numberToAdvance >= 0, \"numberToAdvance must be nonnegative\"))",
          "backwardsPathConjunction": "(!(iterator == null)) && (!(numberToAdvance >= 0))",
          "simplifiedPathConjunction": "numberToAdvance < 0 && iterator != null",
          "z3Inputs": "[numberToAdvance0 = -1, iterator0_isNull = False]\n[numberToAdvance0 = -2, iterator0_isNull = False]\n[numberToAdvance0 = -3, iterator0_isNull = False]\n[numberToAdvance0 = -4, iterator0_isNull = False]\n[numberToAdvance0 = -5, iterator0_isNull = False]\n[numberToAdvance0 = -6, iterator0_isNull = False]\n[numberToAdvance0 = -7, iterator0_isNull = False]\n[numberToAdvance0 = -8, iterator0_isNull = False]\n[numberToAdvance0 = -9, iterator0_isNull = False]\n[numberToAdvance0 = -10, iterator0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumberToAdvance0 = Int('numberToAdvance0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(iterator0_isNull), Not(numberToAdvance0 >= 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnumberToAdvance = Symbol('numberToAdvance', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterator, null)))) & (~((GreaterThan(numberToAdvance, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 889,
          "throwingLine": 891,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.limit(java.util.Iterator<T>, int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"limit is negative\"))",
          "pathCojunction": "(!(iterator == null)) && (!(limitSize >= 0))",
          "symbolicPathConjunction": "(checkNotNull(iterator)) && (checkArgument(limitSize >= 0, \"limit is negative\"))",
          "backwardsPathConjunction": "(!(iterator == null)) && (!(limitSize >= 0))",
          "simplifiedPathConjunction": "limitSize < 0 && iterator != null",
          "z3Inputs": "[limitSize0 = -1, iterator0_isNull = False]\n[limitSize0 = -2, iterator0_isNull = False]\n[limitSize0 = -3, iterator0_isNull = False]\n[limitSize0 = -4, iterator0_isNull = False]\n[limitSize0 = -5, iterator0_isNull = False]\n[limitSize0 = -6, iterator0_isNull = False]\n[limitSize0 = -7, iterator0_isNull = False]\n[limitSize0 = -8, iterator0_isNull = False]\n[limitSize0 = -9, iterator0_isNull = False]\n[limitSize0 = -10, iterator0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlimitSize0 = Int('limitSize0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  And(Not(iterator0_isNull), Not(limitSize0 >= 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nlimitSize = Symbol('limitSize', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterator, null)))) & (~((GreaterThan(limitSize, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 912,
          "throwingLine": 914,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.limit(java.util.Iterator<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlimitSize0 = Int('limitSize0')\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 912,
          "throwingLine": 913,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-16091081-a30b-4a2e-8fed-dee9c03358c5.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(count < limitSize && iterator.hasNext()))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(count < limitSize && iterator.hasNext()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  Not(And(count0 < limitSize, iterator0.hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\ncount = Symbol('count', integer=True)\niterator_hasNext = Symbol('iterator_hasNext')\npath_conjunction = (~(((StrictLessThan(count, limitSize)) & iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 924,
          "throwingLine": 926,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.consumingIterator(java.util.Iterator<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 952,
          "throwingLine": 953,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.forArray(T...)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(0, end, array.length))",
          "pathCojunction": "(!(!(array.length >= 0))) && (0 < 0 || offset + length < 0 || offset + length > array.length)",
          "symbolicPathConjunction": "((checkArgument(length >= 0)) && (Preconditions.checkPositionIndexes(offset, end, array.length)))",
          "backwardsPathConjunction": "(!(!(array.length >= 0))) && (0 < 0 || offset + length < 0 || offset + length > array.length)",
          "simplifiedPathConjunction": "array.length >= 0 && (array.length < length + offset || length < -offset)",
          "z3Inputs": "[array0_length = 0, offset0 = 1, length0 = 0]\n[length0 = -1, array0_length = 1, offset0 = 3]\n[length0 = -3, array0_length = 1, offset0 = 2]\n[length0 = -4, array0_length = 1, offset0 = 2]\n[length0 = -4, array0_length = 2, offset0 = 0]\n[length0 = -5, array0_length = 3, offset0 = -1]\n[length0 = -6, array0_length = 3, offset0 = -1]\n[length0 = -7, array0_length = 3, offset0 = -1]\n[length0 = -6, array0_length = 3, offset0 = -2]\n[length0 = -6, array0_length = 3, offset0 = -3]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noffset0 = Int('offset0')\nlength0 = Int('length0')\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  And(Not(Not(array0_length >= 0)), Or(Or(0 < 0, offset0 + length0 < 0), offset0 + length0 > array0_length))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\noffset = Symbol('offset', integer=True)\nlength = Symbol('length', integer=True)\narray_length = Symbol('array_length', integer=True)\npath_conjunction = ((~((~((GreaterThan(array_length, 0)))))) & (((StrictLessThan(0, 0)) | (StrictLessThan((offset + length), 0))) | (StrictGreaterThan((offset + length), array_length))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 1015,
          "throwingLine": 1016,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.Anonymous-1fa3b917-84c8-4ca9-9973-2fae31b00b1d.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(done)",
          "symbolicPathConjunction": "(done)",
          "backwardsPathConjunction": "(done)",
          "simplifiedPathConjunction": "done",
          "z3Inputs": "[done0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndone0 = Bool('done0')\n\nconstraints = [\n  done0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndone = Symbol('done')\npath_conjunction = done\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1067,
          "throwingLine": 1069,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.forEnumeration(java.util.Enumeration<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(enumeration == null)",
          "symbolicPathConjunction": "(checkNotNull(enumeration))",
          "backwardsPathConjunction": "(enumeration == null)",
          "simplifiedPathConjunction": "enumeration == null",
          "z3Inputs": "[enumeration0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nenumeration0_isNull = Bool('enumeration0_isNull')\n\nconstraints = [\n  enumeration0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nenumeration = Symbol('enumeration')\nnull = Symbol('null')\npath_conjunction = (Eq(enumeration, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1085,
          "throwingLine": 1086,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.asEnumeration(java.util.Iterator<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1107,
          "throwingLine": 1108,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.peekingIterator(com.google.common.collect.PeekingIterator<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterator))",
          "backwardsPathConjunction": "(iterator == null)",
          "simplifiedPathConjunction": "iterator == null",
          "z3Inputs": "[iterator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterator0_isNull = Bool('iterator0_isNull')\n\nconstraints = [\n  iterator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\nnull = Symbol('null')\npath_conjunction = (Eq(iterator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1223,
          "throwingLine": 1224,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)",
          "exception": "throw new NullPointerException(String.valueOf(\"comparator\"))",
          "pathCojunction": "(!(iterators == null)) && (comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(iterators, \"iterators\")) && (checkNotNull(comparator, \"comparator\"))",
          "backwardsPathConjunction": "(!(iterators == null)) && (comparator == null)",
          "z3Inputs": "[iterators0_isNull = False, comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterators0_isNull = Bool('iterators0_isNull')\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  And(Not(iterators0_isNull), comparator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterators, null)))) & (Eq(comparator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1242,
          "throwingLine": 1244,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterators.mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)",
          "exception": "throw new NullPointerException(String.valueOf(\"iterators\"))",
          "pathCojunction": "(iterators == null)",
          "symbolicPathConjunction": "(checkNotNull(iterators, \"iterators\"))",
          "backwardsPathConjunction": "(iterators == null)",
          "z3Inputs": "[iterators0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterators0_isNull = Bool('iterators0_isNull')\n\nconstraints = [\n  iterators0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(iterators, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1242,
          "throwingLine": 1243,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Stopwatch.createStarted(com.google.common.base.Ticker)",
          "exception": "throw new IllegalStateException(String.valueOf(\"This stopwatch is already running.\"))",
          "pathCojunction": "(!(!isRunning))",
          "symbolicPathConjunction": "(new Stopwatch(ticker).start())",
          "backwardsPathConjunction": "(!(!isRunning))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(Not(isRunning))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~((~(isRunning))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 121,
          "throwingLine": 122,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError()",
          "pathCojunction": "(true)",
          "symbolicPathConjunction": "(desiredUnit.convert(elapsedNanos(), NANOSECONDS))",
          "backwardsPathConjunction": "(true)",
          "simplifiedPathConjunction": "true",
          "z3Inputs": "[]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = True\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 198,
          "throwingLine": 199,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testDefaultService()",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0)",
          "symbolicPathConjunction": "(enterRun.await())",
          "backwardsPathConjunction": "(count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  service0 == new WaitOnRunService(),\n  count0 > 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictGreaterThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 338,
          "throwingLine": 341,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/test/com/google/common/testing/TearDownStackTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.testing.TearDownStackTest.ThrowingTearDown.tearDown()",
          "exception": "throw new RuntimeException(id);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nran0 = Bool('ran0')\n\nconstraints = [\n  ran0 == True,\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 139,
          "throwingLine": 141,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/FuturesTransformTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(java.lang.Integer)",
          "exception": "throw new UndeclaredThrowableException(EXCEPTION);",
          "pathCojunction": "(!(input.intValue() == VALID_INPUT_DATA))",
          "symbolicPathConjunction": "(!(input.intValue() == VALID_INPUT_DATA))",
          "backwardsPathConjunction": "(!(input.intValue() == VALID_INPUT_DATA))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = Int('input0')\n\nconstraints = [\n  Not(input0.intValue() == VALID_INPUT_DATA)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninput = Symbol('input', integer=True)\ninput_intValue = Symbol('input_intValue')\npath_conjunction = (~((Eq(input_intValue, VALID_INPUT_DATA))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 45,
          "throwingLine": 49,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/LinkedHashMultimapTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimapTest.testCreateFromMultimap()",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + DEFAULT_VALUE_SET_CAPACITY)",
          "pathCojunction": "(multimap.keySet().size() < 3) && (!(multimap.keySet().size() < 0)) && (2 < 3) && (2 < 0)",
          "symbolicPathConjunction": "(LinkedHashMultimap.create()) && (LinkedHashMultimap.create(multimap))",
          "backwardsPathConjunction": "(multimap.keySet().size() < 3) && (!(multimap.keySet().size() < 0)) && (2 < 3) && (2 < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  java.lang.Integer > multimap0 == new LinkedHashMultimap<K, V>(16, 2),\n  And(And(And(multimap0.keySet().size() < 3, Not(multimap0.keySet().size() < 0)), 2 < 3), 2 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnew LinkedHashMultimap<K, V>(16, 2)_keySet_size = Symbol('new LinkedHashMultimap<K, V>(16, 2)_keySet_size')\nnew LinkedHashMultimap<K, V>(16, 2)_keySet = Symbol('new LinkedHashMultimap<K, V>(16, 2)_keySet')\npath_conjunction = ((((StrictLessThan(new LinkedHashMultimap<K, V>(16, 2)_keySet_size, 3)) & (~((StrictLessThan(new LinkedHashMultimap<K, V>(16, 2)_keySet_size, 0))))) & (StrictLessThan(2, 3))) & (StrictLessThan(2, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 248,
          "throwingLine": 254,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimapTest.testCreateFromMultimap()",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + multimap.keySet().size())",
          "pathCojunction": "(multimap.keySet().size() < 3) && (multimap.keySet().size() < 0)",
          "symbolicPathConjunction": "(LinkedHashMultimap.create()) && (LinkedHashMultimap.create(multimap))",
          "backwardsPathConjunction": "(multimap.keySet().size() < 3) && (multimap.keySet().size() < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  java.lang.Integer > multimap0 == new LinkedHashMultimap<K, V>(16, 2),\n  And(multimap0.keySet().size() < 3, multimap0.keySet().size() < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnew LinkedHashMultimap<K, V>(16, 2)_keySet_size = Symbol('new LinkedHashMultimap<K, V>(16, 2)_keySet_size')\nnew LinkedHashMultimap<K, V>(16, 2)_keySet = Symbol('new LinkedHashMultimap<K, V>(16, 2)_keySet')\npath_conjunction = ((StrictLessThan(new LinkedHashMultimap<K, V>(16, 2)_keySet_size, 3)) & (StrictLessThan(new LinkedHashMultimap<K, V>(16, 2)_keySet_size, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 248,
          "throwingLine": 254,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.ImmediateFailedFuture.get()",
          "exception": "throw new ExecutionException(thrown);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 183,
          "throwingLine": 184,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.immediateFailedFuture(java.lang.Throwable)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(throwable == null)",
          "symbolicPathConjunction": "(checkNotNull(throwable))",
          "backwardsPathConjunction": "(throwable == null)",
          "simplifiedPathConjunction": "null == throwable",
          "z3Inputs": "[throwable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  throwable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\nnull = Symbol('null')\npath_conjunction = (Eq(throwable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 216,
          "throwingLine": 217,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(executor == null)",
          "symbolicPathConjunction": "(transformAsync(input, function, executor))",
          "backwardsPathConjunction": "(executor == null)",
          "simplifiedPathConjunction": "executor == null",
          "z3Inputs": "[executor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  executor0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = (Eq(executor, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 663,
          "throwingLine": 664,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.transformAsync(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(executor == null)",
          "symbolicPathConjunction": "(checkNotNull(executor))",
          "backwardsPathConjunction": "(executor == null)",
          "simplifiedPathConjunction": "executor == null",
          "z3Inputs": "[executor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  executor0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = (Eq(executor, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 748,
          "throwingLine": 749,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 829,
          "throwingLine": 830,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 875,
          "throwingLine": 876,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.allAsList(com.google.common.util.concurrent.ListenableFuture<? extends V>...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(futures == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(futures))",
          "backwardsPathConjunction": "(futures == null)",
          "z3Inputs": "[futures0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfutures0_isNull = Bool('futures0_isNull')\n\nconstraints = [\n  futures0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(futures, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1057,
          "throwingLine": 1058,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.allAsList(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(futures == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(futures))",
          "backwardsPathConjunction": "(futures == null)",
          "z3Inputs": "[futures0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfutures0_isNull = Bool('futures0_isNull')\n\nconstraints = [\n  futures0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(futures, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1080,
          "throwingLine": 1081,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.successfulAsList(com.google.common.util.concurrent.ListenableFuture<? extends V>...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(futures == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(futures))",
          "backwardsPathConjunction": "(futures == null)",
          "z3Inputs": "[futures0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfutures0_isNull = Bool('futures0_isNull')\n\nconstraints = [\n  futures0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(futures, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1103,
          "throwingLine": 1104,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.successfulAsList(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(futures == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(futures))",
          "backwardsPathConjunction": "(futures == null)",
          "z3Inputs": "[futures0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfutures0_isNull = Bool('futures0_isNull')\n\nconstraints = [\n  futures0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(futures, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1125,
          "throwingLine": 1126,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.addCallback(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.util.concurrent.FutureCallback<? super V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(callback == null)",
          "symbolicPathConjunction": "(addCallback(future, callback, directExecutor()))",
          "backwardsPathConjunction": "(callback == null)",
          "z3Inputs": "[callback0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(callback, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1163,
          "throwingLine": 1164,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.Futures.addCallback(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.util.concurrent.FutureCallback<? super V>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(callback == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(callback))",
          "backwardsPathConjunction": "(callback == null)",
          "z3Inputs": "[callback0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncallback0_isNull = Bool('callback0_isNull')\n\nconstraints = [\n  callback0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(callback, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1204,
          "throwingLine": 1205,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/SerializingExecutorTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.SerializingExecutorTest.Anonymous-4321bc4c-9da9-4a17-bb27-e81869e4acac.run()",
          "exception": "throw new RuntimeException(\"FAKE EXCEPTION!\");",
          "pathCojunction": "true",
          "symbolicPathConjunction": "(numCalls.incrementAndGet())",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = Int('value0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 214,
          "throwingLine": 216,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.SerializingExecutorTest.Anonymous-45aafb17-e818-4dff-9fd9-8387f3483b06.execute(java.lang.Runnable)",
          "exception": "throw new RejectedExecutionException();",
          "pathCojunction": "(value)",
          "symbolicPathConjunction": "(reject.get()) && (reject.get())",
          "backwardsPathConjunction": "(value)",
          "simplifiedPathConjunction": "value",
          "z3Inputs": "[value0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = Bool('value0')\n\nconstraints = [\n  value0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\npath_conjunction = value\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 253,
          "throwingLine": 255,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.SerializingExecutorTest.Anonymous-c7458f40-31f6-4c4f-8349-f386b6ca82b4.run()",
          "exception": "throw new MyError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 285,
          "throwingLine": 286,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.put(K, V)",
          "exception": "throw new AssertionError(\"New Collection violated the Collection spec\");",
          "pathCojunction": "(collection == null) && (!(collection.add(value)))",
          "symbolicPathConjunction": "(collection == null) && (!(collection.add(value)))",
          "backwardsPathConjunction": "(collection == null) && (!(collection.add(value)))",
          "simplifiedPathConjunction": "createCollection(key) == null && !createCollection(key)_add",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncollection1_isNull = Bool('collection1_isNull')\n\nconstraints = [\n  collection0 == map0.get(key0),\n  collection1 == createCollection(key0),\n  And(collection1_isNull, Not(collection1.add(value0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n_createCollection = Symbol('_createCollection')\n_createCollection_add = Symbol('_createCollection_add')\nnull = Symbol('null')\npath_conjunction = ((Eq(_createCollection, null)) & (~(_createCollection_add)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 192,
          "throwingLine": 201,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.size()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 422,
          "throwingLine": 423,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.hashCode()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 437,
          "throwingLine": 438,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.toString()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 443,
          "throwingLine": 444,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.iterator()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 453,
          "throwingLine": 454,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(refreshIfEmpty()))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 483,
          "throwingLine": 484,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(refreshIfEmpty()))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 489,
          "throwingLine": 490,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.add(V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 508,
          "throwingLine": 509,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.addAll(java.util.Collection<? extends V>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(collection.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(collection.isEmpty())) && (size())",
          "backwardsPathConjunction": "(!(collection.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "!collection.isEmpty() && ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(And(Not(collection0.isEmpty()), Not(ancestor0_isNull)), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\ncollection_isEmpty = Symbol('collection_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(collection_isEmpty)) & (Ne(ancestor, null))) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 528,
          "throwingLine": 532,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.contains(java.lang.Object)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 545,
          "throwingLine": 546,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.containsAll(java.util.Collection<?>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 551,
          "throwingLine": 552,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.clear()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(size())",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 557,
          "throwingLine": 558,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.remove(java.lang.Object)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 568,
          "throwingLine": 569,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.removeAll(java.util.Collection<?>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(c.isEmpty())) && (size())",
          "backwardsPathConjunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "!c.isEmpty() && ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(And(Not(c0.isEmpty()), Not(ancestor0_isNull)), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nc_isEmpty = Symbol('c_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(c_isEmpty)) & (Ne(ancestor, null))) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 579,
          "throwingLine": 583,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.retainAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(c == null)",
          "symbolicPathConjunction": "(checkNotNull(c))",
          "backwardsPathConjunction": "(c == null)",
          "simplifiedPathConjunction": "c == null",
          "z3Inputs": "[c0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  c0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\nnull = Symbol('null')\npath_conjunction = (Eq(c, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 594,
          "throwingLine": 595,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.retainAll(java.util.Collection<?>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(c == null)) && (ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(checkNotNull(c)) && (size())",
          "backwardsPathConjunction": "(!(c == null)) && (ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate && c != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nc0_isNull = Bool('c0_isNull')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(And(Not(c0_isNull), Not(ancestor0_isNull)), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(c, null)))) & (Ne(ancestor, null))) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 594,
          "throwingLine": 596,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSet.removeAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(c.isEmpty())) && (ancestor != null) && (!(delegate != ancestorDelegate)) && (c == null)",
          "symbolicPathConjunction": "(!(c.isEmpty())) && (size()) && (checkNotNull(collection))",
          "backwardsPathConjunction": "(!(c.isEmpty())) && (ancestor != null) && (!(delegate != ancestorDelegate)) && (c == null)",
          "simplifiedPathConjunction": "ancestorDelegate == delegate && c == null && !c.isEmpty() && ancestor != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldSize0 = Int('oldSize0')\nancestor0_isNull = Bool('ancestor0_isNull')\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  oldSize0 == delegate0.size(),\n  And(And(And(Not(c0.isEmpty()), Not(ancestor0_isNull)), Not(delegate0 != ancestorDelegate0)), c0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nc_isEmpty = Symbol('c_isEmpty')\nnull = Symbol('null')\npath_conjunction = ((((~(c_isEmpty)) & (Ne(ancestor, null))) & (~((Ne(delegate, ancestorDelegate))))) & (Eq(c, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 621,
          "throwingLine": 630,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSet.removeAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(c.isEmpty())) && (!(ancestor != null)) && (!(delegate.isEmpty())) && (c == null)",
          "symbolicPathConjunction": "(!(c.isEmpty())) && (size()) && (checkNotNull(collection))",
          "backwardsPathConjunction": "(!(c.isEmpty())) && (!(ancestor != null)) && (!(delegate.isEmpty())) && (c == null)",
          "simplifiedPathConjunction": "ancestor == null && c == null && !c.isEmpty() && !delegate.isEmpty()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldSize0 = Int('oldSize0')\nancestor0_isNull = Bool('ancestor0_isNull')\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  oldSize0 == delegate0.size(),\n  And(And(And(Not(c0.isEmpty()), Not(Not(ancestor0_isNull))), Not(delegate0.isEmpty())), c0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nc_isEmpty = Symbol('c_isEmpty')\ndelegate_isEmpty = Symbol('delegate_isEmpty')\nnull = Symbol('null')\npath_conjunction = ((((~(c_isEmpty)) & (~((Ne(ancestor, null))))) & (~(delegate_isEmpty))) & (Eq(c, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 621,
          "throwingLine": 630,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSet.removeAll(java.util.Collection<?>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(c.isEmpty())) && (size())",
          "backwardsPathConjunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "!c.isEmpty() && ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(And(Not(c0.isEmpty()), Not(ancestor0_isNull)), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nc_isEmpty = Symbol('c_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(c_isEmpty)) & (Ne(ancestor, null))) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 621,
          "throwingLine": 625,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet.first()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 659,
          "throwingLine": 660,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet.last()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 665,
          "throwingLine": 666,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet.headSet(V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 671,
          "throwingLine": 672,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet.subSet(V, V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 680,
          "throwingLine": 681,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet.tailSet(V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 689,
          "throwingLine": 690,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.addAll(int, java.util.Collection<? extends V>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(c.isEmpty())) && (size())",
          "backwardsPathConjunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "!c.isEmpty() && ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(And(Not(c0.isEmpty()), Not(ancestor0_isNull)), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nc_isEmpty = Symbol('c_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(c_isEmpty)) & (Ne(ancestor, null))) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 785,
          "throwingLine": 789,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.get(int)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 802,
          "throwingLine": 803,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.set(int, V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 808,
          "throwingLine": 809,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.add(int, V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 814,
          "throwingLine": 815,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.remove(int)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 825,
          "throwingLine": 826,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.indexOf(java.lang.Object)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 834,
          "throwingLine": 835,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.lastIndexOf(java.lang.Object)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 840,
          "throwingLine": 841,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.listIterator()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 846,
          "throwingLine": 847,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.listIterator(int)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 852,
          "throwingLine": 853,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.subList(int, int)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 858,
          "throwingLine": 859,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableSortedMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.Builder.orderEntriesByValue(java.util.Comparator<? super V>)",
          "exception": "throw new UnsupportedOperationException(\"Not available on ImmutableSortedMap.Builder\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 482,
          "throwingLine": 483,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.subMap(K, K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromKey == null)",
          "symbolicPathConjunction": "(subMap(fromKey, true, toKey, false))",
          "backwardsPathConjunction": "(fromKey == null)",
          "simplifiedPathConjunction": "fromKey == null",
          "z3Inputs": "[fromKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromKey0_isNull = Bool('fromKey0_isNull')\n\nconstraints = [\n  fromKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\nnull = Symbol('null')\npath_conjunction = (Eq(fromKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 674,
          "throwingLine": 675,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.subMap(K, K)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromKey == null)) && (toKey == null)",
          "symbolicPathConjunction": "(subMap(fromKey, true, toKey, false))",
          "backwardsPathConjunction": "(!(fromKey == null)) && (toKey == null)",
          "simplifiedPathConjunction": "null == toKey && fromKey != null",
          "z3Inputs": "[fromKey0_isNull = False, toKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromKey0_isNull = Bool('fromKey0_isNull')\ntoKey0_isNull = Bool('toKey0_isNull')\n\nconstraints = [\n  And(Not(fromKey0_isNull), toKey0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\ntoKey = Symbol('toKey')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(fromKey, null)))) & (Eq(toKey, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 674,
          "throwingLine": 675,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.subMap(K, boolean, K, boolean)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromKey == null)) && (toKey == null)",
          "symbolicPathConjunction": "(checkNotNull(fromKey)) && (checkNotNull(toKey))",
          "backwardsPathConjunction": "(!(fromKey == null)) && (toKey == null)",
          "simplifiedPathConjunction": "null == toKey && fromKey != null",
          "z3Inputs": "[fromKey0_isNull = False, toKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromInclusive0 = Bool('fromInclusive0')\ntoInclusive0 = Bool('toInclusive0')\nfromKey0_isNull = Bool('fromKey0_isNull')\ntoKey0_isNull = Bool('toKey0_isNull')\n\nconstraints = [\n  And(Not(fromKey0_isNull), toKey0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\ntoKey = Symbol('toKey')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(fromKey, null)))) & (Eq(toKey, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 695,
          "throwingLine": 697,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.subMap(K, boolean, K, boolean)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromKey == null)",
          "symbolicPathConjunction": "(checkNotNull(fromKey))",
          "backwardsPathConjunction": "(fromKey == null)",
          "simplifiedPathConjunction": "fromKey == null",
          "z3Inputs": "[fromKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromInclusive0 = Bool('fromInclusive0')\ntoInclusive0 = Bool('toInclusive0')\nfromKey0_isNull = Bool('fromKey0_isNull')\n\nconstraints = [\n  fromKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\nnull = Symbol('null')\npath_conjunction = (Eq(fromKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 695,
          "throwingLine": 696,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.pollFirstEntry()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 797,
          "throwingLine": 798,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMap.pollLastEntry()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 809,
          "throwingLine": 810,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/hash/AbstractNonStreamingHashFunction.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.hash.AbstractNonStreamingHashFunction.newHasher(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(expectedInputSize >= 0))",
          "symbolicPathConjunction": "(Preconditions.checkArgument(expectedInputSize >= 0))",
          "backwardsPathConjunction": "(!(expectedInputSize >= 0))",
          "simplifiedPathConjunction": "expectedInputSize < 0",
          "z3Inputs": "[expectedInputSize0 = -1]\n[expectedInputSize0 = -2]\n[expectedInputSize0 = -3]\n[expectedInputSize0 = -4]\n[expectedInputSize0 = -5]\n[expectedInputSize0 = -6]\n[expectedInputSize0 = -7]\n[expectedInputSize0 = -8]\n[expectedInputSize0 = -9]\n[expectedInputSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedInputSize0 = Int('expectedInputSize0')\n\nconstraints = [\n  Not(expectedInputSize0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedInputSize = Symbol('expectedInputSize', integer=True)\npath_conjunction = (~((GreaterThan(expectedInputSize, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 39,
          "throwingLine": 40,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/net/HostAndPort.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.net.HostAndPort.withDefaultPort(int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(isValidPort(defaultPort)))",
          "symbolicPathConjunction": "(checkArgument(isValidPort(defaultPort)))",
          "backwardsPathConjunction": "(!(isValidPort(defaultPort)))",
          "simplifiedPathConjunction": "!isValidPort(defaultPort)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndefaultPort0 = Int('defaultPort0')\n\nconstraints = [\n  Not(isValidPort(defaultPort0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndefaultPort = Symbol('defaultPort', integer=True)\n_isValidPort = Symbol('_isValidPort')\npath_conjunction = (~(_isValidPort))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 247,
          "throwingLine": 248,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/OrderingTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(numbers == null)) && (!(objects == null)) && (numbers == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers)) && (numbers.compound(objects)) && (objects.compound(numbers))",
          "backwardsPathConjunction": "(!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)) && (new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\nobjects0_isNull = Bool('objects0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  a0 == new CompoundOrdering<U>(this, numbers0),\n  b0 == new CompoundOrdering<U>(this, objects0),\n  And(And(Not(numbers0_isNull), Not(objects0_isNull)), numbers0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 301,
          "throwingLine": 312,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(numbers == null)) && (objects == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers)) && (numbers.compound(objects))",
          "backwardsPathConjunction": "(!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\nobjects0_isNull = Bool('objects0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  a0 == new CompoundOrdering<U>(this, numbers0),\n  And(Not(numbers0_isNull), objects0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 301,
          "throwingLine": 311,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(numbers == null)) && (!(objects == null)) && (!(numbers == null)) && (!(integers == null)) && (numbers == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers)) && (numbers.compound(objects)) && (objects.compound(numbers)) && (numbers.compound(integers)) && (integers.compound(numbers))",
          "backwardsPathConjunction": "(!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder)) == null)) && (new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\nobjects0_isNull = Bool('objects0_isNull')\nintegers0_isNull = Bool('integers0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  a0 == new CompoundOrdering<U>(this, numbers0),\n  b0 == new CompoundOrdering<U>(this, objects0),\n  c0 == new CompoundOrdering<U>(this, numbers0),\n  d0 == new CompoundOrdering<U>(this, integers0),\n  And(And(And(And(Not(numbers0_isNull), Not(objects0_isNull)), Not(numbers0_isNull)), Not(integers0_isNull)), numbers0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 301,
          "throwingLine": 315,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(numbers == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers))",
          "backwardsPathConjunction": "(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 301,
          "throwingLine": 307,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(numbers == null)) && (!(objects == null)) && (!(numbers == null)) && (integers == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers)) && (numbers.compound(objects)) && (objects.compound(numbers)) && (numbers.compound(integers))",
          "backwardsPathConjunction": "(!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\nobjects0_isNull = Bool('objects0_isNull')\nintegers0_isNull = Bool('integers0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  a0 == new CompoundOrdering<U>(this, numbers0),\n  b0 == new CompoundOrdering<U>(this, objects0),\n  c0 == new CompoundOrdering<U>(this, numbers0),\n  And(And(And(Not(numbers0_isNull), Not(objects0_isNull)), Not(numbers0_isNull)), integers0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 301,
          "throwingLine": 314,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.OrderingTest.testCompound_instance_generics()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(numbers == null)) && (!(objects == null)) && (!(numbers == null)) && (!(integers == null)) && (!(numbers == null)) && (objects == null)",
          "symbolicPathConjunction": "(Ordering.explicit((Object) 1)) && (Ordering.explicit((Number) 1)) && (Ordering.explicit(1)) && (numbers.compound(numbers)) && (numbers.compound(objects)) && (objects.compound(numbers)) && (numbers.compound(integers)) && (integers.compound(numbers)) && (numbers.compound(objects).compound(objects))",
          "backwardsPathConjunction": "(!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder)) == null)) && (!(new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder)) == null)) && (new ExplicitOrdering<T>(Lists.asList((Object) 1, remainingValuesInOrder)) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumbers0_isNull = Bool('numbers0_isNull')\nobjects0_isNull = Bool('objects0_isNull')\nintegers0_isNull = Bool('integers0_isNull')\n\nconstraints = [\n  objects0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  numbers0 == new ExplicitOrdering<T>(Lists.asList((Number) 1, remainingValuesInOrder0)),\n  integers0 == new ExplicitOrdering<T>(Lists.asList(1, remainingValuesInOrder0)),\n  a0 == new CompoundOrdering<U>(this, numbers0),\n  b0 == new CompoundOrdering<U>(this, objects0),\n  c0 == new CompoundOrdering<U>(this, numbers0),\n  d0 == new CompoundOrdering<U>(this, integers0),\n  e0 == new CompoundOrdering<U>(this, numbers0),\n  And(And(And(And(And(Not(numbers0_isNull), Not(objects0_isNull)), Not(numbers0_isNull)), Not(integers0_isNull)), Not(numbers0_isNull)), objects0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 301,
          "throwingLine": 320,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/MultimapsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MultimapsTest.Anonymous-d25c55e0-8fbc-42b2-9677-e00e7594c21a.getImpl()",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(element >= 0))",
          "symbolicPathConjunction": "(checkArgument(element >= 0))",
          "backwardsPathConjunction": "(!(element >= 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  backing0 == super.getImpl(),\n  Not(element >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~((GreaterThan(element, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 569,
          "throwingLine": 571,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapsTest.Anonymous-ad512b70-ffce-4b7c-8a01-0a919b584ea6.add(java.lang.Integer)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(element >= 0))",
          "symbolicPathConjunction": "(checkArgument(element >= 0))",
          "backwardsPathConjunction": "(!(element >= 0))",
          "simplifiedPathConjunction": "element < 0",
          "z3Inputs": "[element0 = -1]\n[element0 = -2]\n[element0 = -3]\n[element0 = -4]\n[element0 = -5]\n[element0 = -6]\n[element0 = -7]\n[element0 = -8]\n[element0 = -9]\n[element0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0 = Int('element0')\n\nconstraints = [\n  Not(element0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element', integer=True)\npath_conjunction = (~((GreaterThan(element, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 578,
          "throwingLine": 579,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapsTest.SortedSetSupplier.getImpl()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(INT_COMPARATOR == null)",
          "symbolicPathConjunction": "(Sets.newTreeSet(INT_COMPARATOR))",
          "backwardsPathConjunction": "(INT_COMPARATOR == null)",
          "simplifiedPathConjunction": "Ordering.<Integer>natural().reverse()_nullsFirst == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nINT_COMPARATOR0_isNull = Bool('INT_COMPARATOR0_isNull')\n\nconstraints = [\n  INT_COMPARATOR0 == Ordering.<Integer>natural().reverse().nullsFirst(),\n  INT_COMPARATOR0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nOrdering_natural_reverse_nullsFirst = Symbol('Ordering_natural_reverse_nullsFirst')\nOrdering_natural_reverse = Symbol('Ordering_natural_reverse')\nOrdering_natural = Symbol('Ordering_natural')\nnull = Symbol('null')\npath_conjunction = (Eq(Ordering_natural_reverse_nullsFirst, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 713,
          "throwingLine": 714,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/SortedLists.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(checkNotNull(e))",
          "backwardsPathConjunction": "(e == null)",
          "simplifiedPathConjunction": "e == null",
          "z3Inputs": "[e0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nnull = Symbol('null')\npath_conjunction = (Eq(e, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 194,
          "throwingLine": 195,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SortedLists.binarySearch(java.util.List<E>, com.google.common.base.Function<? super E, K>, K, java.util.Comparator<? super K>, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyComparator == null)",
          "symbolicPathConjunction": "(binarySearch(Lists.transform(list, keyFunction), key, keyComparator, presentBehavior, absentBehavior))",
          "backwardsPathConjunction": "(keyComparator == null)",
          "z3Inputs": "[keyComparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyComparator0_isNull = Bool('keyComparator0_isNull')\n\nconstraints = [\n  keyComparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyComparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 228,
          "throwingLine": 229,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(comparator == null)) && (!(list == null)) && (presentBehavior == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator)) && (checkNotNull(list)) && (checkNotNull(presentBehavior))",
          "backwardsPathConjunction": "(!(comparator == null)) && (!(list == null)) && (presentBehavior == null)",
          "z3Inputs": "[list0_isNull = False,\n comparator0_isNull = False,\n presentBehavior0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\nlist0_isNull = Bool('list0_isNull')\npresentBehavior0_isNull = Bool('presentBehavior0_isNull')\n\nconstraints = [\n  And(And(Not(comparator0_isNull), Not(list0_isNull)), presentBehavior0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nsuper = Symbol('super')\npresentBehavior = Symbol('presentBehavior')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(comparator, null)))) & (~((Eq(list, null))))) & (Eq(presentBehavior, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 261,
          "throwingLine": 264,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(comparator == null)) && (!(list == null)) && (!(presentBehavior == null)) && (absentBehavior == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator)) && (checkNotNull(list)) && (checkNotNull(presentBehavior)) && (checkNotNull(absentBehavior))",
          "backwardsPathConjunction": "(!(comparator == null)) && (!(list == null)) && (!(presentBehavior == null)) && (absentBehavior == null)",
          "z3Inputs": "[absentBehavior0_isNull = True,\n list0_isNull = False,\n comparator0_isNull = False,\n presentBehavior0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\nlist0_isNull = Bool('list0_isNull')\npresentBehavior0_isNull = Bool('presentBehavior0_isNull')\nabsentBehavior0_isNull = Bool('absentBehavior0_isNull')\n\nconstraints = [\n  And(And(And(Not(comparator0_isNull), Not(list0_isNull)), Not(presentBehavior0_isNull)), absentBehavior0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nsuper = Symbol('super')\npresentBehavior = Symbol('presentBehavior')\nabsentBehavior = Symbol('absentBehavior')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(comparator, null)))) & (~((Eq(list, null))))) & (~((Eq(presentBehavior, null))))) & (Eq(absentBehavior, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 261,
          "throwingLine": 265,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(comparator == null)) && (list == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator)) && (checkNotNull(list))",
          "backwardsPathConjunction": "(!(comparator == null)) && (list == null)",
          "z3Inputs": "[list0_isNull = True, comparator0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  And(Not(comparator0_isNull), list0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(comparator, null)))) & (Eq(list, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 261,
          "throwingLine": 263,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 261,
          "throwingLine": 262,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/UnmodifiableListIterator.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.UnmodifiableListIterator.add(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 44,
          "throwingLine": 45,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.UnmodifiableListIterator.set(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 56,
          "throwingLine": 57,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/CharSource.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.CharSource.CharSequenceCharSource.Anonymous-f1e7e302-21e8-41e4-8109-0eff5bff6cfb.iterator()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(seq == null)",
          "symbolicPathConjunction": "(LINE_SPLITTER.split(seq))",
          "backwardsPathConjunction": "(seq == null)",
          "simplifiedPathConjunction": "null == seq",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseq0_isNull = Bool('seq0_isNull')\n\nconstraints = [\n  LINE_SPLITTER0 == Splitter.on(Pattern.compile(\"\\r\\n|\\n|\\r\")),\n  seq0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseq = Symbol('seq')\nnull = Symbol('null')\npath_conjunction = (Eq(seq, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 444,
          "throwingLine": 445,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CharSource.CharSequenceCharSource.toString()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(seq == null)",
          "symbolicPathConjunction": "(Ascii.truncate(seq, 30, \"...\"))",
          "backwardsPathConjunction": "(seq == null)",
          "simplifiedPathConjunction": "null == seq",
          "z3Inputs": "[seq0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseq0_isNull = Bool('seq0_isNull')\n\nconstraints = [\n  seq0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseq = Symbol('seq')\nnull = Symbol('null')\npath_conjunction = (Eq(seq, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 486,
          "throwingLine": 487,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/testing/ClassSanityTester.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTester.setDistinctValues(java.lang.Class<T>, T, T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(type == null)) && (!(value1 == null)) && (value2 == null)",
          "symbolicPathConjunction": "(checkNotNull(type)) && (checkNotNull(value1)) && (checkNotNull(value2))",
          "backwardsPathConjunction": "(!(type == null)) && (!(value1 == null)) && (value2 == null)",
          "simplifiedPathConjunction": "null == value2 && null != type && null != value1",
          "z3Inputs": "[value10_isNull = False,\n value20_isNull = True,\n type0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\nvalue10_isNull = Bool('value10_isNull')\nvalue20_isNull = Bool('value20_isNull')\n\nconstraints = [\n  And(And(Not(type0_isNull), Not(value10_isNull)), value20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nvalue1 = Symbol('value1')\nvalue2 = Symbol('value2')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(type, null)))) & (~((Eq(value1, null))))) & (Eq(value2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 180,
          "throwingLine": 183,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTester.setDistinctValues(java.lang.Class<T>, T, T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(type == null)) && (value1 == null)",
          "symbolicPathConjunction": "(checkNotNull(type)) && (checkNotNull(value1))",
          "backwardsPathConjunction": "(!(type == null)) && (value1 == null)",
          "simplifiedPathConjunction": "null == value1 && null != type",
          "z3Inputs": "[value10_isNull = True, type0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\nvalue10_isNull = Bool('value10_isNull')\n\nconstraints = [\n  And(Not(type0_isNull), value10_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nvalue1 = Symbol('value1')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(type, null)))) & (Eq(value1, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 180,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTester.setDistinctValues(java.lang.Class<T>, T, T)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"Duplicate value provided.\"))",
          "pathCojunction": "(!(type == null)) && (!(value1 == null)) && (!(value2 == null)) && (!(!Objects.equal(value1, value2)))",
          "symbolicPathConjunction": "(checkNotNull(type)) && (checkNotNull(value1)) && (checkNotNull(value2)) && (checkArgument(!Objects.equal(value1, value2), \"Duplicate value provided.\"))",
          "backwardsPathConjunction": "(!(type == null)) && (!(value1 == null)) && (!(value2 == null)) && (!(!Objects.equal(value1, value2)))",
          "simplifiedPathConjunction": "Objects.equal(value1, value2) && null != type && null != value1 && null != value2",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\nvalue10_isNull = Bool('value10_isNull')\nvalue20_isNull = Bool('value20_isNull')\n\nconstraints = [\n  And(And(And(Not(type0_isNull), Not(value10_isNull)), Not(value20_isNull)), Not(Not(Objects.equal(value10, value20))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nvalue1 = Symbol('value1')\nvalue2 = Symbol('value2')\nObjects_equal = Symbol('Objects_equal')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(type, null)))) & (~((Eq(value1, null))))) & (~((Eq(value2, null))))) & (~((~(Objects_equal)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 180,
          "throwingLine": 184,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTester.setDistinctValues(java.lang.Class<T>, T, T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(type == null)",
          "symbolicPathConjunction": "(checkNotNull(type))",
          "backwardsPathConjunction": "(type == null)",
          "simplifiedPathConjunction": "null == type",
          "z3Inputs": "[type0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\n\nconstraints = [\n  type0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nnull = Symbol('null')\npath_conjunction = (Eq(type, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 180,
          "throwingLine": 181,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ContiguousSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ContiguousSet.subSet(C, C)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromElement == null)",
          "symbolicPathConjunction": "(checkNotNull(fromElement))",
          "backwardsPathConjunction": "(fromElement == null)",
          "simplifiedPathConjunction": "fromElement == null",
          "z3Inputs": "[fromElement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromElement0_isNull = Bool('fromElement0_isNull')\n\nconstraints = [\n  fromElement0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\nnull = Symbol('null')\npath_conjunction = (Eq(fromElement, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 91,
          "throwingLine": 92,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ContiguousSet.subSet(C, C)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromElement == null)) && (toElement == null)",
          "symbolicPathConjunction": "(checkNotNull(fromElement)) && (checkNotNull(toElement))",
          "backwardsPathConjunction": "(!(fromElement == null)) && (toElement == null)",
          "simplifiedPathConjunction": "null == toElement && fromElement != null",
          "z3Inputs": "[fromElement0_isNull = False, toElement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromElement0_isNull = Bool('fromElement0_isNull')\ntoElement0_isNull = Bool('toElement0_isNull')\n\nconstraints = [\n  And(Not(fromElement0_isNull), toElement0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\ntoElement = Symbol('toElement')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(fromElement, null)))) & (Eq(toElement, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 91,
          "throwingLine": 93,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ContiguousSet.subSet(C, C)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(fromElement == null)) && (!(toElement == null)) && (!(comparator().compare(fromElement, toElement) <= 0))",
          "symbolicPathConjunction": "(checkNotNull(fromElement)) && (checkNotNull(toElement)) && (checkArgument(comparator().compare(fromElement, toElement) <= 0))",
          "backwardsPathConjunction": "(!(fromElement == null)) && (!(toElement == null)) && (!(comparator().compare(fromElement, toElement) <= 0))",
          "simplifiedPathConjunction": "comparator()_compare > 0 && fromElement != null && null != toElement",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromElement0_isNull = Bool('fromElement0_isNull')\ntoElement0_isNull = Bool('toElement0_isNull')\n\nconstraints = [\n  And(And(Not(fromElement0_isNull), Not(toElement0_isNull)), Not(comparator().compare(fromElement0, toElement0) <= 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\ntoElement = Symbol('toElement')\n_comparator_compare = Symbol('_comparator_compare')\n_comparator = Symbol('_comparator')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(fromElement, null)))) & (~((Eq(toElement, null))))) & (~((LessThan(_comparator_compare, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 91,
          "throwingLine": 94,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ContiguousSet.builder()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 161,
          "throwingLine": 162,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/Ints.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.indexOf(int[], int[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.indexOf(int[], int[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 187,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.min(int...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 235,
          "throwingLine": 236,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.max(int...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 254,
          "throwingLine": 255,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.join(java.lang.String, int...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 416,
          "throwingLine": 417,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.IntArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 545,
          "throwingLine": 546,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.IntArrayAsList.set(int, java.lang.Integer)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nelement0 = Int('element0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 581,
          "throwingLine": 582,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Ints.IntArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 590,
          "throwingLine": 592,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/StandardTable.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.put(R, C, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(rowKey == null)) && (!(columnKey == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(rowKey)) && (checkNotNull(columnKey)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(rowKey == null)) && (!(columnKey == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && columnKey != null && null != rowKey",
          "z3Inputs": "[columnKey0_isNull = False,\n value0_isNull = True,\n rowKey0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowKey0_isNull = Bool('rowKey0_isNull')\ncolumnKey0_isNull = Bool('columnKey0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(And(Not(rowKey0_isNull), Not(columnKey0_isNull)), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(rowKey, null)))) & (~((Eq(columnKey, null))))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 144,
          "throwingLine": 147,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.put(R, C, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(rowKey == null)",
          "symbolicPathConjunction": "(checkNotNull(rowKey))",
          "backwardsPathConjunction": "(rowKey == null)",
          "simplifiedPathConjunction": "null == rowKey",
          "z3Inputs": "[rowKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowKey0_isNull = Bool('rowKey0_isNull')\n\nconstraints = [\n  rowKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\nnull = Symbol('null')\npath_conjunction = (Eq(rowKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 144,
          "throwingLine": 145,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.put(R, C, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(rowKey == null)) && (columnKey == null)",
          "symbolicPathConjunction": "(checkNotNull(rowKey)) && (checkNotNull(columnKey))",
          "backwardsPathConjunction": "(!(rowKey == null)) && (columnKey == null)",
          "simplifiedPathConjunction": "columnKey == null && null != rowKey",
          "z3Inputs": "[columnKey0_isNull = True, rowKey0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowKey0_isNull = Bool('rowKey0_isNull')\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  And(Not(rowKey0_isNull), columnKey0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(rowKey, null)))) & (Eq(columnKey, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 144,
          "throwingLine": 146,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.Row.put(C, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 309,
          "throwingLine": 311,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.Row.put(C, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 309,
          "throwingLine": 310,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.Row.put(C, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (!(value == null)) && (!(backingRowMap != null && !backingRowMap.isEmpty())) && (rowKey == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value)) && (!(backingRowMap != null && !backingRowMap.isEmpty())) && (StandardTable.this.put(rowKey, key, value))",
          "backwardsPathConjunction": "(!(key == null)) && (!(value == null)) && (!(backingRowMap != null && !backingRowMap.isEmpty())) && (rowKey == null)",
          "simplifiedPathConjunction": "null == rowKey && (backingRowMap.isEmpty() || backingRowMap == null) && key != null && null != value",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\nbackingRowMap0_isNull = Bool('backingRowMap0_isNull')\nrowKey0_isNull = Bool('rowKey0_isNull')\n\nconstraints = [\n  And(And(And(Not(key0_isNull), Not(value0_isNull)), Not(And(Not(backingRowMap0_isNull), Not(backingRowMap0.isEmpty())))), rowKey0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nbackingRowMap = Symbol('backingRowMap')\nrowKey = Symbol('rowKey')\nbackingRowMap_isEmpty = Symbol('backingRowMap_isEmpty')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(key, null)))) & (~((Eq(value, null))))) & (~(((Ne(backingRowMap, null)) & (~(backingRowMap_isEmpty)))))) & (Eq(rowKey, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 309,
          "throwingLine": 315,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.Row.Anonymous-464da0e3-b147-4795-83cf-8d8b5d046c50.next()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(value == null)",
          "symbolicPathConjunction": "(super.setValue(checkNotNull(value))) && (checkNotNull(value))",
          "backwardsPathConjunction": "(value == null)",
          "simplifiedPathConjunction": "null == value",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  V > entry0 == iterator0.next(),\n  value0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (Eq(value, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 358,
          "throwingLine": 360,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.Column.put(R, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (!(columnKey == null)) && (value == null)",
          "symbolicPathConjunction": "(StandardTable.this.put(key, columnKey, value))",
          "backwardsPathConjunction": "(!(key == null)) && (!(columnKey == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && columnKey != null && key != null",
          "z3Inputs": "[key0_isNull = False,\n columnKey0_isNull = False,\n value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\ncolumnKey0_isNull = Bool('columnKey0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(And(Not(key0_isNull), Not(columnKey0_isNull)), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\ncolumnKey = Symbol('columnKey')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(key, null)))) & (~((Eq(columnKey, null))))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 407,
          "throwingLine": 408,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.Column.put(R, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(StandardTable.this.put(key, columnKey, value))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 407,
          "throwingLine": 408,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.Column.put(R, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (columnKey == null)",
          "symbolicPathConjunction": "(StandardTable.this.put(key, columnKey, value))",
          "backwardsPathConjunction": "(!(key == null)) && (columnKey == null)",
          "simplifiedPathConjunction": "columnKey == null && key != null",
          "z3Inputs": "[key0_isNull = False, columnKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), columnKey0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\ncolumnKey = Symbol('columnKey')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(columnKey, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 407,
          "throwingLine": 408,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.ColumnKeySet.removeAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(c == null)",
          "symbolicPathConjunction": "(checkNotNull(c))",
          "backwardsPathConjunction": "(c == null)",
          "simplifiedPathConjunction": "c == null",
          "z3Inputs": "[c0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  c0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\nnull = Symbol('null')\npath_conjunction = (Eq(c, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 646,
          "throwingLine": 647,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.ColumnKeySet.retainAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(c == null)",
          "symbolicPathConjunction": "(checkNotNull(c))",
          "backwardsPathConjunction": "(c == null)",
          "simplifiedPathConjunction": "c == null",
          "z3Inputs": "[c0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  c0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\nnull = Symbol('null')\npath_conjunction = (Eq(c, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 665,
          "throwingLine": 666,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardTable.ColumnMap.ColumnMapEntrySet.removeAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(c == null)",
          "symbolicPathConjunction": "(checkNotNull(c))",
          "backwardsPathConjunction": "(c == null)",
          "simplifiedPathConjunction": "c == null",
          "z3Inputs": "[c0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  c0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\nnull = Symbol('null')\npath_conjunction = (Eq(c, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 898,
          "throwingLine": 905,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/MapMakerInternalMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.getValueReference()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 794,
          "throwingLine": 795,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.setValueReference(com.google.common.collect.MapMakerInternalMap.ValueReference<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 799,
          "throwingLine": 800,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.getNext()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 804,
          "throwingLine": 805,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.getHash()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 809,
          "throwingLine": 810,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.getKey()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 814,
          "throwingLine": 815,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.getExpirationTime()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 819,
          "throwingLine": 820,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.setExpirationTime(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntime0 = Int('time0')\n\nconstraints = [\n  time0 >= -9223372036854775808, time0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 824,
          "throwingLine": 825,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.getNextExpirable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 829,
          "throwingLine": 830,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 834,
          "throwingLine": 835,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.getPreviousExpirable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 839,
          "throwingLine": 840,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 844,
          "throwingLine": 845,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.getNextEvictable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 849,
          "throwingLine": 850,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 854,
          "throwingLine": 855,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.getPreviousEvictable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 859,
          "throwingLine": 860,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.AbstractReferenceEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 864,
          "throwingLine": 865,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.StrongEntry.getExpirationTime()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 938,
          "throwingLine": 939,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.StrongEntry.setExpirationTime(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntime0 = Int('time0')\n\nconstraints = [\n  time0 >= -9223372036854775808, time0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 943,
          "throwingLine": 944,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.StrongEntry.getNextExpirable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 948,
          "throwingLine": 949,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.StrongEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 953,
          "throwingLine": 954,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.StrongEntry.getPreviousExpirable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 958,
          "throwingLine": 959,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.StrongEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 963,
          "throwingLine": 964,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.StrongEntry.getNextEvictable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 970,
          "throwingLine": 971,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.StrongEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 975,
          "throwingLine": 976,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.StrongEntry.getPreviousEvictable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 980,
          "throwingLine": 981,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.StrongEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 985,
          "throwingLine": 986,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.SoftEntry.getExpirationTime()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1192,
          "throwingLine": 1193,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.SoftEntry.setExpirationTime(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntime0 = Int('time0')\n\nconstraints = [\n  time0 >= -9223372036854775808, time0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1197,
          "throwingLine": 1198,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.SoftEntry.getNextExpirable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1202,
          "throwingLine": 1203,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.SoftEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1207,
          "throwingLine": 1208,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.SoftEntry.getPreviousExpirable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1212,
          "throwingLine": 1213,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.SoftEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1217,
          "throwingLine": 1218,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.SoftEntry.getNextEvictable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1224,
          "throwingLine": 1225,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.SoftEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1229,
          "throwingLine": 1230,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.SoftEntry.getPreviousEvictable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1234,
          "throwingLine": 1235,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.SoftEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1239,
          "throwingLine": 1240,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WeakEntry.getExpirationTime()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1450,
          "throwingLine": 1451,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WeakEntry.setExpirationTime(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntime0 = Int('time0')\n\nconstraints = [\n  time0 >= -9223372036854775808, time0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1455,
          "throwingLine": 1456,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WeakEntry.getNextExpirable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1460,
          "throwingLine": 1461,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WeakEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1465,
          "throwingLine": 1466,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WeakEntry.getPreviousExpirable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1470,
          "throwingLine": 1471,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WeakEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1475,
          "throwingLine": 1476,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WeakEntry.getNextEvictable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1482,
          "throwingLine": 1483,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WeakEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1487,
          "throwingLine": 1488,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WeakEntry.getPreviousEvictable()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1492,
          "throwingLine": 1493,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WeakEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap.ReferenceEntry<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1497,
          "throwingLine": 1498,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.put(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3512,
          "throwingLine": 3513,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.put(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3512,
          "throwingLine": 3514,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.putIfAbsent(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3520,
          "throwingLine": 3521,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.putIfAbsent(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3520,
          "throwingLine": 3522,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.replace(K, V, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3553,
          "throwingLine": 3554,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.replace(K, V, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (newValue == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(newValue))",
          "backwardsPathConjunction": "(!(key == null)) && (newValue == null)",
          "simplifiedPathConjunction": "newValue == null && key != null",
          "z3Inputs": "[key0_isNull = False, newValue0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nnewValue0_isNull = Bool('newValue0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), newValue0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnewValue = Symbol('newValue')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(newValue, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3553,
          "throwingLine": 3555,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.replace(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(key)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3564,
          "throwingLine": 3566,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.replace(K, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3564,
          "throwingLine": 3565,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WriteThroughEntry.setValue(V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(key == null)) && (newValue == null)",
          "symbolicPathConjunction": "(put(key, newValue))",
          "backwardsPathConjunction": "(!(key == null)) && (newValue == null)",
          "simplifiedPathConjunction": "newValue == null && key != null",
          "z3Inputs": "[key0_isNull = False, newValue0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nnewValue0_isNull = Bool('newValue0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), newValue0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnewValue = Symbol('newValue')\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(newValue, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3772,
          "throwingLine": 3773,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.WriteThroughEntry.setValue(V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(put(key, newValue))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3772,
          "throwingLine": 3773,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerInternalMap.EntryIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(nextExternal == null)",
          "symbolicPathConjunction": "(nextExternal == null)",
          "backwardsPathConjunction": "(nextExternal == null)",
          "simplifiedPathConjunction": "nextExternal == null",
          "z3Inputs": "[nextExternal0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnextExternal0_isNull = Bool('nextExternal0_isNull')\n\nconstraints = [\n  nextExternal0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnextExternal = Symbol('nextExternal')\nnull = Symbol('null')\npath_conjunction = (Eq(nextExternal, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3782,
          "throwingLine": 3783,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/BinaryTreeTraverser.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.BinaryTreeTraverser.children(T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(root == null)",
          "symbolicPathConjunction": "(checkNotNull(root))",
          "backwardsPathConjunction": "(root == null)",
          "simplifiedPathConjunction": "null == root",
          "z3Inputs": "[root0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nroot = Symbol('root')\nnull = Symbol('null')\npath_conjunction = (Eq(root, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 58,
          "throwingLine": 59,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.BinaryTreeTraverser.inOrderTraversal(T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(root == null)",
          "symbolicPathConjunction": "(checkNotNull(root))",
          "backwardsPathConjunction": "(root == null)",
          "simplifiedPathConjunction": "null == root",
          "z3Inputs": "[root0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nroot = Symbol('root')\nnull = Symbol('null')\npath_conjunction = (Eq(root, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/TreeTraverser.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.TreeTraverser.preOrderTraversal(T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(root == null)",
          "symbolicPathConjunction": "(checkNotNull(root))",
          "backwardsPathConjunction": "(root == null)",
          "simplifiedPathConjunction": "null == root",
          "z3Inputs": "[root0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nroot = Symbol('root')\nnull = Symbol('null')\npath_conjunction = (Eq(root, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 69,
          "throwingLine": 70,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeTraverser.postOrderTraversal(T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(root == null)",
          "symbolicPathConjunction": "(checkNotNull(root))",
          "backwardsPathConjunction": "(root == null)",
          "simplifiedPathConjunction": "null == root",
          "z3Inputs": "[root0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nroot = Symbol('root')\nnull = Symbol('null')\npath_conjunction = (Eq(root, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 119,
          "throwingLine": 120,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeTraverser.breadthFirstTraversal(T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(root == null)",
          "symbolicPathConjunction": "(checkNotNull(root))",
          "backwardsPathConjunction": "(root == null)",
          "simplifiedPathConjunction": "null == root",
          "z3Inputs": "[root0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nroot = Symbol('root')\nnull = Symbol('null')\npath_conjunction = (Eq(root, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 179,
          "throwingLine": 180,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ConcurrentHashMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ConcurrentHashMultiset.remove(java.lang.Object, int)",
          "exception": "throw new IllegalArgumentException(\"occurences\" + \" must be positive but was: \" + occurrences)",
          "pathCojunction": "(!(occurrences == 0)) && (occurrences <= 0)",
          "symbolicPathConjunction": "(!(occurrences == 0)) && (!(value <= 0))",
          "backwardsPathConjunction": "(!(occurrences == 0)) && (occurrences <= 0)",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  And(Not(occurrences0 == 0), occurrences0 <= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = ((~((Eq(occurrences, 0)))) & (LessThan(occurrences, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 284,
          "throwingLine": 288,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConcurrentHashMultiset.removeExactly(java.lang.Object, int)",
          "exception": "throw new IllegalArgumentException(\"occurences\" + \" must be positive but was: \" + occurrences)",
          "pathCojunction": "(!(occurrences == 0)) && (occurrences <= 0)",
          "symbolicPathConjunction": "(!(occurrences == 0)) && (!(value <= 0))",
          "backwardsPathConjunction": "(!(occurrences == 0)) && (occurrences <= 0)",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  And(Not(occurrences0 == 0), occurrences0 <= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = ((~((Eq(occurrences, 0)))) & (LessThan(occurrences, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 324,
          "throwingLine": 328,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConcurrentHashMultiset.setCount(E, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(element == null)",
          "symbolicPathConjunction": "(checkNotNull(element))",
          "backwardsPathConjunction": "(element == null)",
          "simplifiedPathConjunction": "element == null",
          "z3Inputs": "[element0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  element0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nnull = Symbol('null')\npath_conjunction = (Eq(element, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 359,
          "throwingLine": 360,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConcurrentHashMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException(\"count\" + \" cannot be negative but was: \" + count)",
          "pathCojunction": "(!(element == null)) && (count < 0)",
          "symbolicPathConjunction": "(checkNotNull(element)) && (value < 0)",
          "backwardsPathConjunction": "(!(element == null)) && (count < 0)",
          "simplifiedPathConjunction": "count < 0 && element != null",
          "z3Inputs": "[count0 = -1, element0_isNull = False]\n[element0_isNull = False, count0 = -2]\n[element0_isNull = False, count0 = -3]\n[element0_isNull = False, count0 = -4]\n[element0_isNull = False, count0 = -5]\n[element0_isNull = False, count0 = -6]\n[element0_isNull = False, count0 = -7]\n[element0_isNull = False, count0 = -8]\n[element0_isNull = False, count0 = -9]\n[element0_isNull = False, count0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  And(Not(element0_isNull), count0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\ncount = Symbol('count', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(element, null)))) & (StrictLessThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 359,
          "throwingLine": 361,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConcurrentHashMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException(\"oldCount\" + \" cannot be negative but was: \" + expectedOldCount)",
          "pathCojunction": "(!(element == null)) && (expectedOldCount < 0)",
          "symbolicPathConjunction": "(checkNotNull(element)) && (value < 0)",
          "backwardsPathConjunction": "(!(element == null)) && (expectedOldCount < 0)",
          "simplifiedPathConjunction": "expectedOldCount < 0 && element != null",
          "z3Inputs": "[expectedOldCount0 = -1, element0_isNull = False]\n[element0_isNull = False, expectedOldCount0 = -2]\n[element0_isNull = False, expectedOldCount0 = -3]\n[element0_isNull = False, expectedOldCount0 = -4]\n[element0_isNull = False, expectedOldCount0 = -5]\n[element0_isNull = False, expectedOldCount0 = -6]\n[element0_isNull = False, expectedOldCount0 = -7]\n[element0_isNull = False, expectedOldCount0 = -8]\n[element0_isNull = False, expectedOldCount0 = -9]\n[element0_isNull = False, expectedOldCount0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedOldCount0 = Int('expectedOldCount0')\nnewCount0 = Int('newCount0')\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  And(Not(element0_isNull), expectedOldCount0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nexpectedOldCount = Symbol('expectedOldCount', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(element, null)))) & (StrictLessThan(expectedOldCount, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 415,
          "throwingLine": 417,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConcurrentHashMultiset.setCount(E, int, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(element == null)",
          "symbolicPathConjunction": "(checkNotNull(element))",
          "backwardsPathConjunction": "(element == null)",
          "simplifiedPathConjunction": "element == null",
          "z3Inputs": "[element0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedOldCount0 = Int('expectedOldCount0')\nnewCount0 = Int('newCount0')\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  element0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nnull = Symbol('null')\npath_conjunction = (Eq(element, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 415,
          "throwingLine": 416,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConcurrentHashMultiset.setCount(E, int, int)",
          "exception": "throw new IllegalArgumentException(\"newCount\" + \" cannot be negative but was: \" + newCount)",
          "pathCojunction": "(!(element == null)) && (!(expectedOldCount < 0)) && (newCount < 0)",
          "symbolicPathConjunction": "(checkNotNull(element)) && (!(value < 0)) && (value < 0)",
          "backwardsPathConjunction": "(!(element == null)) && (!(expectedOldCount < 0)) && (newCount < 0)",
          "simplifiedPathConjunction": "expectedOldCount >= 0 && newCount < 0 && element != null",
          "z3Inputs": "[newCount0 = -1,\n expectedOldCount0 = 0,\n element0_isNull = False]\n[element0_isNull = False,\n newCount0 = -2,\n expectedOldCount0 = 1]\n[element0_isNull = False,\n newCount0 = -2,\n expectedOldCount0 = 2]\n[element0_isNull = False,\n newCount0 = -3,\n expectedOldCount0 = 1]\n[element0_isNull = False,\n newCount0 = -2,\n expectedOldCount0 = 3]\n[element0_isNull = False,\n newCount0 = -2,\n expectedOldCount0 = 4]\n[element0_isNull = False,\n newCount0 = -2,\n expectedOldCount0 = 5]\n[element0_isNull = False,\n newCount0 = -2,\n expectedOldCount0 = 6]\n[element0_isNull = False,\n newCount0 = -2,\n expectedOldCount0 = 7]\n[element0_isNull = False,\n newCount0 = -2,\n expectedOldCount0 = 8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedOldCount0 = Int('expectedOldCount0')\nnewCount0 = Int('newCount0')\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  And(And(Not(element0_isNull), Not(expectedOldCount0 < 0)), newCount0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nexpectedOldCount = Symbol('expectedOldCount', integer=True)\nnewCount = Symbol('newCount', integer=True)\nnull = Symbol('null')\npath_conjunction = (((~((Eq(element, null)))) & (~((StrictLessThan(expectedOldCount, 0))))) & (StrictLessThan(newCount, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 415,
          "throwingLine": 418,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/BigIntegerMath.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.math.BigIntegerMath.isPowerOfTwo(java.math.BigInteger)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(x == null)",
          "symbolicPathConjunction": "(checkNotNull(x))",
          "backwardsPathConjunction": "(x == null)",
          "simplifiedPathConjunction": "null == x",
          "z3Inputs": "[x0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0_isNull = Bool('x0_isNull')\n\nconstraints = [\n  x0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x')\nnull = Symbol('null')\npath_conjunction = (Eq(x, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 53,
          "throwingLine": 54,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.BigIntegerMath.factorial(int)",
          "exception": "throw new IllegalArgumentException(\"n\" + \" (\" + n + \") must be >= 0\")",
          "pathCojunction": "(n < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(n < 0)",
          "simplifiedPathConjunction": "n < 0",
          "z3Inputs": "[n0 = -1]\n[n0 = -2]\n[n0 = -3]\n[n0 = -4]\n[n0 = -5]\n[n0 = -6]\n[n0 = -7]\n[n0 = -8]\n[n0 = -9]\n[n0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\n\nconstraints = [\n  n0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\npath_conjunction = (StrictLessThan(n, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 133,
          "throwingLine": 134,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.BigIntegerMath.binomial(int, int)",
          "exception": "throw new IllegalArgumentException(\"k\" + \" (\" + k + \") must be >= 0\")",
          "pathCojunction": "(!(n < 0)) && (k < 0)",
          "symbolicPathConjunction": "(!(x < 0)) && (x < 0)",
          "backwardsPathConjunction": "(!(n < 0)) && (k < 0)",
          "simplifiedPathConjunction": "n >= 0 && k < 0",
          "z3Inputs": "[k0 = -1, n0 = 0]\n[k0 = -1, n0 = 1]\n[k0 = -2, n0 = 1]\n[k0 = -3, n0 = 1]\n[k0 = -3, n0 = 2]\n[k0 = -3, n0 = 3]\n[k0 = -4, n0 = 4]\n[k0 = -4, n0 = 5]\n[k0 = -4, n0 = 6]\n[k0 = -4, n0 = 7]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\nk0 = Int('k0')\n\nconstraints = [\n  And(Not(n0 < 0), k0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\nk = Symbol('k', integer=True)\npath_conjunction = ((~((StrictLessThan(n, 0)))) & (StrictLessThan(k, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 217,
          "throwingLine": 219,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.BigIntegerMath.binomial(int, int)",
          "exception": "throw new IllegalArgumentException(\"n\" + \" (\" + n + \") must be >= 0\")",
          "pathCojunction": "(n < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(n < 0)",
          "simplifiedPathConjunction": "n < 0",
          "z3Inputs": "[n0 = -1]\n[n0 = -2]\n[n0 = -3]\n[n0 = -4]\n[n0 = -5]\n[n0 = -6]\n[n0 = -7]\n[n0 = -8]\n[n0 = -9]\n[n0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\nk0 = Int('k0')\n\nconstraints = [\n  n0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\npath_conjunction = (StrictLessThan(n, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 217,
          "throwingLine": 218,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ConstrainedMapTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ConstrainedMapTest.TestConstraint.checkKeyValue(java.lang.String, java.lang.String)",
          "exception": "throw new TestKeyException();",
          "pathCojunction": "(TEST_KEY.equals(key))",
          "symbolicPathConjunction": "(TEST_KEY.equals(key))",
          "backwardsPathConjunction": "(TEST_KEY.equals(key))",
          "z3Inputs": "[key0 = \"42\", TEST_KEY0 = \"42\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nTEST_KEY0 = String('TEST_KEY0')\n\nconstraints = [\n  TEST_KEY0 == StringVal(\"42\"), \n  TEST_KEY0 == key0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\n\"42\"_equals = Symbol('\"42\"_equals')\npath_conjunction = \"42\"_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 119,
          "throwingLine": 121,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConstrainedMapTest.TestConstraint.checkKeyValue(java.lang.String, java.lang.String)",
          "exception": "throw new TestValueException();",
          "pathCojunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "symbolicPathConjunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "backwardsPathConjunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "z3Inputs": "[key0 = \"\",\n value0 = \"test\",\n TEST_VALUE0 = \"test\",\n TEST_KEY0 = \"42\"]\n[TEST_KEY0 = \"42\",\n key0 = \"A\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"B\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"C\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"D\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"E\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"F\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"G\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"H\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"I\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nTEST_KEY0 = String('TEST_KEY0')\nTEST_VALUE0 = String('TEST_VALUE0')\n\nconstraints = [\n  TEST_KEY0 == StringVal(\"42\"), \n  TEST_VALUE0 == StringVal(\"test\"), \n  And(Not(TEST_KEY0 == key0), TEST_VALUE0 == value0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n\"42\"_equals = Symbol('\"42\"_equals')\n\"test\"_equals = Symbol('\"test\"_equals')\npath_conjunction = ((~(\"42\"_equals)) & \"test\"_equals)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 119,
          "throwingLine": 124,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/IteratorsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.Anonymous-d4e3fe04-5aa9-475f-9409-d70e61aefd70.apply(java.lang.String)",
          "exception": "throw new AssertionFailedError(\"Should never be evaluated\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 260,
          "throwingLine": 261,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.PickyIterable.PickyIterator.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(expectedModCount != modCount)",
          "symbolicPathConjunction": "(expectedModCount != modCount)",
          "backwardsPathConjunction": "(expectedModCount != modCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[expectedModCount0 = 1, modCount0 = 0]\n[expectedModCount0 = 2, modCount0 = 3]\n[expectedModCount0 = 4, modCount0 = 5]\n[expectedModCount0 = 6, modCount0 = 7]\n[expectedModCount0 = 8, modCount0 = 9]\n[expectedModCount0 = 10, modCount0 = 11]\n[expectedModCount0 = 12, modCount0 = 13]\n[expectedModCount0 = 14, modCount0 = 15]\n[expectedModCount0 = 16, modCount0 = 17]\n[expectedModCount0 = 18, modCount0 = 19]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  expectedModCount0 != modCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(expectedModCount, modCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 580,
          "throwingLine": 581,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.PickyIterable.PickyIterator.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(expectedModCount != modCount)",
          "symbolicPathConjunction": "(!(expectedModCount != modCount))",
          "backwardsPathConjunction": "(expectedModCount != modCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[expectedModCount0 = 1, modCount0 = 0]\n[expectedModCount0 = 2, modCount0 = 3]\n[expectedModCount0 = 4, modCount0 = 5]\n[expectedModCount0 = 6, modCount0 = 7]\n[expectedModCount0 = 8, modCount0 = 9]\n[expectedModCount0 = 10, modCount0 = 11]\n[expectedModCount0 = 12, modCount0 = 13]\n[expectedModCount0 = 14, modCount0 = 15]\n[expectedModCount0 = 16, modCount0 = 17]\n[expectedModCount0 = 18, modCount0 = 19]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  expectedModCount0 != modCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(expectedModCount, modCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 586,
          "throwingLine": 587,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.PickyIterable.PickyIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(expectedModCount != modCount)) && (!(expectedModCount != modCount)) && (!(index < elements.size()))",
          "symbolicPathConjunction": "(!(expectedModCount != modCount)) && (!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(expectedModCount != modCount)) && (!(expectedModCount != modCount)) && (!(index < elements.size()))",
          "simplifiedPathConjunction": "expectedModCount == modCount && elements.size() <= index",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\nindex0 = Int('index0')\n\nconstraints = [\n  And(And(Not(expectedModCount0 != modCount0), Not(expectedModCount0 != modCount0)), Not(index0 < elements0.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\nelements = Symbol('elements')\nindex = Symbol('index', integer=True)\nelements_size = Symbol('elements_size')\npath_conjunction = (((~((Ne(expectedModCount, modCount)))) & (~((Ne(expectedModCount, modCount))))) & (~((StrictLessThan(index, elements_size)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 586,
          "throwingLine": 589,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.PickyIterable.PickyIterator.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(expectedModCount != modCount)",
          "symbolicPathConjunction": "(expectedModCount != modCount)",
          "backwardsPathConjunction": "(expectedModCount != modCount)",
          "simplifiedPathConjunction": "expectedModCount != modCount",
          "z3Inputs": "[expectedModCount0 = 1, modCount0 = 0]\n[expectedModCount0 = 2, modCount0 = 3]\n[expectedModCount0 = 4, modCount0 = 5]\n[expectedModCount0 = 6, modCount0 = 7]\n[expectedModCount0 = 8, modCount0 = 9]\n[expectedModCount0 = 10, modCount0 = 11]\n[expectedModCount0 = 12, modCount0 = 13]\n[expectedModCount0 = 14, modCount0 = 15]\n[expectedModCount0 = 16, modCount0 = 17]\n[expectedModCount0 = 18, modCount0 = 19]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\n\nconstraints = [\n  expectedModCount0 != modCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\npath_conjunction = (Ne(expectedModCount, modCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 596,
          "throwingLine": 597,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.IteratorsTest.PickyIterable.PickyIterator.remove()",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(expectedModCount != modCount)) && (!(canRemove))",
          "symbolicPathConjunction": "(!(expectedModCount != modCount)) && (checkState(canRemove, \"no calls to next() since the last call to remove()\"))",
          "backwardsPathConjunction": "(!(expectedModCount != modCount)) && (!(canRemove))",
          "simplifiedPathConjunction": "expectedModCount == modCount && !canRemove",
          "z3Inputs": "[modCount0 = 0, expectedModCount0 = 0, canRemove0 = False]\n[canRemove0 = False, expectedModCount0 = 2, modCount0 = 2]\n[canRemove0 = False, expectedModCount0 = 3, modCount0 = 3]\n[canRemove0 = False, expectedModCount0 = 4, modCount0 = 4]\n[canRemove0 = False, expectedModCount0 = 5, modCount0 = 5]\n[canRemove0 = False, expectedModCount0 = 6, modCount0 = 6]\n[canRemove0 = False, expectedModCount0 = 7, modCount0 = 7]\n[canRemove0 = False, expectedModCount0 = 8, modCount0 = 8]\n[canRemove0 = False, expectedModCount0 = 9, modCount0 = 9]\n[canRemove0 = False, expectedModCount0 = 10, modCount0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmodCount0 = Int('modCount0')\nexpectedModCount0 = Int('expectedModCount0')\ncanRemove0 = Bool('canRemove0')\n\nconstraints = [\n  And(Not(expectedModCount0 != modCount0), Not(canRemove0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmodCount = Symbol('modCount', integer=True)\nexpectedModCount = Symbol('expectedModCount', integer=True)\ncanRemove = Symbol('canRemove')\npath_conjunction = ((~((Ne(expectedModCount, modCount)))) & (~(canRemove)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 596,
          "throwingLine": 598,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ConcurrentHashMultisetTest.testSerializationWithMapMaker3()",
          "exception": "throw new IllegalStateException(\"expiration time of \" + expirationMillis + \" ns was already set\")",
          "pathCojunction": "(expirationMillis != 0)",
          "symbolicPathConjunction": "(expirationMillis != 0)",
          "backwardsPathConjunction": "(expirationMillis != 0)",
          "simplifiedPathConjunction": "expirationMillis != 0",
          "z3Inputs": "[expirationMillis0 = 1]\n[expirationMillis0 = 2]\n[expirationMillis0 = 3]\n[expirationMillis0 = 4]\n[expirationMillis0 = 5]\n[expirationMillis0 = 6]\n[expirationMillis0 = 7]\n[expirationMillis0 = 8]\n[expirationMillis0 = 9]\n[expirationMillis0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpirationMillis0 = Int('expirationMillis0')\n\nconstraints = [\n  expirationMillis0 != 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpirationMillis = Symbol('expirationMillis', integer=True)\npath_conjunction = (Ne(expirationMillis, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 452,
          "throwingLine": 453,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Iterables.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.unmodifiableIterable(java.lang.Iterable<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 65,
          "throwingLine": 66,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.unmodifiableIterable(com.google.common.collect.ImmutableCollection<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 80,
          "throwingLine": 81,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (!(iterable.iterator().hasNext()))",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator()))",
          "backwardsPathConjunction": "(!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (!(iterable.iterator().hasNext()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(Not(Not((iterable0.iterator()).hasNext())), And(0 < 4, iterable0.iterator().hasNext())), Not(iterable0.iterator().hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nBUG_IN_SIMPLIFICATION\niterable_iterator = Symbol('iterable_iterator')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\npath_conjunction = (((~((~((iterable.iterator())_hasNext)))) & ((StrictLessThan(0, 4)) & iterable_iterator_hasNext)) & (~(iterable_iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 283,
          "throwingLine": 284,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (!(iterable.iterator().hasNext()))",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator()))",
          "backwardsPathConjunction": "(!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (!(iterable.iterator().hasNext()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(Not(Not((iterable0.iterator()).hasNext())), Not(And(0 < 4, iterable0.iterator().hasNext()))), Not(iterable0.iterator().hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nBUG_IN_SIMPLIFICATION\niterable_iterator = Symbol('iterable_iterator')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\npath_conjunction = (((~((~((iterable.iterator())_hasNext)))) & (~(((StrictLessThan(0, 4)) & iterable_iterator_hasNext)))) & (~(iterable_iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 283,
          "throwingLine": 284,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (iterable.iterator().hasNext())",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator()))",
          "backwardsPathConjunction": "(!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (iterable.iterator().hasNext())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(Not(Not((iterable0.iterator()).hasNext())), And(0 < 4, iterable0.iterator().hasNext())), iterable0.iterator().hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nBUG_IN_SIMPLIFICATION\niterable_iterator = Symbol('iterable_iterator')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\npath_conjunction = (((~((~((iterable.iterator())_hasNext)))) & ((StrictLessThan(0, 4)) & iterable_iterator_hasNext)) & iterable_iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 283,
          "throwingLine": 284,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (iterable.iterator().hasNext())",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator()))",
          "backwardsPathConjunction": "(!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (iterable.iterator().hasNext())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(Not(Not((iterable0.iterator()).hasNext())), Not(And(0 < 4, iterable0.iterator().hasNext()))), iterable0.iterator().hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nBUG_IN_SIMPLIFICATION\niterable_iterator = Symbol('iterable_iterator')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\npath_conjunction = (((~((~((iterable.iterator())_hasNext)))) & (~(((StrictLessThan(0, 4)) & iterable_iterator_hasNext)))) & iterable_iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 283,
          "throwingLine": 284,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (iterable.iterator().hasNext())",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator(), defaultValue))",
          "backwardsPathConjunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (iterable.iterator().hasNext())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(And(iterable0.iterator().hasNext(), Not(Not((iterable0.iterator()).hasNext()))), Not(And(0 < 4, iterable0.iterator().hasNext()))), iterable0.iterator().hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\niterable_iterator = Symbol('iterable_iterator')\nBUG_IN_SIMPLIFICATION\npath_conjunction = (((iterable_iterator_hasNext & (~((~((iterable.iterator())_hasNext))))) & (~(((StrictLessThan(0, 4)) & iterable_iterator_hasNext)))) & iterable_iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 295,
          "throwingLine": 296,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (!(iterable.iterator().hasNext()))",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator(), defaultValue))",
          "backwardsPathConjunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (!(0 < 4 && iterable.iterator().hasNext())) && (!(iterable.iterator().hasNext()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(And(iterable0.iterator().hasNext(), Not(Not((iterable0.iterator()).hasNext()))), Not(And(0 < 4, iterable0.iterator().hasNext()))), Not(iterable0.iterator().hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\niterable_iterator = Symbol('iterable_iterator')\nBUG_IN_SIMPLIFICATION\npath_conjunction = (((iterable_iterator_hasNext & (~((~((iterable.iterator())_hasNext))))) & (~(((StrictLessThan(0, 4)) & iterable_iterator_hasNext)))) & (~(iterable_iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 295,
          "throwingLine": 296,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (!(iterable.iterator().hasNext()))",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator(), defaultValue))",
          "backwardsPathConjunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (!(iterable.iterator().hasNext()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(And(iterable0.iterator().hasNext(), Not(Not((iterable0.iterator()).hasNext()))), And(0 < 4, iterable0.iterator().hasNext())), Not(iterable0.iterator().hasNext()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\niterable_iterator = Symbol('iterable_iterator')\nBUG_IN_SIMPLIFICATION\npath_conjunction = (((iterable_iterator_hasNext & (~((~((iterable.iterator())_hasNext))))) & ((StrictLessThan(0, 4)) & iterable_iterator_hasNext)) & (~(iterable_iterator_hasNext)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 295,
          "throwingLine": 296,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)",
          "exception": "throw new IllegalArgumentException(sb.toString())",
          "pathCojunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (iterable.iterator().hasNext())",
          "symbolicPathConjunction": "(Iterators.getOnlyElement(iterable.iterator(), defaultValue))",
          "backwardsPathConjunction": "(iterable.iterator().hasNext()) && (!(!(iterable.iterator()).hasNext())) && (0 < 4 && iterable.iterator().hasNext()) && (iterable.iterator().hasNext())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(And(And(iterable0.iterator().hasNext(), Not(Not((iterable0.iterator()).hasNext()))), And(0 < 4, iterable0.iterator().hasNext())), iterable0.iterator().hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\niterable_iterator_hasNext = Symbol('iterable_iterator_hasNext')\niterable_iterator = Symbol('iterable_iterator')\nBUG_IN_SIMPLIFICATION\npath_conjunction = (((iterable_iterator_hasNext & (~((~((iterable.iterator())_hasNext))))) & ((StrictLessThan(0, 4)) & iterable_iterator_hasNext)) & iterable_iterator_hasNext)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 295,
          "throwingLine": 296,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.cycle(java.lang.Iterable<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 388,
          "throwingLine": 389,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.Anonymous-d03a26bd-60ff-4eb5-9108-613cd46cf84e.iterator()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(Iterators.cycle(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 392,
          "throwingLine": 393,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(inputs == null)",
          "symbolicPathConjunction": "(checkNotNull(inputs))",
          "backwardsPathConjunction": "(inputs == null)",
          "z3Inputs": "[inputs0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninputs0_isNull = Bool('inputs0_isNull')\n\nconstraints = [\n  inputs0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(inputs, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 493,
          "throwingLine": 494,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.partition(java.lang.Iterable<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 537,
          "throwingLine": 538,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.partition(java.lang.Iterable<T>, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(iterable == null)) && (!(size > 0))",
          "symbolicPathConjunction": "(checkNotNull(iterable)) && (checkArgument(size > 0))",
          "backwardsPathConjunction": "(!(iterable == null)) && (!(size > 0))",
          "simplifiedPathConjunction": "size <= 0 && iterable != null",
          "z3Inputs": "[size0 = 0, iterable0_isNull = False]\n[size0 = -1, iterable0_isNull = False]\n[size0 = -2, iterable0_isNull = False]\n[size0 = -3, iterable0_isNull = False]\n[size0 = -4, iterable0_isNull = False]\n[size0 = -5, iterable0_isNull = False]\n[size0 = -6, iterable0_isNull = False]\n[size0 = -7, iterable0_isNull = False]\n[size0 = -8, iterable0_isNull = False]\n[size0 = -9, iterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  And(Not(iterable0_isNull), Not(size0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nsize = Symbol('size', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterable, null)))) & (~((StrictGreaterThan(size, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 537,
          "throwingLine": 539,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.paddedPartition(java.lang.Iterable<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 565,
          "throwingLine": 566,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.paddedPartition(java.lang.Iterable<T>, int)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(iterable == null)) && (!(size > 0))",
          "symbolicPathConjunction": "(checkNotNull(iterable)) && (checkArgument(size > 0))",
          "backwardsPathConjunction": "(!(iterable == null)) && (!(size > 0))",
          "simplifiedPathConjunction": "size <= 0 && iterable != null",
          "z3Inputs": "[size0 = 0, iterable0_isNull = False]\n[size0 = -1, iterable0_isNull = False]\n[size0 = -2, iterable0_isNull = False]\n[size0 = -3, iterable0_isNull = False]\n[size0 = -4, iterable0_isNull = False]\n[size0 = -5, iterable0_isNull = False]\n[size0 = -6, iterable0_isNull = False]\n[size0 = -7, iterable0_isNull = False]\n[size0 = -8, iterable0_isNull = False]\n[size0 = -9, iterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  And(Not(iterable0_isNull), Not(size0 > 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nsize = Symbol('size', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterable, null)))) & (~((StrictGreaterThan(size, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 565,
          "throwingLine": 567,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.filter(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(unfiltered == null)) && (predicate == null)",
          "symbolicPathConjunction": "(checkNotNull(unfiltered)) && (checkNotNull(predicate))",
          "backwardsPathConjunction": "(!(unfiltered == null)) && (predicate == null)",
          "z3Inputs": "[predicate0_isNull = True, unfiltered0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  And(Not(unfiltered0_isNull), predicate0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunfiltered = Symbol('unfiltered')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(unfiltered, null)))) & (Eq(predicate, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 582,
          "throwingLine": 584,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.filter(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unfiltered == null)",
          "symbolicPathConjunction": "(checkNotNull(unfiltered))",
          "backwardsPathConjunction": "(unfiltered == null)",
          "simplifiedPathConjunction": "null == unfiltered",
          "z3Inputs": "[unfiltered0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\n\nconstraints = [\n  unfiltered0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunfiltered = Symbol('unfiltered')\nnull = Symbol('null')\npath_conjunction = (Eq(unfiltered, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 582,
          "throwingLine": 583,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.all(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(Iterators.all(iterable.iterator(), predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 628,
          "throwingLine": 629,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.transform(java.lang.Iterable<F>, com.google.common.base.Function<? super F, ? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromIterable == null)) && (function == null)",
          "symbolicPathConjunction": "(checkNotNull(fromIterable)) && (checkNotNull(function))",
          "backwardsPathConjunction": "(!(fromIterable == null)) && (function == null)",
          "z3Inputs": "[function0_isNull = True, fromIterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIterable0_isNull = Bool('fromIterable0_isNull')\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  And(Not(fromIterable0_isNull), function0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIterable = Symbol('fromIterable')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(fromIterable, null)))) & (Eq(function, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 702,
          "throwingLine": 704,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.transform(java.lang.Iterable<F>, com.google.common.base.Function<? super F, ? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromIterable == null)",
          "symbolicPathConjunction": "(checkNotNull(fromIterable))",
          "backwardsPathConjunction": "(fromIterable == null)",
          "simplifiedPathConjunction": "fromIterable == null",
          "z3Inputs": "[fromIterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIterable0_isNull = Bool('fromIterable0_isNull')\n\nconstraints = [\n  fromIterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIterable = Symbol('fromIterable')\nnull = Symbol('null')\npath_conjunction = (Eq(fromIterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 702,
          "throwingLine": 703,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.get(java.lang.Iterable<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 721,
          "throwingLine": 722,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.get(java.lang.Iterable<? extends T>, int, T)",
          "exception": "throw new IndexOutOfBoundsException(\"position (\" + position + \") must not be negative\");",
          "pathCojunction": "(!(iterable == null)) && (position < 0)",
          "symbolicPathConjunction": "(checkNotNull(iterable)) && (position < 0)",
          "backwardsPathConjunction": "(!(iterable == null)) && (position < 0)",
          "z3Inputs": "[position0 = -1, iterable0_isNull = False]\n[position0 = -2, iterable0_isNull = False]\n[position0 = -3, iterable0_isNull = False]\n[position0 = -4, iterable0_isNull = False]\n[position0 = -5, iterable0_isNull = False]\n[position0 = -6, iterable0_isNull = False]\n[position0 = -7, iterable0_isNull = False]\n[position0 = -8, iterable0_isNull = False]\n[position0 = -9, iterable0_isNull = False]\n[position0 = -10, iterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  And(Not(iterable0_isNull), position0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nposition = Symbol('position', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterable, null)))) & (StrictLessThan(position, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 742,
          "throwingLine": 744,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.get(java.lang.Iterable<? extends T>, int, T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 742,
          "throwingLine": 743,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.skip(java.lang.Iterable<T>, int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"number to skip cannot be negative\"))",
          "pathCojunction": "(!(iterable == null)) && (!(numberToSkip >= 0))",
          "symbolicPathConjunction": "(checkNotNull(iterable)) && (checkArgument(numberToSkip >= 0, \"number to skip cannot be negative\"))",
          "backwardsPathConjunction": "(!(iterable == null)) && (!(numberToSkip >= 0))",
          "simplifiedPathConjunction": "numberToSkip < 0 && iterable != null",
          "z3Inputs": "[numberToSkip0 = -1, iterable0_isNull = False]\n[numberToSkip0 = -2, iterable0_isNull = False]\n[numberToSkip0 = -3, iterable0_isNull = False]\n[numberToSkip0 = -4, iterable0_isNull = False]\n[numberToSkip0 = -5, iterable0_isNull = False]\n[numberToSkip0 = -6, iterable0_isNull = False]\n[numberToSkip0 = -7, iterable0_isNull = False]\n[numberToSkip0 = -8, iterable0_isNull = False]\n[numberToSkip0 = -9, iterable0_isNull = False]\n[numberToSkip0 = -10, iterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumberToSkip0 = Int('numberToSkip0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  And(Not(iterable0_isNull), Not(numberToSkip0 >= 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnumberToSkip = Symbol('numberToSkip', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterable, null)))) & (~((GreaterThan(numberToSkip, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 838,
          "throwingLine": 840,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.skip(java.lang.Iterable<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumberToSkip0 = Int('numberToSkip0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 838,
          "throwingLine": 839,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.limit(java.lang.Iterable<T>, int)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"limit is negative\"))",
          "pathCojunction": "(!(iterable == null)) && (!(limitSize >= 0))",
          "symbolicPathConjunction": "(checkNotNull(iterable)) && (checkArgument(limitSize >= 0, \"limit is negative\"))",
          "backwardsPathConjunction": "(!(iterable == null)) && (!(limitSize >= 0))",
          "simplifiedPathConjunction": "limitSize < 0 && iterable != null",
          "z3Inputs": "[limitSize0 = -1, iterable0_isNull = False]\n[limitSize0 = -2, iterable0_isNull = False]\n[limitSize0 = -3, iterable0_isNull = False]\n[limitSize0 = -4, iterable0_isNull = False]\n[limitSize0 = -5, iterable0_isNull = False]\n[limitSize0 = -6, iterable0_isNull = False]\n[limitSize0 = -7, iterable0_isNull = False]\n[limitSize0 = -8, iterable0_isNull = False]\n[limitSize0 = -9, iterable0_isNull = False]\n[limitSize0 = -10, iterable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlimitSize0 = Int('limitSize0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  And(Not(iterable0_isNull), Not(limitSize0 >= 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nlimitSize = Symbol('limitSize', integer=True)\nnull = Symbol('null')\npath_conjunction = ((~((Eq(iterable, null)))) & (~((GreaterThan(limitSize, 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 903,
          "throwingLine": 905,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Iterables.limit(java.lang.Iterable<T>, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlimitSize0 = Int('limitSize0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 903,
          "throwingLine": 904,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Multimaps.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.unmodifiableMultimap(com.google.common.collect.ImmutableMultimap<K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(delegate == null)",
          "symbolicPathConjunction": "(checkNotNull(delegate))",
          "backwardsPathConjunction": "(delegate == null)",
          "z3Inputs": "[delegate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndelegate0_isNull = Bool('delegate0_isNull')\n\nconstraints = [\n  delegate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(delegate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 480,
          "throwingLine": 481,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 503,
          "throwingLine": 504,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.put(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 558,
          "throwingLine": 559,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.putAll(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 563,
          "throwingLine": 564,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 568,
          "throwingLine": 569,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.remove(java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 573,
          "throwingLine": 574,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 578,
          "throwingLine": 579,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 583,
          "throwingLine": 584,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableListMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 616,
          "throwingLine": 617,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 621,
          "throwingLine": 622,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableSetMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 654,
          "throwingLine": 655,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 659,
          "throwingLine": 660,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 683,
          "throwingLine": 684,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.UnmodifiableSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 688,
          "throwingLine": 689,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap<K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(delegate == null)",
          "symbolicPathConjunction": "(checkNotNull(delegate))",
          "backwardsPathConjunction": "(delegate == null)",
          "z3Inputs": "[delegate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndelegate0_isNull = Bool('delegate0_isNull')\n\nconstraints = [\n  delegate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(delegate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 749,
          "throwingLine": 750,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap<K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(delegate == null)",
          "symbolicPathConjunction": "(checkNotNull(delegate))",
          "backwardsPathConjunction": "(delegate == null)",
          "z3Inputs": "[delegate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndelegate0_isNull = Bool('delegate0_isNull')\n\nconstraints = [\n  delegate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(delegate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 842,
          "throwingLine": 843,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.Anonymous-15ff4b42-2e0a-4a96-aae5-41e7a57e1553.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(i == 0) && map.containsKey(key))",
          "symbolicPathConjunction": "(!(hasNext())) && (!hasNext())",
          "backwardsPathConjunction": "(!(i == 0) && map.containsKey(key))",
          "simplifiedPathConjunction": "map.containsKey(key) && i != 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\n\nconstraints = [\n  And(Not(i0 == 0), map0.containsKey(key))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\nmap = Symbol('map')\nmap_containsKey = Symbol('map_containsKey')\npath_conjunction = ((~((Eq(i, 0)))) & map_containsKey)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 997,
          "throwingLine": 999,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.put(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1022,
          "throwingLine": 1023,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.putAll(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1027,
          "throwingLine": 1028,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1032,
          "throwingLine": 1033,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.MapMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1037,
          "throwingLine": 1038,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.transformValues(com.google.common.collect.Multimap<K, V1>, com.google.common.base.Function<? super V1, V2>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1139,
          "throwingLine": 1140,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.TransformedEntriesMultimap.put(K, V2)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1274,
          "throwingLine": 1275,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.TransformedEntriesMultimap.putAll(K, java.lang.Iterable<? extends V2>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1279,
          "throwingLine": 1280,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.TransformedEntriesMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V2>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1284,
          "throwingLine": 1285,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.TransformedEntriesMultimap.replaceValues(K, java.lang.Iterable<? extends V2>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1301,
          "throwingLine": 1302,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.transformValues(com.google.common.collect.ListMultimap<K, V1>, com.google.common.base.Function<? super V1, V2>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(function == null)",
          "symbolicPathConjunction": "(checkNotNull(function))",
          "backwardsPathConjunction": "(function == null)",
          "z3Inputs": "[function0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfunction0_isNull = Bool('function0_isNull')\n\nconstraints = [\n  function0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(function, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1359,
          "throwingLine": 1360,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.TransformedEntriesListMultimap.replaceValues(K, java.lang.Iterable<? extends V2>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1447,
          "throwingLine": 1448,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.index(java.lang.Iterable<V>, com.google.common.base.Function<? super V, K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyFunction == null)",
          "symbolicPathConjunction": "(index(values.iterator(), keyFunction))",
          "backwardsPathConjunction": "(keyFunction == null)",
          "z3Inputs": "[keyFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyFunction0_isNull = Bool('keyFunction0_isNull')\n\nconstraints = [\n  keyFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1495,
          "throwingLine": 1496,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.index(java.util.Iterator<V>, com.google.common.base.Function<? super V, K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyFunction == null)",
          "symbolicPathConjunction": "(checkNotNull(keyFunction))",
          "backwardsPathConjunction": "(keyFunction == null)",
          "z3Inputs": "[keyFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyFunction0_isNull = Bool('keyFunction0_isNull')\n\nconstraints = [\n  keyFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1543,
          "throwingLine": 1544,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.index(java.util.Iterator<V>, com.google.common.base.Function<? super V, K>)",
          "exception": "throw new NullPointerException(String.valueOf(values))",
          "pathCojunction": "(!(keyFunction == null)) && (values.hasNext()) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(keyFunction)) && (ImmutableListMultimap.builder()) && (values.hasNext()) && (checkNotNull(value, values))",
          "backwardsPathConjunction": "(!(keyFunction == null)) && (values.hasNext()) && (values.next() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyFunction0_isNull = Bool('keyFunction0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  V > builder0 == new Builder<K, V>(),\n  value0 == values0.next(),\n  And(And(Not(keyFunction0_isNull), values0.hasNext()), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nsuper = Symbol('super')\nvalues_hasNext = Symbol('values_hasNext')\nvalues_next = Symbol('values_next')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(keyFunction, null)))) & values_hasNext) & (Eq(values_next, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 1543,
          "throwingLine": 1548,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.Keys.remove(java.lang.Object, int)",
          "exception": "throw new IllegalArgumentException(\"occurrences\" + \" cannot be negative but was: \" + occurrences)",
          "pathCojunction": "(occurrences < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(occurrences < 0)",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  occurrences0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = (StrictLessThan(occurrences, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1655,
          "throwingLine": 1656,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.filterEntries(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(checkNotNull(entryPredicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2050,
          "throwingLine": 2051,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Multimaps.filterEntries(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(checkNotNull(entryPredicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2090,
          "throwingLine": 2091,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.initialCapacity(int)",
          "exception": "throw new IllegalArgumentException();",
          "pathCojunction": "(initialCapacity < 0)",
          "symbolicPathConjunction": "(initialCapacity < 0)",
          "backwardsPathConjunction": "(initialCapacity < 0)",
          "simplifiedPathConjunction": "initialCapacity < 0",
          "z3Inputs": "[initialCapacity0 = -1]\n[initialCapacity0 = -2]\n[initialCapacity0 = -3]\n[initialCapacity0 = -4]\n[initialCapacity0 = -5]\n[initialCapacity0 = -6]\n[initialCapacity0 = -7]\n[initialCapacity0 = -8]\n[initialCapacity0 = -9]\n[initialCapacity0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninitialCapacity0 = Int('initialCapacity0')\n\nconstraints = [\n  initialCapacity0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninitialCapacity = Symbol('initialCapacity', integer=True)\npath_conjunction = (StrictLessThan(initialCapacity, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 171,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MapMaker.concurrencyLevel(int)",
          "exception": "throw new IllegalArgumentException(\"GWT only supports a concurrency level of 1\");",
          "pathCojunction": "(concurrencyLevel < 1)",
          "symbolicPathConjunction": "(concurrencyLevel < 1)",
          "backwardsPathConjunction": "(concurrencyLevel < 1)",
          "simplifiedPathConjunction": "concurrencyLevel < 1",
          "z3Inputs": "[concurrencyLevel0 = 0]\n[concurrencyLevel0 = -1]\n[concurrencyLevel0 = -2]\n[concurrencyLevel0 = -3]\n[concurrencyLevel0 = -4]\n[concurrencyLevel0 = -5]\n[concurrencyLevel0 = -6]\n[concurrencyLevel0 = -7]\n[concurrencyLevel0 = -8]\n[concurrencyLevel0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nconcurrencyLevel0 = Int('concurrencyLevel0')\n\nconstraints = [\n  concurrencyLevel0 < 1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nconcurrencyLevel = Symbol('concurrencyLevel', integer=True)\npath_conjunction = (StrictLessThan(concurrencyLevel, 1))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 205,
          "throwingLine": 207,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.TrustedListenableFutureTaskTest.Anonymous-a0d68660-48dc-49d7-bcef-e445a78830b7.call()",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 71,
          "throwingLine": 72,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/ByteStreams.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.copy(java.io.InputStream, java.io.OutputStream)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(from == null)) && (to == null)",
          "symbolicPathConjunction": "(checkNotNull(from)) && (checkNotNull(to))",
          "backwardsPathConjunction": "(!(from == null)) && (to == null)",
          "z3Inputs": "[to0_isNull = True, from0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0_isNull = Bool('from0_isNull')\nto0_isNull = Bool('to0_isNull')\n\nconstraints = [\n  And(Not(from0_isNull), to0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfrom = Symbol('from')\nto = Symbol('to')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(from, null)))) & (Eq(to, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 104,
          "throwingLine": 106,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.copy(java.io.InputStream, java.io.OutputStream)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(from == null)",
          "symbolicPathConjunction": "(checkNotNull(from))",
          "backwardsPathConjunction": "(from == null)",
          "z3Inputs": "[from0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0_isNull = Bool('from0_isNull')\n\nconstraints = [\n  from0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfrom = Symbol('from')\nnull = Symbol('null')\npath_conjunction = (Eq(from, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 104,
          "throwingLine": 105,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(from == null)) && (to == null)",
          "symbolicPathConjunction": "(checkNotNull(from)) && (checkNotNull(to))",
          "backwardsPathConjunction": "(!(from == null)) && (to == null)",
          "z3Inputs": "[to0_isNull = True, from0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0_isNull = Bool('from0_isNull')\nto0_isNull = Bool('to0_isNull')\n\nconstraints = [\n  And(Not(from0_isNull), to0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfrom = Symbol('from')\nto = Symbol('to')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(from, null)))) & (Eq(to, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 130,
          "throwingLine": 132,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(from == null)",
          "symbolicPathConjunction": "(checkNotNull(from))",
          "backwardsPathConjunction": "(from == null)",
          "z3Inputs": "[from0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0_isNull = Bool('from0_isNull')\n\nconstraints = [\n  from0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfrom = Symbol('from')\nnull = Symbol('null')\npath_conjunction = (Eq(from, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 130,
          "throwingLine": 131,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.toByteArray(java.io.InputStream)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(in == null)",
          "symbolicPathConjunction": "(copy(in, out))",
          "backwardsPathConjunction": "(in == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nin0_isNull = Bool('in0_isNull')\n\nconstraints = [\n  out0 == new ByteArrayOutputStream(),\n  in0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nnull = Symbol('null')\npath_conjunction = (Eq(in, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 166,
          "throwingLine": 168,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.toByteArray(java.io.InputStream)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(in == null)) && (out == null)",
          "symbolicPathConjunction": "(copy(in, out))",
          "backwardsPathConjunction": "(!(in == null)) && (new ByteArrayOutputStream() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nin0_isNull = Bool('in0_isNull')\nout0_isNull = Bool('out0_isNull')\n\nconstraints = [\n  out0 == new ByteArrayOutputStream(),\n  And(Not(in0_isNull), out0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 166,
          "throwingLine": 168,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.newDataInput(byte[], int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndex(start, bytes.length, \"index\"))",
          "pathCojunction": "(start < 0 || start > bytes.length)",
          "symbolicPathConjunction": "(checkPositionIndex(start, bytes.length))",
          "backwardsPathConjunction": "(start < 0 || start > bytes.length)",
          "simplifiedPathConjunction": "bytes.length < start || start < 0",
          "z3Inputs": "[start0 = 1, bytes0_length = 0]\n[start0 = -1, bytes0_length = 1]\n[start0 = -1, bytes0_length = 2]\n[start0 = -2, bytes0_length = 1]\n[start0 = 2, bytes0_length = 1]\n[start0 = 3, bytes0_length = 1]\n[start0 = 4, bytes0_length = 1]\n[start0 = 5, bytes0_length = 1]\n[start0 = 6, bytes0_length = 1]\n[start0 = 7, bytes0_length = 1]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstart0 = Int('start0')\nbytes0_length = Int('bytes0_length')\n\nconstraints = [\n  bytes0_length >= 0, # implicit\n  Or(start0 < 0, start0 > bytes0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbytes = Symbol('bytes')\nstart = Symbol('start', integer=True)\nbytes_length = Symbol('bytes_length', integer=True)\npath_conjunction = ((StrictLessThan(start, 0)) | (StrictGreaterThan(start, bytes_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 240,
          "throwingLine": 241,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.newDataInput(java.io.ByteArrayInputStream)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(byteArrayInputStream == null)",
          "symbolicPathConjunction": "(checkNotNull(byteArrayInputStream))",
          "backwardsPathConjunction": "(byteArrayInputStream == null)",
          "simplifiedPathConjunction": "byteArrayInputStream == null",
          "z3Inputs": "[byteArrayInputStream0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbyteArrayInputStream0_isNull = Bool('byteArrayInputStream0_isNull')\n\nconstraints = [\n  byteArrayInputStream0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbyteArrayInputStream = Symbol('byteArrayInputStream')\nnull = Symbol('null')\npath_conjunction = (Eq(byteArrayInputStream, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 254,
          "throwingLine": 255,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.newDataOutput(int)",
          "exception": "throw new IllegalArgumentException(String.format(\"Invalid size: %s\", size));",
          "pathCojunction": "(size < 0)",
          "symbolicPathConjunction": "(size < 0)",
          "backwardsPathConjunction": "(size < 0)",
          "simplifiedPathConjunction": "size < 0",
          "z3Inputs": "[size0 = -1]\n[size0 = -2]\n[size0 = -3]\n[size0 = -4]\n[size0 = -5]\n[size0 = -6]\n[size0 = -7]\n[size0 = -8]\n[size0 = -9]\n[size0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsize0 = Int('size0')\n\nconstraints = [\n  size0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsize = Symbol('size', integer=True)\npath_conjunction = (StrictLessThan(size, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 401,
          "throwingLine": 405,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.newDataOutput(java.io.ByteArrayOutputStream)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(byteArrayOutputSteam == null)",
          "symbolicPathConjunction": "(checkNotNull(byteArrayOutputSteam))",
          "backwardsPathConjunction": "(byteArrayOutputSteam == null)",
          "simplifiedPathConjunction": "byteArrayOutputSteam == null",
          "z3Inputs": "[byteArrayOutputSteam0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbyteArrayOutputSteam0_isNull = Bool('byteArrayOutputSteam0_isNull')\n\nconstraints = [\n  byteArrayOutputSteam0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbyteArrayOutputSteam = Symbol('byteArrayOutputSteam')\nnull = Symbol('null')\npath_conjunction = (Eq(byteArrayOutputSteam, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 425,
          "throwingLine": 426,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.Anonymous-7594deba-f3ea-45c2-9e22-88f9e56fde32.write(byte[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(b == null)",
          "symbolicPathConjunction": "(checkNotNull(b))",
          "backwardsPathConjunction": "(b == null)",
          "simplifiedPathConjunction": "b == null",
          "z3Inputs": "[b0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  b0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nb = Symbol('b')\nnull = Symbol('null')\npath_conjunction = (Eq(b, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 564,
          "throwingLine": 565,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.Anonymous-9661290e-6f04-43f1-9d9b-d5367fd1d52b.write(byte[], int, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(b == null)",
          "symbolicPathConjunction": "(checkNotNull(b))",
          "backwardsPathConjunction": "(b == null)",
          "simplifiedPathConjunction": "b == null",
          "z3Inputs": "[b0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  b0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nb = Symbol('b')\nnull = Symbol('null')\npath_conjunction = (Eq(b, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 568,
          "throwingLine": 569,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.LimitedInputStream.reset()",
          "exception": "throw new IOException(\"Mark not set\");",
          "pathCojunction": "(!(!in.markSupported())) && (mark == -1)",
          "symbolicPathConjunction": "(!(!in.markSupported())) && (mark == -1)",
          "backwardsPathConjunction": "(!(!in.markSupported())) && (mark == -1)",
          "simplifiedPathConjunction": "in.markSupported() && mark == -1",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmark0 = Int('mark0')\n\nconstraints = [\n  And(Not(Not(in.markSupported())), mark0 == -1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmark = Symbol('mark', integer=True)\nin_markSupported = Symbol('in_markSupported')\npath_conjunction = ((~((~(in_markSupported)))) & (Eq(mark, -1)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 647,
          "throwingLine": 652,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(in == null)) && (b == null)",
          "symbolicPathConjunction": "(readFully(in, b, 0, b.length))",
          "backwardsPathConjunction": "(!(in == null)) && (b == null)",
          "z3Inputs": "[in0_isNull = False, b0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nin0_isNull = Bool('in0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(in0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nb = Symbol('b')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(in, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 678,
          "throwingLine": 679,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(in == null)",
          "symbolicPathConjunction": "(readFully(in, b, 0, b.length))",
          "backwardsPathConjunction": "(in == null)",
          "z3Inputs": "[in0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nin0_isNull = Bool('in0_isNull')\n\nconstraints = [\n  in0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nnull = Symbol('null')\npath_conjunction = (Eq(in, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 678,
          "throwingLine": 679,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[])",
          "exception": "throw new EOFException(\"reached end of stream after reading \" + read + \" bytes; \" + b.length + \" bytes expected\")",
          "pathCojunction": "(!(in == null)) && (!(b == null)) && (!(b.length < 0)) && (total + result + in.read(b, off + total, len - total) < b.length) && (!(in.read(b, 0 + total + result, b.length - total + result) == -1)) && (!(total + result + in.read(b, off + total, len - total) < b.length)) && (total != b.length)",
          "symbolicPathConjunction": "(readFully(in, b, 0, b.length))",
          "backwardsPathConjunction": "(!(in == null)) && (!(b == null)) && (!(b.length < 0)) && (total + result + in.read(b, off + total, len - total) + in.read(b, off + total, len - total) + in.read(b, off + total + result + in.read(b, off + total, len - total), len - total + result + in.read(b, off + total, len - total)) < b.length) && (!(in.read(b, 0 + total + result + in.read(b, off + total, len - total) + in.read(b, off + total, len - total), b.length - total + result + in.read(b, off + total, len - total) + in.read(b, off + total, len - total)) == -1)) && (!(total + result + in.read(b, off + total, len - total) + in.read(b, off + total, len - total) + in.read(b, off + total + result + in.read(b, off + total, len - total), len - total + result + in.read(b, off + total, len - total)) < b.length)) && (total + result + in.read(b, off + total, len - total) != b.length)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nresult0 = Int('result0')\ntotal0 = Int('total0')\nlen0 = Int('len0')\noff0 = Int('off0')\nin0_isNull = Bool('in0_isNull')\nb0_isNull = Bool('b0_isNull')\nb0_length = Int('b0_length')\n\nconstraints = [\n  result0 == in0.read(b0, off + total, len - total),\n  total0 == total + result0,\n  b0_length >= 0, # implicit\n  And(And(And(And(And(And(Not(in0_isNull), Not(b0_isNull)), Not(b0_length < 0)), total0 + result0 + in0.read(b0, off0 + total0, len0 - total0) < b0_length), Not(in0.read(b0, 0 + total0 + result0, b0_length - total0 + result0) == -1)), Not(total0 + result0 + in0.read(b0, off0 + total0, len0 - total0) < b0_length)), total0 != b0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 678,
          "throwingLine": 679,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[])",
          "exception": "throw new EOFException(\"reached end of stream after reading \" + read + \" bytes; \" + b.length + \" bytes expected\")",
          "pathCojunction": "(!(in == null)) && (!(b == null)) && (!(b.length < 0)) && (0 < b.length) && (in.read(b, 0 + 0, b.length - 0) == -1) && (total != b.length)",
          "symbolicPathConjunction": "(readFully(in, b, 0, b.length))",
          "backwardsPathConjunction": "(!(in == null)) && (!(b == null)) && (!(b.length < 0)) && (0 < b.length) && (in.read(b, 0 + 0, b.length - 0) == -1) && (0 != b.length)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntotal0 = Int('total0')\nin0_isNull = Bool('in0_isNull')\nb0_isNull = Bool('b0_isNull')\nb0_length = Int('b0_length')\n\nconstraints = [\n  total0 == 0,\n  b0_length >= 0, # implicit\n  And(And(And(And(And(Not(in0_isNull), Not(b0_isNull)), Not(b0_length < 0)), 0 < b0_length), in0.read(b0, 0 + 0, b0_length - 0) == -1), total0 != b0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 678,
          "throwingLine": 679,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[], int, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(in == null)",
          "symbolicPathConjunction": "(read(in, b, off, len))",
          "backwardsPathConjunction": "(in == null)",
          "z3Inputs": "[in0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nin0_isNull = Bool('in0_isNull')\n\nconstraints = [\n  in0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nnull = Symbol('null')\npath_conjunction = (Eq(in, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 697,
          "throwingLine": 698,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[], int, int)",
          "exception": "throw new EOFException(\"reached end of stream after reading \" + read + \" bytes; \" + len + \" bytes expected\");",
          "pathCojunction": "(!(in == null)) && (!(b == null)) && (!(len < 0)) && (total + result < len) && (!(in.read(b, off + total, len - total) == -1)) && (!(total + result < len)) && (read != len)",
          "symbolicPathConjunction": "(read(in, b, off, len)) && (read != len)",
          "backwardsPathConjunction": "(!(in == null)) && (!(b == null)) && (!(len < 0)) && (total + result + in.read(b, off + total, len - total) + in.read(b, off + total, len - total) < len) && (!(in.read(b, off + total + result + in.read(b, off + total, len - total), len - total + result + in.read(b, off + total, len - total)) == -1)) && (!(total + result + in.read(b, off + total, len - total) + in.read(b, off + total, len - total) < len)) && (total != len)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nresult0 = Int('result0')\ntotal0 = Int('total0')\nread0 = Int('read0')\nin0_isNull = Bool('in0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  result0 == in0.read(b0, off0 + total, len0 - total),\n  total0 == total + result0,\n  read0 == total0,\n  And(And(And(And(And(And(Not(in0_isNull), Not(b0_isNull)), Not(len0 < 0)), total0 + result0 < len0), Not(in0.read(b0, off0 + total0, len0 - total0) == -1)), Not(total0 + result0 < len0)), read0 != len0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nb = Symbol('b')\noff = Symbol('off', integer=True)\nlen = Symbol('len', integer=True)\nin_read = Symbol('in_read')\nnull = Symbol('null')\npath_conjunction = (((((((~((Eq(in, null)))) & (~((Eq(b, null))))) & (~((StrictLessThan(len, 0))))) & (StrictLessThan((((total + result) + in_read) + in_read), len))) & (~((Eq(in_read, -1))))) & (~((StrictLessThan((((total + result) + in_read) + in_read), len))))) & (Ne(total, len)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 697,
          "throwingLine": 700,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[], int, int)",
          "exception": "throw new EOFException(\"reached end of stream after reading \" + read + \" bytes; \" + len + \" bytes expected\");",
          "pathCojunction": "(!(in == null)) && (!(b == null)) && (!(len < 0)) && (0 < len) && (in.read(b, off + total, len - total) == -1) && (read != len)",
          "symbolicPathConjunction": "(read(in, b, off, len)) && (read != len)",
          "backwardsPathConjunction": "(!(in == null)) && (!(b == null)) && (!(len < 0)) && (0 < len) && (in.read(b, off + 0, len - 0) == -1) && (total != len)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\ntotal0 = Int('total0')\nread0 = Int('read0')\nin0_isNull = Bool('in0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  total0 == 0,\n  read0 == total0,\n  And(And(And(And(And(Not(in0_isNull), Not(b0_isNull)), Not(len0 < 0)), 0 < len0), in0.read(b0, off0 + total0, len0 - total0) == -1), read0 != len0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nb = Symbol('b')\noff = Symbol('off', integer=True)\nlen = Symbol('len', integer=True)\nin_read = Symbol('in_read')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(in, null)))) & (~((Eq(b, null))))) & (~((StrictLessThan(len, 0))))) & (StrictLessThan(0, len))) & (Eq(in_read, -1))) & (Ne(total, len)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 697,
          "throwingLine": 700,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[], int, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(in == null)) && (b == null)",
          "symbolicPathConjunction": "(read(in, b, off, len))",
          "backwardsPathConjunction": "(!(in == null)) && (b == null)",
          "z3Inputs": "[in0_isNull = False, b0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nin0_isNull = Bool('in0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(in0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nb = Symbol('b')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(in, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 697,
          "throwingLine": 698,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[], int, int)",
          "exception": "throw new IndexOutOfBoundsException(\"len is negative\");",
          "pathCojunction": "(!(in == null)) && (!(b == null)) && (len < 0)",
          "symbolicPathConjunction": "(read(in, b, off, len))",
          "backwardsPathConjunction": "(!(in == null)) && (!(b == null)) && (len < 0)",
          "z3Inputs": "[len0 = -1, b0_isNull = False, in0_isNull = False]\n[in0_isNull = False, b0_isNull = False, len0 = -2]\n[in0_isNull = False, b0_isNull = False, len0 = -3]\n[in0_isNull = False, b0_isNull = False, len0 = -4]\n[in0_isNull = False, b0_isNull = False, len0 = -5]\n[in0_isNull = False, b0_isNull = False, len0 = -6]\n[in0_isNull = False, b0_isNull = False, len0 = -7]\n[in0_isNull = False, b0_isNull = False, len0 = -8]\n[in0_isNull = False, b0_isNull = False, len0 = -9]\n[in0_isNull = False, b0_isNull = False, len0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nin0_isNull = Bool('in0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(And(Not(in0_isNull), Not(b0_isNull)), len0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nb = Symbol('b')\nlen = Symbol('len', integer=True)\nnull = Symbol('null')\npath_conjunction = (((~((Eq(in, null)))) & (~((Eq(b, null))))) & (StrictLessThan(len, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 697,
          "throwingLine": 698,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.skipFully(java.io.InputStream, long)",
          "exception": "throw new EOFException(\"reached end of stream after skipping \" + skipped + \" bytes; \" + n + \" bytes expected\");",
          "pathCojunction": "(totalSkipped + skipped < n) && (!(in.available() == 0)) && (!(in.skip(Math.min(in.available(), remaining)) == 0)) && (!(totalSkipped + skipped < n)) && (skipped < n)",
          "symbolicPathConjunction": "((totalSkipped + skipped + in.skip(Math.min(in.available(), remaining)) < n) && (!(in.available() == 0)) && (!(in.skip(Math.min(in.available(), n - totalSkipped)) == 0)) && (!(totalSkipped + skipped + in.skip(Math.min(in.available(), remaining)) < n))) && (skipped < n)",
          "backwardsPathConjunction": "(totalSkipped + skipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + skipped + totalSkipped < n) && (!(in.available() == 0)) && (!(in.skip(Math.min(in.available(), n - totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped)) == 0)) && (!(totalSkipped + skipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + skipped + totalSkipped < n)) && (totalSkipped < n)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\ntotalSkipped0 = Int('totalSkipped0')\nremaining0 = Int('remaining0')\nskipped0 = Int('skipped0')\nskipped1 = Int('skipped1')\n\nconstraints = [\n  totalSkipped0 == totalSkipped + skipped,\n  remaining0 == n0 - totalSkipped0,\n  skipped0 == in0.skip(Math.min(in0.available(), remaining0)),\n  skipped1 == totalSkipped0,\n  n0 >= -9223372036854775808, n0 <= 9223372036854775807, # implicit\n  totalSkipped0 >= -9223372036854775808, totalSkipped0 <= 9223372036854775807, # implicit\n  remaining0 >= -9223372036854775808, remaining0 <= 9223372036854775807, # implicit\n  skipped0 >= -9223372036854775808, skipped0 <= 9223372036854775807, # implicit\n  skipped1 >= -9223372036854775808, skipped1 <= 9223372036854775807, # implicit\n  And(And(And(And(totalSkipped0 + skipped1 < n0, Not(in0.available() == 0)), Not(in0.skip(Math.min(in0.available(), remaining0)) == 0)), Not(totalSkipped0 + skipped1 < n0)), skipped1 < n0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nn = Symbol('n')\nin_available = Symbol('in_available')\nin_skip = Symbol('in_skip')\nMath_min = Symbol('Math_min')\npath_conjunction = (((((StrictLessThan((((((((((((((((((((((((((((((((((((((((((((((((((((((totalSkipped + skipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + skipped) + totalSkipped), n)) & (~((Eq(in_available, 0))))) & (~((Eq(in_skip, 0))))) & (~((StrictLessThan((((((((((((((((((((((((((((((((((((((((((((((((((((((totalSkipped + skipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + skipped) + totalSkipped), n))))) & (StrictLessThan(totalSkipped, n)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 717,
          "throwingLine": 720,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.skipFully(java.io.InputStream, long)",
          "exception": "throw new EOFException(\"reached end of stream after skipping \" + skipped + \" bytes; \" + n + \" bytes expected\");",
          "pathCojunction": "(totalSkipped + skipped < n) && (in.available() == 0) && (!(0 == 0)) && (!(totalSkipped + skipped < n)) && (skipped < n)",
          "symbolicPathConjunction": "((totalSkipped + skipped + 0 < n) && (in.available() == 0) && (!(0 == 0)) && (!(totalSkipped + skipped + 0 < n))) && (skipped < n)",
          "backwardsPathConjunction": "(totalSkipped + skipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + skipped + totalSkipped < n) && (in.available() == 0) && (!(0 == 0)) && (!(totalSkipped + skipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + totalSkipped + skipped + totalSkipped < n)) && (totalSkipped < n)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\ntotalSkipped0 = Int('totalSkipped0')\nskipped0 = Int('skipped0')\nskipped1 = Int('skipped1')\n\nconstraints = [\n  totalSkipped0 == totalSkipped + skipped,\n  skipped0 == 0,\n  skipped1 == totalSkipped0,\n  n0 >= -9223372036854775808, n0 <= 9223372036854775807, # implicit\n  totalSkipped0 >= -9223372036854775808, totalSkipped0 <= 9223372036854775807, # implicit\n  skipped0 >= -9223372036854775808, skipped0 <= 9223372036854775807, # implicit\n  skipped1 >= -9223372036854775808, skipped1 <= 9223372036854775807, # implicit\n  And(And(And(And(totalSkipped0 + skipped1 < n0, in0.available() == 0), Not(0 == 0)), Not(totalSkipped0 + skipped1 < n0)), skipped1 < n0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nn = Symbol('n')\nin_available = Symbol('in_available')\npath_conjunction = (((((StrictLessThan((((((((((((((((((((((((((((((((((((((((((((((((((((((totalSkipped + skipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + skipped) + totalSkipped), n)) & (Eq(in_available, 0))) & (~((Eq(0, 0))))) & (~((StrictLessThan((((((((((((((((((((((((((((((((((((((((((((((((((((((totalSkipped + skipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + totalSkipped) + skipped) + totalSkipped), n))))) & (StrictLessThan(totalSkipped, n)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 717,
          "throwingLine": 720,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readBytes(java.io.InputStream, com.google.common.io.ByteProcessor<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(input == null)",
          "symbolicPathConjunction": "(checkNotNull(input))",
          "backwardsPathConjunction": "(input == null)",
          "simplifiedPathConjunction": "input == null",
          "z3Inputs": "[input0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0_isNull = Bool('input0_isNull')\n\nconstraints = [\n  input0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninput = Symbol('input')\nnull = Symbol('null')\npath_conjunction = (Eq(input, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 777,
          "throwingLine": 778,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.readBytes(java.io.InputStream, com.google.common.io.ByteProcessor<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(input == null)) && (processor == null)",
          "symbolicPathConjunction": "(checkNotNull(input)) && (checkNotNull(processor))",
          "backwardsPathConjunction": "(!(input == null)) && (processor == null)",
          "simplifiedPathConjunction": "null == processor && input != null",
          "z3Inputs": "[input0_isNull = False, processor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0_isNull = Bool('input0_isNull')\nprocessor0_isNull = Bool('processor0_isNull')\n\nconstraints = [\n  And(Not(input0_isNull), processor0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ninput = Symbol('input')\nprocessor = Symbol('processor')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(input, null)))) & (Eq(processor, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 777,
          "throwingLine": 779,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.read(java.io.InputStream, byte[], int, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(in == null)) && (b == null)",
          "symbolicPathConjunction": "(checkNotNull(in)) && (checkNotNull(b))",
          "backwardsPathConjunction": "(!(in == null)) && (b == null)",
          "z3Inputs": "[in0_isNull = False, b0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nin0_isNull = Bool('in0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(Not(in0_isNull), b0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nb = Symbol('b')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(in, null)))) & (Eq(b, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 814,
          "throwingLine": 816,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.read(java.io.InputStream, byte[], int, int)",
          "exception": "throw new IndexOutOfBoundsException(\"len is negative\");",
          "pathCojunction": "(!(in == null)) && (!(b == null)) && (len < 0)",
          "symbolicPathConjunction": "(checkNotNull(in)) && (checkNotNull(b)) && (len < 0)",
          "backwardsPathConjunction": "(!(in == null)) && (!(b == null)) && (len < 0)",
          "z3Inputs": "[len0 = -1, b0_isNull = False, in0_isNull = False]\n[in0_isNull = False, b0_isNull = False, len0 = -2]\n[in0_isNull = False, b0_isNull = False, len0 = -3]\n[in0_isNull = False, b0_isNull = False, len0 = -4]\n[in0_isNull = False, b0_isNull = False, len0 = -5]\n[in0_isNull = False, b0_isNull = False, len0 = -6]\n[in0_isNull = False, b0_isNull = False, len0 = -7]\n[in0_isNull = False, b0_isNull = False, len0 = -8]\n[in0_isNull = False, b0_isNull = False, len0 = -9]\n[in0_isNull = False, b0_isNull = False, len0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nin0_isNull = Bool('in0_isNull')\nb0_isNull = Bool('b0_isNull')\n\nconstraints = [\n  And(And(Not(in0_isNull), Not(b0_isNull)), len0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nb = Symbol('b')\nlen = Symbol('len', integer=True)\nnull = Symbol('null')\npath_conjunction = (((~((Eq(in, null)))) & (~((Eq(b, null))))) & (StrictLessThan(len, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 814,
          "throwingLine": 818,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.ByteStreams.read(java.io.InputStream, byte[], int, int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(in == null)",
          "symbolicPathConjunction": "(checkNotNull(in))",
          "backwardsPathConjunction": "(in == null)",
          "z3Inputs": "[in0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nin0_isNull = Bool('in0_isNull')\n\nconstraints = [\n  in0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nin = Symbol('in')\nnull = Symbol('null')\npath_conjunction = (Eq(in, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 814,
          "throwingLine": 815,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/CharStreams.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.copy(java.lang.Readable, java.lang.Appendable)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(from == null)",
          "symbolicPathConjunction": "(checkNotNull(from))",
          "backwardsPathConjunction": "(from == null)",
          "z3Inputs": "[from0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0_isNull = Bool('from0_isNull')\n\nconstraints = [\n  from0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfrom = Symbol('from')\nnull = Symbol('null')\npath_conjunction = (Eq(from, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 63,
          "throwingLine": 64,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.copy(java.lang.Readable, java.lang.Appendable)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(from == null)) && (to == null)",
          "symbolicPathConjunction": "(checkNotNull(from)) && (checkNotNull(to))",
          "backwardsPathConjunction": "(!(from == null)) && (to == null)",
          "z3Inputs": "[to0_isNull = True, from0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0_isNull = Bool('from0_isNull')\nto0_isNull = Bool('to0_isNull')\n\nconstraints = [\n  And(Not(from0_isNull), to0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfrom = Symbol('from')\nto = Symbol('to')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(from, null)))) & (Eq(to, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 63,
          "throwingLine": 65,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.readLines(java.lang.Readable, com.google.common.io.LineProcessor<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(readable == null)",
          "symbolicPathConjunction": "(checkNotNull(readable))",
          "backwardsPathConjunction": "(readable == null)",
          "simplifiedPathConjunction": "null == readable",
          "z3Inputs": "[readable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreadable0_isNull = Bool('readable0_isNull')\n\nconstraints = [\n  readable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreadable = Symbol('readable')\nnull = Symbol('null')\npath_conjunction = (Eq(readable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 137,
          "throwingLine": 138,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.readLines(java.lang.Readable, com.google.common.io.LineProcessor<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(readable == null)) && (processor == null)",
          "symbolicPathConjunction": "(checkNotNull(readable)) && (checkNotNull(processor))",
          "backwardsPathConjunction": "(!(readable == null)) && (processor == null)",
          "simplifiedPathConjunction": "null == processor && null != readable",
          "z3Inputs": "[processor0_isNull = True, readable0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreadable0_isNull = Bool('readable0_isNull')\nprocessor0_isNull = Bool('processor0_isNull')\n\nconstraints = [\n  And(Not(readable0_isNull), processor0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreadable = Symbol('readable')\nprocessor = Symbol('processor')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(readable, null)))) & (Eq(processor, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 137,
          "throwingLine": 139,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.skipFully(java.io.Reader, long)",
          "exception": "throw new EOFException();",
          "pathCojunction": "(!(reader == null)) && (n > 0) && (amt == 0)",
          "symbolicPathConjunction": "(!(checkNotNull(reader))) && (n > 0) && (amt == 0)",
          "backwardsPathConjunction": "(!(reader == null)) && (n > 0) && (reader.skip(n) == 0)",
          "simplifiedPathConjunction": "reader.skip(n) == 0 && n > 0 && null != reader",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\namt0 = Int('amt0')\nreader0_isNull = Bool('reader0_isNull')\n\nconstraints = [\n  amt0 == reader0.skip(n0),\n  n0 >= -9223372036854775808, n0 <= 9223372036854775807, # implicit\n  amt0 >= -9223372036854775808, amt0 <= 9223372036854775807, # implicit\n  And(And(Not(reader0_isNull), n0 > 0), amt0 == 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreader = Symbol('reader')\nn = Symbol('n')\nreader_skip = Symbol('reader_skip')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(reader, null)))) & (StrictGreaterThan(n, 0))) & (Eq(reader_skip, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 162,
          "throwingLine": 167,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.skipFully(java.io.Reader, long)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(reader == null)",
          "symbolicPathConjunction": "(!(checkNotNull(reader)))",
          "backwardsPathConjunction": "(reader == null)",
          "simplifiedPathConjunction": "null == reader",
          "z3Inputs": "[n0 = -9223372036854775808, reader0_isNull = True]\n[reader0_isNull = True, n0 = 0]\n[reader0_isNull = True, n0 = -1]\n[reader0_isNull = True, n0 = -2]\n[reader0_isNull = True, n0 = -3]\n[reader0_isNull = True, n0 = -4]\n[reader0_isNull = True, n0 = -5]\n[reader0_isNull = True, n0 = -6]\n[reader0_isNull = True, n0 = -7]\n[reader0_isNull = True, n0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\nreader0_isNull = Bool('reader0_isNull')\n\nconstraints = [\n  n0 >= -9223372036854775808, n0 <= 9223372036854775807, # implicit\n  reader0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreader = Symbol('reader')\nnull = Symbol('null')\npath_conjunction = (Eq(reader, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 162,
          "throwingLine": 163,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.NullWriter.write(char[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(cbuf == null)",
          "symbolicPathConjunction": "(checkNotNull(cbuf))",
          "backwardsPathConjunction": "(cbuf == null)",
          "simplifiedPathConjunction": "cbuf == null",
          "z3Inputs": "[cbuf0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncbuf0_isNull = Bool('cbuf0_isNull')\n\nconstraints = [\n  cbuf0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncbuf = Symbol('cbuf')\nnull = Symbol('null')\npath_conjunction = (Eq(cbuf, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 191,
          "throwingLine": 192,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.NullWriter.write(char[], int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(off, off + len, cbuf.length))",
          "pathCojunction": "(off < 0 || off + len < off || off + len > cbuf.length)",
          "symbolicPathConjunction": "(checkPositionIndexes(off, off + len, cbuf.length))",
          "backwardsPathConjunction": "(off < 0 || off + len < off || off + len > cbuf.length)",
          "simplifiedPathConjunction": "cbuf.length < len + off || len < 0 || off < 0",
          "z3Inputs": "[off0 = 2, len0 = -1, cbuf0_length = 0]\n[len0 = -2, cbuf0_length = 1]\n[off0 = -1, cbuf0_length = 0]\n[off0 = -2, len0 = 3, cbuf0_length = 0]\n[off0 = -3, len0 = 2, cbuf0_length = 0]\n[off0 = -3, len0 = 1, cbuf0_length = 0]\n[off0 = -3, len0 = 0, cbuf0_length = 0]\n[off0 = -4, len0 = 1, cbuf0_length = 0]\n[off0 = -5, len0 = 1, cbuf0_length = 0]\n[off0 = -6, len0 = 1, cbuf0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\ncbuf0_length = Int('cbuf0_length')\n\nconstraints = [\n  cbuf0_length >= 0, # implicit\n  Or(Or(off0 < 0, off0 + len0 < off0), off0 + len0 > cbuf0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncbuf = Symbol('cbuf')\noff = Symbol('off', integer=True)\nlen = Symbol('len', integer=True)\ncbuf_length = Symbol('cbuf_length', integer=True)\npath_conjunction = (((StrictLessThan(off, 0)) | (StrictLessThan((off + len), off))) | (StrictGreaterThan((off + len), cbuf_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 196,
          "throwingLine": 197,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.NullWriter.write(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(str == null)",
          "symbolicPathConjunction": "(checkNotNull(str))",
          "backwardsPathConjunction": "(str == null)",
          "simplifiedPathConjunction": "null == str",
          "z3Inputs": "[str0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstr0 = String('str0')\nstr0_isNull = Bool('str0_isNull')\n\nconstraints = [\n  str0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstr = Symbol('str')\nnull = Symbol('null')\npath_conjunction = (Eq(str, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 201,
          "throwingLine": 202,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.NullWriter.write(java.lang.String, int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(off, off + len, str.length()))",
          "pathCojunction": "(off < 0 || off + len < off || off + len > str.length())",
          "symbolicPathConjunction": "(checkPositionIndexes(off, off + len, str.length()))",
          "backwardsPathConjunction": "(off < 0 || off + len < off || off + len > str.length())",
          "simplifiedPathConjunction": "len > -off + str.length() || len < 0 || off < 0",
          "z3Inputs": "[off0 = 1, len0 = 0, str0 = \"\"]\n[off0 = 0, len0 = 2, str0 = \"A\"]\n[off0 = -1, str0 = \"\"]\n[off0 = -2, str0 = \"\"]\n[off0 = -3, str0 = \"\"]\n[off0 = -4, str0 = \"\"]\n[off0 = -5, str0 = \"\"]\n[off0 = -6, str0 = \"\"]\n[off0 = -7, str0 = \"\"]\n[off0 = -8, str0 = \"\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstr0 = String('str0')\noff0 = Int('off0')\nlen0 = Int('len0')\n\nconstraints = [\n  Or(Or(off0 < 0, off0 + len0 < off0), off0 + len0 > Length(str0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstr = Symbol('str')\noff = Symbol('off', integer=True)\nlen = Symbol('len', integer=True)\nstr_length = Symbol('str_length')\npath_conjunction = (((StrictLessThan(off, 0)) | (StrictLessThan((off + len), off))) | (StrictGreaterThan((off + len), str_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 206,
          "throwingLine": 207,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.NullWriter.append(java.lang.CharSequence)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(csq == null)",
          "symbolicPathConjunction": "(checkNotNull(csq))",
          "backwardsPathConjunction": "(csq == null)",
          "simplifiedPathConjunction": "csq == null",
          "z3Inputs": "[csq0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncsq0 = String('csq0')\ncsq0_isNull = Bool('csq0_isNull')\n\nconstraints = [\n  csq0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncsq = Symbol('csq')\nnull = Symbol('null')\npath_conjunction = (Eq(csq, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 211,
          "throwingLine": 212,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.CharStreams.NullWriter.append(java.lang.CharSequence, int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(start, end, csq.length()))",
          "pathCojunction": "(start < 0 || end < start || end > csq.length())",
          "symbolicPathConjunction": "(checkPositionIndexes(start, end, csq.length()))",
          "backwardsPathConjunction": "(start < 0 || end < start || end > csq.length())",
          "simplifiedPathConjunction": "csq.length() < end || end < start || start < 0",
          "z3Inputs": "[csq0 = \"\", end0 = 1]\n[csq0 = \"A\", end0 = 2]\n[start0 = -1, csq0 = \"\", end0 = 2]\n[start0 = -2, csq0 = \"\", end0 = 2]\n[start0 = -2, csq0 = \"\", end0 = 0]\n[start0 = -2, csq0 = \"\", end0 = -1]\n[start0 = -2, csq0 = \"\", end0 = -2]\n[start0 = -3, csq0 = \"\", end0 = -3]\n[start0 = -4, csq0 = \"\", end0 = -5]\n[start0 = -5, csq0 = \"\", end0 = -6]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncsq0 = String('csq0')\nstart0 = Int('start0')\nend0 = Int('end0')\n\nconstraints = [\n  Or(Or(start0 < 0, end0 < start0), end0 > Length(csq0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncsq = Symbol('csq')\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\ncsq_length = Symbol('csq_length')\npath_conjunction = (((StrictLessThan(start, 0)) | (StrictLessThan(end, start))) | (StrictGreaterThan(end, csq_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 217,
          "throwingLine": 218,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/eventbus/EventBusTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.eventbus.EventBusTest.Anonymous-044875a2-81ac-4417-b4b5-300d81c7a609.throwExceptionOn(java.lang.String)",
          "exception": "throw exception;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmessage0 = String('message0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 130,
          "throwingLine": 131,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.eventbus.EventBusTest.Anonymous-ab6319ff-b4e3-4746-94a4-661ffa5ec327.handleException(java.lang.Throwable, com.google.common.eventbus.SubscriberExceptionContext)",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 155,
          "throwingLine": 156,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.eventbus.EventBusTest.Anonymous-0bc8d0de-9dbb-409e-9b8a-457018d4bd7e.throwExceptionOn(java.lang.String)",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmessage0 = String('message0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 161,
          "throwingLine": 162,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractAbstractFutureTest.Anonymous-0125e8d6-12eb-4762-9a7b-a2f5f96e668f.run()",
          "exception": "throw new BadRunnableException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 291,
          "throwingLine": 292,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractAbstractFutureTest.Anonymous-96c06a39-2c2a-40d8-ac4e-626237929d50.run()",
          "exception": "throw new BadRunnableException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 307,
          "throwingLine": 308,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Queues.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Queues.drain(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError()",
          "pathCojunction": "(!(buffer == null)) && (true)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(buffer)) && (unit.toNanos(timeout))",
          "backwardsPathConjunction": "(!(buffer == null)) && (true)",
          "z3Inputs": "[timeout0 = -9223372036854775808, buffer0_isNull = False]\n[buffer0_isNull = False, timeout0 = 0]\n[buffer0_isNull = False, timeout0 = -1]\n[buffer0_isNull = False, timeout0 = -2]\n[buffer0_isNull = False, timeout0 = -3]\n[buffer0_isNull = False, timeout0 = -4]\n[buffer0_isNull = False, timeout0 = -5]\n[buffer0_isNull = False, timeout0 = -6]\n[buffer0_isNull = False, timeout0 = -7]\n[buffer0_isNull = False, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumElements0 = Int('numElements0')\ntimeout0 = Int('timeout0')\nbuffer0_isNull = Bool('buffer0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  And(Not(buffer0_isNull), True)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(buffer, null)))) & True)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 266,
          "throwingLine": 273,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Queues.drain(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(buffer == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(buffer))",
          "backwardsPathConjunction": "(buffer == null)",
          "z3Inputs": "[timeout0 = -9223372036854775808, buffer0_isNull = True]\n[buffer0_isNull = True, timeout0 = 0]\n[buffer0_isNull = True, timeout0 = -1]\n[buffer0_isNull = True, timeout0 = -2]\n[buffer0_isNull = True, timeout0 = -3]\n[buffer0_isNull = True, timeout0 = -4]\n[buffer0_isNull = True, timeout0 = -5]\n[buffer0_isNull = True, timeout0 = -6]\n[buffer0_isNull = True, timeout0 = -7]\n[buffer0_isNull = True, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnumElements0 = Int('numElements0')\ntimeout0 = Int('timeout0')\nbuffer0_isNull = Bool('buffer0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  buffer0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(buffer, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 266,
          "throwingLine": 267,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/AbstractMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMultimap.putAll(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(values == null)",
          "symbolicPathConjunction": "(checkNotNull(values))",
          "backwardsPathConjunction": "(values == null)",
          "z3Inputs": "[values0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalues0_isNull = Bool('values0_isNull')\n\nconstraints = [\n  values0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(values, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 74,
          "throwingLine": 75,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(values == null)",
          "symbolicPathConjunction": "(checkNotNull(values))",
          "backwardsPathConjunction": "(values == null)",
          "z3Inputs": "[values0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalues0_isNull = Bool('values0_isNull')\n\nconstraints = [\n  values0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(values, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 97,
          "throwingLine": 98,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/UnsignedLong.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLong.valueOf(java.math.BigInteger)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(value == null)",
          "symbolicPathConjunction": "(checkNotNull(value))",
          "backwardsPathConjunction": "(value == null)",
          "simplifiedPathConjunction": "null == value",
          "z3Inputs": "[value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  value0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (Eq(value, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 92,
          "throwingLine": 93,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.UnsignedLong.compareTo(com.google.common.primitives.UnsignedLong)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(o == null)",
          "symbolicPathConjunction": "(checkNotNull(o))",
          "backwardsPathConjunction": "(o == null)",
          "simplifiedPathConjunction": "null == o",
          "z3Inputs": "[o0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\no0_isNull = Bool('o0_isNull')\n\nconstraints = [\n  o0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\no = Symbol('o')\nnull = Symbol('null')\npath_conjunction = (Eq(o, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 237,
          "throwingLine": 238,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Sets.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Sets.ImprovedAbstractSet.removeAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(c == null)",
          "symbolicPathConjunction": "(checkNotNull(collection))",
          "backwardsPathConjunction": "(c == null)",
          "simplifiedPathConjunction": "c == null",
          "z3Inputs": "[c0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  c0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\nnull = Symbol('null')\npath_conjunction = (Eq(c, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 74,
          "throwingLine": 75,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.newHashSetWithExpectedSize(int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedSize)",
          "pathCojunction": "(expectedSize < 3) && (expectedSize < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedSize < 3) && (expectedSize < 0)",
          "simplifiedPathConjunction": "expectedSize < 0",
          "z3Inputs": "[expectedSize0 = -1]\n[expectedSize0 = -2]\n[expectedSize0 = -3]\n[expectedSize0 = -4]\n[expectedSize0 = -5]\n[expectedSize0 = -6]\n[expectedSize0 = -7]\n[expectedSize0 = -8]\n[expectedSize0 = -9]\n[expectedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedSize0 = Int('expectedSize0')\n\nconstraints = [\n  And(expectedSize0 < 3, expectedSize0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedSize = Symbol('expectedSize', integer=True)\npath_conjunction = ((StrictLessThan(expectedSize, 3)) & (StrictLessThan(expectedSize, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 198,
          "throwingLine": 199,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.newHashSet(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(set == null)) && (elements == null)",
          "symbolicPathConjunction": "(newHashSet()) && (Iterators.addAll(set, elements))",
          "backwardsPathConjunction": "(!(new HashSet<E>() == null)) && (elements == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset0_isNull = Bool('set0_isNull')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  set0 == new HashSet<E>(),\n  And(Not(set0_isNull), elements0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 238,
          "throwingLine": 240,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.newHashSet(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(set == null)",
          "symbolicPathConjunction": "(newHashSet()) && (Iterators.addAll(set, elements))",
          "backwardsPathConjunction": "(new HashSet<E>() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset0_isNull = Bool('set0_isNull')\n\nconstraints = [\n  set0 == new HashSet<E>(),\n  set0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 238,
          "throwingLine": 240,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedSize)",
          "pathCojunction": "(expectedSize < 3) && (expectedSize < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedSize < 3) && (expectedSize < 0)",
          "simplifiedPathConjunction": "expectedSize < 0",
          "z3Inputs": "[expectedSize0 = -1]\n[expectedSize0 = -2]\n[expectedSize0 = -3]\n[expectedSize0 = -4]\n[expectedSize0 = -5]\n[expectedSize0 = -6]\n[expectedSize0 = -7]\n[expectedSize0 = -8]\n[expectedSize0 = -9]\n[expectedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedSize0 = Int('expectedSize0')\n\nconstraints = [\n  And(expectedSize0 < 3, expectedSize0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedSize = Symbol('expectedSize', integer=True)\npath_conjunction = ((StrictLessThan(expectedSize, 3)) & (StrictLessThan(expectedSize, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 307,
          "throwingLine": 308,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.newTreeSet(java.util.Comparator<? super E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 378,
          "throwingLine": 379,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.complementOf(java.util.Collection<E>, java.lang.Class<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(collection == null)",
          "symbolicPathConjunction": "(checkNotNull(collection))",
          "backwardsPathConjunction": "(collection == null)",
          "simplifiedPathConjunction": "collection == null",
          "z3Inputs": "[collection0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncollection0_isNull = Bool('collection0_isNull')\n\nconstraints = [\n  collection0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncollection = Symbol('collection')\nnull = Symbol('null')\npath_conjunction = (Eq(collection, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 466,
          "throwingLine": 467,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.union(java.util.Set<? extends E>, java.util.Set<? extends E>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set2\"))",
          "pathCojunction": "(!(set1 == null)) && (set2 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\")) && (checkNotNull(set2, \"set2\"))",
          "backwardsPathConjunction": "(!(set1 == null)) && (set2 == null)",
          "z3Inputs": "[set10_isNull = False, set20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\nset20_isNull = Bool('set20_isNull')\n\nconstraints = [\n  And(Not(set10_isNull), set20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(set1, null)))) & (Eq(set2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 577,
          "throwingLine": 579,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.union(java.util.Set<? extends E>, java.util.Set<? extends E>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set1\"))",
          "pathCojunction": "(set1 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\"))",
          "backwardsPathConjunction": "(set1 == null)",
          "z3Inputs": "[set10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\n\nconstraints = [\n  set10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(set1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 577,
          "throwingLine": 578,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.intersection(java.util.Set<E>, java.util.Set<?>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set1\"))",
          "pathCojunction": "(set1 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\"))",
          "backwardsPathConjunction": "(set1 == null)",
          "simplifiedPathConjunction": "null == set1",
          "z3Inputs": "[set10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\n\nconstraints = [\n  set10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nset1 = Symbol('set1')\nnull = Symbol('null')\npath_conjunction = (Eq(set1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 645,
          "throwingLine": 646,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.intersection(java.util.Set<E>, java.util.Set<?>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set2\"))",
          "pathCojunction": "(!(set1 == null)) && (set2 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\")) && (checkNotNull(set2, \"set2\"))",
          "backwardsPathConjunction": "(!(set1 == null)) && (set2 == null)",
          "simplifiedPathConjunction": "null == set2 && null != set1",
          "z3Inputs": "[set10_isNull = False, set20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\nset20_isNull = Bool('set20_isNull')\n\nconstraints = [\n  And(Not(set10_isNull), set20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nset1 = Symbol('set1')\nset2 = Symbol('set2')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(set1, null)))) & (Eq(set2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 645,
          "throwingLine": 647,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.difference(java.util.Set<E>, java.util.Set<?>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set2\"))",
          "pathCojunction": "(!(set1 == null)) && (set2 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\")) && (checkNotNull(set2, \"set2\"))",
          "backwardsPathConjunction": "(!(set1 == null)) && (set2 == null)",
          "simplifiedPathConjunction": "null == set2 && null != set1",
          "z3Inputs": "[set10_isNull = False, set20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\nset20_isNull = Bool('set20_isNull')\n\nconstraints = [\n  And(Not(set10_isNull), set20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nset1 = Symbol('set1')\nset2 = Symbol('set2')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(set1, null)))) & (Eq(set2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 689,
          "throwingLine": 691,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.difference(java.util.Set<E>, java.util.Set<?>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set1\"))",
          "pathCojunction": "(set1 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\"))",
          "backwardsPathConjunction": "(set1 == null)",
          "simplifiedPathConjunction": "null == set1",
          "z3Inputs": "[set10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\n\nconstraints = [\n  set10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nset1 = Symbol('set1')\nnull = Symbol('null')\npath_conjunction = (Eq(set1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 689,
          "throwingLine": 690,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set2\"))",
          "pathCojunction": "(!(set1 == null)) && (set2 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\")) && (checkNotNull(set2, \"set2\"))",
          "backwardsPathConjunction": "(!(set1 == null)) && (set2 == null)",
          "z3Inputs": "[set10_isNull = False, set20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\nset20_isNull = Bool('set20_isNull')\n\nconstraints = [\n  And(Not(set10_isNull), set20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(set1, null)))) & (Eq(set2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 730,
          "throwingLine": 732,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set1\"))",
          "pathCojunction": "(set1 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\"))",
          "backwardsPathConjunction": "(set1 == null)",
          "z3Inputs": "[set10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\n\nconstraints = [\n  set10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(set1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 730,
          "throwingLine": 731,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.FilteredNavigableSet.pollFirst()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(checkNotNull(predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 1006,
          "throwingLine": 1007,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.FilteredNavigableSet.pollLast()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(checkNotNull(predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 1011,
          "throwingLine": 1012,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.SubSet.Anonymous-01d0224f-8952-4883-800c-c7e7799e984c.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(index == 32)",
          "symbolicPathConjunction": "(index == 32)",
          "backwardsPathConjunction": "(Integer.numberOfTrailingZeros(remainingSetBits) == 32)",
          "simplifiedPathConjunction": "Integer.numberOfTrailingZeros(remainingSetBits) == 32",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nremainingSetBits0 = Int('remainingSetBits0')\nindex0 = Int('index0')\n\nconstraints = [\n  index0 == Integer.numberOfTrailingZeros(remainingSetBits0),\n  index0 == 32\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nremainingSetBits = Symbol('remainingSetBits', integer=True)\nInteger_numberOfTrailingZeros = Symbol('Integer_numberOfTrailingZeros')\npath_conjunction = (Eq(Integer_numberOfTrailingZeros, 32))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 1301,
          "throwingLine": 1304,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.UnmodifiableNavigableSet.pollFirst()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1481,
          "throwingLine": 1482,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.UnmodifiableNavigableSet.pollLast()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1486,
          "throwingLine": 1487,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableTable.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableTable.column(C)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(columnKey == null)",
          "symbolicPathConjunction": "(checkNotNull(columnKey))",
          "backwardsPathConjunction": "(columnKey == null)",
          "simplifiedPathConjunction": "columnKey == null",
          "z3Inputs": "[columnKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  columnKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncolumnKey = Symbol('columnKey')\nnull = Symbol('null')\npath_conjunction = (Eq(columnKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 272,
          "throwingLine": 273,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableTable.row(R)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(rowKey == null)",
          "symbolicPathConjunction": "(checkNotNull(rowKey))",
          "backwardsPathConjunction": "(rowKey == null)",
          "simplifiedPathConjunction": "null == rowKey",
          "z3Inputs": "[rowKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowKey0_isNull = Bool('rowKey0_isNull')\n\nconstraints = [\n  rowKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\nnull = Symbol('null')\npath_conjunction = (Eq(rowKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 299,
          "throwingLine": 300,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableTable.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 338,
          "throwingLine": 339,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableTable.put(R, C, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 350,
          "throwingLine": 351,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 362,
          "throwingLine": 363,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableTable.remove(java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 374,
          "throwingLine": 375,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeTraverser.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.TreeTraverser.preOrderTraversal(T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(root == null)",
          "symbolicPathConjunction": "(checkNotNull(root))",
          "backwardsPathConjunction": "(root == null)",
          "simplifiedPathConjunction": "null == root",
          "z3Inputs": "[root0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nroot = Symbol('root')\nnull = Symbol('null')\npath_conjunction = (Eq(root, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 61,
          "throwingLine": 62,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeTraverser.postOrderTraversal(T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(root == null)",
          "symbolicPathConjunction": "(checkNotNull(root))",
          "backwardsPathConjunction": "(root == null)",
          "simplifiedPathConjunction": "null == root",
          "z3Inputs": "[root0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nroot = Symbol('root')\nnull = Symbol('null')\npath_conjunction = (Eq(root, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 111,
          "throwingLine": 112,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeTraverser.breadthFirstTraversal(T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(root == null)",
          "symbolicPathConjunction": "(checkNotNull(root))",
          "backwardsPathConjunction": "(root == null)",
          "simplifiedPathConjunction": "null == root",
          "z3Inputs": "[root0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nroot = Symbol('root')\nnull = Symbol('null')\npath_conjunction = (Eq(root, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 171,
          "throwingLine": 172,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoader.loadAll(java.lang.Iterable<? extends K>)",
          "exception": "throw new UnsupportedLoadingOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 87,
          "throwingLine": 90,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoader.SupplierToCacheLoader.load(java.lang.Object)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(checkNotNull(key))",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 143,
          "throwingLine": 144,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Sets.ImprovedAbstractSet.removeAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(c == null)",
          "symbolicPathConjunction": "(checkNotNull(collection))",
          "backwardsPathConjunction": "(c == null)",
          "simplifiedPathConjunction": "c == null",
          "z3Inputs": "[c0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  c0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\nnull = Symbol('null')\npath_conjunction = (Eq(c, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 70,
          "throwingLine": 71,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.newHashSetWithExpectedSize(int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedSize)",
          "pathCojunction": "(expectedSize < 3) && (expectedSize < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedSize < 3) && (expectedSize < 0)",
          "simplifiedPathConjunction": "expectedSize < 0",
          "z3Inputs": "[expectedSize0 = -1]\n[expectedSize0 = -2]\n[expectedSize0 = -3]\n[expectedSize0 = -4]\n[expectedSize0 = -5]\n[expectedSize0 = -6]\n[expectedSize0 = -7]\n[expectedSize0 = -8]\n[expectedSize0 = -9]\n[expectedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedSize0 = Int('expectedSize0')\n\nconstraints = [\n  And(expectedSize0 < 3, expectedSize0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedSize = Symbol('expectedSize', integer=True)\npath_conjunction = ((StrictLessThan(expectedSize, 3)) & (StrictLessThan(expectedSize, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 194,
          "throwingLine": 195,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.newHashSet(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(set == null)) && (elements == null)",
          "symbolicPathConjunction": "(newHashSet()) && (Iterators.addAll(set, elements))",
          "backwardsPathConjunction": "(!(new HashSet<E>() == null)) && (elements == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset0_isNull = Bool('set0_isNull')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  set0 == new HashSet<E>(),\n  And(Not(set0_isNull), elements0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 234,
          "throwingLine": 236,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.newHashSet(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(set == null)",
          "symbolicPathConjunction": "(newHashSet()) && (Iterators.addAll(set, elements))",
          "backwardsPathConjunction": "(new HashSet<E>() == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset0_isNull = Bool('set0_isNull')\n\nconstraints = [\n  set0 == new HashSet<E>(),\n  set0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 234,
          "throwingLine": 236,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedSize)",
          "pathCojunction": "(expectedSize < 3) && (expectedSize < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedSize < 3) && (expectedSize < 0)",
          "simplifiedPathConjunction": "expectedSize < 0",
          "z3Inputs": "[expectedSize0 = -1]\n[expectedSize0 = -2]\n[expectedSize0 = -3]\n[expectedSize0 = -4]\n[expectedSize0 = -5]\n[expectedSize0 = -6]\n[expectedSize0 = -7]\n[expectedSize0 = -8]\n[expectedSize0 = -9]\n[expectedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedSize0 = Int('expectedSize0')\n\nconstraints = [\n  And(expectedSize0 < 3, expectedSize0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedSize = Symbol('expectedSize', integer=True)\npath_conjunction = ((StrictLessThan(expectedSize, 3)) & (StrictLessThan(expectedSize, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 303,
          "throwingLine": 304,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.newTreeSet(java.util.Comparator<? super E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 374,
          "throwingLine": 375,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.complementOf(java.util.Collection<E>, java.lang.Class<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(collection == null)",
          "symbolicPathConjunction": "(checkNotNull(collection))",
          "backwardsPathConjunction": "(collection == null)",
          "simplifiedPathConjunction": "collection == null",
          "z3Inputs": "[collection0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncollection0_isNull = Bool('collection0_isNull')\n\nconstraints = [\n  collection0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncollection = Symbol('collection')\nnull = Symbol('null')\npath_conjunction = (Eq(collection, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 430,
          "throwingLine": 431,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.union(java.util.Set<? extends E>, java.util.Set<? extends E>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set1\"))",
          "pathCojunction": "(set1 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\"))",
          "backwardsPathConjunction": "(set1 == null)",
          "z3Inputs": "[set10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\n\nconstraints = [\n  set10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(set1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 541,
          "throwingLine": 542,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.union(java.util.Set<? extends E>, java.util.Set<? extends E>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set2\"))",
          "pathCojunction": "(!(set1 == null)) && (set2 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\")) && (checkNotNull(set2, \"set2\"))",
          "backwardsPathConjunction": "(!(set1 == null)) && (set2 == null)",
          "z3Inputs": "[set10_isNull = False, set20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\nset20_isNull = Bool('set20_isNull')\n\nconstraints = [\n  And(Not(set10_isNull), set20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(set1, null)))) & (Eq(set2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 541,
          "throwingLine": 543,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.intersection(java.util.Set<E>, java.util.Set<?>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set1\"))",
          "pathCojunction": "(set1 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\"))",
          "backwardsPathConjunction": "(set1 == null)",
          "simplifiedPathConjunction": "null == set1",
          "z3Inputs": "[set10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\n\nconstraints = [\n  set10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nset1 = Symbol('set1')\nnull = Symbol('null')\npath_conjunction = (Eq(set1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 609,
          "throwingLine": 610,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.intersection(java.util.Set<E>, java.util.Set<?>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set2\"))",
          "pathCojunction": "(!(set1 == null)) && (set2 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\")) && (checkNotNull(set2, \"set2\"))",
          "backwardsPathConjunction": "(!(set1 == null)) && (set2 == null)",
          "simplifiedPathConjunction": "null == set2 && null != set1",
          "z3Inputs": "[set10_isNull = False, set20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\nset20_isNull = Bool('set20_isNull')\n\nconstraints = [\n  And(Not(set10_isNull), set20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nset1 = Symbol('set1')\nset2 = Symbol('set2')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(set1, null)))) & (Eq(set2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 609,
          "throwingLine": 611,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.difference(java.util.Set<E>, java.util.Set<?>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set2\"))",
          "pathCojunction": "(!(set1 == null)) && (set2 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\")) && (checkNotNull(set2, \"set2\"))",
          "backwardsPathConjunction": "(!(set1 == null)) && (set2 == null)",
          "simplifiedPathConjunction": "null == set2 && null != set1",
          "z3Inputs": "[set10_isNull = False, set20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\nset20_isNull = Bool('set20_isNull')\n\nconstraints = [\n  And(Not(set10_isNull), set20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nset1 = Symbol('set1')\nset2 = Symbol('set2')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(set1, null)))) & (Eq(set2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 653,
          "throwingLine": 655,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.difference(java.util.Set<E>, java.util.Set<?>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set1\"))",
          "pathCojunction": "(set1 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\"))",
          "backwardsPathConjunction": "(set1 == null)",
          "simplifiedPathConjunction": "null == set1",
          "z3Inputs": "[set10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\n\nconstraints = [\n  set10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nset1 = Symbol('set1')\nnull = Symbol('null')\npath_conjunction = (Eq(set1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 653,
          "throwingLine": 654,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set2\"))",
          "pathCojunction": "(!(set1 == null)) && (set2 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\")) && (checkNotNull(set2, \"set2\"))",
          "backwardsPathConjunction": "(!(set1 == null)) && (set2 == null)",
          "z3Inputs": "[set10_isNull = False, set20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\nset20_isNull = Bool('set20_isNull')\n\nconstraints = [\n  And(Not(set10_isNull), set20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(set1, null)))) & (Eq(set2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 694,
          "throwingLine": 696,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)",
          "exception": "throw new NullPointerException(String.valueOf(\"set1\"))",
          "pathCojunction": "(set1 == null)",
          "symbolicPathConjunction": "(checkNotNull(set1, \"set1\"))",
          "backwardsPathConjunction": "(set1 == null)",
          "z3Inputs": "[set10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nset10_isNull = Bool('set10_isNull')\n\nconstraints = [\n  set10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(set1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 694,
          "throwingLine": 695,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Sets.SubSet.Anonymous-0a7a7a64-bea2-4839-9aa6-349ed0b5a089.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(index == 32)",
          "symbolicPathConjunction": "(index == 32)",
          "backwardsPathConjunction": "(Integer.numberOfTrailingZeros(remainingSetBits) == 32)",
          "simplifiedPathConjunction": "Integer.numberOfTrailingZeros(remainingSetBits) == 32",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nremainingSetBits0 = Int('remainingSetBits0')\nindex0 = Int('index0')\n\nconstraints = [\n  index0 == Integer.numberOfTrailingZeros(remainingSetBits0),\n  index0 == 32\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nremainingSetBits = Symbol('remainingSetBits', integer=True)\nInteger_numberOfTrailingZeros = Symbol('Integer_numberOfTrailingZeros')\npath_conjunction = (Eq(Integer_numberOfTrailingZeros, 32))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 1144,
          "throwingLine": 1147,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/AbstractFuture.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFuture.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError()",
          "pathCojunction": "(true)",
          "symbolicPathConjunction": "(unit.toNanos(timeout))",
          "backwardsPathConjunction": "(true)",
          "simplifiedPathConjunction": "true",
          "z3Inputs": "[timeout0 = -9223372036854775808]\n[timeout0 = 0]\n[timeout0 = -1]\n[timeout0 = -2]\n[timeout0 = -3]\n[timeout0 = -4]\n[timeout0 = -5]\n[timeout0 = -6]\n[timeout0 = -7]\n[timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = True\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 348,
          "throwingLine": 351,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Runnable was null.\"))",
          "pathCojunction": "(listener == null)",
          "symbolicPathConjunction": "(checkNotNull(listener, \"Runnable was null.\"))",
          "backwardsPathConjunction": "(listener == null)",
          "simplifiedPathConjunction": "listener == null",
          "z3Inputs": "[listener0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlistener0_isNull = Bool('listener0_isNull')\n\nconstraints = [\n  listener0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlistener = Symbol('listener')\nnull = Symbol('null')\npath_conjunction = (Eq(listener, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 579,
          "throwingLine": 580,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/escape/Escapers.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.escape.Escapers.Anonymous-8b8c6ffa-da41-43d2-af2b-639f36bc3dbd.escape(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 52,
          "throwingLine": 53,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.escape.Escapers.Builder.addEscape(char, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(replacement == null)",
          "symbolicPathConjunction": "(checkNotNull(replacement))",
          "backwardsPathConjunction": "(replacement == null)",
          "simplifiedPathConjunction": "null == replacement",
          "z3Inputs": "[replacement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreplacement0 = String('replacement0')\nreplacement0_isNull = Bool('replacement0_isNull')\n\nconstraints = [\n  replacement0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreplacement = Symbol('replacement')\nnull = Symbol('null')\npath_conjunction = (Eq(replacement, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 145,
          "throwingLine": 146,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/StandardRowSortedTable.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.StandardRowSortedTable.RowSortedMap.headMap(R)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(toKey == null)",
          "symbolicPathConjunction": "(checkNotNull(toKey))",
          "backwardsPathConjunction": "(toKey == null)",
          "simplifiedPathConjunction": "null == toKey",
          "z3Inputs": "[toKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntoKey0_isNull = Bool('toKey0_isNull')\n\nconstraints = [\n  toKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntoKey = Symbol('toKey')\nnull = Symbol('null')\npath_conjunction = (Eq(toKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 122,
          "throwingLine": 123,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardRowSortedTable.RowSortedMap.subMap(R, R)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromKey == null)) && (toKey == null)",
          "symbolicPathConjunction": "(checkNotNull(fromKey)) && (checkNotNull(toKey))",
          "backwardsPathConjunction": "(!(fromKey == null)) && (toKey == null)",
          "simplifiedPathConjunction": "null == toKey && fromKey != null",
          "z3Inputs": "[fromKey0_isNull = False, toKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromKey0_isNull = Bool('fromKey0_isNull')\ntoKey0_isNull = Bool('toKey0_isNull')\n\nconstraints = [\n  And(Not(fromKey0_isNull), toKey0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\ntoKey = Symbol('toKey')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(fromKey, null)))) & (Eq(toKey, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 129,
          "throwingLine": 131,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardRowSortedTable.RowSortedMap.subMap(R, R)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromKey == null)",
          "symbolicPathConjunction": "(checkNotNull(fromKey))",
          "backwardsPathConjunction": "(fromKey == null)",
          "simplifiedPathConjunction": "fromKey == null",
          "z3Inputs": "[fromKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromKey0_isNull = Bool('fromKey0_isNull')\n\nconstraints = [\n  fromKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\nnull = Symbol('null')\npath_conjunction = (Eq(fromKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 129,
          "throwingLine": 130,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.StandardRowSortedTable.RowSortedMap.tailMap(R)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromKey == null)",
          "symbolicPathConjunction": "(checkNotNull(fromKey))",
          "backwardsPathConjunction": "(fromKey == null)",
          "simplifiedPathConjunction": "fromKey == null",
          "z3Inputs": "[fromKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromKey0_isNull = Bool('fromKey0_isNull')\n\nconstraints = [\n  fromKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\nnull = Symbol('null')\npath_conjunction = (Eq(fromKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 137,
          "throwingLine": 138,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Floats.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.indexOf(float[], float[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 163,
          "throwingLine": 164,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.indexOf(float[], float[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 163,
          "throwingLine": 165,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.min(float...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 215,
          "throwingLine": 216,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.max(float...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 233,
          "throwingLine": 234,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.join(java.lang.String, float...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 347,
          "throwingLine": 348,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.FloatArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 480,
          "throwingLine": 481,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.FloatArrayAsList.set(int, java.lang.Float)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nelement0 = Real('element0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 516,
          "throwingLine": 517,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Floats.FloatArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 525,
          "throwingLine": 527,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/collect/testing/Helpers.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.Helpers.Anonymous-77e8c9e1-967f-42fa-8520-2138e25b4dc5.remove()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 226,
          "throwingLine": 227,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.Helpers.Anonymous-98a9510a-6098-40e8-8352-30749fa5c976.setValue(V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 365,
          "throwingLine": 366,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Functions.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Functions.ToStringFunction.apply(java.lang.Object)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(o == null)",
          "symbolicPathConjunction": "(checkNotNull(o))",
          "backwardsPathConjunction": "(o == null)",
          "simplifiedPathConjunction": "null == o",
          "z3Inputs": "[o0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\no0_isNull = Bool('o0_isNull')\n\nconstraints = [\n  o0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\no = Symbol('o')\nnull = Symbol('null')\npath_conjunction = (Eq(o, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 66,
          "throwingLine": 67,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.Builder.put(K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + key + \"=null\");",
          "pathCojunction": "(!(key == null)) && (value == null)",
          "symbolicPathConjunction": "((!(key == null)) && (value == null))",
          "backwardsPathConjunction": "(!(key == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && key != null",
          "z3Inputs": "[key0_isNull = False, value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(key0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(key, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 166,
          "throwingLine": 167,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.Builder.put(K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + value);",
          "pathCojunction": "(key == null)",
          "symbolicPathConjunction": "(key == null)",
          "backwardsPathConjunction": "(key == null)",
          "simplifiedPathConjunction": "key == null",
          "z3Inputs": "[key0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0_isNull = Bool('key0_isNull')\n\nconstraints = [\n  key0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nnull = Symbol('null')\npath_conjunction = (Eq(key, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 166,
          "throwingLine": 167,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.removeAll(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 355,
          "throwingLine": 356,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.replaceValues(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 367,
          "throwingLine": 368,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 379,
          "throwingLine": 380,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.put(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 409,
          "throwingLine": 410,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.putAll(K, java.lang.Iterable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 421,
          "throwingLine": 422,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 433,
          "throwingLine": 434,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMultimap.remove(java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 445,
          "throwingLine": 446,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/UnmodifiableIterator.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.UnmodifiableIterator.remove()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 46,
          "throwingLine": 47,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/BaseEncoding.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.BaseEncoding.StandardBaseEncoding.encodingStream(java.io.Writer)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(out == null)",
          "symbolicPathConjunction": "(checkNotNull(out))",
          "backwardsPathConjunction": "(out == null)",
          "simplifiedPathConjunction": "null == out",
          "z3Inputs": "[out0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nout0_isNull = Bool('out0_isNull')\n\nconstraints = [\n  out0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nout = Symbol('out')\nnull = Symbol('null')\npath_conjunction = (Eq(out, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 565,
          "throwingLine": 566,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(java.io.Reader)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(reader == null)",
          "symbolicPathConjunction": "(checkNotNull(reader))",
          "backwardsPathConjunction": "(reader == null)",
          "simplifiedPathConjunction": "null == reader",
          "z3Inputs": "[reader0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nreader0_isNull = Bool('reader0_isNull')\n\nconstraints = [\n  reader0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nreader = Symbol('reader')\nnull = Symbol('null')\npath_conjunction = (Eq(reader, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 677,
          "throwingLine": 678,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.BaseEncoding.Anonymous-598f1b37-e4c7-4151-9f53-fea710de31c8.read(char[], int, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 912,
          "throwingLine": 913,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.BaseEncoding.Anonymous-bfb78fc3-0338-4227-8240-70966dca0469.append(java.lang.CharSequence, int, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nchars0 = String('chars0')\noff0 = Int('off0')\nlen0 = Int('len0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 943,
          "throwingLine": 944,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.BaseEncoding.Anonymous-130b9338-0dae-461b-ba80-1b789f1533c2.append(java.lang.CharSequence)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nchars0 = String('chars0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 948,
          "throwingLine": 949,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.BaseEncoding.Anonymous-fd20916c-0a76-4cf0-9e20-8c24d340f06b.write(char[], int, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 966,
          "throwingLine": 967,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.BaseEncoding.SeparatedBaseEncoding.withSeparator(java.lang.String, int)",
          "exception": "throw new UnsupportedOperationException(\"Already have a separator\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nafterEveryChars0 = Int('afterEveryChars0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1047,
          "throwingLine": 1048,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ArrayTable.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.ArrayMap.remove(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 272,
          "throwingLine": 273,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.ArrayMap.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 277,
          "throwingLine": 278,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.at(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(checkElementIndex(rowIndex, rowList.size())) && (checkElementIndex(columnIndex, columnList.size()))",
          "backwardsPathConjunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowIndex >= 0 && (columnIndex >= columnList.size() || columnIndex < 0) && rowIndex < rowList.size()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  And(Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size())), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\ncolumnIndex = Symbol('columnIndex', integer=True)\nrowList_size = Symbol('rowList_size')\ncolumnList_size = Symbol('columnList_size')\npath_conjunction = ((~(((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size))))) & ((StrictLessThan(columnIndex, 0)) | (GreaterThan(columnIndex, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 312,
          "throwingLine": 315,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.at(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(checkElementIndex(rowIndex, rowList.size()))",
          "backwardsPathConjunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "rowIndex >= rowList.size() || rowIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  Or(rowIndex0 < 0, rowIndex0 >= rowList.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\nrowList_size = Symbol('rowList_size')\npath_conjunction = ((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 312,
          "throwingLine": 314,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.set(int, int, V)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(checkElementIndex(rowIndex, rowList.size()))",
          "backwardsPathConjunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "rowIndex >= rowList.size() || rowIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  Or(rowIndex0 < 0, rowIndex0 >= rowList.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\nrowList_size = Symbol('rowList_size')\npath_conjunction = ((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 334,
          "throwingLine": 336,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.set(int, int, V)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(checkElementIndex(rowIndex, rowList.size())) && (checkElementIndex(columnIndex, columnList.size()))",
          "backwardsPathConjunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowIndex >= 0 && (columnIndex >= columnList.size() || columnIndex < 0) && rowIndex < rowList.size()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  And(Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size())), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\ncolumnIndex = Symbol('columnIndex', integer=True)\nrowList_size = Symbol('rowList_size')\ncolumnList_size = Symbol('columnList_size')\npath_conjunction = ((~(((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size))))) & ((StrictLessThan(columnIndex, 0)) | (GreaterThan(columnIndex, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 334,
          "throwingLine": 337,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 351,
          "throwingLine": 352,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.get(java.lang.Object, java.lang.Object)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex == null || columnIndex == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (at(rowIndex, columnIndex))",
          "backwardsPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "(rowKeyToIndex.get(rowKey) >= rowList.size() || rowKeyToIndex.get(rowKey) < 0) && columnKeyToIndex.get(columnKey) != null && null != rowKeyToIndex.get(rowKey)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowIndex0_isNull = Bool('rowIndex0_isNull')\ncolumnIndex0_isNull = Bool('columnIndex0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(Not(Or(rowIndex0_isNull, columnIndex0_isNull)), Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\ncolumnKeyToIndex = Symbol('columnKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\ncolumnKeyToIndex_get = Symbol('columnKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\nnull = Symbol('null')\npath_conjunction = ((~(((Eq(rowKeyToIndex_get, null)) | (Eq(columnKeyToIndex_get, null))))) & ((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 405,
          "throwingLine": 408,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.get(java.lang.Object, java.lang.Object)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex == null || columnIndex == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (at(rowIndex, columnIndex))",
          "backwardsPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowKeyToIndex.get(rowKey) >= 0 && (columnKeyToIndex.get(columnKey) >= columnList.size() || columnKeyToIndex.get(columnKey) < 0) && rowKeyToIndex.get(rowKey) < rowList.size() && columnKeyToIndex.get(columnKey) != null && null != rowKeyToIndex.get(rowKey)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowIndex0_isNull = Bool('rowIndex0_isNull')\ncolumnIndex0_isNull = Bool('columnIndex0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(And(Not(Or(rowIndex0_isNull, columnIndex0_isNull)), Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\ncolumnKeyToIndex = Symbol('columnKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\ncolumnKeyToIndex_get = Symbol('columnKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\ncolumnList_size = Symbol('columnList_size')\nnull = Symbol('null')\npath_conjunction = (((~(((Eq(rowKeyToIndex_get, null)) | (Eq(columnKeyToIndex_get, null))))) & (~(((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size)))))) & ((StrictLessThan(columnKeyToIndex_get, 0)) | (GreaterThan(columnKeyToIndex_get, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 405,
          "throwingLine": 408,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.put(R, C, V)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(!(rowKey == null)) && (!(columnKey == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(checkNotNull(rowKey)) && (checkNotNull(columnKey)) && (set(rowIndex, columnIndex, value))",
          "backwardsPathConjunction": "(!(rowKey == null)) && (!(columnKey == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "(rowKeyToIndex.get(rowKey) >= rowList.size() || rowKeyToIndex.get(rowKey) < 0) && columnKey != null && null != rowKey",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowKey0_isNull = Bool('rowKey0_isNull')\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(And(Not(rowKey0_isNull), Not(columnKey0_isNull)), Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(rowKey, null)))) & (~((Eq(columnKey, null))))) & ((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 426,
          "throwingLine": 433,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.put(R, C, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(rowKey == null)) && (columnKey == null)",
          "symbolicPathConjunction": "(checkNotNull(rowKey)) && (checkNotNull(columnKey))",
          "backwardsPathConjunction": "(!(rowKey == null)) && (columnKey == null)",
          "simplifiedPathConjunction": "columnKey == null && null != rowKey",
          "z3Inputs": "[columnKey0_isNull = True, rowKey0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowKey0_isNull = Bool('rowKey0_isNull')\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  And(Not(rowKey0_isNull), columnKey0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(rowKey, null)))) & (Eq(columnKey, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 426,
          "throwingLine": 428,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.put(R, C, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(rowKey == null)",
          "symbolicPathConjunction": "(checkNotNull(rowKey))",
          "backwardsPathConjunction": "(rowKey == null)",
          "simplifiedPathConjunction": "null == rowKey",
          "z3Inputs": "[rowKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowKey0_isNull = Bool('rowKey0_isNull')\n\nconstraints = [\n  rowKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\nnull = Symbol('null')\npath_conjunction = (Eq(rowKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 426,
          "throwingLine": 427,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.put(R, C, V)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowKey == null)) && (!(columnKey == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(checkNotNull(rowKey)) && (checkNotNull(columnKey)) && (set(rowIndex, columnIndex, value))",
          "backwardsPathConjunction": "(!(rowKey == null)) && (!(columnKey == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowKeyToIndex.get(rowKey) >= 0 && (columnKeyToIndex.get(columnKey) >= columnList.size() || columnKeyToIndex.get(columnKey) < 0) && rowKeyToIndex.get(rowKey) < rowList.size() && columnKey != null && null != rowKey",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowKey0_isNull = Bool('rowKey0_isNull')\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(And(And(Not(rowKey0_isNull), Not(columnKey0_isNull)), Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\ncolumnKeyToIndex = Symbol('columnKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\ncolumnKeyToIndex_get = Symbol('columnKeyToIndex_get')\ncolumnList_size = Symbol('columnList_size')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(rowKey, null)))) & (~((Eq(columnKey, null))))) & (~(((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size)))))) & ((StrictLessThan(columnKeyToIndex_get, 0)) | (GreaterThan(columnKeyToIndex_get, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 426,
          "throwingLine": 433,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.remove(java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 465,
          "throwingLine": 466,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.erase(java.lang.Object, java.lang.Object)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex == null || columnIndex == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (set(rowIndex, columnIndex, null))",
          "backwardsPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowKeyToIndex.get(rowKey) >= 0 && (columnKeyToIndex.get(columnKey) >= columnList.size() || columnKeyToIndex.get(columnKey) < 0) && rowKeyToIndex.get(rowKey) < rowList.size() && columnKeyToIndex.get(columnKey) != null && null != rowKeyToIndex.get(rowKey)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowIndex0_isNull = Bool('rowIndex0_isNull')\ncolumnIndex0_isNull = Bool('columnIndex0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(And(Not(Or(rowIndex0_isNull, columnIndex0_isNull)), Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\ncolumnKeyToIndex = Symbol('columnKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\ncolumnKeyToIndex_get = Symbol('columnKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\ncolumnList_size = Symbol('columnList_size')\nnull = Symbol('null')\npath_conjunction = (((~(((Eq(rowKeyToIndex_get, null)) | (Eq(columnKeyToIndex_get, null))))) & (~(((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size)))))) & ((StrictLessThan(columnKeyToIndex_get, 0)) | (GreaterThan(columnKeyToIndex_get, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 482,
          "throwingLine": 488,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.erase(java.lang.Object, java.lang.Object)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex == null || columnIndex == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (set(rowIndex, columnIndex, null))",
          "backwardsPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "(rowKeyToIndex.get(rowKey) >= rowList.size() || rowKeyToIndex.get(rowKey) < 0) && columnKeyToIndex.get(columnKey) != null && null != rowKeyToIndex.get(rowKey)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowIndex0_isNull = Bool('rowIndex0_isNull')\ncolumnIndex0_isNull = Bool('columnIndex0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(Not(Or(rowIndex0_isNull, columnIndex0_isNull)), Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\ncolumnKeyToIndex = Symbol('columnKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\ncolumnKeyToIndex_get = Symbol('columnKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\nnull = Symbol('null')\npath_conjunction = ((~(((Eq(rowKeyToIndex_get, null)) | (Eq(columnKeyToIndex_get, null))))) & ((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 482,
          "throwingLine": 488,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.Anonymous-1f63e466-7807-46fd-850b-b26bdb5e2b8f.getValue()",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(at(rowIndex, columnIndex))",
          "backwardsPathConjunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowIndex >= 0 && (columnIndex >= columnList.size() || columnIndex < 0) && rowIndex < rowList.size()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  And(Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size())), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\ncolumnIndex = Symbol('columnIndex', integer=True)\nrowList_size = Symbol('rowList_size')\ncolumnList_size = Symbol('columnList_size')\npath_conjunction = ((~(((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size))))) & ((StrictLessThan(columnIndex, 0)) | (GreaterThan(columnIndex, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 536,
          "throwingLine": 537,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.Anonymous-1f63e466-7807-46fd-850b-b26bdb5e2b8f.getValue()",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(at(rowIndex, columnIndex))",
          "backwardsPathConjunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "rowIndex >= rowList.size() || rowIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  Or(rowIndex0 < 0, rowIndex0 >= rowList.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\nrowList_size = Symbol('rowList_size')\npath_conjunction = ((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 536,
          "throwingLine": 537,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.column(C)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(columnKey == null)",
          "symbolicPathConjunction": "(checkNotNull(columnKey))",
          "backwardsPathConjunction": "(columnKey == null)",
          "simplifiedPathConjunction": "columnKey == null",
          "z3Inputs": "[columnKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  columnKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncolumnKey = Symbol('columnKey')\nnull = Symbol('null')\npath_conjunction = (Eq(columnKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 557,
          "throwingLine": 558,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.ColumnMap.put(C, java.util.Map<R, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 628,
          "throwingLine": 629,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.row(R)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(rowKey == null)",
          "symbolicPathConjunction": "(checkNotNull(rowKey))",
          "backwardsPathConjunction": "(rowKey == null)",
          "simplifiedPathConjunction": "null == rowKey",
          "z3Inputs": "[rowKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowKey0_isNull = Bool('rowKey0_isNull')\n\nconstraints = [\n  rowKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\nnull = Symbol('null')\npath_conjunction = (Eq(rowKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 647,
          "throwingLine": 648,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.RowMap.put(R, java.util.Map<C, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 718,
          "throwingLine": 719,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableSortedMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(naturalOrder == null)",
          "symbolicPathConjunction": "(Ordering.<Comparable>natural()) && (copyOf(naturalOrder, elements))",
          "backwardsPathConjunction": "((Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnaturalOrder0_isNull = Bool('naturalOrder0_isNull')\n\nconstraints = [\n  naturalOrder0 == (Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE,\n  naturalOrder0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 189,
          "throwingLine": 194,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 204,
          "throwingLine": 205,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultiset.pollFirstEntry()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 320,
          "throwingLine": 321,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedMultiset.pollLastEntry()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 334,
          "throwingLine": 335,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/PreconditionsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.PreconditionsTest.Anonymous-fe8a2473-777f-4cdb-9a10-f1c82a17666d.toString()",
          "exception": "throw new AssertionFailedError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 337,
          "throwingLine": 338,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/EnumMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.EnumMultiset.create(java.lang.Iterable<E>)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"EnumMultiset constructor passed empty Iterable\"))",
          "pathCojunction": "(!(iterator.hasNext()))",
          "symbolicPathConjunction": "(checkArgument(iterator.hasNext(), \"EnumMultiset constructor passed empty Iterable\"))",
          "backwardsPathConjunction": "(!(elements.iterator().hasNext()))",
          "simplifiedPathConjunction": "!elements.iterator()_hasNext",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  iterator0 == elements0.iterator(),\n  Not(iterator0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nelements_iterator_hasNext = Symbol('elements_iterator_hasNext')\nelements_iterator = Symbol('elements_iterator')\npath_conjunction = (~(elements_iterator_hasNext))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 50,
          "throwingLine": 52,
          "isStatic": true,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/net/InetAddresses.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (ipString.charAt(i) == '.') && (false) && (!(true)) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (ipString.charAt(0) == '.') && (false) && (!(true))) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (ipString.charAt(0) == '.') && (false) && (!(true)) && (textToNumericFormatV6(ipString) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0 == textToNumericFormatV6(ipString0),\n  And(And(And(And(0 < Length(ipString0), ipString0.charAt(i0) == '.'), False), Not(True)), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\n_textToNumericFormatV6 = Symbol('_textToNumericFormatV6')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\npath_conjunction = (((((StrictLessThan(0, ipString_length)) & (Eq(ipString_charAt, wit_str_0))) & False) & (~(True))) & (Eq(_textToNumericFormatV6, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (ipString.charAt(i) == '.') && (!(false)) && (true) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (ipString.charAt(i) == '.') && (!(false)) && (true)) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (ipString.charAt(0) == '.') && (!(false)) && (true) && (textToNumericFormatV4(ipString) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0 == textToNumericFormatV4(ipString0),\n  And(And(And(And(0 < Length(ipString0), ipString0.charAt(i0) == '.'), Not(False)), True), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\n_textToNumericFormatV4 = Symbol('_textToNumericFormatV4')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\npath_conjunction = (((((StrictLessThan(0, ipString_length)) & (Eq(ipString_charAt, wit_str_0))) & (~(False))) & True) & (Eq(_textToNumericFormatV4, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(!(0 < ipString.length())) && (!(false)) && (false) && (addr == null)",
          "symbolicPathConjunction": "((!(i < ipString.length())) && (!(false)) && (false)) && (addr == null)",
          "backwardsPathConjunction": "(!(0 < ipString.length())) && (!(false)) && (false) && (textToNumericFormatV4(ipString) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  addr0 == textToNumericFormatV4(ipString0),\n  And(And(And(Not(0 < Length(ipString0)), Not(False)), False), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\n_textToNumericFormatV4 = Symbol('_textToNumericFormatV4')\nnull = Symbol('null')\npath_conjunction = ((((~((StrictLessThan(0, ipString_length)))) & (~(False))) & False) & (Eq(_textToNumericFormatV4, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (true) && (!(false)) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (true) && (!(false))) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (true) && (!(false)) && (textToNumericFormatV6(ipString) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0 == textToNumericFormatV6(ipString0),\n  And(And(And(And(And(And(0 < Length(ipString0), Not(ipString0.charAt(i0) == '.')), ipString0.charAt(i0) == ':'), Not(False)), True), Not(False)), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\n_textToNumericFormatV6 = Symbol('_textToNumericFormatV6')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\nwit_str_1 = Symbol('wit_str_1') # ':'\npath_conjunction = (((((((StrictLessThan(0, ipString_length)) & (~((Eq(ipString_charAt, wit_str_0))))) & (Eq(ipString_charAt, wit_str_1))) & (~(False))) & True) & (~(False))) & (Eq(_textToNumericFormatV6, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (true) && (false) && (ipString == null) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (true) && (false) && (ipString == null)) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (true) && (false) && (ipString == null) && (null == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\nipString0_isNull = Bool('ipString0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0_isNull, \n  And(And(And(And(And(And(And(0 < Length(ipString0), Not(ipString0.charAt(i0) == '.')), ipString0.charAt(i0) == ':'), Not(False)), True), False), ipString0_isNull), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\nwit_str_1 = Symbol('wit_str_1') # ':'\npath_conjunction = ((((((((StrictLessThan(0, ipString_length)) & (~((Eq(ipString_charAt, wit_str_0))))) & (Eq(ipString_charAt, wit_str_1))) & (~(False))) & True) & False) & (Eq(ipString, null))) & (Eq(null, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (!(true)) && (false) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (!(true)) && (false)) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (!(true)) && (false) && (textToNumericFormatV4(ipString) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0 == textToNumericFormatV4(ipString0),\n  And(And(And(And(And(And(0 < Length(ipString0), Not(ipString0.charAt(i0) == '.')), ipString0.charAt(i0) == ':'), Not(False)), Not(True)), False), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\n_textToNumericFormatV4 = Symbol('_textToNumericFormatV4')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\nwit_str_1 = Symbol('wit_str_1') # ':'\npath_conjunction = (((((((StrictLessThan(0, ipString_length)) & (~((Eq(ipString_charAt, wit_str_0))))) & (Eq(ipString_charAt, wit_str_1))) & (~(False))) & (~(True))) & False) & (Eq(_textToNumericFormatV4, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (!(ipString.charAt(i) == ':')) && (!(Character.digit(ipString.charAt(i), 16) == -1)) && (!(false)) && (!(false)) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (!(ipString.charAt(i) == '.')) && (!(ipString.charAt(i) == ':')) && (!(Character.digit(c, 16) == -1)) && (!(false)) && (!(false))) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (!(ipString.charAt(0) == '.')) && (!(ipString.charAt(0) == ':')) && (!(Character.digit(ipString.charAt(0), 16) == -1)) && (!(false)) && (!(false)) && (null == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\naddr0_isNull = Bool('addr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0_isNull, \n  And(And(And(And(And(And(0 < Length(ipString0), Not(ipString0.charAt(i0) == '.')), Not(ipString0.charAt(i0) == ':')), Not(Character.digit(ipString0.charAt(i0), 16) == -1)), Not(False)), Not(False)), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\nCharacter_digit = Symbol('Character_digit')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\nwit_str_1 = Symbol('wit_str_1') # ':'\npath_conjunction = (((((((StrictLessThan(0, ipString_length)) & (~((Eq(ipString_charAt, wit_str_0))))) & (~((Eq(ipString_charAt, wit_str_1))))) & (~((Eq(Character_digit, -1))))) & (~(False))) & (~(False))) & (Eq(null, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (ipString.charAt(i) == '.') && (!(false)) && (!(true)) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (ipString.charAt(i) == '.') && (!(false)) && (!(true))) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (ipString.charAt(0) == '.') && (!(false)) && (!(true)) && (null == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\naddr0_isNull = Bool('addr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0_isNull, \n  And(And(And(And(0 < Length(ipString0), ipString0.charAt(i0) == '.'), Not(False)), Not(True)), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\npath_conjunction = (((((StrictLessThan(0, ipString_length)) & (Eq(ipString_charAt, wit_str_0))) & (~(False))) & (~(True))) & (Eq(null, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (!(ipString.charAt(i) == ':')) && (Character.digit(ipString.charAt(i), 16) == -1) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (!(ipString.charAt(i) == '.')) && (!(ipString.charAt(i) == ':')) && (Character.digit(c, 16) == -1)) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (!(ipString.charAt(0) == '.')) && (!(ipString.charAt(0) == ':')) && (Character.digit(ipString.charAt(0), 16) == -1) && (null == null)",
          "simplifiedPathConjunction": "Character.digit(ipString.charAt(0), 16) == -1 && ipString.length() > 0 && ipString.charAt(0) != '.' && ipString.charAt(0) != ':'",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\naddr0_isNull = Bool('addr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0_isNull, \n  And(And(And(And(0 < Length(ipString0), Not(ipString0.charAt(i0) == '.')), Not(ipString0.charAt(i0) == ':')), Character.digit(ipString0.charAt(i0), 16) == -1), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\nCharacter_digit = Symbol('Character_digit')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\nwit_str_1 = Symbol('wit_str_1') # ':'\npath_conjunction = (((((StrictLessThan(0, ipString_length)) & (~((Eq(ipString_charAt, wit_str_0))))) & (~((Eq(ipString_charAt, wit_str_1))))) & (Eq(Character_digit, -1))) & (Eq(null, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(!(0 < ipString.length())) && (!(false)) && (!(false)) && (addr == null)",
          "symbolicPathConjunction": "((!(i < ipString.length())) && (!(false)) && (!(false))) && (addr == null)",
          "backwardsPathConjunction": "(!(0 < ipString.length())) && (!(false)) && (!(false)) && (null == null)",
          "z3Inputs": "[ipString0 = \"\", addr0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\naddr0_isNull = Bool('addr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  addr0_isNull, \n  And(And(And(Not(0 < Length(ipString0)), Not(False)), Not(False)), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nnull = Symbol('null')\npath_conjunction = ((((~((StrictLessThan(0, ipString_length)))) & (~(False))) & (~(False))) & (Eq(null, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (!(ipString.charAt(i) == ':')) && (!(Character.digit(ipString.charAt(i), 16) == -1)) && (false) && (!(false)) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (!(ipString.charAt(0) == '.')) && (!(ipString.charAt(0) == ':')) && (!(Character.digit(c, 16) == -1)) && (false) && (!(false))) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (!(ipString.charAt(0) == '.')) && (!(ipString.charAt(0) == ':')) && (!(Character.digit(ipString.charAt(0), 16) == -1)) && (false) && (!(false)) && (textToNumericFormatV6(ipString) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0 == textToNumericFormatV6(ipString0),\n  And(And(And(And(And(And(0 < Length(ipString0), Not(ipString0.charAt(i0) == '.')), Not(ipString0.charAt(i0) == ':')), Not(Character.digit(ipString0.charAt(i0), 16) == -1)), False), Not(False)), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\nCharacter_digit = Symbol('Character_digit')\n_textToNumericFormatV6 = Symbol('_textToNumericFormatV6')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\nwit_str_1 = Symbol('wit_str_1') # ':'\npath_conjunction = (((((((StrictLessThan(0, ipString_length)) & (~((Eq(ipString_charAt, wit_str_0))))) & (~((Eq(ipString_charAt, wit_str_1))))) & (~((Eq(Character_digit, -1))))) & False) & (~(False))) & (Eq(_textToNumericFormatV6, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (!(true)) && (!(false)) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (!(true)) && (!(false))) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (!(true)) && (!(false)) && (null == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\naddr0_isNull = Bool('addr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0_isNull, \n  And(And(And(And(And(And(0 < Length(ipString0), Not(ipString0.charAt(i0) == '.')), ipString0.charAt(i0) == ':'), Not(False)), Not(True)), Not(False)), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\nwit_str_1 = Symbol('wit_str_1') # ':'\npath_conjunction = (((((((StrictLessThan(0, ipString_length)) & (~((Eq(ipString_charAt, wit_str_0))))) & (Eq(ipString_charAt, wit_str_1))) & (~(False))) & (~(True))) & (~(False))) & (Eq(null, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (!(ipString.charAt(i) == ':')) && (!(Character.digit(ipString.charAt(i), 16) == -1)) && (!(false)) && (false) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (!(ipString.charAt(i) == '.')) && (!(ipString.charAt(i) == ':')) && (!(Character.digit(c, 16) == -1)) && (!(false)) && (false)) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (!(ipString.charAt(0) == '.')) && (!(ipString.charAt(0) == ':')) && (!(Character.digit(ipString.charAt(0), 16) == -1)) && (!(false)) && (false) && (textToNumericFormatV4(ipString) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0 == textToNumericFormatV4(ipString0),\n  And(And(And(And(And(And(0 < Length(ipString0), Not(ipString0.charAt(i0) == '.')), Not(ipString0.charAt(i0) == ':')), Not(Character.digit(ipString0.charAt(i0), 16) == -1)), Not(False)), False), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\nCharacter_digit = Symbol('Character_digit')\n_textToNumericFormatV4 = Symbol('_textToNumericFormatV4')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\nwit_str_1 = Symbol('wit_str_1') # ':'\npath_conjunction = (((((((StrictLessThan(0, ipString_length)) & (~((Eq(ipString_charAt, wit_str_0))))) & (~((Eq(ipString_charAt, wit_str_1))))) & (~((Eq(Character_digit, -1))))) & (~(False))) & False) & (Eq(_textToNumericFormatV4, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(!(0 < ipString.length())) && (false) && (!(false)) && (addr == null)",
          "symbolicPathConjunction": "((!(i < ipString.length())) && (false) && (!(false))) && (addr == null)",
          "backwardsPathConjunction": "(!(0 < ipString.length())) && (false) && (!(false)) && (textToNumericFormatV6(ipString) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  addr0 == textToNumericFormatV6(ipString0),\n  And(And(And(Not(0 < Length(ipString0)), False), Not(False)), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\n_textToNumericFormatV6 = Symbol('_textToNumericFormatV6')\nnull = Symbol('null')\npath_conjunction = ((((~((StrictLessThan(0, ipString_length)))) & False) & (~(False))) & (Eq(_textToNumericFormatV6, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"'%s' is not an IP string literal.\", ipString);",
          "pathCojunction": "(0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (true) && (false) && (!(ipString == null)) && (addr == null)",
          "symbolicPathConjunction": "((i < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (true) && (false) && (!(ipString == null))) && (addr == null)",
          "backwardsPathConjunction": "(0 < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (true) && (false) && (!(ipString == null)) && (textToNumericFormatV6(ipString) == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nipString0 = String('ipString0')\ni0 = Int('i0')\nipString0_isNull = Bool('ipString0_isNull')\naddr0_isNull = Bool('addr0_isNull')\n\nconstraints = [\n  i0 == 0,\n  addr0 == textToNumericFormatV6(ipString0),\n  And(And(And(And(And(And(And(0 < Length(ipString0), Not(ipString0.charAt(i0) == '.')), ipString0.charAt(i0) == ':'), Not(False)), True), False), Not(ipString0_isNull)), addr0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nipString = Symbol('ipString')\nipString_length = Symbol('ipString_length')\nipString_charAt = Symbol('ipString_charAt')\n_textToNumericFormatV6 = Symbol('_textToNumericFormatV6')\nnull = Symbol('null')\nwit_str_0 = Symbol('wit_str_0') # '.'\nwit_str_1 = Symbol('wit_str_1') # ':'\npath_conjunction = ((((((((StrictLessThan(0, ipString_length)) & (~((Eq(ipString_charAt, wit_str_0))))) & (Eq(ipString_charAt, wit_str_1))) & (~(False))) & True) & False) & (~((Eq(ipString, null))))) & (Eq(_textToNumericFormatV6, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"Not a valid URI IP literal: '%s'\", hostAddr);",
          "pathCojunction": "(!(hostAddr == null)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && (0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (!(true)) && (!(false)) && (addr == null || addr.length != expectBytes)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && ((i < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (!(true)) && (!(false))) && (addr == null || addr.length != expectBytes)",
          "backwardsPathConjunction": "(!(hostAddr == null)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && (0 < hostAddr.substring(1, hostAddr.length() - 1).length()) && (!(hostAddr.substring(1, hostAddr.length() - 1).charAt(0) == '.')) && (hostAddr.substring(1, hostAddr.length() - 1).charAt(0) == ':') && (!(false)) && (!(true)) && (!(false)) && (null == null || null.length != 16)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nipString0 = String('ipString0')\nexpectBytes0 = Int('expectBytes0')\nipString1 = String('ipString1')\nexpectBytes1 = Int('expectBytes1')\ni0 = Int('i0')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_length = Int('addr0_length')\n\nconstraints = [\n  ipString1 == hostAddr0.substring(1, Length(hostAddr0) - 1),\n  expectBytes1 == 16,\n  i0 == 0,\n  addr0_isNull, \n  addr0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(Not(hostAddr0_isNull), And(hostAddr0.startsWith(\"[\"), hostAddr0.endsWith(\"]\"))), 0 < Length(ipString1)), Not(ipString1.charAt(i0) == '.')), ipString1.charAt(i0) == ':'), Not(False)), Not(True)), Not(False)), Or(addr0_isNull, addr0_length != expectBytes1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 484,
          "throwingLine": 501,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"Not a valid URI IP literal: '%s'\", hostAddr);",
          "pathCojunction": "(!(hostAddr == null)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && (0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (!(true)) && (false) && (addr == null || addr.length != expectBytes)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && ((i < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (!(true)) && (false)) && (addr == null || addr.length != expectBytes)",
          "backwardsPathConjunction": "(!(hostAddr == null)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && (0 < hostAddr.substring(1, hostAddr.length() - 1).length()) && (!(hostAddr.substring(1, hostAddr.length() - 1).charAt(0) == '.')) && (hostAddr.substring(1, hostAddr.length() - 1).charAt(0) == ':') && (!(false)) && (!(true)) && (false) && (textToNumericFormatV4(hostAddr.substring(1, hostAddr.length() - 1)) == null || textToNumericFormatV4(hostAddr.substring(1, hostAddr.length() - 1)).length != 16)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nipString0 = String('ipString0')\nexpectBytes0 = Int('expectBytes0')\nipString1 = String('ipString1')\nexpectBytes1 = Int('expectBytes1')\ni0 = Int('i0')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_length = Int('addr0_length')\n\nconstraints = [\n  ipString1 == hostAddr0.substring(1, Length(hostAddr0) - 1),\n  expectBytes1 == 16,\n  i0 == 0,\n  addr0 == textToNumericFormatV4(ipString1),\n  addr0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(Not(hostAddr0_isNull), And(hostAddr0.startsWith(\"[\"), hostAddr0.endsWith(\"]\"))), 0 < Length(ipString1)), Not(ipString1.charAt(i0) == '.')), ipString1.charAt(i0) == ':'), Not(False)), Not(True)), False), Or(addr0_isNull, addr0_length != expectBytes1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 484,
          "throwingLine": 501,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"Not a valid URI IP literal: '%s'\", hostAddr);",
          "pathCojunction": "(!(hostAddr == null)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && (!(0 < ipString.length())) && (!(false)) && (false) && (addr == null || addr.length != expectBytes)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && ((!(i < ipString.length())) && (!(false)) && (false)) && (addr == null || addr.length != expectBytes)",
          "backwardsPathConjunction": "(!(hostAddr == null)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && (!(0 < hostAddr.length())) && (!(false)) && (false) && (textToNumericFormatV4(hostAddr) == null || textToNumericFormatV4(hostAddr).length != 4)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nipString0 = String('ipString0')\nexpectBytes0 = Int('expectBytes0')\nipString1 = String('ipString1')\nexpectBytes1 = Int('expectBytes1')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_length = Int('addr0_length')\n\nconstraints = [\n  ipString1 == hostAddr0,\n  expectBytes1 == 4,\n  addr0 == textToNumericFormatV4(ipString1),\n  addr0_length >= 0, # implicit\n  And(And(And(And(And(Not(hostAddr0_isNull), Not(And(hostAddr0.startsWith(\"[\"), hostAddr0.endsWith(\"]\")))), Not(0 < Length(ipString1))), Not(False)), False), Or(addr0_isNull, addr0_length != expectBytes1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 484,
          "throwingLine": 501,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"Not a valid URI IP literal: '%s'\", hostAddr);",
          "pathCojunction": "(!(hostAddr == null)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && (!(0 < ipString.length())) && (!(false)) && (!(false)) && (addr == null || addr.length != expectBytes)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && ((!(i < ipString.length())) && (!(false)) && (!(false))) && (addr == null || addr.length != expectBytes)",
          "backwardsPathConjunction": "(!(hostAddr == null)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && (!(0 < hostAddr.substring(1, hostAddr.length() - 1).length())) && (!(false)) && (!(false)) && (null == null || null.length != 16)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nipString0 = String('ipString0')\nexpectBytes0 = Int('expectBytes0')\nipString1 = String('ipString1')\nexpectBytes1 = Int('expectBytes1')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_length = Int('addr0_length')\n\nconstraints = [\n  ipString1 == hostAddr0.substring(1, Length(hostAddr0) - 1),\n  expectBytes1 == 16,\n  addr0_isNull, \n  addr0_length >= 0, # implicit\n  And(And(And(And(And(Not(hostAddr0_isNull), And(hostAddr0.startsWith(\"[\"), hostAddr0.endsWith(\"]\"))), Not(0 < Length(ipString1))), Not(False)), Not(False)), Or(addr0_isNull, addr0_length != expectBytes1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 484,
          "throwingLine": 501,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"Not a valid URI IP literal: '%s'\", hostAddr);",
          "pathCojunction": "(!(hostAddr == null)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && (0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (true) && (!(false)) && (addr == null || addr.length != expectBytes)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && ((i < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (true) && (!(false))) && (addr == null || addr.length != expectBytes)",
          "backwardsPathConjunction": "(!(hostAddr == null)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && (0 < hostAddr.length()) && (!(hostAddr.charAt(0) == '.')) && (hostAddr.charAt(0) == ':') && (!(false)) && (true) && (!(false)) && (textToNumericFormatV6(hostAddr) == null || textToNumericFormatV6(hostAddr).length != 4)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nipString0 = String('ipString0')\nexpectBytes0 = Int('expectBytes0')\nipString1 = String('ipString1')\nexpectBytes1 = Int('expectBytes1')\ni0 = Int('i0')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_length = Int('addr0_length')\n\nconstraints = [\n  ipString1 == hostAddr0,\n  expectBytes1 == 4,\n  i0 == 0,\n  addr0 == textToNumericFormatV6(ipString1),\n  addr0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(Not(hostAddr0_isNull), Not(And(hostAddr0.startsWith(\"[\"), hostAddr0.endsWith(\"]\")))), 0 < Length(ipString1)), Not(ipString1.charAt(i0) == '.')), ipString1.charAt(i0) == ':'), Not(False)), True), Not(False)), Or(addr0_isNull, addr0_length != expectBytes1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 484,
          "throwingLine": 501,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(hostAddr == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr))",
          "backwardsPathConjunction": "(hostAddr == null)",
          "simplifiedPathConjunction": "hostAddr == null",
          "z3Inputs": "[hostAddr0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\n\nconstraints = [\n  hostAddr0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nhostAddr = Symbol('hostAddr')\nnull = Symbol('null')\npath_conjunction = (Eq(hostAddr, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 484,
          "throwingLine": 485,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"Not a valid URI IP literal: '%s'\", hostAddr);",
          "pathCojunction": "(!(hostAddr == null)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && (0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (!(ipString.charAt(i) == ':')) && (!(Character.digit(ipString.charAt(i), 16) == -1)) && (false) && (!(false)) && (addr == null || addr.length != expectBytes)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && ((i < ipString.length()) && (!(ipString.charAt(0) == '.')) && (!(ipString.charAt(0) == ':')) && (!(Character.digit(c, 16) == -1)) && (false) && (!(false))) && (addr == null || addr.length != expectBytes)",
          "backwardsPathConjunction": "(!(hostAddr == null)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && (0 < hostAddr.substring(1, hostAddr.length() - 1).length()) && (!(hostAddr.substring(1, hostAddr.length() - 1).charAt(0) == '.')) && (!(hostAddr.substring(1, hostAddr.length() - 1).charAt(0) == ':')) && (!(Character.digit(hostAddr.substring(1, hostAddr.length() - 1).charAt(0), 16) == -1)) && (false) && (!(false)) && (textToNumericFormatV6(hostAddr.substring(1, hostAddr.length() - 1)) == null || textToNumericFormatV6(hostAddr.substring(1, hostAddr.length() - 1)).length != 16)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nipString0 = String('ipString0')\nexpectBytes0 = Int('expectBytes0')\nipString1 = String('ipString1')\nexpectBytes1 = Int('expectBytes1')\ni0 = Int('i0')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_length = Int('addr0_length')\n\nconstraints = [\n  ipString1 == hostAddr0.substring(1, Length(hostAddr0) - 1),\n  expectBytes1 == 16,\n  i0 == 0,\n  addr0 == textToNumericFormatV6(ipString1),\n  addr0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(Not(hostAddr0_isNull), And(hostAddr0.startsWith(\"[\"), hostAddr0.endsWith(\"]\"))), 0 < Length(ipString1)), Not(ipString1.charAt(i0) == '.')), Not(ipString1.charAt(i0) == ':')), Not(Character.digit(ipString1.charAt(i0), 16) == -1)), False), Not(False)), Or(addr0_isNull, addr0_length != expectBytes1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 484,
          "throwingLine": 501,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"Not a valid URI IP literal: '%s'\", hostAddr);",
          "pathCojunction": "(!(hostAddr == null)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && (0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (false) && (addr == null || addr.length != expectBytes)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && ((i < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (false)) && (addr == null || addr.length != expectBytes)",
          "backwardsPathConjunction": "(!(hostAddr == null)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && (0 < hostAddr.length()) && (!(hostAddr.charAt(0) == '.')) && (hostAddr.charAt(0) == ':') && (false) && (null == null || null.length != 4)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nipString0 = String('ipString0')\nexpectBytes0 = Int('expectBytes0')\nipString1 = String('ipString1')\nexpectBytes1 = Int('expectBytes1')\ni0 = Int('i0')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_length = Int('addr0_length')\n\nconstraints = [\n  ipString1 == hostAddr0,\n  expectBytes1 == 4,\n  i0 == 0,\n  addr0_isNull, \n  addr0_length >= 0, # implicit\n  And(And(And(And(And(And(Not(hostAddr0_isNull), Not(And(hostAddr0.startsWith(\"[\"), hostAddr0.endsWith(\"]\")))), 0 < Length(ipString1)), Not(ipString1.charAt(i0) == '.')), ipString1.charAt(i0) == ':'), False), Or(addr0_isNull, addr0_length != expectBytes1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 484,
          "throwingLine": 501,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"Not a valid URI IP literal: '%s'\", hostAddr);",
          "pathCojunction": "(!(hostAddr == null)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && (0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (!(ipString.charAt(i) == ':')) && (!(Character.digit(ipString.charAt(i), 16) == -1)) && (!(false)) && (!(false)) && (addr == null || addr.length != expectBytes)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && ((i < ipString.length()) && (!(ipString.charAt(0) == '.')) && (!(ipString.charAt(0) == ':')) && (!(Character.digit(c, 16) == -1)) && (!(false)) && (!(false))) && (addr == null || addr.length != expectBytes)",
          "backwardsPathConjunction": "(!(hostAddr == null)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && (0 < hostAddr.length()) && (!(hostAddr.charAt(0) == '.')) && (!(hostAddr.charAt(0) == ':')) && (!(Character.digit(hostAddr.charAt(0), 16) == -1)) && (!(false)) && (!(false)) && (null == null || null.length != 4)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nipString0 = String('ipString0')\nexpectBytes0 = Int('expectBytes0')\nipString1 = String('ipString1')\nexpectBytes1 = Int('expectBytes1')\ni0 = Int('i0')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_length = Int('addr0_length')\n\nconstraints = [\n  ipString1 == hostAddr0,\n  expectBytes1 == 4,\n  i0 == 0,\n  addr0_isNull, \n  addr0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(Not(hostAddr0_isNull), Not(And(hostAddr0.startsWith(\"[\"), hostAddr0.endsWith(\"]\")))), 0 < Length(ipString1)), Not(ipString1.charAt(i0) == '.')), Not(ipString1.charAt(i0) == ':')), Not(Character.digit(ipString1.charAt(i0), 16) == -1)), Not(False)), Not(False)), Or(addr0_isNull, addr0_length != expectBytes1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 484,
          "throwingLine": 501,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"Not a valid URI IP literal: '%s'\", hostAddr);",
          "pathCojunction": "(!(hostAddr == null)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && (0 < ipString.length()) && (!(ipString.charAt(i) == '.')) && (ipString.charAt(i) == ':') && (!(false)) && (true) && (!(false)) && (addr == null || addr.length != expectBytes)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && ((i < ipString.length()) && (!(ipString.charAt(0) == '.')) && (ipString.charAt(0) == ':') && (!(false)) && (true) && (!(false))) && (addr == null || addr.length != expectBytes)",
          "backwardsPathConjunction": "(!(hostAddr == null)) && (hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\")) && (0 < hostAddr.substring(1, hostAddr.length() - 1).length()) && (!(hostAddr.substring(1, hostAddr.length() - 1).charAt(0) == '.')) && (hostAddr.substring(1, hostAddr.length() - 1).charAt(0) == ':') && (!(false)) && (true) && (!(false)) && (textToNumericFormatV6(hostAddr.substring(1, hostAddr.length() - 1)) == null || textToNumericFormatV6(hostAddr.substring(1, hostAddr.length() - 1)).length != 16)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nipString0 = String('ipString0')\nexpectBytes0 = Int('expectBytes0')\nipString1 = String('ipString1')\nexpectBytes1 = Int('expectBytes1')\ni0 = Int('i0')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_length = Int('addr0_length')\n\nconstraints = [\n  ipString1 == hostAddr0.substring(1, Length(hostAddr0) - 1),\n  expectBytes1 == 16,\n  i0 == 0,\n  addr0 == textToNumericFormatV6(ipString1),\n  addr0_length >= 0, # implicit\n  And(And(And(And(And(And(And(And(Not(hostAddr0_isNull), And(hostAddr0.startsWith(\"[\"), hostAddr0.endsWith(\"]\"))), 0 < Length(ipString1)), Not(ipString1.charAt(i0) == '.')), ipString1.charAt(i0) == ':'), Not(False)), True), Not(False)), Or(addr0_isNull, addr0_length != expectBytes1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 484,
          "throwingLine": 501,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.net.InetAddresses.forUriString(java.lang.String)",
          "exception": "throw formatIllegalArgumentException(\"Not a valid URI IP literal: '%s'\", hostAddr);",
          "pathCojunction": "(!(hostAddr == null)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && (0 < ipString.length()) && (ipString.charAt(i) == '.') && (false) && (!(true)) && (addr == null || addr.length != expectBytes)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(hostAddr)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && ((i < ipString.length()) && (ipString.charAt(0) == '.') && (false) && (!(true))) && (addr == null || addr.length != expectBytes)",
          "backwardsPathConjunction": "(!(hostAddr == null)) && (!(hostAddr.startsWith(\"[\") && hostAddr.endsWith(\"]\"))) && (0 < hostAddr.length()) && (hostAddr.charAt(0) == '.') && (false) && (!(true)) && (textToNumericFormatV6(hostAddr) == null || textToNumericFormatV6(hostAddr).length != 4)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhostAddr0 = String('hostAddr0')\nipString0 = String('ipString0')\nexpectBytes0 = Int('expectBytes0')\nipString1 = String('ipString1')\nexpectBytes1 = Int('expectBytes1')\ni0 = Int('i0')\nhostAddr0_isNull = Bool('hostAddr0_isNull')\naddr0_isNull = Bool('addr0_isNull')\naddr0_length = Int('addr0_length')\n\nconstraints = [\n  ipString1 == hostAddr0,\n  expectBytes1 == 4,\n  i0 == 0,\n  addr0 == textToNumericFormatV6(ipString1),\n  addr0_length >= 0, # implicit\n  And(And(And(And(And(And(Not(hostAddr0_isNull), Not(And(hostAddr0.startsWith(\"[\"), hostAddr0.endsWith(\"]\")))), 0 < Length(ipString1)), ipString1.charAt(i0) == '.'), False), Not(True)), Or(addr0_isNull, addr0_length != expectBytes1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 484,
          "throwingLine": 501,
          "isStatic": true,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ListsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.testReverseViewRandomAccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_LIST == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(SOME_LIST))",
          "backwardsPathConjunction": "(SOME_LIST == null)",
          "simplifiedPathConjunction": "Lists.newArrayList(1, 2, 3, 4) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_LIST0_isNull = Bool('SOME_LIST0_isNull')\n\nconstraints = [\n  SOME_LIST0 == Lists.newArrayList(1, 2, 3, 4),\n  SOME_LIST0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nLists_newArrayList = Symbol('Lists_newArrayList')\nnull = Symbol('null')\npath_conjunction = (Eq(Lists_newArrayList, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 488,
          "throwingLine": 489,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.testTransformModifiableRandomAccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_LIST == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(SOME_LIST))",
          "backwardsPathConjunction": "(SOME_LIST == null)",
          "simplifiedPathConjunction": "Lists.newArrayList(1, 2, 3, 4) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_LIST0_isNull = Bool('SOME_LIST0_isNull')\n\nconstraints = [\n  SOME_LIST0 == Lists.newArrayList(1, 2, 3, 4),\n  SOME_LIST0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nLists_newArrayList = Symbol('Lists_newArrayList')\nnull = Symbol('null')\npath_conjunction = (Eq(Lists_newArrayList, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 600,
          "throwingLine": 601,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.testTransformViewRandomAccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_LIST == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(SOME_LIST))",
          "backwardsPathConjunction": "(SOME_LIST == null)",
          "simplifiedPathConjunction": "Lists.newArrayList(1, 2, 3, 4) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_LIST0_isNull = Bool('SOME_LIST0_isNull')\n\nconstraints = [\n  SOME_LIST0 == Lists.newArrayList(1, 2, 3, 4),\n  SOME_LIST0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nLists_newArrayList = Symbol('Lists_newArrayList')\nnull = Symbol('null')\npath_conjunction = (Eq(Lists_newArrayList, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 629,
          "throwingLine": 630,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.testTransformListIteratorRandomAccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_LIST == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(SOME_LIST))",
          "backwardsPathConjunction": "(SOME_LIST == null)",
          "simplifiedPathConjunction": "Lists.newArrayList(1, 2, 3, 4) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_LIST0_isNull = Bool('SOME_LIST0_isNull')\n\nconstraints = [\n  SOME_LIST0 == Lists.newArrayList(1, 2, 3, 4),\n  SOME_LIST0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nLists_newArrayList = Symbol('Lists_newArrayList')\nnull = Symbol('null')\npath_conjunction = (Eq(Lists_newArrayList, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 672,
          "throwingLine": 673,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.Anonymous-ea289cfd-d146-449f-8d94-7ebe1a480ed4.apply(java.lang.String)",
          "exception": "throw new IndexOutOfBoundsException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = String('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 688,
          "throwingLine": 689,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ListsTest.testTransformIteratorRandomAccess()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_LIST == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(SOME_LIST))",
          "backwardsPathConjunction": "(SOME_LIST == null)",
          "simplifiedPathConjunction": "Lists.newArrayList(1, 2, 3, 4) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_LIST0_isNull = Bool('SOME_LIST0_isNull')\n\nconstraints = [\n  SOME_LIST0 == Lists.newArrayList(1, 2, 3, 4),\n  SOME_LIST0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nLists_newArrayList = Symbol('Lists_newArrayList')\nnull = Symbol('null')\npath_conjunction = (Eq(Lists_newArrayList, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 738,
          "throwingLine": 739,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.escape.ArrayBasedUnicodeEscaper.escape(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 152,
          "throwingLine": 153,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/GeneratedMonitorTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.GeneratedMonitorTest.Scenario.toString()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(CaseFormat.UPPER_CAMEL == null)",
          "symbolicPathConjunction": "(CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, name()))",
          "backwardsPathConjunction": "(CaseFormat.UPPER_CAMEL == null)",
          "z3Inputs": "[CaseFormat_UPPER_CAMEL0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nCaseFormat_UPPER_CAMEL0_isNull = Bool('CaseFormat_UPPER_CAMEL0_isNull')\n\nconstraints = [\n  CaseFormat_UPPER_CAMEL0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 101,
          "throwingLine": 102,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.GeneratedMonitorTest.Outcome.toString()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(CaseFormat.UPPER_CAMEL == null)",
          "symbolicPathConjunction": "(CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, name()))",
          "backwardsPathConjunction": "(CaseFormat.UPPER_CAMEL == null)",
          "z3Inputs": "[CaseFormat_UPPER_CAMEL0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nCaseFormat_UPPER_CAMEL0_isNull = Bool('CaseFormat_UPPER_CAMEL0_isNull')\n\nconstraints = [\n  CaseFormat_UPPER_CAMEL0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 180,
          "throwingLine": 181,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/AggregateFuture.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AggregateFuture.RunningState.run()",
          "exception": "throw new IllegalStateException(String.valueOf(\"Less than 0 remaining futures\"))",
          "pathCojunction": "(!(--remaining >= 0))",
          "symbolicPathConjunction": "((decrementRemainingAndGet()) && (checkState(newRemaining >= 0, \"Less than 0 remaining futures\")))",
          "backwardsPathConjunction": "(!(--remaining >= 0))",
          "simplifiedPathConjunction": "remaining < 0",
          "z3Inputs": "[remaining0 = -1]\n[remaining0 = -2]\n[remaining0 = -3]\n[remaining0 = -4]\n[remaining0 = -5]\n[remaining0 = -6]\n[remaining0 = -7]\n[remaining0 = -8]\n[remaining0 = -9]\n[remaining0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nremaining0 = Int('remaining0')\n\nconstraints = [\n  Not(--remaining0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nremaining = Symbol('remaining', integer=True)\npath_conjunction = (~((GreaterThan(--remaining, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 105,
          "throwingLine": 106,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/DescendingImmutableSortedSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.DescendingImmutableSortedSet.lower(E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(element == null)",
          "symbolicPathConjunction": "(checkNotNull(e))",
          "backwardsPathConjunction": "(element == null)",
          "simplifiedPathConjunction": "element == null",
          "z3Inputs": "[element0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  element0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nnull = Symbol('null')\npath_conjunction = (Eq(element, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 86,
          "throwingLine": 87,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/PeekingIteratorTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.PeekingIteratorTest.ThrowsAtEndIterator.next()",
          "exception": "throw new ThrowsAtEndException();",
          "pathCojunction": "(!(iterator.hasNext()))",
          "symbolicPathConjunction": "(!iterator.hasNext())",
          "backwardsPathConjunction": "(!(iterator.hasNext()))",
          "simplifiedPathConjunction": "!iterator.hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(iterator0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\niterator_hasNext = Symbol('iterator_hasNext')\npath_conjunction = (~(iterator_hasNext))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 202,
          "throwingLine": 205,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Maps.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Maps.newHashMapWithExpectedSize(int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedSize)",
          "pathCojunction": "(expectedSize < 3) && (expectedSize < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedSize < 3) && (expectedSize < 0)",
          "simplifiedPathConjunction": "expectedSize < 0",
          "z3Inputs": "[expectedSize0 = -1]\n[expectedSize0 = -2]\n[expectedSize0 = -3]\n[expectedSize0 = -4]\n[expectedSize0 = -5]\n[expectedSize0 = -6]\n[expectedSize0 = -7]\n[expectedSize0 = -8]\n[expectedSize0 = -9]\n[expectedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedSize0 = Int('expectedSize0')\n\nconstraints = [\n  And(expectedSize0 < 3, expectedSize0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedSize = Symbol('expectedSize', integer=True)\npath_conjunction = ((StrictLessThan(expectedSize, 3)) & (StrictLessThan(expectedSize, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.newLinkedHashMapWithExpectedSize(int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedSize)",
          "pathCojunction": "(expectedSize < 3) && (expectedSize < 0)",
          "symbolicPathConjunction": "((expectedSize < 3) && (checkNonnegative(expectedSize, \"expectedSize\")))",
          "backwardsPathConjunction": "(expectedSize < 3) && (expectedSize < 0)",
          "simplifiedPathConjunction": "expectedSize < 0",
          "z3Inputs": "[expectedSize0 = -1]\n[expectedSize0 = -2]\n[expectedSize0 = -3]\n[expectedSize0 = -4]\n[expectedSize0 = -5]\n[expectedSize0 = -6]\n[expectedSize0 = -7]\n[expectedSize0 = -8]\n[expectedSize0 = -9]\n[expectedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedSize0 = Int('expectedSize0')\n\nconstraints = [\n  And(expectedSize0 < 3, expectedSize0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedSize = Symbol('expectedSize', integer=True)\npath_conjunction = ((StrictLessThan(expectedSize, 3)) & (StrictLessThan(expectedSize, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 249,
          "throwingLine": 250,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.newEnumMap(java.lang.Class<K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(type == null)",
          "symbolicPathConjunction": "(checkNotNull(type))",
          "backwardsPathConjunction": "(type == null)",
          "simplifiedPathConjunction": "null == type",
          "z3Inputs": "[type0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\n\nconstraints = [\n  type0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nnull = Symbol('null')\npath_conjunction = (Eq(type, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 341,
          "throwingLine": 342,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>, com.google.common.base.Equivalence<? super V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(valueEquivalence == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(valueEquivalence))",
          "backwardsPathConjunction": "(valueEquivalence == null)",
          "z3Inputs": "[valueEquivalence0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalueEquivalence0_isNull = Bool('valueEquivalence0_isNull')\n\nconstraints = [\n  valueEquivalence0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(valueEquivalence, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 417,
          "throwingLine": 418,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(left == null)",
          "symbolicPathConjunction": "(checkNotNull(left))",
          "backwardsPathConjunction": "(left == null)",
          "z3Inputs": "[left0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\n\nconstraints = [\n  left0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n? = Symbol('?')\nnull = Symbol('null')\npath_conjunction = (Eq(left, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 607,
          "throwingLine": 608,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(left == null)) && (right == null)",
          "symbolicPathConjunction": "(checkNotNull(left)) && (checkNotNull(right))",
          "backwardsPathConjunction": "(!(left == null)) && (right == null)",
          "z3Inputs": "[left0_isNull = False, right0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\nright0_isNull = Bool('right0_isNull')\n\nconstraints = [\n  And(Not(left0_isNull), right0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n? = Symbol('?')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(left, null)))) & (Eq(right, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 607,
          "throwingLine": 609,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-78da3705-f73a-4f7e-99d4-1494e455fc99.add(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 989,
          "throwingLine": 990,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-1f01af5c-d11d-4c80-a021-335093a8f366.addAll(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 994,
          "throwingLine": 995,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-1693519b-e40a-4174-8b23-5b6cd81bf140.add(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1008,
          "throwingLine": 1009,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-34d32617-9f63-4bf5-8270-50df02c6e857.addAll(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1013,
          "throwingLine": 1014,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-32de905b-14a2-497f-8e8f-bb49935906ec.add(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1043,
          "throwingLine": 1044,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-f8d5ad2e-669d-4607-a806-fd6db9ad5806.addAll(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1048,
          "throwingLine": 1049,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.toMap(java.lang.Iterable<K>, com.google.common.base.Function<? super K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(valueFunction == null)",
          "symbolicPathConjunction": "(toMap(keys.iterator(), valueFunction))",
          "backwardsPathConjunction": "(valueFunction == null)",
          "z3Inputs": "[valueFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalueFunction0_isNull = Bool('valueFunction0_isNull')\n\nconstraints = [\n  valueFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(valueFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1111,
          "throwingLine": 1112,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.toMap(java.util.Iterator<K>, com.google.common.base.Function<? super K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(valueFunction == null)",
          "symbolicPathConjunction": "(checkNotNull(valueFunction))",
          "backwardsPathConjunction": "(valueFunction == null)",
          "z3Inputs": "[valueFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalueFunction0_isNull = Bool('valueFunction0_isNull')\n\nconstraints = [\n  valueFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(valueFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1132,
          "throwingLine": 1133,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.UnmodifiableBiMap.forcePut(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1493,
          "throwingLine": 1494,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-92f3b93a-0f4d-48ac-85a0-a8a3169fe096.apply(java.util.Map.Entry<K, V1>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(transformer == null)) && (entry == null)",
          "symbolicPathConjunction": "((checkNotNull(transformer)) && (checkNotNull(entry)))",
          "backwardsPathConjunction": "(!(transformer == null)) && (entry == null)",
          "z3Inputs": "[transformer0_isNull = False, entry0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntransformer0_isNull = Bool('transformer0_isNull')\nentry0_isNull = Bool('entry0_isNull')\n\nconstraints = [\n  And(Not(transformer0_isNull), entry0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV1> = Symbol('V1>')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(transformer, null)))) & (Eq(entry, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1926,
          "throwingLine": 1927,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.Anonymous-92f3b93a-0f4d-48ac-85a0-a8a3169fe096.apply(java.util.Map.Entry<K, V1>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(transformer == null)",
          "symbolicPathConjunction": "(checkNotNull(transformer))",
          "backwardsPathConjunction": "(transformer == null)",
          "z3Inputs": "[transformer0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntransformer0_isNull = Bool('transformer0_isNull')\n\nconstraints = [\n  transformer0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(transformer, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1926,
          "throwingLine": 1927,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterKeys(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(keyPredicate == null)) && (unfiltered == null)",
          "symbolicPathConjunction": "(checkNotNull(keyPredicate)) && (filterEntries(unfiltered, Maps.<K>keyPredicateOnEntries(keyPredicate)))",
          "backwardsPathConjunction": "(!(keyPredicate == null)) && (unfiltered == null)",
          "z3Inputs": "[keyPredicate0_isNull = False, unfiltered0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyPredicate0_isNull = Bool('keyPredicate0_isNull')\nunfiltered0_isNull = Bool('unfiltered0_isNull')\n\nconstraints = [\n  And(Not(keyPredicate0_isNull), unfiltered0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(keyPredicate, null)))) & (Eq(unfiltered, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2318,
          "throwingLine": 2320,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterKeys(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyPredicate == null)",
          "symbolicPathConjunction": "(checkNotNull(keyPredicate))",
          "backwardsPathConjunction": "(keyPredicate == null)",
          "z3Inputs": "[keyPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyPredicate0_isNull = Bool('keyPredicate0_isNull')\n\nconstraints = [\n  keyPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2318,
          "throwingLine": 2319,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterValues(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unfiltered == null)",
          "symbolicPathConjunction": "(filterEntries(unfiltered, Maps.<V>valuePredicateOnEntries(valuePredicate)))",
          "backwardsPathConjunction": "(unfiltered == null)",
          "z3Inputs": "[unfiltered0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\n\nconstraints = [\n  unfiltered0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(unfiltered, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2468,
          "throwingLine": 2469,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterEntries(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(Maps.filterSortedIgnoreNavigable(unfiltered, predicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2548,
          "throwingLine": 2549,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterEntries(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(checkNotNull(entryPredicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2594,
          "throwingLine": 2595,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unfiltered == null)",
          "symbolicPathConjunction": "(checkNotNull(unfiltered))",
          "backwardsPathConjunction": "(unfiltered == null)",
          "z3Inputs": "[unfiltered0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\n\nconstraints = [\n  unfiltered0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(unfiltered, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2630,
          "throwingLine": 2631,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(unfiltered == null)) && (entryPredicate == null)",
          "symbolicPathConjunction": "(checkNotNull(unfiltered)) && (checkNotNull(entryPredicate))",
          "backwardsPathConjunction": "(!(unfiltered == null)) && (entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True, unfiltered0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunfiltered0_isNull = Bool('unfiltered0_isNull')\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  And(Not(unfiltered0_isNull), entryPredicate0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(unfiltered, null)))) & (Eq(entryPredicate, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2630,
          "throwingLine": 2632,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.AbstractFilteredMap.put(K, V)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(apply(key, value)))",
          "symbolicPathConjunction": "(checkArgument(apply(key, value)))",
          "backwardsPathConjunction": "(!(apply(key, value)))",
          "simplifiedPathConjunction": "!apply(key, value)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(apply(key0, value0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n_apply = Symbol('_apply')\npath_conjunction = (~(_apply))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 2666,
          "throwingLine": 2667,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.FilteredEntryMap.EntrySet.Anonymous-40aae5dc-5052-4176-a172-658240a224b7.setValue(V)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(apply(getKey(), newValue)))",
          "symbolicPathConjunction": "(checkArgument(apply(getKey(), newValue)))",
          "backwardsPathConjunction": "(!(apply(getKey(), newValue)))",
          "simplifiedPathConjunction": "!apply(getKey(), newValue)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(apply(getKey(), newValue0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnewValue = Symbol('newValue')\n_apply = Symbol('_apply')\n_getKey = Symbol('_getKey')\npath_conjunction = (~(_apply))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 2819,
          "throwingLine": 2820,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.FilteredEntryNavigableMap.descendingMap()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(filterEntries(unfiltered.descendingMap(), entryPredicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3110,
          "throwingLine": 3111,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.FilteredEntryNavigableMap.subMap(K, boolean, K, boolean)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(filterEntries(unfiltered.subMap(fromKey, fromInclusive, toKey, toInclusive), entryPredicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromInclusive0 = Bool('fromInclusive0')\ntoInclusive0 = Bool('toInclusive0')\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3116,
          "throwingLine": 3117,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.FilteredEntryNavigableMap.headMap(K, boolean)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(filterEntries(unfiltered.headMap(toKey, inclusive), entryPredicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninclusive0 = Bool('inclusive0')\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3122,
          "throwingLine": 3123,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.FilteredEntryNavigableMap.tailMap(K, boolean)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(entryPredicate == null)",
          "symbolicPathConjunction": "(filterEntries(unfiltered.tailMap(fromKey, inclusive), entryPredicate))",
          "backwardsPathConjunction": "(entryPredicate == null)",
          "z3Inputs": "[entryPredicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninclusive0 = Bool('inclusive0')\nentryPredicate0_isNull = Bool('entryPredicate0_isNull')\n\nconstraints = [\n  entryPredicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(entryPredicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3127,
          "throwingLine": 3128,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.FilteredEntryBiMap.forcePut(K, V)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(apply(key, value)))",
          "symbolicPathConjunction": "(checkArgument(apply(key, value)))",
          "backwardsPathConjunction": "(!(apply(key, value)))",
          "simplifiedPathConjunction": "!apply(key, value)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(apply(key0, value0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n_apply = Symbol('_apply')\npath_conjunction = (~(_apply))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 3173,
          "throwingLine": 3174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.unmodifiableNavigableMap(java.util.NavigableMap<K, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(map == null)",
          "symbolicPathConjunction": "(checkNotNull(map))",
          "backwardsPathConjunction": "(map == null)",
          "z3Inputs": "[map0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmap0_isNull = Bool('map0_isNull')\n\nconstraints = [\n  map0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(map, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3202,
          "throwingLine": 3203,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.UnmodifiableNavigableMap.pollFirstEntry()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 3287,
          "throwingLine": 3288,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.Maps.UnmodifiableNavigableMap.pollLastEntry()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 3292,
          "throwingLine": 3293,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/MapMakerTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MapMakerTest.ComputingTest.Anonymous-34afcf6f-2a97-4a22-a312-4f3b75b697e5.apply(java.lang.Object)",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 323,
          "throwingLine": 324,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ArrayTable.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.ArrayMap.remove(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 274,
          "throwingLine": 275,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.ArrayMap.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 279,
          "throwingLine": 280,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.at(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(checkElementIndex(rowIndex, rowList.size())) && (checkElementIndex(columnIndex, columnList.size()))",
          "backwardsPathConjunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowIndex >= 0 && (columnIndex >= columnList.size() || columnIndex < 0) && rowIndex < rowList.size()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  And(Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size())), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\ncolumnIndex = Symbol('columnIndex', integer=True)\nrowList_size = Symbol('rowList_size')\ncolumnList_size = Symbol('columnList_size')\npath_conjunction = ((~(((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size))))) & ((StrictLessThan(columnIndex, 0)) | (GreaterThan(columnIndex, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 314,
          "throwingLine": 317,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.at(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(checkElementIndex(rowIndex, rowList.size()))",
          "backwardsPathConjunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "rowIndex >= rowList.size() || rowIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  Or(rowIndex0 < 0, rowIndex0 >= rowList.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\nrowList_size = Symbol('rowList_size')\npath_conjunction = ((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 314,
          "throwingLine": 316,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.set(int, int, V)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(checkElementIndex(rowIndex, rowList.size()))",
          "backwardsPathConjunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "rowIndex >= rowList.size() || rowIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  Or(rowIndex0 < 0, rowIndex0 >= rowList.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\nrowList_size = Symbol('rowList_size')\npath_conjunction = ((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 336,
          "throwingLine": 338,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.set(int, int, V)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(checkElementIndex(rowIndex, rowList.size())) && (checkElementIndex(columnIndex, columnList.size()))",
          "backwardsPathConjunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowIndex >= 0 && (columnIndex >= columnList.size() || columnIndex < 0) && rowIndex < rowList.size()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  And(Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size())), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\ncolumnIndex = Symbol('columnIndex', integer=True)\nrowList_size = Symbol('rowList_size')\ncolumnList_size = Symbol('columnList_size')\npath_conjunction = ((~(((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size))))) & ((StrictLessThan(columnIndex, 0)) | (GreaterThan(columnIndex, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 336,
          "throwingLine": 339,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 375,
          "throwingLine": 376,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.get(java.lang.Object, java.lang.Object)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex == null || columnIndex == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (at(rowIndex, columnIndex))",
          "backwardsPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowKeyToIndex.get(rowKey) >= 0 && (columnKeyToIndex.get(columnKey) >= columnList.size() || columnKeyToIndex.get(columnKey) < 0) && rowKeyToIndex.get(rowKey) < rowList.size() && columnKeyToIndex.get(columnKey) != null && null != rowKeyToIndex.get(rowKey)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowIndex0_isNull = Bool('rowIndex0_isNull')\ncolumnIndex0_isNull = Bool('columnIndex0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(And(Not(Or(rowIndex0_isNull, columnIndex0_isNull)), Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\ncolumnKeyToIndex = Symbol('columnKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\ncolumnKeyToIndex_get = Symbol('columnKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\ncolumnList_size = Symbol('columnList_size')\nnull = Symbol('null')\npath_conjunction = (((~(((Eq(rowKeyToIndex_get, null)) | (Eq(columnKeyToIndex_get, null))))) & (~(((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size)))))) & ((StrictLessThan(columnKeyToIndex_get, 0)) | (GreaterThan(columnKeyToIndex_get, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 429,
          "throwingLine": 432,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.get(java.lang.Object, java.lang.Object)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex == null || columnIndex == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (at(rowIndex, columnIndex))",
          "backwardsPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "(rowKeyToIndex.get(rowKey) >= rowList.size() || rowKeyToIndex.get(rowKey) < 0) && columnKeyToIndex.get(columnKey) != null && null != rowKeyToIndex.get(rowKey)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowIndex0_isNull = Bool('rowIndex0_isNull')\ncolumnIndex0_isNull = Bool('columnIndex0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(Not(Or(rowIndex0_isNull, columnIndex0_isNull)), Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\ncolumnKeyToIndex = Symbol('columnKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\ncolumnKeyToIndex_get = Symbol('columnKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\nnull = Symbol('null')\npath_conjunction = ((~(((Eq(rowKeyToIndex_get, null)) | (Eq(columnKeyToIndex_get, null))))) & ((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 429,
          "throwingLine": 432,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.put(R, C, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(rowKey == null)) && (columnKey == null)",
          "symbolicPathConjunction": "(checkNotNull(rowKey)) && (checkNotNull(columnKey))",
          "backwardsPathConjunction": "(!(rowKey == null)) && (columnKey == null)",
          "simplifiedPathConjunction": "columnKey == null && null != rowKey",
          "z3Inputs": "[columnKey0_isNull = True, rowKey0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowKey0_isNull = Bool('rowKey0_isNull')\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  And(Not(rowKey0_isNull), columnKey0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(rowKey, null)))) & (Eq(columnKey, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 450,
          "throwingLine": 452,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.put(R, C, V)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowKey == null)) && (!(columnKey == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(checkNotNull(rowKey)) && (checkNotNull(columnKey)) && (set(rowIndex, columnIndex, value))",
          "backwardsPathConjunction": "(!(rowKey == null)) && (!(columnKey == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowKeyToIndex.get(rowKey) >= 0 && (columnKeyToIndex.get(columnKey) >= columnList.size() || columnKeyToIndex.get(columnKey) < 0) && rowKeyToIndex.get(rowKey) < rowList.size() && columnKey != null && null != rowKey",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowKey0_isNull = Bool('rowKey0_isNull')\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(And(And(Not(rowKey0_isNull), Not(columnKey0_isNull)), Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\ncolumnKeyToIndex = Symbol('columnKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\ncolumnKeyToIndex_get = Symbol('columnKeyToIndex_get')\ncolumnList_size = Symbol('columnList_size')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(rowKey, null)))) & (~((Eq(columnKey, null))))) & (~(((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size)))))) & ((StrictLessThan(columnKeyToIndex_get, 0)) | (GreaterThan(columnKeyToIndex_get, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 450,
          "throwingLine": 457,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.put(R, C, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(rowKey == null)",
          "symbolicPathConjunction": "(checkNotNull(rowKey))",
          "backwardsPathConjunction": "(rowKey == null)",
          "simplifiedPathConjunction": "null == rowKey",
          "z3Inputs": "[rowKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowKey0_isNull = Bool('rowKey0_isNull')\n\nconstraints = [\n  rowKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\nnull = Symbol('null')\npath_conjunction = (Eq(rowKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 450,
          "throwingLine": 451,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.put(R, C, V)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(!(rowKey == null)) && (!(columnKey == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(checkNotNull(rowKey)) && (checkNotNull(columnKey)) && (set(rowIndex, columnIndex, value))",
          "backwardsPathConjunction": "(!(rowKey == null)) && (!(columnKey == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "(rowKeyToIndex.get(rowKey) >= rowList.size() || rowKeyToIndex.get(rowKey) < 0) && columnKey != null && null != rowKey",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowKey0_isNull = Bool('rowKey0_isNull')\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(And(Not(rowKey0_isNull), Not(columnKey0_isNull)), Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(rowKey, null)))) & (~((Eq(columnKey, null))))) & ((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 450,
          "throwingLine": 457,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.remove(java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 489,
          "throwingLine": 490,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.erase(java.lang.Object, java.lang.Object)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex == null || columnIndex == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (set(rowIndex, columnIndex, null))",
          "backwardsPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowKeyToIndex.get(rowKey) >= 0 && (columnKeyToIndex.get(columnKey) >= columnList.size() || columnKeyToIndex.get(columnKey) < 0) && rowKeyToIndex.get(rowKey) < rowList.size() && columnKeyToIndex.get(columnKey) != null && null != rowKeyToIndex.get(rowKey)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowIndex0_isNull = Bool('rowIndex0_isNull')\ncolumnIndex0_isNull = Bool('columnIndex0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(And(Not(Or(rowIndex0_isNull, columnIndex0_isNull)), Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\ncolumnKeyToIndex = Symbol('columnKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\ncolumnKeyToIndex_get = Symbol('columnKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\ncolumnList_size = Symbol('columnList_size')\nnull = Symbol('null')\npath_conjunction = (((~(((Eq(rowKeyToIndex_get, null)) | (Eq(columnKeyToIndex_get, null))))) & (~(((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size)))))) & ((StrictLessThan(columnKeyToIndex_get, 0)) | (GreaterThan(columnKeyToIndex_get, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 506,
          "throwingLine": 512,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.erase(java.lang.Object, java.lang.Object)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex == null || columnIndex == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (set(rowIndex, columnIndex, null))",
          "backwardsPathConjunction": "(!(rowIndex == null || columnIndex == null)) && (rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "(rowKeyToIndex.get(rowKey) >= rowList.size() || rowKeyToIndex.get(rowKey) < 0) && columnKeyToIndex.get(columnKey) != null && null != rowKeyToIndex.get(rowKey)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\nrowIndex0_isNull = Bool('rowIndex0_isNull')\ncolumnIndex0_isNull = Bool('columnIndex0_isNull')\n\nconstraints = [\n  rowIndex0 == rowKeyToIndex0.get(rowKey0),\n  columnIndex0 == columnKeyToIndex0.get(columnKey0),\n  And(Not(Or(rowIndex0_isNull, columnIndex0_isNull)), Or(rowIndex0 < 0, rowIndex0 >= rowList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\ncolumnKey = Symbol('columnKey')\nrowKeyToIndex = Symbol('rowKeyToIndex')\ncolumnKeyToIndex = Symbol('columnKeyToIndex')\nrowKeyToIndex_get = Symbol('rowKeyToIndex_get')\ncolumnKeyToIndex_get = Symbol('columnKeyToIndex_get')\nrowList_size = Symbol('rowList_size')\nnull = Symbol('null')\npath_conjunction = ((~(((Eq(rowKeyToIndex_get, null)) | (Eq(columnKeyToIndex_get, null))))) & ((StrictLessThan(rowKeyToIndex_get, 0)) | (GreaterThan(rowKeyToIndex_get, rowList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 506,
          "throwingLine": 512,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.Anonymous-785a20b1-d224-46c0-9bdf-be7fa01582b5.getValue()",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(columnIndex, columnList.size(), \"index\"))",
          "pathCojunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "symbolicPathConjunction": "(at(rowIndex, columnIndex))",
          "backwardsPathConjunction": "(!(rowIndex < 0 || rowIndex >= rowList.size())) && (columnIndex < 0 || columnIndex >= columnList.size())",
          "simplifiedPathConjunction": "rowIndex >= 0 && (columnIndex >= columnList.size() || columnIndex < 0) && rowIndex < rowList.size()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  And(Not(Or(rowIndex0 < 0, rowIndex0 >= rowList.size())), Or(columnIndex0 < 0, columnIndex0 >= columnList.size()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\ncolumnIndex = Symbol('columnIndex', integer=True)\nrowList_size = Symbol('rowList_size')\ncolumnList_size = Symbol('columnList_size')\npath_conjunction = ((~(((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size))))) & ((StrictLessThan(columnIndex, 0)) | (GreaterThan(columnIndex, columnList_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 560,
          "throwingLine": 561,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.Anonymous-785a20b1-d224-46c0-9bdf-be7fa01582b5.getValue()",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(rowIndex, rowList.size(), \"index\"))",
          "pathCojunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "symbolicPathConjunction": "(at(rowIndex, columnIndex))",
          "backwardsPathConjunction": "(rowIndex < 0 || rowIndex >= rowList.size())",
          "simplifiedPathConjunction": "rowIndex >= rowList.size() || rowIndex < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowIndex0 = Int('rowIndex0')\ncolumnIndex0 = Int('columnIndex0')\n\nconstraints = [\n  Or(rowIndex0 < 0, rowIndex0 >= rowList.size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowIndex = Symbol('rowIndex', integer=True)\nrowList_size = Symbol('rowList_size')\npath_conjunction = ((StrictLessThan(rowIndex, 0)) | (GreaterThan(rowIndex, rowList_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 560,
          "throwingLine": 561,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.column(C)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(columnKey == null)",
          "symbolicPathConjunction": "(checkNotNull(columnKey))",
          "backwardsPathConjunction": "(columnKey == null)",
          "simplifiedPathConjunction": "columnKey == null",
          "z3Inputs": "[columnKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncolumnKey0_isNull = Bool('columnKey0_isNull')\n\nconstraints = [\n  columnKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncolumnKey = Symbol('columnKey')\nnull = Symbol('null')\npath_conjunction = (Eq(columnKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 581,
          "throwingLine": 582,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.ColumnMap.put(C, java.util.Map<R, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 652,
          "throwingLine": 653,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.row(R)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(rowKey == null)",
          "symbolicPathConjunction": "(checkNotNull(rowKey))",
          "backwardsPathConjunction": "(rowKey == null)",
          "simplifiedPathConjunction": "null == rowKey",
          "z3Inputs": "[rowKey0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrowKey0_isNull = Bool('rowKey0_isNull')\n\nconstraints = [\n  rowKey0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrowKey = Symbol('rowKey')\nnull = Symbol('null')\npath_conjunction = (Eq(rowKey, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 671,
          "throwingLine": 672,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ArrayTable.RowMap.put(R, java.util.Map<C, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 742,
          "throwingLine": 743,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/java/util/super/java/util/concurrent/TimeUnit.java",
      "methods": [
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.convert(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceDuration0 = Int('sourceDuration0')\n\nconstraints = [\n  sourceDuration0 >= -9223372036854775808, sourceDuration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toNanos(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMicros(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMillis(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toSeconds(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMinutes(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 189,
          "throwingLine": 190,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toHours(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 193,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toDays(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 198,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toNanos(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMicros(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMillis(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toSeconds(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMinutes(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 189,
          "throwingLine": 190,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toHours(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 193,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toDays(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 198,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.convert(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceDuration0 = Int('sourceDuration0')\n\nconstraints = [\n  sourceDuration0 >= -9223372036854775808, sourceDuration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toNanos(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMicros(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMillis(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toSeconds(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMinutes(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 189,
          "throwingLine": 190,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toHours(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 193,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toDays(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 198,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.convert(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceDuration0 = Int('sourceDuration0')\n\nconstraints = [\n  sourceDuration0 >= -9223372036854775808, sourceDuration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toNanos(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMicros(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMillis(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toSeconds(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMinutes(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 189,
          "throwingLine": 190,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toHours(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 193,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toDays(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 198,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.convert(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceDuration0 = Int('sourceDuration0')\n\nconstraints = [\n  sourceDuration0 >= -9223372036854775808, sourceDuration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toNanos(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMicros(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMillis(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toSeconds(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMinutes(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 189,
          "throwingLine": 190,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toHours(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 193,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toDays(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 198,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.convert(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceDuration0 = Int('sourceDuration0')\n\nconstraints = [\n  sourceDuration0 >= -9223372036854775808, sourceDuration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toNanos(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMicros(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMillis(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toSeconds(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMinutes(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 189,
          "throwingLine": 190,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toHours(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 193,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toDays(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 198,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.convert(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceDuration0 = Int('sourceDuration0')\n\nconstraints = [\n  sourceDuration0 >= -9223372036854775808, sourceDuration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toNanos(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMicros(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMillis(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toSeconds(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMinutes(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 189,
          "throwingLine": 190,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toHours(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 193,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toDays(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 198,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.convert(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceDuration0 = Int('sourceDuration0')\n\nconstraints = [\n  sourceDuration0 >= -9223372036854775808, sourceDuration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toNanos(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMicros(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMillis(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 181,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toSeconds(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toMinutes(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 189,
          "throwingLine": 190,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toHours(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 193,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.toDays(long)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nduration0 = Int('duration0')\n\nconstraints = [\n  duration0 >= -9223372036854775808, duration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 198,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "java.util.concurrent.TimeUnit.convert(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceDuration0 = Int('sourceDuration0')\n\nconstraints = [\n  sourceDuration0 >= -9223372036854775808, sourceDuration0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/benchmark/com/google/common/base/LazyStackTraceBenchmark.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.LazyStackTraceBenchmark.doBefore()",
          "exception": "throw new SkipThisScenarioException();",
          "pathCojunction": "(recursionCount < 0)",
          "symbolicPathConjunction": "(recursionCount < 0)",
          "backwardsPathConjunction": "(recursionCount < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrecursionCount0 = Int('recursionCount0')\n\nconstraints = [\n  recursionCount0 == stackDepth - new Throwable().getStackTrace().length - 1,\n  recursionCount0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 76,
          "throwingLine": 79,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ComparisonChainTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ComparisonChainTest.DontCompareMe.compareTo(com.google.common.collect.ComparisonChainTest.DontCompareMe)",
          "exception": "throw new AssertionFailedError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 35,
          "throwingLine": 36,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.BaseEncoding.Anonymous-f51d9250-288f-4473-8ac5-fd864db386f2.append(java.lang.CharSequence, int, int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nchars0 = String('chars0')\noff0 = Int('off0')\nlen0 = Int('len0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 768,
          "throwingLine": 769,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.BaseEncoding.Anonymous-78ddaf90-27f6-4a9a-8158-da45eb16eee7.append(java.lang.CharSequence)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nchars0 = String('chars0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 773,
          "throwingLine": 774,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.BaseEncoding.SeparatedBaseEncoding.withSeparator(java.lang.String, int)",
          "exception": "throw new UnsupportedOperationException(\"Already have a separator\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nafterEveryChars0 = Int('afterEveryChars0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 832,
          "throwingLine": 833,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ConstrainedBiMapTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ConstrainedBiMapTest.TestConstraint.checkKeyValue(java.lang.String, java.lang.String)",
          "exception": "throw new TestValueException();",
          "pathCojunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "symbolicPathConjunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "backwardsPathConjunction": "(!(TEST_KEY.equals(key))) && (TEST_VALUE.equals(value))",
          "z3Inputs": "[key0 = \"\",\n value0 = \"test\",\n TEST_VALUE0 = \"test\",\n TEST_KEY0 = \"42\"]\n[TEST_KEY0 = \"42\",\n key0 = \"A\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"B\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"C\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"D\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"E\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"F\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"G\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"H\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n[TEST_KEY0 = \"42\",\n key0 = \"I\",\n TEST_VALUE0 = \"test\",\n value0 = \"test\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nTEST_KEY0 = String('TEST_KEY0')\nTEST_VALUE0 = String('TEST_VALUE0')\n\nconstraints = [\n  TEST_KEY0 == StringVal(\"42\"), \n  TEST_VALUE0 == StringVal(\"test\"), \n  And(Not(TEST_KEY0 == key0), TEST_VALUE0 == value0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n\"42\"_equals = Symbol('\"42\"_equals')\n\"test\"_equals = Symbol('\"test\"_equals')\npath_conjunction = ((~(\"42\"_equals)) & \"test\"_equals)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 121,
          "throwingLine": 126,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ConstrainedBiMapTest.TestConstraint.checkKeyValue(java.lang.String, java.lang.String)",
          "exception": "throw new TestKeyException();",
          "pathCojunction": "(TEST_KEY.equals(key))",
          "symbolicPathConjunction": "(TEST_KEY.equals(key))",
          "backwardsPathConjunction": "(TEST_KEY.equals(key))",
          "z3Inputs": "[key0 = \"42\", TEST_KEY0 = \"42\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = String('value0')\nTEST_KEY0 = String('TEST_KEY0')\n\nconstraints = [\n  TEST_KEY0 == StringVal(\"42\"), \n  TEST_KEY0 == key0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\n\"42\"_equals = Symbol('\"42\"_equals')\npath_conjunction = \"42\"_equals\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 121,
          "throwingLine": 123,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/cache/super/com/google/common/cache/CacheBuilderTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToLive_small()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 121,
          "throwingLine": 122,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToLive_small()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 121,
          "throwingLine": 122,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToIdle_small()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 146,
          "throwingLine": 147,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToIdle_small()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterAccess(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 146,
          "throwingLine": 147,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToIdleAndToLive()",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).expireAfterAccess(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 163,
          "throwingLine": 164,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheBuilderTest.testTimeToIdleAndToLive()",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).expireAfterAccess(1, NANOSECONDS).build(identityLoader()))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 163,
          "throwingLine": 164,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/BinaryTreeTraverser.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.BinaryTreeTraverser.inOrderTraversal(T)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(root == null)",
          "symbolicPathConjunction": "(checkNotNull(root))",
          "backwardsPathConjunction": "(root == null)",
          "simplifiedPathConjunction": "null == root",
          "z3Inputs": "[root0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nroot0_isNull = Bool('root0_isNull')\n\nconstraints = [\n  root0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nroot = Symbol('root')\nnull = Symbol('null')\npath_conjunction = (Eq(root, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 85,
          "throwingLine": 86,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/Longs.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Longs.indexOf(long[], long[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 154,
          "throwingLine": 155,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Longs.indexOf(long[], long[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 154,
          "throwingLine": 156,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Longs.min(long...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 204,
          "throwingLine": 205,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Longs.max(long...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 223,
          "throwingLine": 224,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Longs.tryParse(java.lang.String, int)",
          "exception": "throw new IllegalArgumentException(\"radix must be between MIN_RADIX and MAX_RADIX but was \" + radix);",
          "pathCojunction": "(!(checkNotNull(string).isEmpty())) && (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)",
          "symbolicPathConjunction": "(!(checkNotNull(string).isEmpty())) && (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)",
          "backwardsPathConjunction": "(!(checkNotNull(string).isEmpty())) && (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nradix0 = Int('radix0')\nCharacter_MIN_RADIX0 = Int('Character_MIN_RADIX0')\nCharacter_MAX_RADIX0 = Int('Character_MAX_RADIX0')\n\nconstraints = [\n  And(Not(checkNotNull(string0).isEmpty()), Or(radix0 < Character_MIN_RADIX0, radix0 > Character_MAX_RADIX0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 389,
          "throwingLine": 394,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Longs.join(java.lang.String, long...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 507,
          "throwingLine": 508,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Longs.LongArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 637,
          "throwingLine": 638,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Longs.LongArrayAsList.set(int, java.lang.Long)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nelement0 = Int('element0')\n\nconstraints = [\n  element0 >= -9223372036854775808, element0 <= 9223372036854775807, # implicit\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 673,
          "throwingLine": 674,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Longs.LongArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 682,
          "throwingLine": 684,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/TreeRangeSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeSet.rangeContaining(C)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(value == null)",
          "symbolicPathConjunction": "(!(checkNotNull(value)))",
          "backwardsPathConjunction": "(value == null)",
          "simplifiedPathConjunction": "null == value",
          "z3Inputs": "[value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  value0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (Eq(value, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 111,
          "throwingLine": 112,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeSet.encloses(com.google.common.collect.Range<C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(range == null)",
          "symbolicPathConjunction": "(checkNotNull(range))",
          "backwardsPathConjunction": "(range == null)",
          "simplifiedPathConjunction": "null == range",
          "z3Inputs": "[range0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrange0_isNull = Bool('range0_isNull')\n\nconstraints = [\n  range0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrange = Symbol('range')\nnull = Symbol('null')\npath_conjunction = (Eq(range, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 123,
          "throwingLine": 124,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeSet.span()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(firstEntry == null)",
          "symbolicPathConjunction": "(firstEntry == null)",
          "backwardsPathConjunction": "(rangesByLowerBound.firstEntry() == null)",
          "simplifiedPathConjunction": "null == rangesByLowerBound.firstEntry()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfirstEntry0_isNull = Bool('firstEntry0_isNull')\n\nconstraints = [\n  com.google.common.collect.Range < C >> firstEntry0 == rangesByLowerBound0.firstEntry(),\n  com.google.common.collect.Range < C >> lastEntry0 == rangesByLowerBound0.lastEntry(),\n  firstEntry0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrangesByLowerBound = Symbol('rangesByLowerBound')\nrangesByLowerBound_firstEntry = Symbol('rangesByLowerBound_firstEntry')\nnull = Symbol('null')\npath_conjunction = (Eq(rangesByLowerBound_firstEntry, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 139,
          "throwingLine": 143,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeSet.add(com.google.common.collect.Range<C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(rangeToAdd == null)",
          "symbolicPathConjunction": "(checkNotNull(rangeToAdd))",
          "backwardsPathConjunction": "(rangeToAdd == null)",
          "simplifiedPathConjunction": "null == rangeToAdd",
          "z3Inputs": "[rangeToAdd0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrangeToAdd0_isNull = Bool('rangeToAdd0_isNull')\n\nconstraints = [\n  rangeToAdd0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrangeToAdd = Symbol('rangeToAdd')\nnull = Symbol('null')\npath_conjunction = (Eq(rangeToAdd, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 149,
          "throwingLine": 150,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeSet.remove(com.google.common.collect.Range<C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(rangeToRemove == null)",
          "symbolicPathConjunction": "(checkNotNull(rangeToRemove))",
          "backwardsPathConjunction": "(rangeToRemove == null)",
          "simplifiedPathConjunction": "null == rangeToRemove",
          "z3Inputs": "[rangeToRemove0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrangeToRemove0_isNull = Bool('rangeToRemove0_isNull')\n\nconstraints = [\n  rangeToRemove0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrangeToRemove = Symbol('rangeToRemove')\nnull = Symbol('null')\npath_conjunction = (Eq(rangeToRemove, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 196,
          "throwingLine": 197,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeSet.SubRangeSet.encloses(com.google.common.collect.Range<C>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!lowerBound.equals(upperBound) && restriction.encloses(range)) && (range == null)",
          "symbolicPathConjunction": "(restriction.isEmpty()) && (!restriction.isEmpty() && restriction.encloses(range)) && (checkNotNull(range))",
          "backwardsPathConjunction": "(!lowerBound.equals(upperBound) && restriction.encloses(range)) && (range == null)",
          "simplifiedPathConjunction": "restriction.encloses(range) && null == range && !lowerBound.equals(upperBound)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrange0_isNull = Bool('range0_isNull')\n\nconstraints = [\n  And(And(Not(lowerBound0.equals(upperBound0)), restriction0.encloses(range0)), range0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrange = Symbol('range')\nrestriction = Symbol('restriction')\nupperBound = Symbol('upperBound')\nlowerBound = Symbol('lowerBound')\nlowerBound_equals = Symbol('lowerBound_equals')\nrestriction_encloses = Symbol('restriction_encloses')\nnull = Symbol('null')\npath_conjunction = (((~(lowerBound_equals)) & restriction_encloses) & (Eq(range, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 845,
          "throwingLine": 847,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeSet.SubRangeSet.rangeContaining(C)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(value == null)",
          "symbolicPathConjunction": "(!(restriction.contains(value)))",
          "backwardsPathConjunction": "(value == null)",
          "simplifiedPathConjunction": "null == value",
          "z3Inputs": "[value0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  value0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = (Eq(value, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 855,
          "throwingLine": 856,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/CountingInputStream.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.CountingInputStream.reset()",
          "exception": "throw new IOException(\"Mark not set\");",
          "pathCojunction": "(!(!in.markSupported())) && (mark == -1)",
          "symbolicPathConjunction": "(!(!in.markSupported())) && (mark == -1)",
          "backwardsPathConjunction": "(!(!in.markSupported())) && (mark == -1)",
          "simplifiedPathConjunction": "in.markSupported() && mark == -1",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nmark0 = Int('mark0')\n\nconstraints = [\n  And(Not(Not(in.markSupported())), mark0 == -1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nmark = Symbol('mark', integer=True)\nin_markSupported = Symbol('in_markSupported')\npath_conjunction = ((~((~(in_markSupported)))) & (Eq(mark, -1)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 81,
          "throwingLine": 86,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/testing/ClusterException.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.testing.ClusterException.create(java.util.Collection<? extends java.lang.Throwable>)",
          "exception": "throw new IllegalArgumentException(\"Can't create an ExceptionCollection with no exceptions\");",
          "pathCojunction": "(exceptions.size() == 0)",
          "symbolicPathConjunction": "(exceptions.size() == 0)",
          "backwardsPathConjunction": "(exceptions.size() == 0)",
          "simplifiedPathConjunction": "exceptions.size() == 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  exceptions0.size() == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nexceptions_size = Symbol('exceptions_size')\npath_conjunction = (Eq(exceptions_size, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 107,
          "throwingLine": 109,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/PeekingIteratorTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.PeekingIteratorTest.ThrowsAtEndIterator.next()",
          "exception": "throw new ThrowsAtEndException();",
          "pathCojunction": "(!(iterator.hasNext()))",
          "symbolicPathConjunction": "(!iterator.hasNext())",
          "backwardsPathConjunction": "(!(iterator.hasNext()))",
          "simplifiedPathConjunction": "!iterator.hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(iterator0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterator = Symbol('iterator')\niterator_hasNext = Symbol('iterator_hasNext')\npath_conjunction = (~(iterator_hasNext))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 192,
          "throwingLine": 195,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/CacheLoadingTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-7755086c-21c6-482e-85e8-367bc6813bfd.load(java.lang.Object)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 459,
          "throwingLine": 460,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-8efa99a5-795e-4e1a-b4f5-666f3d3b3486.load(java.lang.Object)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 496,
          "throwingLine": 497,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-44da7bd7-bca2-420d-b751-73dae4d6e527.load(java.lang.Object)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 534,
          "throwingLine": 535,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-5982608b-c4e1-48db-b8cc-15d1ab6d2e06.load(java.lang.Object)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 572,
          "throwingLine": 573,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-843e31dc-0b78-435f-b17b-a3d302235aaa.load(java.lang.Object)",
          "exception": "throw new AssertionError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 829,
          "throwingLine": 830,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-970e1983-8116-4b81-a893-fe19a9f307c0.call()",
          "exception": "throw callableError;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 902,
          "throwingLine": 903,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-5194ac85-c271-4bca-96cb-51f956a671ef.reload(java.lang.Object, java.lang.Object)",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 939,
          "throwingLine": 940,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-4d4dfd8a-903b-468e-ac75-0c613c0ebe5d.reload(java.lang.Object, java.lang.Object)",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1261,
          "throwingLine": 1262,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-bab71f94-8fab-4cf8-8b20-aaeb51a00a8a.reload(java.lang.Object, java.lang.Object)",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1533,
          "throwingLine": 1534,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-e1e390e1-1ba9-4d5b-a198-70b3284f831f.load(java.lang.Integer)",
          "exception": "throw e;",
          "pathCojunction": "(value++ == 0)",
          "symbolicPathConjunction": "(count.getAndIncrement()) && (count.getAndIncrement() == 0)",
          "backwardsPathConjunction": "(value++ == 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = Int('key0')\nvalue0 = Int('value0')\n\nconstraints = [\n  value0++ == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value', integer=True)\npath_conjunction = (Eq(value++, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 1707,
          "throwingLine": 1709,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-8b7164ed-9be2-40a7-bf1a-aefc81bfeb99.load(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0)",
          "symbolicPathConjunction": "(callCount.incrementAndGet()) && (startSignal.await())",
          "backwardsPathConjunction": "(count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Int('value0')\ncount0 = Int('count0')\n\nconstraints = [\n  count0 > 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictGreaterThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 1946,
          "throwingLine": 1948,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-7ff32240-c119-4e96-b6e6-41d42a184e00.load(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0)",
          "symbolicPathConjunction": "(callCount.incrementAndGet()) && (startSignal.await())",
          "backwardsPathConjunction": "(count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Int('value0')\ncount0 = Int('count0')\n\nconstraints = [\n  count0 > 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictGreaterThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 1975,
          "throwingLine": 1977,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-b1885598-85ce-43d7-b8c0-72371f9dae5f.load(java.lang.String)",
          "exception": "throw e;",
          "pathCojunction": "(!(count > 0))",
          "symbolicPathConjunction": "(callCount.incrementAndGet()) && (startSignal.await())",
          "backwardsPathConjunction": "(!(count > 0))",
          "simplifiedPathConjunction": "count <= 0",
          "z3Inputs": "[count0 = 0]\n[count0 = -1]\n[count0 = -2]\n[count0 = -3]\n[count0 = -4]\n[count0 = -5]\n[count0 = -6]\n[count0 = -7]\n[count0 = -8]\n[count0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Int('value0')\ncount0 = Int('count0')\n\nconstraints = [\n  Not(count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (~((StrictGreaterThan(count, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 2013,
          "throwingLine": 2016,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-b1885598-85ce-43d7-b8c0-72371f9dae5f.load(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0)",
          "symbolicPathConjunction": "(callCount.incrementAndGet()) && (startSignal.await())",
          "backwardsPathConjunction": "(count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Int('value0')\ncount0 = Int('count0')\n\nconstraints = [\n  count0 > 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictGreaterThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 2013,
          "throwingLine": 2015,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-976e1800-98bf-470d-850c-3439213085f2.load(java.lang.String)",
          "exception": "throw e;",
          "pathCojunction": "(!(count > 0))",
          "symbolicPathConjunction": "(callCount.incrementAndGet()) && (startSignal.await())",
          "backwardsPathConjunction": "(!(count > 0))",
          "simplifiedPathConjunction": "count <= 0",
          "z3Inputs": "[count0 = 0]\n[count0 = -1]\n[count0 = -2]\n[count0 = -3]\n[count0 = -4]\n[count0 = -5]\n[count0 = -6]\n[count0 = -7]\n[count0 = -8]\n[count0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Int('value0')\ncount0 = Int('count0')\n\nconstraints = [\n  Not(count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (~((StrictGreaterThan(count, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 2054,
          "throwingLine": 2057,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-976e1800-98bf-470d-850c-3439213085f2.load(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0)",
          "symbolicPathConjunction": "(callCount.incrementAndGet()) && (startSignal.await())",
          "backwardsPathConjunction": "(count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Int('value0')\ncount0 = Int('count0')\n\nconstraints = [\n  count0 > 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictGreaterThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 2054,
          "throwingLine": 2056,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-74535dde-d9bb-471f-8290-690dc4b82db3.load(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(getStartedSignal.countDown()) && (letGetFinishSignal.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 2152,
          "throwingLine": 2154,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-0df205c5-0ae1-4172-9322-b99112b2c5e9.load(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(computationStarted.countDown()) && (letGetFinishSignal.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 2211,
          "throwingLine": 2213,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-7e36191c-92c5-4106-888c-9ddd4dc70183.load(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(computationStarted.countDown()) && (letGetFinishSignal.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 2268,
          "throwingLine": 2270,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-7a5d9754-28ce-486a-a0c7-9a878dde38b7.load(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(callCount.incrementAndGet()) && (secondSignal.countDown()) && (computeSignal.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Int('value0')\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 2344,
          "throwingLine": 2347,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-66e99376-f607-493b-8de0-290ff648aa3e.load(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(callCount.incrementAndGet()) && (secondSignal.countDown()) && (computeSignal.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkey0 = String('key0')\nvalue0 = Int('value0')\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 2436,
          "throwingLine": 2439,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheLoadingTest.Anonymous-c37561e8-a851-4564-91df-26c94e4a3810.call()",
          "exception": "throw exception;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 2509,
          "throwingLine": 2510,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/ByteSource.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.ByteSource.EmptyByteSource.asCharSource(java.nio.charset.Charset)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(charset == null)",
          "symbolicPathConjunction": "(checkNotNull(charset))",
          "backwardsPathConjunction": "(charset == null)",
          "simplifiedPathConjunction": "charset == null",
          "z3Inputs": "[charset0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncharset0_isNull = Bool('charset0_isNull')\n\nconstraints = [\n  charset0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncharset = Symbol('charset')\nnull = Symbol('null')\npath_conjunction = (Eq(charset, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 627,
          "throwingLine": 628,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MultimapsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MultimapsTest.Anonymous-d104f2bd-fcdf-4b15-a993-776baf6e991b.getImpl()",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(element >= 0))",
          "symbolicPathConjunction": "(checkArgument(element >= 0))",
          "backwardsPathConjunction": "(!(element >= 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  backing0 == super.getImpl(),\n  Not(element >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~((GreaterThan(element, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 467,
          "throwingLine": 469,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapsTest.Anonymous-5ef3810a-f55b-41cb-8131-6afe09ecc46d.add(java.lang.Integer)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(element >= 0))",
          "symbolicPathConjunction": "(checkArgument(element >= 0))",
          "backwardsPathConjunction": "(!(element >= 0))",
          "simplifiedPathConjunction": "element < 0",
          "z3Inputs": "[element0 = -1]\n[element0 = -2]\n[element0 = -3]\n[element0 = -4]\n[element0 = -5]\n[element0 = -6]\n[element0 = -7]\n[element0 = -8]\n[element0 = -9]\n[element0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0 = Int('element0')\n\nconstraints = [\n  Not(element0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element', integer=True)\npath_conjunction = (~((GreaterThan(element, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 476,
          "throwingLine": 477,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapsTest.SortedSetSupplier.getImpl()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(INT_COMPARATOR == null)",
          "symbolicPathConjunction": "(Sets.newTreeSet(INT_COMPARATOR))",
          "backwardsPathConjunction": "(INT_COMPARATOR == null)",
          "simplifiedPathConjunction": "Ordering.<Integer>natural().reverse()_nullsFirst == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nINT_COMPARATOR0_isNull = Bool('INT_COMPARATOR0_isNull')\n\nconstraints = [\n  INT_COMPARATOR0 == Ordering.<Integer>natural().reverse().nullsFirst(),\n  INT_COMPARATOR0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nOrdering_natural_reverse_nullsFirst = Symbol('Ordering_natural_reverse_nullsFirst')\nOrdering_natural_reverse = Symbol('Ordering_natural_reverse')\nOrdering_natural = Symbol('Ordering_natural')\nnull = Symbol('null')\npath_conjunction = (Eq(Ordering_natural_reverse_nullsFirst, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 581,
          "throwingLine": 582,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableClassToInstanceMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableClassToInstanceMap.getInstance(java.lang.Class<T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(type == null)",
          "symbolicPathConjunction": "(checkNotNull(type))",
          "backwardsPathConjunction": "(type == null)",
          "simplifiedPathConjunction": "null == type",
          "z3Inputs": "[type0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntype0_isNull = Bool('type0_isNull')\n\nconstraints = [\n  type0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntype = Symbol('type')\nnull = Symbol('null')\npath_conjunction = (Eq(type, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableClassToInstanceMap.putInstance(java.lang.Class<T>, T)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 185,
          "throwingLine": 186,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/ForwardingSortedMapTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ForwardingSortedMapTest.StandardImplForwardingSortedMap.subMap(K, K)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"fromKey must be <= toKey\"))",
          "pathCojunction": "(!(unsafeCompare(fromKey, toKey) <= 0))",
          "symbolicPathConjunction": "(checkArgument(unsafeCompare(fromKey, toKey) <= 0, \"fromKey must be <= toKey\"))",
          "backwardsPathConjunction": "(!(unsafeCompare(fromKey, toKey) <= 0))",
          "simplifiedPathConjunction": "unsafeCompare(fromKey, toKey) > 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(unsafeCompare(fromKey0, toKey0) <= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromKey = Symbol('fromKey')\ntoKey = Symbol('toKey')\n_unsafeCompare = Symbol('_unsafeCompare')\npath_conjunction = (~((LessThan(_unsafeCompare, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 109,
          "throwingLine": 110,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread(java.util.concurrent.Future<V>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(executor == null)",
          "symbolicPathConjunction": "(checkNotNull(executor))",
          "backwardsPathConjunction": "(executor == null)",
          "simplifiedPathConjunction": "executor == null",
          "z3Inputs": "[executor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  executor0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = (Eq(executor, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 91,
          "throwingLine": 92,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.JdkFutureAdapters.ListenableFutureAdapter.addListener(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Executor was null.\"))",
          "pathCojunction": "(!(listener == null)) && (exec == null)",
          "symbolicPathConjunction": "(executionList.add(listener, exec))",
          "backwardsPathConjunction": "(!(listener == null)) && (exec == null)",
          "simplifiedPathConjunction": "exec == null && listener != null",
          "z3Inputs": "[exec0_isNull = True, listener0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlistener0_isNull = Bool('listener0_isNull')\nexec0_isNull = Bool('exec0_isNull')\n\nconstraints = [\n  And(Not(listener0_isNull), exec0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlistener = Symbol('listener')\nexec = Symbol('exec')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(listener, null)))) & (Eq(exec, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 147,
          "throwingLine": 148,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/Booleans.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Booleans.indexOf(boolean[], boolean[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 145,
          "throwingLine": 147,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Booleans.indexOf(boolean[], boolean[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 145,
          "throwingLine": 146,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Booleans.join(java.lang.String, boolean...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 250,
          "throwingLine": 251,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Booleans.BooleanArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 382,
          "throwingLine": 383,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Booleans.BooleanArrayAsList.set(int, java.lang.Boolean)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 419,
          "throwingLine": 420,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Booleans.BooleanArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 428,
          "throwingLine": 430,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/Collections2.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.Collections2.FilteredCollection.add(E)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(predicate.apply(element)))",
          "symbolicPathConjunction": "(checkArgument(predicate.apply(element)))",
          "backwardsPathConjunction": "(!(predicate.apply(element)))",
          "simplifiedPathConjunction": "!predicate.apply(element)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(predicate.apply(element0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\npredicate_apply = Symbol('predicate_apply')\npath_conjunction = (~(predicate_apply))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 149,
          "throwingLine": 150,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.Collections2.FilteredCollection.isEmpty()",
          "exception": "throw new NullPointerException(String.valueOf(\"predicate\"))",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(!(Iterables.any(unfiltered, predicate)))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 183,
          "throwingLine": 184,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractScheduledService.Scheduler.newFixedDelaySchedule(long, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unit == null)",
          "symbolicPathConjunction": "(checkNotNull(unit))",
          "backwardsPathConjunction": "(unit == null)",
          "simplifiedPathConjunction": "null == unit",
          "z3Inputs": "[delay0 = 0, initialDelay0 = 0, unit0_isNull = True]\n[delay0 = -1, unit0_isNull = True, initialDelay0 = -1]\n[delay0 = -2, unit0_isNull = True, initialDelay0 = -2]\n[delay0 = -3, unit0_isNull = True, initialDelay0 = -3]\n[delay0 = -4, unit0_isNull = True, initialDelay0 = -4]\n[delay0 = -5, unit0_isNull = True, initialDelay0 = -5]\n[delay0 = -6, unit0_isNull = True, initialDelay0 = -6]\n[delay0 = -7, unit0_isNull = True, initialDelay0 = -7]\n[delay0 = -8, unit0_isNull = True, initialDelay0 = -8]\n[delay0 = -9, unit0_isNull = True, initialDelay0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninitialDelay0 = Int('initialDelay0')\ndelay0 = Int('delay0')\nunit0_isNull = Bool('unit0_isNull')\n\nconstraints = [\n  initialDelay0 >= -9223372036854775808, initialDelay0 <= 9223372036854775807, # implicit\n  delay0 >= -9223372036854775808, delay0 <= 9223372036854775807, # implicit\n  unit0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunit = Symbol('unit')\nnull = Symbol('null')\npath_conjunction = (Eq(unit, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 123,
          "throwingLine": 124,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractScheduledService.Scheduler.newFixedRateSchedule(long, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(unit == null)",
          "symbolicPathConjunction": "(checkNotNull(unit))",
          "backwardsPathConjunction": "(unit == null)",
          "simplifiedPathConjunction": "null == unit",
          "z3Inputs": "[period0 = 0, initialDelay0 = 0, unit0_isNull = True]\n[unit0_isNull = True, period0 = -1, initialDelay0 = -1]\n[unit0_isNull = True, period0 = -2, initialDelay0 = -2]\n[unit0_isNull = True, period0 = -3, initialDelay0 = -3]\n[unit0_isNull = True, period0 = -4, initialDelay0 = -4]\n[unit0_isNull = True, period0 = -5, initialDelay0 = -5]\n[unit0_isNull = True, period0 = -6, initialDelay0 = -6]\n[unit0_isNull = True, period0 = -7, initialDelay0 = -7]\n[unit0_isNull = True, period0 = -8, initialDelay0 = -8]\n[unit0_isNull = True, period0 = -9, initialDelay0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninitialDelay0 = Int('initialDelay0')\nperiod0 = Int('period0')\nunit0_isNull = Bool('unit0_isNull')\n\nconstraints = [\n  initialDelay0 >= -9223372036854775808, initialDelay0 <= 9223372036854775807, # implicit\n  period0 >= -9223372036854775808, period0 <= 9223372036854775807, # implicit\n  unit0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nunit = Symbol('unit')\nnull = Symbol('null')\npath_conjunction = (Eq(unit, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 144,
          "throwingLine": 145,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/FuturesGetCheckedInputs.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesGetCheckedInputs.Anonymous-27c2ad61-81c4-4d8d-a3cf-f384171adf81.get()",
          "exception": "throw RUNTIME_EXCEPTION;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 43,
          "throwingLine": 44,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesGetCheckedInputs.Anonymous-65bc6665-8aee-4600-ae32-f48c4400c57b.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw RUNTIME_EXCEPTION;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 48,
          "throwingLine": 49,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/FluentIterable.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.from(com.google.common.collect.FluentIterable<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 154,
          "throwingLine": 155,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.allMatch(com.google.common.base.Predicate<? super E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(Iterables.all(iterable, predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 309,
          "throwingLine": 310,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.toList()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 483,
          "throwingLine": 484,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.toSortedSet(java.util.Comparator<? super E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(ImmutableSortedSet.copyOf(comparator, iterable))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 531,
          "throwingLine": 532,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.toMap(com.google.common.base.Function<? super E, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(valueFunction == null)",
          "symbolicPathConjunction": "(Maps.toMap(iterable, valueFunction))",
          "backwardsPathConjunction": "(valueFunction == null)",
          "z3Inputs": "[valueFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalueFunction0_isNull = Bool('valueFunction0_isNull')\n\nconstraints = [\n  valueFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(valueFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 565,
          "throwingLine": 566,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.index(com.google.common.base.Function<? super E, K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyFunction == null)",
          "symbolicPathConjunction": "(Multimaps.index(iterable, keyFunction))",
          "backwardsPathConjunction": "(keyFunction == null)",
          "z3Inputs": "[keyFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyFunction0_isNull = Bool('keyFunction0_isNull')\n\nconstraints = [\n  keyFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 593,
          "throwingLine": 594,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.get(int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(Iterables.get(iterable, position))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 703,
          "throwingLine": 704,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/hash/HashingInputStream.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.hash.HashingInputStream.reset()",
          "exception": "throw new IOException(\"reset not supported\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 95,
          "throwingLine": 96,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/SetsTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.SetsTest.testNewTreeSetEmptyWithComparator()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(SOME_COMPARATOR == null)",
          "symbolicPathConjunction": "(Sets.newTreeSet(SOME_COMPARATOR))",
          "backwardsPathConjunction": "(SOME_COMPARATOR == null)",
          "simplifiedPathConjunction": "Collections.reverseOrder() == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nSOME_COMPARATOR0_isNull = Bool('SOME_COMPARATOR0_isNull')\n\nconstraints = [\n  SOME_COMPARATOR0 == Collections.reverseOrder(),\n  SOME_COMPARATOR0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nCollections_reverseOrder = Symbol('Collections_reverseOrder')\nnull = Symbol('null')\npath_conjunction = (Eq(Collections_reverseOrder, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 270,
          "throwingLine": 271,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.SetsTest.testComplementOfEnumSetWithType()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(units == null)",
          "symbolicPathConjunction": "(Sets.complementOf(units, SomeEnum.class))",
          "backwardsPathConjunction": "(EnumSet.of(SomeEnum.B, SomeEnum.D) == null)",
          "simplifiedPathConjunction": "EnumSet.of(SomeEnum.B, SomeEnum.D) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunits0_isNull = Bool('units0_isNull')\n\nconstraints = [\n  units0 == EnumSet.of(SomeEnum.B, SomeEnum.D),\n  units0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nEnumSet_of = Symbol('EnumSet_of')\nnull = Symbol('null')\npath_conjunction = (Eq(EnumSet_of, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 292,
          "throwingLine": 294,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.SetsTest.testComplementOfRegularSetWithType()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(units == null)",
          "symbolicPathConjunction": "(Sets.complementOf(units, SomeEnum.class))",
          "backwardsPathConjunction": "(Sets.newHashSet(SomeEnum.B, SomeEnum.D) == null)",
          "simplifiedPathConjunction": "Sets.newHashSet(SomeEnum.B, SomeEnum.D) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nunits0_isNull = Bool('units0_isNull')\n\nconstraints = [\n  units0 == Sets.newHashSet(SomeEnum.B, SomeEnum.D),\n  units0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nSets_newHashSet = Symbol('Sets_newHashSet')\nnull = Symbol('null')\npath_conjunction = (Eq(Sets_newHashSet, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 304,
          "throwingLine": 306,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.SetsTest.testComplementOfEmptySet()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(noUnits == null)",
          "symbolicPathConjunction": "(Sets.complementOf(noUnits, SomeEnum.class))",
          "backwardsPathConjunction": "(Collections.emptySet() == null)",
          "simplifiedPathConjunction": "Collections.emptySet() == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnoUnits0_isNull = Bool('noUnits0_isNull')\n\nconstraints = [\n  noUnits0 == Collections.emptySet(),\n  noUnits0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nCollections_emptySet = Symbol('Collections_emptySet')\nnull = Symbol('null')\npath_conjunction = (Eq(Collections_emptySet, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 310,
          "throwingLine": 312,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.SetsTest.testComplementOfFullSet()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(allUnits == null)",
          "symbolicPathConjunction": "(Sets.complementOf(allUnits, SomeEnum.class))",
          "backwardsPathConjunction": "(Sets.newHashSet(SomeEnum.values()) == null)",
          "simplifiedPathConjunction": "Sets.newHashSet(SomeEnum.values()) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nallUnits0_isNull = Bool('allUnits0_isNull')\n\nconstraints = [\n  allUnits0 == Sets.newHashSet(SomeEnum.values()),\n  allUnits0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nSets_newHashSet = Symbol('Sets_newHashSet')\nSomeEnum_values = Symbol('SomeEnum_values')\nnull = Symbol('null')\npath_conjunction = (Eq(Sets_newHashSet, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 316,
          "throwingLine": 318,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/AppendableWriter.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.AppendableWriter.write(char[], int, int)",
          "exception": "throw new IOException(\"Cannot write to a closed writer.\");",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(closed)",
          "backwardsPathConjunction": "(closed)",
          "simplifiedPathConjunction": "closed",
          "z3Inputs": "[closed0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nclosed0 = Bool('closed0')\n\nconstraints = [\n  closed0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nclosed = Symbol('closed')\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 55,
          "throwingLine": 56,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.AppendableWriter.flush()",
          "exception": "throw new IOException(\"Cannot write to a closed writer.\");",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(closed)",
          "backwardsPathConjunction": "(closed)",
          "simplifiedPathConjunction": "closed",
          "z3Inputs": "[closed0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nclosed0 = Bool('closed0')\n\nconstraints = [\n  closed0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nclosed = Symbol('closed')\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 62,
          "throwingLine": 63,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.AppendableWriter.write(int)",
          "exception": "throw new IOException(\"Cannot write to a closed writer.\");",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(closed)",
          "backwardsPathConjunction": "(closed)",
          "simplifiedPathConjunction": "closed",
          "z3Inputs": "[closed0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nc0 = Int('c0')\nclosed0 = Bool('closed0')\n\nconstraints = [\n  closed0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nclosed = Symbol('closed')\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 81,
          "throwingLine": 82,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.AppendableWriter.write(java.lang.String)",
          "exception": "throw new IOException(\"Cannot write to a closed writer.\");",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(closed)",
          "backwardsPathConjunction": "(closed)",
          "simplifiedPathConjunction": "closed",
          "z3Inputs": "[closed0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstr0 = String('str0')\nclosed0 = Bool('closed0')\n\nconstraints = [\n  closed0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nclosed = Symbol('closed')\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 86,
          "throwingLine": 87,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.AppendableWriter.write(java.lang.String, int, int)",
          "exception": "throw new IOException(\"Cannot write to a closed writer.\");",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(closed)",
          "backwardsPathConjunction": "(closed)",
          "simplifiedPathConjunction": "closed",
          "z3Inputs": "[closed0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstr0 = String('str0')\noff0 = Int('off0')\nlen0 = Int('len0')\nclosed0 = Bool('closed0')\n\nconstraints = [\n  closed0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nclosed = Symbol('closed')\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 91,
          "throwingLine": 92,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.AppendableWriter.append(char)",
          "exception": "throw new IOException(\"Cannot write to a closed writer.\");",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(closed)",
          "backwardsPathConjunction": "(closed)",
          "simplifiedPathConjunction": "closed",
          "z3Inputs": "[closed0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nclosed0 = Bool('closed0')\n\nconstraints = [\n  closed0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nclosed = Symbol('closed')\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 97,
          "throwingLine": 98,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.AppendableWriter.append(java.lang.CharSequence)",
          "exception": "throw new IOException(\"Cannot write to a closed writer.\");",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(closed)",
          "backwardsPathConjunction": "(closed)",
          "simplifiedPathConjunction": "closed",
          "z3Inputs": "[closed0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncharSeq0 = String('charSeq0')\nclosed0 = Bool('closed0')\n\nconstraints = [\n  closed0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nclosed = Symbol('closed')\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 103,
          "throwingLine": 104,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.AppendableWriter.append(java.lang.CharSequence, int, int)",
          "exception": "throw new IOException(\"Cannot write to a closed writer.\");",
          "pathCojunction": "(closed)",
          "symbolicPathConjunction": "(closed)",
          "backwardsPathConjunction": "(closed)",
          "simplifiedPathConjunction": "closed",
          "z3Inputs": "[closed0 = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncharSeq0 = String('charSeq0')\nstart0 = Int('start0')\nend0 = Int('end0')\nclosed0 = Bool('closed0')\n\nconstraints = [\n  closed0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nclosed = Symbol('closed')\npath_conjunction = closed\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 110,
          "throwingLine": 111,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/AbstractNavigableMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractNavigableMap.firstKey()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(entryIterator().hasNext())) && (entry == null)",
          "symbolicPathConjunction": "(firstEntry()) && (entry == null)",
          "backwardsPathConjunction": "(!(entryIterator().hasNext())) && (null == null)",
          "simplifiedPathConjunction": "!entryIterator().hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentry0_isNull = Bool('entry0_isNull')\nV> entry0_isNull = Bool('V> entry0_isNull')\n\nconstraints = [\n  V> entry0_isNull, \n  And(Not(entryIterator().hasNext()), entry0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_entryIterator_hasNext = Symbol('_entryIterator_hasNext')\n_entryIterator = Symbol('_entryIterator')\nnull = Symbol('null')\npath_conjunction = ((~(_entryIterator_hasNext)) & (Eq(null, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 67,
          "throwingLine": 70,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractNavigableMap.firstKey()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(entryIterator().hasNext()) && (entry == null)",
          "symbolicPathConjunction": "(firstEntry()) && (entry == null)",
          "backwardsPathConjunction": "(entryIterator().hasNext()) && (entryIterator().next() == null)",
          "simplifiedPathConjunction": "entryIterator().hasNext() && entryIterator().next() == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentry0_isNull = Bool('entry0_isNull')\n\nconstraints = [\n  V > entry0 == entryIterator().next(),\n  And(entryIterator().hasNext(), entry0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_entryIterator_hasNext = Symbol('_entryIterator_hasNext')\n_entryIterator = Symbol('_entryIterator')\n_entryIterator_next = Symbol('_entryIterator_next')\nnull = Symbol('null')\npath_conjunction = (_entryIterator_hasNext & (Eq(_entryIterator_next, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 67,
          "throwingLine": 70,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractNavigableMap.lastKey()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(descendingEntryIterator().hasNext()) && (entry == null)",
          "symbolicPathConjunction": "(lastEntry()) && (entry == null)",
          "backwardsPathConjunction": "(descendingEntryIterator().hasNext()) && (descendingEntryIterator().next() == null)",
          "simplifiedPathConjunction": "descendingEntryIterator().hasNext() && descendingEntryIterator()_next == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentry0_isNull = Bool('entry0_isNull')\n\nconstraints = [\n  V > entry0 == descendingEntryIterator().next(),\n  And(descendingEntryIterator().hasNext(), entry0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_descendingEntryIterator_hasNext = Symbol('_descendingEntryIterator_hasNext')\n_descendingEntryIterator = Symbol('_descendingEntryIterator')\n_descendingEntryIterator_next = Symbol('_descendingEntryIterator_next')\nnull = Symbol('null')\npath_conjunction = (_descendingEntryIterator_hasNext & (Eq(_descendingEntryIterator_next, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 77,
          "throwingLine": 80,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractNavigableMap.lastKey()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(!(descendingEntryIterator().hasNext())) && (entry == null)",
          "symbolicPathConjunction": "(lastEntry()) && (entry == null)",
          "backwardsPathConjunction": "(!(descendingEntryIterator().hasNext())) && (null == null)",
          "simplifiedPathConjunction": "!descendingEntryIterator().hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nentry0_isNull = Bool('entry0_isNull')\nV> entry0_isNull = Bool('V> entry0_isNull')\n\nconstraints = [\n  V> entry0_isNull, \n  And(Not(descendingEntryIterator().hasNext()), entry0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\n_descendingEntryIterator_hasNext = Symbol('_descendingEntryIterator_hasNext')\n_descendingEntryIterator = Symbol('_descendingEntryIterator')\nnull = Symbol('null')\npath_conjunction = ((~(_descendingEntryIterator_hasNext)) & (Eq(null, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 77,
          "throwingLine": 80,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/MultimapsCollectionTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.MultimapsCollectionTest.PopulatableMapAsMultimap.Anonymous-0afb0ab8-9bfe-4bfb-8789-c9e80a38d840.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 156,
          "throwingLine": 157,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapsCollectionTest.TransformedMultimapGenerator.createCollection(java.lang.Iterable<? extends java.lang.String>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(values == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(values))",
          "backwardsPathConjunction": "(values == null)",
          "z3Inputs": "[values0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalues0_isNull = Bool('values0_isNull')\n\nconstraints = [\n  values0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(values, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 338,
          "throwingLine": 339,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.MultimapsCollectionTest.FilteredListMultimapGenerator.createCollection(java.lang.Iterable<? extends java.lang.Integer>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(values == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(values))",
          "backwardsPathConjunction": "(values == null)",
          "z3Inputs": "[values0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalues0_isNull = Bool('values0_isNull')\n\nconstraints = [\n  values0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(values, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 551,
          "throwingLine": 552,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/eventbus/SubscriberTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.eventbus.SubscriberTest.exceptionThrowingMethod(java.lang.Object)",
          "exception": "throw new IntentionalException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 125,
          "throwingLine": 126,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.eventbus.SubscriberTest.errorThrowingMethod(java.lang.Object)",
          "exception": "throw new JudgmentError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 138,
          "throwingLine": 139,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/reflect/MutableTypeToInstanceMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.reflect.MutableTypeToInstanceMap.put(com.google.common.reflect.TypeToken<? extends B>, B)",
          "exception": "throw new UnsupportedOperationException(\"Please use putInstance() instead.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 73,
          "throwingLine": 74,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.reflect.MutableTypeToInstanceMap.putAll(java.util.Map<? extends com.google.common.reflect.TypeToken<? extends B>, ? extends B>)",
          "exception": "throw new UnsupportedOperationException(\"Please use putInstance() instead.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 78,
          "throwingLine": 79,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.reflect.MutableTypeToInstanceMap.UnmodifiableEntry.setValue(V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 139,
          "throwingLine": 140,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k2 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (v2 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (v2 == null)",
          "simplifiedPathConjunction": "null == v2 && k1 != null && k2 != null && null != v1",
          "z3Inputs": "[k20_isNull = False,\n k10_isNull = False,\n v20_isNull = True,\n v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\n\nconstraints = [\n  And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), v20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (Eq(v2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 77,
          "throwingLine": 78,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v1)",
          "pathCojunction": "(k1 == null)",
          "symbolicPathConjunction": "(checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(k1 == null)",
          "simplifiedPathConjunction": "k1 == null",
          "z3Inputs": "[k10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\n\nconstraints = [\n  k10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nnull = Symbol('null')\npath_conjunction = (Eq(k1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 77,
          "throwingLine": 78,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v2)",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (k2 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (k2 == null)",
          "simplifiedPathConjunction": "k2 == null && k1 != null && null != v1",
          "z3Inputs": "[k20_isNull = True, k10_isNull = False, v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\n\nconstraints = [\n  And(And(Not(k10_isNull), Not(v10_isNull)), k20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (Eq(k2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 77,
          "throwingLine": 78,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k1 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (v1 == null)",
          "symbolicPathConjunction": "(checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (v1 == null)",
          "simplifiedPathConjunction": "null == v1 && k1 != null",
          "z3Inputs": "[k10_isNull = False, v10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\n\nconstraints = [\n  And(Not(k10_isNull), v10_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(k1, null)))) & (Eq(v1, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 77,
          "throwingLine": 78,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v2)",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (k2 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (k2 == null)",
          "simplifiedPathConjunction": "k2 == null && k1 != null && null != v1",
          "z3Inputs": "[k20_isNull = True, k10_isNull = False, v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\n\nconstraints = [\n  And(And(Not(k10_isNull), Not(v10_isNull)), k20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (Eq(k2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k1 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (v1 == null)",
          "symbolicPathConjunction": "(checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (v1 == null)",
          "simplifiedPathConjunction": "null == v1 && k1 != null",
          "z3Inputs": "[k10_isNull = False, v10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\n\nconstraints = [\n  And(Not(k10_isNull), v10_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(k1, null)))) & (Eq(v1, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v3)",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (k3 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && ((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (k3 == null)",
          "simplifiedPathConjunction": "k3 == null && k1 != null && k2 != null && null != v1 && null != v2",
          "z3Inputs": "[k30_isNull = True,\n k20_isNull = False,\n k10_isNull = False,\n v20_isNull = False,\n v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\nk30_isNull = Bool('k30_isNull')\n\nconstraints = [\n  And(And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), Not(v20_isNull)), k30_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nk3 = Symbol('k3')\nnull = Symbol('null')\npath_conjunction = (((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (~((Eq(v2, null))))) & (Eq(k3, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v1)",
          "pathCojunction": "(k1 == null)",
          "symbolicPathConjunction": "(checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(k1 == null)",
          "simplifiedPathConjunction": "k1 == null",
          "z3Inputs": "[k10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\n\nconstraints = [\n  k10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nnull = Symbol('null')\npath_conjunction = (Eq(k1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k2 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (v2 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (v2 == null)",
          "simplifiedPathConjunction": "null == v2 && k1 != null && k2 != null && null != v1",
          "z3Inputs": "[k20_isNull = False,\n k10_isNull = False,\n v20_isNull = True,\n v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\n\nconstraints = [\n  And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), v20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (Eq(v2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k3 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (!(k3 == null)) && (v3 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && ((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (!(k3 == null)) && (v3 == null)",
          "simplifiedPathConjunction": "null == v3 && k1 != null && k2 != null && k3 != null && null != v1 && null != v2",
          "z3Inputs": "[k30_isNull = False,\n v30_isNull = True,\n k20_isNull = False,\n k10_isNull = False,\n v20_isNull = False,\n v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\nk30_isNull = Bool('k30_isNull')\nv30_isNull = Bool('v30_isNull')\n\nconstraints = [\n  And(And(And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), Not(v20_isNull)), Not(k30_isNull)), v30_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nk3 = Symbol('k3')\nv3 = Symbol('v3')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (~((Eq(v2, null))))) & (~((Eq(k3, null))))) & (Eq(v3, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v3)",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (k3 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && ((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (k3 == null)",
          "simplifiedPathConjunction": "k3 == null && k1 != null && k2 != null && null != v1 && null != v2",
          "z3Inputs": "[k30_isNull = True,\n k20_isNull = False,\n k10_isNull = False,\n v20_isNull = False,\n v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\nk30_isNull = Bool('k30_isNull')\n\nconstraints = [\n  And(And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), Not(v20_isNull)), k30_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nk3 = Symbol('k3')\nnull = Symbol('null')\npath_conjunction = (((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (~((Eq(v2, null))))) & (Eq(k3, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 88,
          "throwingLine": 89,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k1 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (v1 == null)",
          "symbolicPathConjunction": "(checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (v1 == null)",
          "simplifiedPathConjunction": "null == v1 && k1 != null",
          "z3Inputs": "[k10_isNull = False, v10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\n\nconstraints = [\n  And(Not(k10_isNull), v10_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(k1, null)))) & (Eq(v1, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 88,
          "throwingLine": 89,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k2 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (v2 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (v2 == null)",
          "simplifiedPathConjunction": "null == v2 && k1 != null && k2 != null && null != v1",
          "z3Inputs": "[k20_isNull = False,\n k10_isNull = False,\n v20_isNull = True,\n v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\n\nconstraints = [\n  And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), v20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (Eq(v2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 88,
          "throwingLine": 89,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v1)",
          "pathCojunction": "(k1 == null)",
          "symbolicPathConjunction": "(checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(k1 == null)",
          "simplifiedPathConjunction": "k1 == null",
          "z3Inputs": "[k10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\n\nconstraints = [\n  k10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nnull = Symbol('null')\npath_conjunction = (Eq(k1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 88,
          "throwingLine": 89,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v4)",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (!(k3 == null)) && (!(v3 == null)) && (k4 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && ((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && ((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (!(k3 == null)) && (!(v3 == null)) && (k4 == null)",
          "simplifiedPathConjunction": "k4 == null && k1 != null && k2 != null && k3 != null && null != v1 && null != v2 && null != v3",
          "z3Inputs": "[k30_isNull = False,\n v30_isNull = False,\n k40_isNull = True,\n k20_isNull = False,\n k10_isNull = False,\n v20_isNull = False,\n v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\nk30_isNull = Bool('k30_isNull')\nv30_isNull = Bool('v30_isNull')\nk40_isNull = Bool('k40_isNull')\n\nconstraints = [\n  And(And(And(And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), Not(v20_isNull)), Not(k30_isNull)), Not(v30_isNull)), k40_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nk3 = Symbol('k3')\nv3 = Symbol('v3')\nk4 = Symbol('k4')\nnull = Symbol('null')\npath_conjunction = (((((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (~((Eq(v2, null))))) & (~((Eq(k3, null))))) & (~((Eq(v3, null))))) & (Eq(k4, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 88,
          "throwingLine": 89,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v2)",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (k2 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (k2 == null)",
          "simplifiedPathConjunction": "k2 == null && k1 != null && null != v1",
          "z3Inputs": "[k20_isNull = True, k10_isNull = False, v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\n\nconstraints = [\n  And(And(Not(k10_isNull), Not(v10_isNull)), k20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (Eq(k2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 88,
          "throwingLine": 89,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v1)",
          "pathCojunction": "(k1 == null)",
          "symbolicPathConjunction": "(checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(k1 == null)",
          "simplifiedPathConjunction": "k1 == null",
          "z3Inputs": "[k10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\n\nconstraints = [\n  k10_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nnull = Symbol('null')\npath_conjunction = (Eq(k1, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v3)",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (k3 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && ((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (k3 == null)",
          "simplifiedPathConjunction": "k3 == null && k1 != null && k2 != null && null != v1 && null != v2",
          "z3Inputs": "[k30_isNull = True,\n k20_isNull = False,\n k10_isNull = False,\n v20_isNull = False,\n v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\nk30_isNull = Bool('k30_isNull')\n\nconstraints = [\n  And(And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), Not(v20_isNull)), k30_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nk3 = Symbol('k3')\nnull = Symbol('null')\npath_conjunction = (((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (~((Eq(v2, null))))) & (Eq(k3, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k1 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (v1 == null)",
          "symbolicPathConjunction": "(checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (v1 == null)",
          "simplifiedPathConjunction": "null == v1 && k1 != null",
          "z3Inputs": "[k10_isNull = False, v10_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\n\nconstraints = [\n  And(Not(k10_isNull), v10_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(k1, null)))) & (Eq(v1, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v2)",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (k2 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (k2 == null)",
          "simplifiedPathConjunction": "k2 == null && k1 != null && null != v1",
          "z3Inputs": "[k20_isNull = True, k10_isNull = False, v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\n\nconstraints = [\n  And(And(Not(k10_isNull), Not(v10_isNull)), k20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (Eq(k2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k2 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (v2 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (v2 == null)",
          "simplifiedPathConjunction": "null == v2 && k1 != null && k2 != null && null != v1",
          "z3Inputs": "[k20_isNull = False,\n k10_isNull = False,\n v20_isNull = True,\n v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\n\nconstraints = [\n  And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), v20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (Eq(v2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null value in entry: \" + k3 + \"=null\")",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (!(k3 == null)) && (v3 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && ((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (!(k3 == null)) && (v3 == null)",
          "simplifiedPathConjunction": "null == v3 && k1 != null && k2 != null && k3 != null && null != v1 && null != v2",
          "z3Inputs": "[k30_isNull = False,\n v30_isNull = True,\n k20_isNull = False,\n k10_isNull = False,\n v20_isNull = False,\n v10_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\nk30_isNull = Bool('k30_isNull')\nv30_isNull = Bool('v30_isNull')\n\nconstraints = [\n  And(And(And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), Not(v20_isNull)), Not(k30_isNull)), v30_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nk3 = Symbol('k3')\nv3 = Symbol('v3')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (~((Eq(v2, null))))) & (~((Eq(k3, null))))) & (Eq(v3, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)",
          "exception": "throw new NullPointerException(\"null key in entry: null=\" + v5)",
          "pathCojunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (!(k3 == null)) && (!(v3 == null)) && (!(k4 == null)) && (!(v4 == null)) && (k5 == null)",
          "symbolicPathConjunction": "((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && ((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && ((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && ((checkEntryNotNull(key, value)) && (Maps.immutableEntry(key, value))) && (checkEntryNotNull(key, value))",
          "backwardsPathConjunction": "(!(k1 == null)) && (!(v1 == null)) && (!(k2 == null)) && (!(v2 == null)) && (!(k3 == null)) && (!(v3 == null)) && (!(k4 == null)) && (!(v4 == null)) && (k5 == null)",
          "simplifiedPathConjunction": "k5 == null && k1 != null && k2 != null && k3 != null && k4 != null && null != v1 && null != v2 && null != v3 && null != v4",
          "z3Inputs": "[k10_isNull = False,\n v40_isNull = False,\n v10_isNull = False,\n k30_isNull = False,\n k40_isNull = False,\n k50_isNull = True,\n k20_isNull = False,\n v20_isNull = False,\n v30_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nk10_isNull = Bool('k10_isNull')\nv10_isNull = Bool('v10_isNull')\nk20_isNull = Bool('k20_isNull')\nv20_isNull = Bool('v20_isNull')\nk30_isNull = Bool('k30_isNull')\nv30_isNull = Bool('v30_isNull')\nk40_isNull = Bool('k40_isNull')\nv40_isNull = Bool('v40_isNull')\nk50_isNull = Bool('k50_isNull')\n\nconstraints = [\n  And(And(And(And(And(And(And(And(Not(k10_isNull), Not(v10_isNull)), Not(k20_isNull)), Not(v20_isNull)), Not(k30_isNull)), Not(v30_isNull)), Not(k40_isNull)), Not(v40_isNull)), k50_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nk1 = Symbol('k1')\nv1 = Symbol('v1')\nk2 = Symbol('k2')\nv2 = Symbol('v2')\nk3 = Symbol('k3')\nv3 = Symbol('v3')\nk4 = Symbol('k4')\nv4 = Symbol('v4')\nk5 = Symbol('k5')\nnull = Symbol('null')\npath_conjunction = (((((((((~((Eq(k1, null)))) & (~((Eq(v1, null))))) & (~((Eq(k2, null))))) & (~((Eq(v2, null))))) & (~((Eq(k3, null))))) & (~((Eq(v3, null))))) & (~((Eq(k4, null))))) & (~((Eq(v4, null))))) & (Eq(k5, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.put(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 232,
          "throwingLine": 233,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.remove(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 236,
          "throwingLine": 237,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.putAll(java.util.Map<? extends K, ? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 240,
          "throwingLine": 241,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 244,
          "throwingLine": 245,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/reflect/Reflection.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.reflect.Reflection.newProxy(java.lang.Class<T>, java.lang.reflect.InvocationHandler)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(handler == null)",
          "symbolicPathConjunction": "(checkNotNull(handler))",
          "backwardsPathConjunction": "(handler == null)",
          "simplifiedPathConjunction": "handler == null",
          "z3Inputs": "[handler0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nhandler0_isNull = Bool('handler0_isNull')\n\nconstraints = [\n  handler0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nhandler = Symbol('handler')\nnull = Symbol('null')\npath_conjunction = (Eq(handler, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 87,
          "throwingLine": 88,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/base/AbstractIteratorTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.AbstractIteratorTest.Anonymous-4546aaf3-a54a-4028-ac25-87762de42179.computeNext()",
          "exception": "throw exception;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 115,
          "throwingLine": 116,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.AbstractIteratorTest.Anonymous-b4ba2333-68b9-454c-8cdc-7f7d5cbafdcd.computeNext()",
          "exception": "throw new SomeUncheckedException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 131,
          "throwingLine": 133,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.TestingCacheLoaders.Anonymous-00af7597-ddcf-4c75-81a1-903e2edab03b.load(K)",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.TestingCacheLoaders.Anonymous-9afae131-e248-4c73-8a3e-bd881a8303e1.load(K)",
          "exception": "throw e;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 95,
          "throwingLine": 96,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultiset.MapBasedMultisetIterator.remove()",
          "exception": "throw new IllegalStateException(String.valueOf(\"no calls to next() since the last call to remove()\"))",
          "pathCojunction": "(!(canRemove))",
          "symbolicPathConjunction": "(!(checkState(canRemove, \"no calls to next() since the last call to remove()\")))",
          "backwardsPathConjunction": "(!(canRemove))",
          "simplifiedPathConjunction": "!canRemove",
          "z3Inputs": "[canRemove0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncanRemove0 = Bool('canRemove0')\n\nconstraints = [\n  Not(canRemove0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncanRemove = Symbol('canRemove')\npath_conjunction = (~(canRemove))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 184,
          "throwingLine": 185,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultiset.MapBasedMultisetIterator.remove()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(!canRemove)) && (frequency <= 0)",
          "symbolicPathConjunction": "(checkState(canRemove, \"no calls to next() since the last call to remove()\")) && (currentEntry.getValue().get()) && (frequency <= 0)",
          "backwardsPathConjunction": "(!(!canRemove)) && (value <= 0)",
          "simplifiedPathConjunction": "canRemove && value <= 0",
          "z3Inputs": "[value0 = 0, canRemove0 = True, frequency0 = 0]\n[frequency0 = -1, canRemove0 = True, value0 = -1]\n[frequency0 = -2, canRemove0 = True, value0 = -2]\n[frequency0 = -3, canRemove0 = True, value0 = -3]\n[frequency0 = -4, canRemove0 = True, value0 = -4]\n[frequency0 = -5, canRemove0 = True, value0 = -5]\n[frequency0 = -6, canRemove0 = True, value0 = -6]\n[frequency0 = -7, canRemove0 = True, value0 = -7]\n[frequency0 = -8, canRemove0 = True, value0 = -8]\n[frequency0 = -9, canRemove0 = True, value0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncanRemove0 = Bool('canRemove0')\nvalue0 = Int('value0')\nfrequency0 = Int('frequency0')\n\nconstraints = [\n  frequency0 == value0,\n  And(Not(Not(canRemove0)), frequency0 <= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncanRemove = Symbol('canRemove')\nvalue = Symbol('value', integer=True)\npath_conjunction = ((~((~(canRemove)))) & (LessThan(value, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 184,
          "throwingLine": 188,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultiset.setCount(E, int)",
          "exception": "throw new IllegalArgumentException(\"count\" + \" cannot be negative but was: \" + count)",
          "pathCojunction": "(count < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(count < 0)",
          "simplifiedPathConjunction": "count < 0",
          "z3Inputs": "[count0 = -1]\n[count0 = -2]\n[count0 = -3]\n[count0 = -4]\n[count0 = -5]\n[count0 = -6]\n[count0 = -7]\n[count0 = -8]\n[count0 = -9]\n[count0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  count0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = (StrictLessThan(count, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 262,
          "throwingLine": 263,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/FilteredEntryMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.FilteredEntryMultimap.Keys.remove(java.lang.Object, int)",
          "exception": "throw new IllegalArgumentException(\"occurrences\" + \" cannot be negative but was: \" + occurrences)",
          "pathCojunction": "(occurrences < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(occurrences < 0)",
          "simplifiedPathConjunction": "occurrences < 0",
          "z3Inputs": "[occurrences0 = -1]\n[occurrences0 = -2]\n[occurrences0 = -3]\n[occurrences0 = -4]\n[occurrences0 = -5]\n[occurrences0 = -6]\n[occurrences0 = -7]\n[occurrences0 = -8]\n[occurrences0 = -9]\n[occurrences0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noccurrences0 = Int('occurrences0')\n\nconstraints = [\n  occurrences0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noccurrences = Symbol('occurrences', integer=True)\npath_conjunction = (StrictLessThan(occurrences, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 351,
          "throwingLine": 352,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.hash.AbstractStreamingHasherTest.Control.bits()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 262,
          "throwingLine": 263,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.hash.AbstractStreamingHasherTest.Control.hashString(java.lang.CharSequence, java.nio.charset.Charset)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = String('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 267,
          "throwingLine": 268,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.hash.AbstractStreamingHasherTest.Control.hashLong(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = Int('input0')\n\nconstraints = [\n  input0 >= -9223372036854775808, input0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 272,
          "throwingLine": 273,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.hash.AbstractStreamingHasherTest.Control.hashInt(int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = Int('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 277,
          "throwingLine": 278,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/cache/RemovalListeners.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.RemovalListeners.asynchronous(com.google.common.cache.RemovalListener<K, V>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(listener == null)",
          "symbolicPathConjunction": "(checkNotNull(listener))",
          "backwardsPathConjunction": "(listener == null)",
          "z3Inputs": "[listener0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlistener0_isNull = Bool('listener0_isNull')\n\nconstraints = [\n  listener0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nnull = Symbol('null')\npath_conjunction = (Eq(listener, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 42,
          "throwingLine": 43,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.RemovalListeners.asynchronous(com.google.common.cache.RemovalListener<K, V>, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(listener == null)) && (executor == null)",
          "symbolicPathConjunction": "(checkNotNull(listener)) && (checkNotNull(executor))",
          "backwardsPathConjunction": "(!(listener == null)) && (executor == null)",
          "z3Inputs": "[executor0_isNull = True, listener0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlistener0_isNull = Bool('listener0_isNull')\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  And(Not(listener0_isNull), executor0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nV> = Symbol('V>')\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(listener, null)))) & (Eq(executor, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 42,
          "throwingLine": 44,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/collect/testing/FeatureSpecificTestSuiteBuilder.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder.named(java.lang.String)",
          "exception": "throw new IllegalArgumentException(\"Eclipse hides all characters after \" + \"'('; please use '[]' or other characters instead of parentheses\");",
          "pathCojunction": "(name.contains(\"(\"))",
          "symbolicPathConjunction": "(name.contains(\"(\"))",
          "backwardsPathConjunction": "(name.contains(\"(\"))",
          "simplifiedPathConjunction": "name.contains(\"(\")",
          "z3Inputs": "[name0 = \"(\"]\n[name0 = \"A(\"]\n[name0 = \"(B\"]\n[name0 = \"(C\"]\n[name0 = \"(D\"]\n[name0 = \"(E\"]\n[name0 = \"(F\"]\n[name0 = \"(G\"]\n[name0 = \"(H\"]\n[name0 = \"(I\"]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\n\nconstraints = [\n  Contains(name0, StringVal('('))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nname = Symbol('name')\nname_contains = Symbol('name_contains')\npath_conjunction = name_contains\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 130,
          "throwingLine": 132,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/WrappingScheduledExecutorServiceTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.awaitTermination(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 175,
          "throwingLine": 176,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 182,
          "throwingLine": 183,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 188,
          "throwingLine": 189,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 194,
          "throwingLine": 195,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.isShutdown()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 199,
          "throwingLine": 200,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.isTerminated()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 204,
          "throwingLine": 205,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.shutdown()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 209,
          "throwingLine": 210,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.shutdownNow()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 214,
          "throwingLine": 215,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.submit(java.util.concurrent.Callable<T>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 219,
          "throwingLine": 220,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.submit(java.lang.Runnable)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 224,
          "throwingLine": 225,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.submit(java.lang.Runnable, T)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 229,
          "throwingLine": 230,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.WrappingScheduledExecutorServiceTest.MockExecutor.execute(java.lang.Runnable)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 234,
          "throwingLine": 235,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/CacheReferencesTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.CacheReferencesTest.Anonymous-7cd4de0e-ab5e-4c0a-805e-7e4a211b2681.apply(com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>)",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(builder.build(KEY_TO_STRING_LOADER))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  java.lang.String > KEY_TO_STRING_LOADER0 == new CacheLoader<Key, String>() {\n\n    @Override\n    public String load(Key key) {\n        ???;\n    }\n},\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 56,
          "throwingLine": 57,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.CacheReferencesTest.Anonymous-7cd4de0e-ab5e-4c0a-805e-7e4a211b2681.apply(com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>)",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(builder.build(KEY_TO_STRING_LOADER))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  java.lang.String > KEY_TO_STRING_LOADER0 == new CacheLoader<Key, String>() {\n\n    @Override\n    public String load(Key key) {\n        ???;\n    }\n},\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 56,
          "throwingLine": 57,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableRangeMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeMap.span()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(ranges.isEmpty())",
          "symbolicPathConjunction": "(ranges.isEmpty())",
          "backwardsPathConjunction": "(ranges.isEmpty())",
          "simplifiedPathConjunction": "ranges.isEmpty()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  ranges0.isEmpty()\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nranges = Symbol('ranges')\nranges_isEmpty = Symbol('ranges_isEmpty')\npath_conjunction = ranges_isEmpty\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 198,
          "throwingLine": 200,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeMap.put(com.google.common.collect.Range<K>, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 208,
          "throwingLine": 209,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeMap.putAll(com.google.common.collect.RangeMap<K, V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 213,
          "throwingLine": 214,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeMap.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 218,
          "throwingLine": 219,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeMap.remove(com.google.common.collect.Range<K>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 223,
          "throwingLine": 224,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableRangeMap.Anonymous-9a8aeccc-62d0-49b3-bdce-0d733e5d2c47.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, len, \"index\"))",
          "pathCojunction": "(index < 0 || index >= len)",
          "symbolicPathConjunction": "(checkElementIndex(index, len))",
          "backwardsPathConjunction": "(index < 0 || index >= len)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= len)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, len)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 282,
          "throwingLine": 283,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/LinkedHashMultimapTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimapTest.testCreateFromMultimap()",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + multimap.keySet().size())",
          "pathCojunction": "(multimap.keySet().size() < 3) && (multimap.keySet().size() < 0)",
          "symbolicPathConjunction": "(LinkedHashMultimap.create()) && (LinkedHashMultimap.create(multimap))",
          "backwardsPathConjunction": "(new LinkedHashMultimap<K, V>(16, 2).keySet().size() < 3) && (new LinkedHashMultimap<K, V>(16, 2).keySet().size() < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  java.lang.Integer > multimap0 == new LinkedHashMultimap<K, V>(16, 2),\n  And(multimap0.keySet().size() < 3, multimap0.keySet().size() < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnew LinkedHashMultimap<K, V>(16, 2)_keySet_size = Symbol('new LinkedHashMultimap<K, V>(16, 2)_keySet_size')\nnew LinkedHashMultimap<K, V>(16, 2)_keySet = Symbol('new LinkedHashMultimap<K, V>(16, 2)_keySet')\npath_conjunction = ((StrictLessThan(new LinkedHashMultimap<K, V>(16, 2)_keySet_size, 3)) & (StrictLessThan(new LinkedHashMultimap<K, V>(16, 2)_keySet_size, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 176,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.LinkedHashMultimapTest.testCreateFromMultimap()",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + DEFAULT_VALUE_SET_CAPACITY)",
          "pathCojunction": "(multimap.keySet().size() < 3) && (!(multimap.keySet().size() < 0)) && (2 < 3) && (2 < 0)",
          "symbolicPathConjunction": "(LinkedHashMultimap.create()) && (LinkedHashMultimap.create(multimap))",
          "backwardsPathConjunction": "(new LinkedHashMultimap<K, V>(16, 2).keySet().size() < 3) && (!(new LinkedHashMultimap<K, V>(16, 2).keySet().size() < 0)) && (2 < 3) && (2 < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  java.lang.Integer > multimap0 == new LinkedHashMultimap<K, V>(16, 2),\n  And(And(And(multimap0.keySet().size() < 3, Not(multimap0.keySet().size() < 0)), 2 < 3), 2 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnew LinkedHashMultimap<K, V>(16, 2)_keySet_size = Symbol('new LinkedHashMultimap<K, V>(16, 2)_keySet_size')\nnew LinkedHashMultimap<K, V>(16, 2)_keySet = Symbol('new LinkedHashMultimap<K, V>(16, 2)_keySet')\npath_conjunction = ((((StrictLessThan(new LinkedHashMultimap<K, V>(16, 2)_keySet_size, 3)) & (~((StrictLessThan(new LinkedHashMultimap<K, V>(16, 2)_keySet_size, 0))))) & (StrictLessThan(2, 3))) & (StrictLessThan(2, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 176,
          "throwingLine": 182,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/Closer.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(checkNotNull(e))",
          "backwardsPathConjunction": "(e == null)",
          "simplifiedPathConjunction": "e == null",
          "z3Inputs": "[e0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nnull = Symbol('null')\npath_conjunction = (Eq(e, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 145,
          "throwingLine": 146,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable)",
          "exception": "throw IOException.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (e != null && IOException.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class))",
          "backwardsPathConjunction": "(!(e == null)) && (e != null && IOException.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(Not(e0_isNull), And(Not(e0_isNull), IOException.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((~((Eq(e, null)))) & ((Ne(e, null)) & IOException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 145,
          "throwingLine": 148,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable)",
          "exception": "throw new RuntimeException(e);",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e)))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 145,
          "throwingLine": 149,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable)",
          "exception": "throw Error.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (e != null && Error.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (e != null && Error.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), And(Not(e0_isNull), Error.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = (((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & ((Ne(e, null)) & Error.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 145,
          "throwingLine": 148,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable)",
          "exception": "throw RuntimeException.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (e != null && RuntimeException.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (e != null && RuntimeException.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & ((Ne(e, null)) & RuntimeException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 145,
          "throwingLine": 148,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw Error.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (e != null && Error.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (e != null && Error.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), And(Not(e0_isNull), Error.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = (((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & ((Ne(e, null)) & Error.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 167,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw Error.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(e != null && declaredType.isInstance(e))) && (e != null && Error.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class)) && (Throwables.propagateIfPossible(e, declaredType))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(e != null && declaredType.isInstance(e))) && (e != null && Error.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))), Not(And(Not(e0_isNull), declaredType0.isInstance(e0)))), And(Not(e0_isNull), Error.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\ndeclaredType = Symbol('declaredType')\nBUG_IN_SIMPLIFICATION\ndeclaredType_isInstance = Symbol('declaredType_isInstance')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance)))) & (~(((Ne(e, null)) & declaredType_isInstance)))) & ((Ne(e, null)) & Error.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 167,
          "throwingLine": 171,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw RuntimeException.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(e != null && declaredType.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (e != null && RuntimeException.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class)) && (Throwables.propagateIfPossible(e, declaredType))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(e != null && declaredType.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (e != null && RuntimeException.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))), Not(And(Not(e0_isNull), declaredType0.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\ndeclaredType = Symbol('declaredType')\nBUG_IN_SIMPLIFICATION\ndeclaredType_isInstance = Symbol('declaredType_isInstance')\nnull = Symbol('null')\npath_conjunction = (((((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance)))) & (~(((Ne(e, null)) & declaredType_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & ((Ne(e, null)) & RuntimeException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 167,
          "throwingLine": 171,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw new RuntimeException(e);",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(e != null && declaredType.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e)))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class)) && (Throwables.propagateIfPossible(e, declaredType))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(e != null && declaredType.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))), Not(And(Not(e0_isNull), declaredType0.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\ndeclaredType = Symbol('declaredType')\nBUG_IN_SIMPLIFICATION\ndeclaredType_isInstance = Symbol('declaredType_isInstance')\nnull = Symbol('null')\npath_conjunction = (((((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance)))) & (~(((Ne(e, null)) & declaredType_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 167,
          "throwingLine": 172,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw declaredType.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (e != null && declaredType.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class)) && (Throwables.propagateIfPossible(e, declaredType))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (e != null && declaredType.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))), And(Not(e0_isNull), declaredType0.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\ndeclaredType = Symbol('declaredType')\nBUG_IN_SIMPLIFICATION\ndeclaredType_isInstance = Symbol('declaredType_isInstance')\nnull = Symbol('null')\npath_conjunction = (((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance)))) & ((Ne(e, null)) & declaredType_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 167,
          "throwingLine": 171,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw IOException.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (e != null && IOException.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class))",
          "backwardsPathConjunction": "(!(e == null)) && (e != null && IOException.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(Not(e0_isNull), And(Not(e0_isNull), IOException.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((~((Eq(e, null)))) & ((Ne(e, null)) & IOException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 167,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw RuntimeException.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (e != null && RuntimeException.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (e != null && RuntimeException.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & ((Ne(e, null)) & RuntimeException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 167,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(checkNotNull(e))",
          "backwardsPathConjunction": "(e == null)",
          "simplifiedPathConjunction": "e == null",
          "z3Inputs": "[e0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nnull = Symbol('null')\npath_conjunction = (Eq(e, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 167,
          "throwingLine": 168,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw declaredType2.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(declaredType2 == null)) && (!(e != null && declaredType1.isInstance(e))) && (e != null && declaredType2.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class)) && (Throwables.propagateIfPossible(e, declaredType1, declaredType2))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(declaredType2 == null)) && (!(e != null && declaredType1.isInstance(e))) && (e != null && declaredType2.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\ndeclaredType20_isNull = Bool('declaredType20_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))), Not(declaredType20_isNull)), Not(And(Not(e0_isNull), declaredType10.isInstance(e0)))), And(Not(e0_isNull), declaredType20.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\ndeclaredType1 = Symbol('declaredType1')\ndeclaredType2 = Symbol('declaredType2')\nBUG_IN_SIMPLIFICATION\ndeclaredType1_isInstance = Symbol('declaredType1_isInstance')\ndeclaredType2_isInstance = Symbol('declaredType2_isInstance')\nnull = Symbol('null')\npath_conjunction = (((((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance)))) & (~((Eq(declaredType2, null))))) & (~(((Ne(e, null)) & declaredType1_isInstance)))) & ((Ne(e, null)) & declaredType2_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 191,
          "throwingLine": 195,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(checkNotNull(e))",
          "backwardsPathConjunction": "(e == null)",
          "simplifiedPathConjunction": "e == null",
          "z3Inputs": "[e0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nnull = Symbol('null')\npath_conjunction = (Eq(e, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 191,
          "throwingLine": 192,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw IOException.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (e != null && IOException.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class))",
          "backwardsPathConjunction": "(!(e == null)) && (e != null && IOException.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(Not(e0_isNull), And(Not(e0_isNull), IOException.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((~((Eq(e, null)))) & ((Ne(e, null)) & IOException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 191,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw new RuntimeException(e);",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(declaredType2 == null)) && (!(e != null && declaredType1.isInstance(e))) && (!(e != null && declaredType2.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e)))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class)) && (Throwables.propagateIfPossible(e, declaredType1, declaredType2))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(declaredType2 == null)) && (!(e != null && declaredType1.isInstance(e))) && (!(e != null && declaredType2.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\ndeclaredType20_isNull = Bool('declaredType20_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(And(And(And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))), Not(declaredType20_isNull)), Not(And(Not(e0_isNull), declaredType10.isInstance(e0)))), Not(And(Not(e0_isNull), declaredType20.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0))))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\ndeclaredType1 = Symbol('declaredType1')\ndeclaredType2 = Symbol('declaredType2')\nBUG_IN_SIMPLIFICATION\ndeclaredType1_isInstance = Symbol('declaredType1_isInstance')\ndeclaredType2_isInstance = Symbol('declaredType2_isInstance')\nnull = Symbol('null')\npath_conjunction = (((((((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance)))) & (~((Eq(declaredType2, null))))) & (~(((Ne(e, null)) & declaredType1_isInstance)))) & (~(((Ne(e, null)) & declaredType2_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 191,
          "throwingLine": 196,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw RuntimeException.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (e != null && RuntimeException.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (e != null && RuntimeException.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & ((Ne(e, null)) & RuntimeException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 191,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw declaredType1.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(declaredType2 == null)) && (e != null && declaredType1.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class)) && (Throwables.propagateIfPossible(e, declaredType1, declaredType2))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(declaredType2 == null)) && (e != null && declaredType1.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\ndeclaredType20_isNull = Bool('declaredType20_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))), Not(declaredType20_isNull)), And(Not(e0_isNull), declaredType10.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\ndeclaredType1 = Symbol('declaredType1')\ndeclaredType2 = Symbol('declaredType2')\nBUG_IN_SIMPLIFICATION\ndeclaredType1_isInstance = Symbol('declaredType1_isInstance')\nnull = Symbol('null')\npath_conjunction = ((((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance)))) & (~((Eq(declaredType2, null))))) & ((Ne(e, null)) & declaredType1_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 191,
          "throwingLine": 195,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw Error.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(declaredType2 == null)) && (!(e != null && declaredType1.isInstance(e))) && (!(e != null && declaredType2.isInstance(e))) && (e != null && Error.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class)) && (Throwables.propagateIfPossible(e, declaredType1, declaredType2))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (!(declaredType2 == null)) && (!(e != null && declaredType1.isInstance(e))) && (!(e != null && declaredType2.isInstance(e))) && (e != null && Error.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\ndeclaredType20_isNull = Bool('declaredType20_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(And(And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))), Not(declaredType20_isNull)), Not(And(Not(e0_isNull), declaredType10.isInstance(e0)))), Not(And(Not(e0_isNull), declaredType20.isInstance(e0)))), And(Not(e0_isNull), Error.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\ndeclaredType1 = Symbol('declaredType1')\ndeclaredType2 = Symbol('declaredType2')\nBUG_IN_SIMPLIFICATION\ndeclaredType1_isInstance = Symbol('declaredType1_isInstance')\ndeclaredType2_isInstance = Symbol('declaredType2_isInstance')\nnull = Symbol('null')\npath_conjunction = ((((((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance)))) & (~((Eq(declaredType2, null))))) & (~(((Ne(e, null)) & declaredType1_isInstance)))) & (~(((Ne(e, null)) & declaredType2_isInstance)))) & ((Ne(e, null)) & Error.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 191,
          "throwingLine": 195,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw Error.class.cast(e)",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (e != null && Error.class.isInstance(e))",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (e != null && Error.class.isInstance(e))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), And(Not(e0_isNull), Error.class.isInstance(e0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = (((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & ((Ne(e, null)) & Error.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 191,
          "throwingLine": 194,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (declaredType2 == null)",
          "symbolicPathConjunction": "(checkNotNull(e)) && (Throwables.propagateIfPossible(e, IOException.class)) && (Throwables.propagateIfPossible(e, declaredType1, declaredType2))",
          "backwardsPathConjunction": "(!(e == null)) && (!(e != null && IOException.class.isInstance(e))) && (!(e != null && Error.class.isInstance(e))) && (!(e != null && RuntimeException.class.isInstance(e))) && (declaredType2 == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ne0_isNull = Bool('e0_isNull')\ne0_isNull = Bool('e0_isNull')\ndeclaredType20_isNull = Bool('declaredType20_isNull')\n\nconstraints = [\n  thrown0 == e0,\n  And(And(And(And(Not(e0_isNull), Not(And(Not(e0_isNull), IOException.class.isInstance(e0)))), Not(And(Not(e0_isNull), Error.class.isInstance(e0)))), Not(And(Not(e0_isNull), RuntimeException.class.isInstance(e0)))), declaredType20_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ne = Symbol('e')\ndeclaredType2 = Symbol('declaredType2')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = (((((~((Eq(e, null)))) & (~(((Ne(e, null)) & IOException.class_isInstance)))) & (~(((Ne(e, null)) & Error.class_isInstance)))) & (~(((Ne(e, null)) & RuntimeException.class_isInstance)))) & (Eq(declaredType2, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 191,
          "throwingLine": 195,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableCollection.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.toArray(T[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(other == null)",
          "symbolicPathConjunction": "(checkNotNull(other))",
          "backwardsPathConjunction": "(other == null)",
          "simplifiedPathConjunction": "null == other",
          "z3Inputs": "[other0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nother0_isNull = Bool('other0_isNull')\n\nconstraints = [\n  other0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nother = Symbol('other')\nnull = Symbol('null')\npath_conjunction = (Eq(other, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 177,
          "throwingLine": 178,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.add(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 200,
          "throwingLine": 201,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.remove(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 212,
          "throwingLine": 213,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 224,
          "throwingLine": 225,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.removeAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 236,
          "throwingLine": 237,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.retainAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 248,
          "throwingLine": 249,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 260,
          "throwingLine": 261,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(element == null)",
          "symbolicPathConjunction": "(checkNotNull(element))",
          "backwardsPathConjunction": "(element == null)",
          "simplifiedPathConjunction": "element == null",
          "z3Inputs": "[element0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  element0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nnull = Symbol('null')\npath_conjunction = (Eq(element, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 448,
          "throwingLine": 449,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/collect/FluentIterableTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterableTest.Anonymous-f8650a0f-8e5b-43cc-a47e-e748a7aa4a65.iterator()",
          "exception": "throw new AssertionFailedError(\"Don't iterate me!\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/math/DoubleMath.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.roundToInt(double, java.math.RoundingMode)",
          "exception": "throw new ArithmeticException(\"not in range\")",
          "pathCojunction": "(!(z > MIN_INT_AS_DOUBLE - 1.0 & z < MAX_INT_AS_DOUBLE + 1.0))",
          "symbolicPathConjunction": "(!(condition))",
          "backwardsPathConjunction": "(!(roundIntermediate(x, mode) > MIN_INT_AS_DOUBLE - 1.0 & roundIntermediate(x, mode) < MAX_INT_AS_DOUBLE + 1.0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Real('x0')\nz0 = Real('z0')\n\nconstraints = [\n  z0 == roundIntermediate(x0, mode0),\n  Not(z0 > MIN_INT_AS_DOUBLE - 1.0 & z0 < MAX_INT_AS_DOUBLE + 1.0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x', integer=True)\nmode = Symbol('mode')\n_roundIntermediate = Symbol('_roundIntermediate')\npath_conjunction = (~(((StrictGreaterThan(_roundIntermediate, (MIN_INT_AS_DOUBLE - 1.0))) & (StrictLessThan(_roundIntermediate, (MAX_INT_AS_DOUBLE + 1.0))))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 131,
          "throwingLine": 133,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.roundToLong(double, java.math.RoundingMode)",
          "exception": "throw new ArithmeticException(\"not in range\")",
          "pathCojunction": "(!(MIN_LONG_AS_DOUBLE - z < 1.0 & z < MAX_LONG_AS_DOUBLE_PLUS_ONE))",
          "symbolicPathConjunction": "(!(condition))",
          "backwardsPathConjunction": "(!(MIN_LONG_AS_DOUBLE - roundIntermediate(x, mode) < 1.0 & roundIntermediate(x, mode) < MAX_LONG_AS_DOUBLE_PLUS_ONE))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Real('x0')\nz0 = Real('z0')\n\nconstraints = [\n  z0 == roundIntermediate(x0, mode0),\n  Not(MIN_LONG_AS_DOUBLE - z0 < 1.0 & z0 < MAX_LONG_AS_DOUBLE_PLUS_ONE)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x', integer=True)\nmode = Symbol('mode')\n_roundIntermediate = Symbol('_roundIntermediate')\npath_conjunction = (~(((StrictLessThan((MIN_LONG_AS_DOUBLE - _roundIntermediate), 1.0)) & (StrictLessThan(_roundIntermediate, MAX_LONG_AS_DOUBLE_PLUS_ONE)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 155,
          "throwingLine": 157,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.roundToBigInteger(double, java.math.RoundingMode)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"not a normal value\"))",
          "pathCojunction": "(!(MIN_LONG_AS_DOUBLE - x < 1.0 & x < MAX_LONG_AS_DOUBLE_PLUS_ONE)) && (!(isFinite(x)))",
          "symbolicPathConjunction": "(!(MIN_LONG_AS_DOUBLE - x < 1.0 & x < MAX_LONG_AS_DOUBLE_PLUS_ONE)) && (checkArgument(isFinite(d), \"not a normal value\"))",
          "backwardsPathConjunction": "(!(MIN_LONG_AS_DOUBLE - x < 1.0 & x < MAX_LONG_AS_DOUBLE_PLUS_ONE)) && (!(isFinite(x)))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Real('x0')\nx1 = Real('x1')\nMIN_LONG_AS_DOUBLE0 = Real('MIN_LONG_AS_DOUBLE0')\nMAX_LONG_AS_DOUBLE_PLUS_ONE0 = Real('MAX_LONG_AS_DOUBLE_PLUS_ONE0')\nexponent0 = Int('exponent0')\n\nconstraints = [\n  x1 == roundIntermediate(x0, mode0),\n  MIN_LONG_AS_DOUBLE0 == -0x1p63,\n  MAX_LONG_AS_DOUBLE_PLUS_ONE0 == 0x1p63,\n  exponent0 == getExponent(x1),\n  And(Not(MIN_LONG_AS_DOUBLE0 - x1 < 1.0 & x1 < MAX_LONG_AS_DOUBLE_PLUS_ONE0), Not(isFinite(x1)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x', integer=True)\n_isFinite = Symbol('_isFinite')\npath_conjunction = ((~(((StrictLessThan((-0x1p63 - x), 1.0)) & (StrictLessThan(x, 0x1p63))))) & (~(_isFinite)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 181,
          "throwingLine": 187,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.isPowerOfTwo(double)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"not a normal value\"))",
          "pathCojunction": "(!(isFinite(x)))",
          "symbolicPathConjunction": "(LongMath.isPowerOfTwo(getSignificand(x))) && (checkArgument(isFinite(d), \"not a normal value\"))",
          "backwardsPathConjunction": "(!(isFinite(x)))",
          "simplifiedPathConjunction": "!isFinite(x)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Real('x0')\n\nconstraints = [\n  Not(isFinite(x0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x', integer=True)\n_isFinite = Symbol('_isFinite')\npath_conjunction = (~(_isFinite))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 197,
          "throwingLine": 198,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.isMathematicalInteger(double)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"not a normal value\"))",
          "pathCojunction": "(!(isFinite(x)))",
          "symbolicPathConjunction": "(checkArgument(isFinite(d), \"not a normal value\"))",
          "backwardsPathConjunction": "(!(isFinite(x)))",
          "simplifiedPathConjunction": "!isFinite(x)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Real('x0')\n\nconstraints = [\n  Not(isFinite(x0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nx = Symbol('x', integer=True)\n_isFinite = Symbol('_isFinite')\npath_conjunction = (~(_isFinite))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 279,
          "throwingLine": 280,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.factorial(int)",
          "exception": "throw new IllegalArgumentException(\"n\" + \" (\" + n + \") must be >= 0\")",
          "pathCojunction": "(n < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(n < 0)",
          "simplifiedPathConjunction": "n < 0",
          "z3Inputs": "[n0 = -1]\n[n0 = -2]\n[n0 = -3]\n[n0 = -4]\n[n0 = -5]\n[n0 = -6]\n[n0 = -7]\n[n0 = -8]\n[n0 = -9]\n[n0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\n\nconstraints = [\n  n0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\npath_conjunction = (StrictLessThan(n, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 294,
          "throwingLine": 295,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.fuzzyEquals(double, double, double)",
          "exception": "throw new IllegalArgumentException(\"tolerance\" + \" (\" + tolerance + \") must be >= 0\")",
          "pathCojunction": "(!(tolerance >= 0))",
          "symbolicPathConjunction": "(!(x >= 0))",
          "backwardsPathConjunction": "(!(tolerance >= 0))",
          "simplifiedPathConjunction": "tolerance < 0",
          "z3Inputs": "[tolerance0 = -1]\n[tolerance0 = -2]\n[tolerance0 = -3]\n[tolerance0 = -4]\n[tolerance0 = -5]\n[tolerance0 = -6]\n[tolerance0 = -7]\n[tolerance0 = -8]\n[tolerance0 = -9]\n[tolerance0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Real('a0')\nb0 = Real('b0')\ntolerance0 = Real('tolerance0')\n\nconstraints = [\n  Not(tolerance0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntolerance = Symbol('tolerance', integer=True)\npath_conjunction = (~((GreaterThan(tolerance, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 351,
          "throwingLine": 352,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.fuzzyCompare(double, double, double)",
          "exception": "throw new IllegalArgumentException(\"tolerance\" + \" (\" + tolerance + \") must be >= 0\")",
          "pathCojunction": "(!(tolerance >= 0))",
          "symbolicPathConjunction": "(!(fuzzyEquals(a, b, tolerance)))",
          "backwardsPathConjunction": "(!(tolerance >= 0))",
          "simplifiedPathConjunction": "tolerance < 0",
          "z3Inputs": "[tolerance0 = -1]\n[tolerance0 = -2]\n[tolerance0 = -3]\n[tolerance0 = -4]\n[tolerance0 = -5]\n[tolerance0 = -6]\n[tolerance0 = -7]\n[tolerance0 = -8]\n[tolerance0 = -9]\n[tolerance0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Real('a0')\nb0 = Real('b0')\ntolerance0 = Real('tolerance0')\n\nconstraints = [\n  Not(tolerance0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntolerance = Symbol('tolerance', integer=True)\npath_conjunction = (~((GreaterThan(tolerance, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 374,
          "throwingLine": 375,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.mean(double...)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"Cannot take mean of 0 values\"))",
          "pathCojunction": "(!(values.length > 0))",
          "symbolicPathConjunction": "(checkArgument(values.length > 0, \"Cannot take mean of 0 values\"))",
          "backwardsPathConjunction": "(!(values.length > 0))",
          "simplifiedPathConjunction": "values.length <= 0",
          "z3Inputs": "[values0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalues0_length = Int('values0_length')\n\nconstraints = [\n  values0_length >= 0, # implicit\n  Not(values0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nvalues_length = Symbol('values_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(values_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 397,
          "throwingLine": 398,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.mean(double...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(!(values.length > 0))) && (!(isFinite(values[0])))",
          "symbolicPathConjunction": "(checkArgument(values.length > 0, \"Cannot take mean of 0 values\")) && (checkArgument(isFinite(argument)))",
          "backwardsPathConjunction": "(!(!(values.length > 0))) && (!(isFinite(values[0])))",
          "simplifiedPathConjunction": "!isFinite(values[0]) && values.length > 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\nvalues0_length = Int('values0_length')\n\nconstraints = [\n  count0 == 1,\n  values0_length >= 0, # implicit\n  count0 >= -9223372036854775808, count0 <= 9223372036854775807, # implicit\n  And(Not(Not(values0_length > 0)), Not(isFinite(values0[0])))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nvalues_length = Symbol('values_length', integer=True)\n_isFinite = Symbol('_isFinite')\npath_conjunction = ((~((~((StrictGreaterThan(values_length, 0)))))) & (~(_isFinite)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 397,
          "throwingLine": 400,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.mean(int...)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"Cannot take mean of 0 values\"))",
          "pathCojunction": "(!(values.length > 0))",
          "symbolicPathConjunction": "(checkArgument(values.length > 0, \"Cannot take mean of 0 values\"))",
          "backwardsPathConjunction": "(!(values.length > 0))",
          "simplifiedPathConjunction": "values.length <= 0",
          "z3Inputs": "[values0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalues0_length = Int('values0_length')\n\nconstraints = [\n  values0_length >= 0, # implicit\n  Not(values0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nvalues_length = Symbol('values_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(values_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 420,
          "throwingLine": 421,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.mean(long...)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"Cannot take mean of 0 values\"))",
          "pathCojunction": "(!(values.length > 0))",
          "symbolicPathConjunction": "(checkArgument(values.length > 0, \"Cannot take mean of 0 values\"))",
          "backwardsPathConjunction": "(!(values.length > 0))",
          "simplifiedPathConjunction": "values.length <= 0",
          "z3Inputs": "[values0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalues0_length = Int('values0_length')\n\nconstraints = [\n  values0_length >= 0, # implicit\n  Not(values0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nvalues_length = Symbol('values_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(values_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 443,
          "throwingLine": 444,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.mean(java.lang.Iterable<? extends java.lang.Number>)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"Cannot take mean of 0 values\"))",
          "pathCojunction": "(!(values.iterator().hasNext()))",
          "symbolicPathConjunction": "(mean(values.iterator()))",
          "backwardsPathConjunction": "(!(values.iterator().hasNext()))",
          "simplifiedPathConjunction": "!values.iterator().hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(values0.iterator().hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nvalues_iterator_hasNext = Symbol('values_iterator_hasNext')\nvalues_iterator = Symbol('values_iterator')\npath_conjunction = (~(values_iterator_hasNext))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 467,
          "throwingLine": 468,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.mean(java.lang.Iterable<? extends java.lang.Number>)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(!(values.iterator().hasNext()))) && (!(isFinite(values.iterator().next().doubleValue())))",
          "symbolicPathConjunction": "(mean(values.iterator()))",
          "backwardsPathConjunction": "(!(!(values.iterator().hasNext()))) && (!(isFinite(values.iterator().next().doubleValue())))",
          "simplifiedPathConjunction": "values.iterator().hasNext() && !isFinite(values.iterator().next().doubleValue())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  And(Not(Not(values0.iterator().hasNext())), Not(isFinite(values0.iterator().next().doubleValue())))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nvalues_iterator_hasNext = Symbol('values_iterator_hasNext')\nvalues_iterator = Symbol('values_iterator')\n_isFinite = Symbol('_isFinite')\nvalues_iterator_next_doubleValue = Symbol('values_iterator_next_doubleValue')\nvalues_iterator_next = Symbol('values_iterator_next')\npath_conjunction = ((~((~(values_iterator_hasNext)))) & (~(_isFinite)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 467,
          "throwingLine": 468,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.mean(java.util.Iterator<? extends java.lang.Number>)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"Cannot take mean of 0 values\"))",
          "pathCojunction": "(!(values.hasNext()))",
          "symbolicPathConjunction": "(checkArgument(values.hasNext(), \"Cannot take mean of 0 values\"))",
          "backwardsPathConjunction": "(!(values.hasNext()))",
          "simplifiedPathConjunction": "!values.hasNext()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(values0.hasNext())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nvalues_hasNext = Symbol('values_hasNext')\npath_conjunction = (~(values_hasNext))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 483,
          "throwingLine": 484,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.mean(java.util.Iterator<? extends java.lang.Number>)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(!(values.hasNext()))) && (!(isFinite(values.next().doubleValue())))",
          "symbolicPathConjunction": "(checkArgument(values.hasNext(), \"Cannot take mean of 0 values\")) && (checkArgument(isFinite(argument)))",
          "backwardsPathConjunction": "(!(!(values.hasNext()))) && (!(isFinite(values.next().doubleValue())))",
          "simplifiedPathConjunction": "values.hasNext() && !isFinite(values.next().doubleValue())",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncount0 = Int('count0')\n\nconstraints = [\n  count0 == 1,\n  count0 >= -9223372036854775808, count0 <= 9223372036854775807, # implicit\n  And(Not(Not(values0.hasNext())), Not(isFinite(values0.next().doubleValue())))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nvalues_hasNext = Symbol('values_hasNext')\n_isFinite = Symbol('_isFinite')\nvalues_next_doubleValue = Symbol('values_next_doubleValue')\nvalues_next = Symbol('values_next')\npath_conjunction = ((~((~(values_hasNext)))) & (~(_isFinite)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 483,
          "throwingLine": 486,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/cache/AbstractCache.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.AbstractCache.get(K, java.util.concurrent.Callable<? extends V>)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 52,
          "throwingLine": 53,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.AbstractCache.put(K, V)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 85,
          "throwingLine": 86,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.AbstractCache.size()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 103,
          "throwingLine": 104,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.AbstractCache.invalidate(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 108,
          "throwingLine": 109,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.AbstractCache.invalidateAll()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 123,
          "throwingLine": 124,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.AbstractCache.stats()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 128,
          "throwingLine": 129,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.cache.AbstractCache.asMap()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 133,
          "throwingLine": 134,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/NaturalOrdering.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.NaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(left == null)",
          "symbolicPathConjunction": "(checkNotNull(left))",
          "backwardsPathConjunction": "(left == null)",
          "simplifiedPathConjunction": "left == null",
          "z3Inputs": "[left0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\n\nconstraints = [\n  left0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nleft = Symbol('left')\nnull = Symbol('null')\npath_conjunction = (Eq(left, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 32,
          "throwingLine": 33,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.NaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(left == null)) && (right == null)",
          "symbolicPathConjunction": "(checkNotNull(left)) && (checkNotNull(right))",
          "backwardsPathConjunction": "(!(left == null)) && (right == null)",
          "simplifiedPathConjunction": "null == right && left != null",
          "z3Inputs": "[left0_isNull = False, right0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nleft0_isNull = Bool('left0_isNull')\nright0_isNull = Bool('right0_isNull')\n\nconstraints = [\n  And(Not(left0_isNull), right0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nleft = Symbol('left')\nright = Symbol('right')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(left, null)))) & (Eq(right, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 32,
          "throwingLine": 34,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-1eb502b0-1c87-4822-b6b6-5a1a6834edaf.apply(com.google.common.util.concurrent.FuturesTest.Foo)",
          "exception": "throw new AssertionFailedError(\"Unexpeted call to apply.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 295,
          "throwingLine": 296,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-516f6559-b31f-4c06-b7a2-d384fe13011e.apply(com.google.common.util.concurrent.FuturesTest.Foo)",
          "exception": "throw new AssertionFailedError(\"Unexpeted call to apply.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 308,
          "throwingLine": 309,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-4dec1079-67af-48cf-8595-29d208aeb231.apply(com.google.common.util.concurrent.FuturesTest.Foo)",
          "exception": "throw new AssertionFailedError(\"Unexpeted call to apply.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 350,
          "throwingLine": 351,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-c29c3e49-31af-4db4-953b-f83d39ea971a.apply(com.google.common.util.concurrent.FuturesTest.Foo)",
          "exception": "throw new AssertionFailedError(\"Unexpeted call to apply.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 363,
          "throwingLine": 364,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-12e0478c-17df-4c34-af93-626205484dd5.apply(java.lang.Integer)",
          "exception": "throw new MyRuntimeException();",
          "pathCojunction": "(++calls > 1)",
          "symbolicPathConjunction": "(++calls > 1)",
          "backwardsPathConjunction": "(++calls > 1)",
          "simplifiedPathConjunction": "calls > 1",
          "z3Inputs": "[calls0 = 2]\n[calls0 = 3]\n[calls0 = 4]\n[calls0 = 5]\n[calls0 = 6]\n[calls0 = 7]\n[calls0 = 8]\n[calls0 = 9]\n[calls0 = 10]\n[calls0 = 11]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0 = Int('from0')\ncalls0 = Int('calls0')\n\nconstraints = [\n  ++calls0 > 1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncalls = Symbol('calls', integer=True)\npath_conjunction = (StrictGreaterThan(++calls, 1))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 569,
          "throwingLine": 573,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-12e0478c-17df-4c34-af93-626205484dd5.apply(java.lang.Integer)",
          "exception": "throw new MyRuntimeException();",
          "pathCojunction": "(!(++calls > 1))",
          "symbolicPathConjunction": "(!(++calls > 1))",
          "backwardsPathConjunction": "(!(++calls > 1))",
          "simplifiedPathConjunction": "calls <= 1",
          "z3Inputs": "[calls0 = 1]\n[calls0 = 0]\n[calls0 = -1]\n[calls0 = -2]\n[calls0 = -3]\n[calls0 = -4]\n[calls0 = -5]\n[calls0 = -6]\n[calls0 = -7]\n[calls0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0 = Int('from0')\ncalls0 = Int('calls0')\n\nconstraints = [\n  Not(++calls0 > 1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncalls = Symbol('calls', integer=True)\npath_conjunction = (~((StrictGreaterThan(++calls, 1))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 569,
          "throwingLine": 573,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-12111e66-8a54-48ef-87a2-3ca61d125ff4.apply(java.lang.Integer)",
          "exception": "throw new MyError();",
          "pathCojunction": "(!(++calls > 1))",
          "symbolicPathConjunction": "(!(++calls > 1))",
          "backwardsPathConjunction": "(!(++calls > 1))",
          "simplifiedPathConjunction": "calls <= 1",
          "z3Inputs": "[calls0 = 1]\n[calls0 = 0]\n[calls0 = -1]\n[calls0 = -2]\n[calls0 = -3]\n[calls0 = -4]\n[calls0 = -5]\n[calls0 = -6]\n[calls0 = -7]\n[calls0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0 = Int('from0')\ncalls0 = Int('calls0')\n\nconstraints = [\n  Not(++calls0 > 1)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncalls = Symbol('calls', integer=True)\npath_conjunction = (~((StrictGreaterThan(++calls, 1))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 584,
          "throwingLine": 588,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-12111e66-8a54-48ef-87a2-3ca61d125ff4.apply(java.lang.Integer)",
          "exception": "throw new MyError();",
          "pathCojunction": "(++calls > 1)",
          "symbolicPathConjunction": "(++calls > 1)",
          "backwardsPathConjunction": "(++calls > 1)",
          "simplifiedPathConjunction": "calls > 1",
          "z3Inputs": "[calls0 = 2]\n[calls0 = 3]\n[calls0 = 4]\n[calls0 = 5]\n[calls0 = 6]\n[calls0 = 7]\n[calls0 = 8]\n[calls0 = 9]\n[calls0 = 10]\n[calls0 = 11]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfrom0 = Int('from0')\ncalls0 = Int('calls0')\n\nconstraints = [\n  ++calls0 > 1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncalls = Symbol('calls', integer=True)\npath_conjunction = (StrictGreaterThan(++calls, 1))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 584,
          "throwingLine": 588,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-7d66f8b3-3079-48d5-8dde-3add14843ec6.apply(java.lang.Integer)",
          "exception": "throw exception;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = Int('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 642,
          "throwingLine": 643,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-643de286-8b3c-4bca-8884-0a820130adb8.apply(X)",
          "exception": "throw newAssertionError(\"Unexpected fallback\", t);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 687,
          "throwingLine": 688,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-ee123105-074d-485d-abf7-180a402de8c5.create(java.lang.Throwable)",
          "exception": "throw newAssertionError(\"Unexpected fallback\", t);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 720,
          "throwingLine": 721,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-e381ad86-e97f-436c-84ba-5a7ef76c11b4.apply(X)",
          "exception": "throw newAssertionError(\"Unexpected fallback\", t);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 752,
          "throwingLine": 753,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-5d0d7208-400c-40b0-8496-2feafd7b6844.create(java.lang.Throwable)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 802,
          "throwingLine": 803,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-f2e730d5-52bd-49f6-8d58-dc087ad5fc09.create(java.lang.Throwable)",
          "exception": "throw expectedException;",
          "pathCojunction": "(!(wrapInFuture))",
          "symbolicPathConjunction": "(!(wrapInFuture))",
          "backwardsPathConjunction": "(!(wrapInFuture))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(wrapInFuture)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~(wrapInFuture))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 830,
          "throwingLine": 832,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-7dbf9786-606f-4aa6-988d-37cf65b89c41.apply(java.lang.Throwable)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 965,
          "throwingLine": 966,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-1893ed75-b2e5-48c1-9f18-800f0de3e044.apply(java.lang.Throwable)",
          "exception": "throw expectedException;",
          "pathCojunction": "(!(wrapInFuture))",
          "symbolicPathConjunction": "(!(wrapInFuture))",
          "backwardsPathConjunction": "(!(wrapInFuture))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(wrapInFuture)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\npath_conjunction = (~(wrapInFuture))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 993,
          "throwingLine": 995,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-879b956c-2d86-4b73-b712-178b0e3538ae.apply(java.lang.Throwable)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1168,
          "throwingLine": 1169,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-7d5573f6-f412-433e-8015-2f43f6626d96.apply(java.lang.Throwable)",
          "exception": "throw expectedException;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1190,
          "throwingLine": 1191,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-754b67b5-f19c-4a70-a55d-a40c1127cb06.apply(java.lang.String)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = String('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1381,
          "throwingLine": 1382,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-27b21fe9-5567-48d9-89ec-407da92ceb46.apply(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(inFunction.countDown()) && (functionDone.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = String('input0')\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1419,
          "throwingLine": 1421,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-45d84b2f-e562-40ae-8536-7e8d3698d7bc.apply(java.lang.String)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = String('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1522,
          "throwingLine": 1523,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-ece138d6-882d-4aa6-9041-275c0aa618b1.apply(java.lang.String)",
          "exception": "throw new IllegalStateException(\"May not block. Count is \" + count);",
          "pathCojunction": "(count > 0) && (count > 0)",
          "symbolicPathConjunction": "(inFunction.countDown()) && (functionDone.await())",
          "backwardsPathConjunction": "(count > 0) && (count > 0)",
          "simplifiedPathConjunction": "count > 0",
          "z3Inputs": "[count0 = 1]\n[count0 = 2]\n[count0 = 3]\n[count0 = 4]\n[count0 = 5]\n[count0 = 6]\n[count0 = 7]\n[count0 = 8]\n[count0 = 9]\n[count0 = 10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = String('input0')\ncount0 = Int('count0')\n\nconstraints = [\n  And(count0 > 0, count0 > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncount = Symbol('count', integer=True)\npath_conjunction = ((StrictGreaterThan(count, 0)) & (StrictGreaterThan(count, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1560,
          "throwingLine": 1562,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.TestFutureBatch.Anonymous-310697c1-d90d-446d-91bf-9cb80fb9e113.get()",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 2133,
          "throwingLine": 2134,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.TestFutureBatch.Anonymous-1d051c6c-861a-49db-a9c0-8c985972f07c.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 2138,
          "throwingLine": 2139,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.TestFutureBatch.Anonymous-d3141639-eb8b-49b5-a239-3f98c6515ace.get()",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 2157,
          "throwingLine": 2159,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.TestFutureBatch.Anonymous-2ddae97a-7078-40f2-8e65-474399397a39.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 2164,
          "throwingLine": 2166,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-38530ec8-27fa-4fa8-92bb-2eb79d27bbd0.publish(java.util.logging.LogRecord)",
          "exception": "throw error;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 2612,
          "throwingLine": 2615,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-986981ef-5782-479e-ab3f-8d4ebd43963f.apply(java.lang.Exception)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 2958,
          "throwingLine": 2959,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-9c5e9d29-3c83-4053-b336-f045b510516c.apply(java.lang.Exception)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 2986,
          "throwingLine": 2987,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-1994a97f-55a1-4513-af59-2d18b7dd003d.apply(java.lang.Exception)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 3006,
          "throwingLine": 3007,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.Anonymous-1fdf760d-3272-4056-ae2c-1d4b4b8a12b6.apply(java.lang.Exception)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 3026,
          "throwingLine": 3027,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FuturesTest.BuggyFuture.get()",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 3190,
          "throwingLine": 3191,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/io/MultiReader.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.MultiReader.skip(long)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"n is negative\"))",
          "pathCojunction": "(!(n >= 0))",
          "symbolicPathConjunction": "(Preconditions.checkArgument(n >= 0, \"n is negative\"))",
          "backwardsPathConjunction": "(!(n >= 0))",
          "simplifiedPathConjunction": "n < 0",
          "z3Inputs": "[n0 = -9223372036854775808]\n[n0 = -1]\n[n0 = -2]\n[n0 = -3]\n[n0 = -4]\n[n0 = -5]\n[n0 = -6]\n[n0 = -7]\n[n0 = -8]\n[n0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\n\nconstraints = [\n  n0 >= -9223372036854775808, n0 <= 9223372036854775807, # implicit\n  Not(n0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n')\npath_conjunction = (~((GreaterThan(n, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 64,
          "throwingLine": 65,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/JoinerTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.JoinerTest.Anonymous-a689c589-0190-4a31-9495-b40d9081706c.append(java.lang.CharSequence)",
          "exception": "throw new IOException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncsq0 = String('csq0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 165,
          "throwingLine": 166,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.JoinerTest.Anonymous-7507c634-4453-4e95-8861-f229b7d55645.append(java.lang.CharSequence, int, int)",
          "exception": "throw new IOException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncsq0 = String('csq0')\nstart0 = Int('start0')\nend0 = Int('end0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.JoinerTest.Anonymous-c0e71452-dc0d-4036-947c-1b569e501b73.append(char)",
          "exception": "throw new IOException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 173,
          "throwingLine": 174,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.JoinerTest.DontStringMeBro.toString()",
          "exception": "throw new AssertionFailedError(\"shouldn't be invoked\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 324,
          "throwingLine": 325,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/UnmodifiableSortedMultiset.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.UnmodifiableSortedMultiset.pollFirstEntry()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 82,
          "throwingLine": 83,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.UnmodifiableSortedMultiset.pollLastEntry()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 87,
          "throwingLine": 88,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/AbstractCacheTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.AbstractCacheTest.Anonymous-6e11562b-7271-4972-bfbd-1ecc7668e3ab.getIfPresent(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 85,
          "throwingLine": 86,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/escape/ArrayBasedCharEscaper.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.escape.ArrayBasedCharEscaper.escape(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 117,
          "throwingLine": 118,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/benchmark/com/google/common/util/concurrent/ExecutionListBenchmark.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionListBenchmark.Impl.Anonymous-08b1cc09-1fea-4e36-9d5d-2bd1deaedb51.add(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Executor was null.\"))",
          "pathCojunction": "(!(runnable == null)) && (executor == null)",
          "symbolicPathConjunction": "(future.addListener(runnable, executor))",
          "backwardsPathConjunction": "(!(runnable == null)) && (executor == null)",
          "simplifiedPathConjunction": "executor == null && null != runnable",
          "z3Inputs": "[runnable0_isNull = False, executor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrunnable0_isNull = Bool('runnable0_isNull')\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  And(Not(runnable0_isNull), executor0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrunnable = Symbol('runnable')\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(runnable, null)))) & (Eq(executor, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 172,
          "throwingLine": 173,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionListBenchmark.Impl.Anonymous-08b1cc09-1fea-4e36-9d5d-2bd1deaedb51.add(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Runnable was null.\"))",
          "pathCojunction": "(runnable == null)",
          "symbolicPathConjunction": "(future.addListener(runnable, executor))",
          "backwardsPathConjunction": "(runnable == null)",
          "simplifiedPathConjunction": "null == runnable",
          "z3Inputs": "[runnable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrunnable0_isNull = Bool('runnable0_isNull')\n\nconstraints = [\n  runnable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrunnable = Symbol('runnable')\nnull = Symbol('null')\npath_conjunction = (Eq(runnable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 172,
          "throwingLine": 173,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionListBenchmark.OldExecutionList.add(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Runnable was null.\"))",
          "pathCojunction": "(runnable == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(runnable, \"Runnable was null.\"))",
          "backwardsPathConjunction": "(runnable == null)",
          "simplifiedPathConjunction": "null == runnable",
          "z3Inputs": "[runnable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrunnable0_isNull = Bool('runnable0_isNull')\n\nconstraints = [\n  runnable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrunnable = Symbol('runnable')\nnull = Symbol('null')\npath_conjunction = (Eq(runnable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 319,
          "throwingLine": 320,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionListBenchmark.OldExecutionList.add(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Executor was null.\"))",
          "pathCojunction": "(!(runnable == null)) && (executor == null)",
          "symbolicPathConjunction": "(!(Preconditions.checkNotNull(runnable, \"Runnable was null.\"))) && (!(Preconditions.checkNotNull(executor, \"Executor was null.\")))",
          "backwardsPathConjunction": "(!(runnable == null)) && (executor == null)",
          "simplifiedPathConjunction": "executor == null && null != runnable",
          "z3Inputs": "[runnable0_isNull = False, executor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrunnable0_isNull = Bool('runnable0_isNull')\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  And(Not(runnable0_isNull), executor0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrunnable = Symbol('runnable')\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(runnable, null)))) & (Eq(executor, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 319,
          "throwingLine": 321,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionListBenchmark.NewExecutionListWithoutReverse.add(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Runnable was null.\"))",
          "pathCojunction": "(runnable == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(runnable, \"Runnable was null.\"))",
          "backwardsPathConjunction": "(runnable == null)",
          "simplifiedPathConjunction": "null == runnable",
          "z3Inputs": "[runnable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrunnable0_isNull = Bool('runnable0_isNull')\n\nconstraints = [\n  runnable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrunnable = Symbol('runnable')\nnull = Symbol('null')\npath_conjunction = (Eq(runnable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 380,
          "throwingLine": 381,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionListBenchmark.NewExecutionListWithoutReverse.add(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Executor was null.\"))",
          "pathCojunction": "(!(runnable == null)) && (executor == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(runnable, \"Runnable was null.\")) && (Preconditions.checkNotNull(executor, \"Executor was null.\"))",
          "backwardsPathConjunction": "(!(runnable == null)) && (executor == null)",
          "simplifiedPathConjunction": "executor == null && null != runnable",
          "z3Inputs": "[runnable0_isNull = False, executor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrunnable0_isNull = Bool('runnable0_isNull')\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  And(Not(runnable0_isNull), executor0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrunnable = Symbol('runnable')\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(runnable, null)))) & (Eq(executor, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 380,
          "throwingLine": 382,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionListBenchmark.NewExecutionListQueue.add(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Runnable was null.\"))",
          "pathCojunction": "(runnable == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(runnable, \"Runnable was null.\"))",
          "backwardsPathConjunction": "(runnable == null)",
          "simplifiedPathConjunction": "null == runnable",
          "z3Inputs": "[runnable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrunnable0_isNull = Bool('runnable0_isNull')\n\nconstraints = [\n  runnable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrunnable = Symbol('runnable')\nnull = Symbol('null')\npath_conjunction = (Eq(runnable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 443,
          "throwingLine": 444,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.ExecutionListBenchmark.NewExecutionListQueue.add(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw new NullPointerException(String.valueOf(\"Executor was null.\"))",
          "pathCojunction": "(!(runnable == null)) && (executor == null)",
          "symbolicPathConjunction": "(Preconditions.checkNotNull(runnable, \"Runnable was null.\")) && (Preconditions.checkNotNull(executor, \"Executor was null.\"))",
          "backwardsPathConjunction": "(!(runnable == null)) && (executor == null)",
          "simplifiedPathConjunction": "executor == null && null != runnable",
          "z3Inputs": "[runnable0_isNull = False, executor0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrunnable0_isNull = Bool('runnable0_isNull')\nexecutor0_isNull = Bool('executor0_isNull')\n\nconstraints = [\n  And(Not(runnable0_isNull), executor0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrunnable = Symbol('runnable')\nexecutor = Symbol('executor')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(runnable, null)))) & (Eq(executor, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 443,
          "throwingLine": 445,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.builder()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 48,
          "throwingLine": 49,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 149,
          "throwingLine": 150,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Collection<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 155,
          "throwingLine": 156,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 161,
          "throwingLine": 162,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(comparator == null)) && (!(comparator == null)) && (!(elements.hasNext())) && (comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator)) && ((checkNotNull(comparator)) && (!elements.hasNext()) && (emptySet(comparator)))",
          "backwardsPathConjunction": "(!(comparator == null)) && (!(comparator == null)) && (!(elements.hasNext())) && (comparator == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  And(And(And(Not(comparator0_isNull), Not(comparator0_isNull)), Not(elements0.hasNext())), comparator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nextends = Symbol('extends')\nelements_hasNext = Symbol('elements_hasNext')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(comparator, null)))) & (~((Eq(comparator, null))))) & (~(elements_hasNext))) & (Eq(comparator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 161,
          "throwingLine": 163,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOfSorted(java.util.SortedSet<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null) && (!(comparator == null)) && (!(sortedSet.iterator().hasNext())) && (comparator == null)",
          "symbolicPathConjunction": "(comparator == null) && ((checkNotNull(comparator)) && (!elements.hasNext()) && (emptySet(comparator)))",
          "backwardsPathConjunction": "(comparator == null) && (!(comparator == null)) && (!(sortedSet.iterator().hasNext())) && (comparator == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator1_isNull = Bool('comparator1_isNull')\n\nconstraints = [\n  And(And(And(comparator1_isNull, Not(comparator1_isNull)), Not(sortedSet0.iterator().hasNext())), comparator1_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsortedSet = Symbol('sortedSet')\nsortedSet_iterator_hasNext = Symbol('sortedSet_iterator_hasNext')\nsortedSet_iterator = Symbol('sortedSet_iterator')\nnull = Symbol('null')\npath_conjunction = ((((Eq(NATURAL_ORDER, null)) & (~((Eq(NATURAL_ORDER, null))))) & (~(sortedSet_iterator_hasNext))) & (Eq(NATURAL_ORDER, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 167,
          "throwingLine": 172,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOfSorted(java.util.SortedSet<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null) && (comparator == null)",
          "symbolicPathConjunction": "(comparator == null) && (checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null) && (comparator == null)",
          "z3Inputs": "[comparator1_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator1_isNull = Bool('comparator1_isNull')\n\nconstraints = [\n  And(comparator1_isNull, comparator1_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnull = Symbol('null')\npath_conjunction = ((Eq(NATURAL_ORDER, null)) & (Eq(NATURAL_ORDER, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 167,
          "throwingLine": 172,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.subSet(E, E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromElement == null)",
          "symbolicPathConjunction": "(checkNotNull(fromElement))",
          "backwardsPathConjunction": "(fromElement == null)",
          "simplifiedPathConjunction": "fromElement == null",
          "z3Inputs": "[fromElement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromElement0_isNull = Bool('fromElement0_isNull')\n\nconstraints = [\n  fromElement0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\nnull = Symbol('null')\npath_conjunction = (Eq(fromElement, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 345,
          "throwingLine": 346,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.subSet(E, E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromElement == null)) && (!(toElement == null)) && (!(comparator().compare(fromElement, toElement) == 0 && !(true && false))) && (toElement == null)",
          "symbolicPathConjunction": "((checkNotNull(fromElement)) && (checkNotNull(toElement)) && (!(comparator().compare(fromElement, toElement) == 0 && !(fromInclusive && toInclusive))) && (tailSet(fromElement, fromInclusive).headSet(toElement, toInclusive)))",
          "backwardsPathConjunction": "(!(fromElement == null)) && (!(toElement == null)) && (!(comparator().compare(fromElement, toElement) == 0 && !(true && false))) && (toElement == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromElement0_isNull = Bool('fromElement0_isNull')\ntoElement0_isNull = Bool('toElement0_isNull')\n\nconstraints = [\n  And(And(And(Not(fromElement0_isNull), Not(toElement0_isNull)), Not(And(comparator().compare(fromElement0, toElement0) == 0, Not(And(True, False))))), toElement0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\ntoElement = Symbol('toElement')\n_comparator_compare = Symbol('_comparator_compare')\n_comparator = Symbol('_comparator')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(fromElement, null)))) & (~((Eq(toElement, null))))) & (~(((Eq(_comparator_compare, 0)) & (~((True & False))))))) & (Eq(toElement, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 345,
          "throwingLine": 346,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.subSet(E, E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromElement == null)) && (toElement == null)",
          "symbolicPathConjunction": "((checkNotNull(fromElement)) && (checkNotNull(toElement)))",
          "backwardsPathConjunction": "(!(fromElement == null)) && (toElement == null)",
          "simplifiedPathConjunction": "null == toElement && fromElement != null",
          "z3Inputs": "[fromElement0_isNull = False, toElement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromElement0_isNull = Bool('fromElement0_isNull')\ntoElement0_isNull = Bool('toElement0_isNull')\n\nconstraints = [\n  And(Not(fromElement0_isNull), toElement0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\ntoElement = Symbol('toElement')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(fromElement, null)))) & (Eq(toElement, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 345,
          "throwingLine": 346,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.Builder.build()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 421,
          "throwingLine": 422,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.Builder.build()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(comparator == null)) && (!(contents.iterator().hasNext())) && (comparator == null)",
          "symbolicPathConjunction": "((checkNotNull(comparator)) && (!elements.hasNext()) && (emptySet(comparator)))",
          "backwardsPathConjunction": "(!(comparator == null)) && (!(contents.iterator().hasNext())) && (comparator == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  And(And(Not(comparator0_isNull), Not(contents.iterator().hasNext())), comparator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\ncontents_iterator_hasNext = Symbol('contents_iterator_hasNext')\ncontents_iterator = Symbol('contents_iterator')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(comparator, null)))) & (~(contents_iterator_hasNext))) & (Eq(comparator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 421,
          "throwingLine": 422,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Joiner.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Joiner.appendTo(A, java.lang.Iterable<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(appendable == null)",
          "symbolicPathConjunction": "(appendTo(appendable, parts.iterator()))",
          "backwardsPathConjunction": "(appendable == null)",
          "simplifiedPathConjunction": "appendable == null",
          "z3Inputs": "[appendable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nappendable0_isNull = Bool('appendable0_isNull')\n\nconstraints = [\n  appendable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nappendable = Symbol('appendable')\nnull = Symbol('null')\npath_conjunction = (Eq(appendable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 97,
          "throwingLine": 98,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.appendTo(A, java.util.Iterator<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(appendable == null)",
          "symbolicPathConjunction": "(checkNotNull(appendable))",
          "backwardsPathConjunction": "(appendable == null)",
          "simplifiedPathConjunction": "appendable == null",
          "z3Inputs": "[appendable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nappendable0_isNull = Bool('appendable0_isNull')\n\nconstraints = [\n  appendable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nappendable = Symbol('appendable')\nnull = Symbol('null')\npath_conjunction = (Eq(appendable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 107,
          "throwingLine": 108,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.appendTo(A, java.lang.Object[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(appendable == null)",
          "symbolicPathConjunction": "(appendTo(appendable, Arrays.asList(parts)))",
          "backwardsPathConjunction": "(appendable == null)",
          "simplifiedPathConjunction": "appendable == null",
          "z3Inputs": "[appendable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nappendable0_isNull = Bool('appendable0_isNull')\n\nconstraints = [\n  appendable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nappendable = Symbol('appendable')\nnull = Symbol('null')\npath_conjunction = (Eq(appendable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 123,
          "throwingLine": 124,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.appendTo(A, java.lang.Object, java.lang.Object, java.lang.Object...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(appendable == null)",
          "symbolicPathConjunction": "(appendTo(appendable, iterable(first, second, rest)))",
          "backwardsPathConjunction": "(appendable == null)",
          "simplifiedPathConjunction": "appendable == null",
          "z3Inputs": "[appendable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nappendable0_isNull = Bool('appendable0_isNull')\n\nconstraints = [\n  appendable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nappendable = Symbol('appendable')\nnull = Symbol('null')\npath_conjunction = (Eq(appendable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 132,
          "throwingLine": 133,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.useForNull(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(nullText == null)",
          "symbolicPathConjunction": "(checkNotNull(nullText))",
          "backwardsPathConjunction": "(nullText == null)",
          "simplifiedPathConjunction": "null == nullText",
          "z3Inputs": "[nullText0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnullText0 = String('nullText0')\nnullText0_isNull = Bool('nullText0_isNull')\n\nconstraints = [\n  nullText0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnullText = Symbol('nullText')\nnull = Symbol('null')\npath_conjunction = (Eq(nullText, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 223,
          "throwingLine": 224,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.Anonymous-17d6b1a2-a6fb-4f99-8964-9cc3207a7178.useForNull(java.lang.String)",
          "exception": "throw new UnsupportedOperationException(\"already specified useForNull\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnullText0 = String('nullText0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 232,
          "throwingLine": 233,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.Anonymous-e54e8e5c-bff0-4eec-b78d-3b72f58be8c7.skipNulls()",
          "exception": "throw new UnsupportedOperationException(\"already specified useForNull\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 237,
          "throwingLine": 238,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.Anonymous-53f398f1-c627-4078-8f28-ae33b5fb775a.appendTo(A, java.util.Iterator<?>)",
          "exception": "throw new NullPointerException(String.valueOf(\"appendable\"))",
          "pathCojunction": "(appendable == null)",
          "symbolicPathConjunction": "(checkNotNull(appendable, \"appendable\"))",
          "backwardsPathConjunction": "(appendable == null)",
          "simplifiedPathConjunction": "appendable == null",
          "z3Inputs": "[appendable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nappendable0_isNull = Bool('appendable0_isNull')\n\nconstraints = [\n  appendable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nappendable = Symbol('appendable')\nnull = Symbol('null')\npath_conjunction = (Eq(appendable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 251,
          "throwingLine": 252,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.Anonymous-53f398f1-c627-4078-8f28-ae33b5fb775a.appendTo(A, java.util.Iterator<?>)",
          "exception": "throw new NullPointerException(String.valueOf(\"parts\"))",
          "pathCojunction": "(!(appendable == null)) && (parts == null)",
          "symbolicPathConjunction": "(checkNotNull(appendable, \"appendable\")) && (checkNotNull(parts, \"parts\"))",
          "backwardsPathConjunction": "(!(appendable == null)) && (parts == null)",
          "simplifiedPathConjunction": "null == parts && appendable != null",
          "z3Inputs": "[appendable0_isNull = False, parts0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nappendable0_isNull = Bool('appendable0_isNull')\nparts0_isNull = Bool('parts0_isNull')\n\nconstraints = [\n  And(Not(appendable0_isNull), parts0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nappendable = Symbol('appendable')\nparts = Symbol('parts')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(appendable, null)))) & (Eq(parts, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 251,
          "throwingLine": 253,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.Anonymous-a2ba6c30-5f5b-4706-a5d7-6773a76d1651.useForNull(java.lang.String)",
          "exception": "throw new UnsupportedOperationException(\"already specified skipNulls\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnullText0 = String('nullText0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 272,
          "throwingLine": 273,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.Anonymous-e05c1519-aab3-4a11-ad0b-5317ab895acd.withKeyValueSeparator(java.lang.String)",
          "exception": "throw new UnsupportedOperationException(\"can't use .skipNulls() with maps\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkvs0 = String('kvs0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 277,
          "throwingLine": 278,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.MapJoiner.appendTo(A, java.util.Map<?, ?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(appendable == null)",
          "symbolicPathConjunction": "(appendTo(appendable, map.entrySet()))",
          "backwardsPathConjunction": "(appendable == null)",
          "simplifiedPathConjunction": "appendable == null",
          "z3Inputs": "[appendable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nappendable0_isNull = Bool('appendable0_isNull')\n\nconstraints = [\n  appendable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nappendable = Symbol('appendable')\nnull = Symbol('null')\npath_conjunction = (Eq(appendable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 323,
          "throwingLine": 324,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.MapJoiner.appendTo(A, java.lang.Iterable<? extends java.util.Map.Entry<?, ?>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(appendable == null)",
          "symbolicPathConjunction": "(appendTo(appendable, entries.iterator()))",
          "backwardsPathConjunction": "(appendable == null)",
          "simplifiedPathConjunction": "appendable == null",
          "z3Inputs": "[appendable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nappendable0_isNull = Bool('appendable0_isNull')\n\nconstraints = [\n  appendable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nappendable = Symbol('appendable')\nnull = Symbol('null')\npath_conjunction = (Eq(appendable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 353,
          "throwingLine": 354,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Joiner.MapJoiner.appendTo(A, java.util.Iterator<? extends java.util.Map.Entry<?, ?>>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(appendable == null)",
          "symbolicPathConjunction": "(checkNotNull(appendable))",
          "backwardsPathConjunction": "(appendable == null)",
          "simplifiedPathConjunction": "appendable == null",
          "z3Inputs": "[appendable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nappendable0_isNull = Bool('appendable0_isNull')\n\nconstraints = [\n  appendable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nappendable = Symbol('appendable')\nnull = Symbol('null')\npath_conjunction = (Eq(appendable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 365,
          "throwingLine": 366,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.cache.PopulatedCachesTest.Anonymous-d1d1cc78-0167-4769-a34d-52f92412accd.apply(com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>)",
          "exception": "throw new IllegalStateException(String.valueOf(\"weigher requires maximumWeight\"))",
          "pathCojunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "symbolicPathConjunction": "(builder.recordStats().build(identityLoader()))",
          "backwardsPathConjunction": "(!(weigher == null)) && (strictParsing) && (!(maximumWeight != UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstrictParsing0 = Bool('strictParsing0')\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(And(Not(weigher0_isNull), strictParsing0), Not(maximumWeight != UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstrictParsing = Symbol('strictParsing')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(weigher, null)))) & strictParsing) & (~((Ne(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 304,
          "throwingLine": 305,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.cache.PopulatedCachesTest.Anonymous-d1d1cc78-0167-4769-a34d-52f92412accd.apply(com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>)",
          "exception": "throw new IllegalStateException(String.valueOf(\"maximumWeight requires weigher\"))",
          "pathCojunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "symbolicPathConjunction": "(builder.recordStats().build(identityLoader()))",
          "backwardsPathConjunction": "(weigher == null) && (!(maximumWeight == UNSET_INT))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nweigher0_isNull = Bool('weigher0_isNull')\n\nconstraints = [\n  And(weigher0_isNull, Not(maximumWeight == UNSET_INT))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((Eq(weigher, null)) & (~((Eq(maximumWeight, UNSET_INT)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 304,
          "throwingLine": 305,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/CaseFormat.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.CaseFormat.to(com.google.common.base.CaseFormat, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(format == null)) && (str == null)",
          "symbolicPathConjunction": "(checkNotNull(format)) && (checkNotNull(str))",
          "backwardsPathConjunction": "(!(format == null)) && (str == null)",
          "simplifiedPathConjunction": "null == str && format != null",
          "z3Inputs": "[format0_isNull = False, str0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstr0 = String('str0')\nformat0_isNull = Bool('format0_isNull')\nstr0_isNull = Bool('str0_isNull')\n\nconstraints = [\n  And(Not(format0_isNull), str0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nformat = Symbol('format')\nstr = Symbol('str')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(format, null)))) & (Eq(str, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 135,
          "throwingLine": 137,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.CaseFormat.to(com.google.common.base.CaseFormat, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(format == null)",
          "symbolicPathConjunction": "(checkNotNull(format))",
          "backwardsPathConjunction": "(format == null)",
          "simplifiedPathConjunction": "format == null",
          "z3Inputs": "[format0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstr0 = String('str0')\nformat0_isNull = Bool('format0_isNull')\n\nconstraints = [\n  format0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nformat = Symbol('format')\nnull = Symbol('null')\npath_conjunction = (Eq(format, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 135,
          "throwingLine": 136,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/primitives/Chars.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.indexOf(char[], char[])",
          "exception": "throw new NullPointerException(String.valueOf(\"array\"))",
          "pathCojunction": "(array == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\"))",
          "backwardsPathConjunction": "(array == null)",
          "simplifiedPathConjunction": "array == null",
          "z3Inputs": "[array0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\n\nconstraints = [\n  array0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\nnull = Symbol('null')\npath_conjunction = (Eq(array, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 178,
          "throwingLine": 179,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.indexOf(char[], char[])",
          "exception": "throw new NullPointerException(String.valueOf(\"target\"))",
          "pathCojunction": "(!(array == null)) && (target == null)",
          "symbolicPathConjunction": "(checkNotNull(array, \"array\")) && (checkNotNull(target, \"target\"))",
          "backwardsPathConjunction": "(!(array == null)) && (target == null)",
          "simplifiedPathConjunction": "null == target && array != null",
          "z3Inputs": "[array0_isNull = False, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_isNull = Bool('array0_isNull')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  And(Not(array0_isNull), target0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(array, null)))) & (Eq(target, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 178,
          "throwingLine": 180,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.min(char...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 228,
          "throwingLine": 229,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.max(char...)",
          "exception": "throw new IllegalArgumentException()",
          "pathCojunction": "(!(array.length > 0))",
          "symbolicPathConjunction": "(checkArgument(array.length > 0))",
          "backwardsPathConjunction": "(!(array.length > 0))",
          "simplifiedPathConjunction": "array.length <= 0",
          "z3Inputs": "[array0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\narray0_length = Int('array0_length')\n\nconstraints = [\n  array0_length >= 0, # implicit\n  Not(array0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\narray = Symbol('array')\narray_length = Symbol('array_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(array_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 247,
          "throwingLine": 248,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.join(java.lang.String, char...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(separator == null)",
          "symbolicPathConjunction": "(checkNotNull(separator))",
          "backwardsPathConjunction": "(separator == null)",
          "simplifiedPathConjunction": "null == separator",
          "z3Inputs": "[separator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nseparator0 = String('separator0')\nseparator0_isNull = Bool('separator0_isNull')\n\nconstraints = [\n  separator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nseparator = Symbol('separator')\nnull = Symbol('null')\npath_conjunction = (Eq(separator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 367,
          "throwingLine": 368,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.CharArrayAsList.get(int)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 496,
          "throwingLine": 497,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.CharArrayAsList.set(int, java.lang.Character)",
          "exception": "throw new IndexOutOfBoundsException(badElementIndex(index, size(), \"index\"))",
          "pathCojunction": "(index < 0 || index >= size())",
          "symbolicPathConjunction": "(checkElementIndex(index, size()))",
          "backwardsPathConjunction": "(index < 0 || index >= size())",
          "simplifiedPathConjunction": "size() <= index || index < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= size())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\n_size = Symbol('_size')\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, _size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 533,
          "throwingLine": 534,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.primitives.Chars.CharArrayAsList.subList(int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(fromIndex, toIndex, size))",
          "pathCojunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > size)",
          "symbolicPathConjunction": "(size()) && (checkPositionIndexes(fromIndex, toIndex, size))",
          "backwardsPathConjunction": "(fromIndex < 0 || toIndex < fromIndex || toIndex > end - start)",
          "simplifiedPathConjunction": "fromIndex > toIndex || end < start + toIndex || fromIndex < 0",
          "z3Inputs": "[fromIndex0 = -1,\n size0 = -1,\n toIndex0 = -1,\n start0 = 0,\n end0 = -1]\n[toIndex0 = -2,\n start0 = -1,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -3]\n[toIndex0 = -3,\n start0 = -2,\n size0 = -2,\n fromIndex0 = -2,\n end0 = -4]\n[start0 = -2, size0 = -5, toIndex0 = -4, end0 = -7]\n[toIndex0 = -5,\n start0 = -2,\n size0 = -6,\n fromIndex0 = -2,\n end0 = -8]\n[start0 = -3, size0 = -6, fromIndex0 = -2, end0 = -9]\n[start0 = -3, size0 = -6, fromIndex0 = -3, end0 = -9]\n[toIndex0 = -5,\n start0 = -4,\n size0 = -6,\n fromIndex0 = -4,\n end0 = -10]\n[start0 = -5, size0 = -6, toIndex0 = -5, end0 = -11]\n[start0 = -6, size0 = -7, toIndex0 = -6, end0 = -13]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nstart0 = Int('start0')\nend0 = Int('end0')\nsize0 = Int('size0')\n\nconstraints = [\n  size0 == end0 - start0,\n  Or(Or(fromIndex0 < 0, toIndex0 < fromIndex0), toIndex0 > size0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromIndex = Symbol('fromIndex', integer=True)\ntoIndex = Symbol('toIndex', integer=True)\nstart = Symbol('start', integer=True)\nend = Symbol('end', integer=True)\npath_conjunction = (((StrictLessThan(fromIndex, 0)) | (StrictLessThan(toIndex, fromIndex))) | (StrictGreaterThan(toIndex, (end - start))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 542,
          "throwingLine": 544,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/TreeRangeMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeMap.put(com.google.common.collect.Range<K>, V)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(lowerBound.equals(upperBound))) && (value == null)",
          "symbolicPathConjunction": "(!(range.isEmpty())) && (!range.isEmpty()) && (!(checkNotNull(value)))",
          "backwardsPathConjunction": "(!(lowerBound.equals(upperBound))) && (value == null)",
          "simplifiedPathConjunction": "null == value && !lowerBound.equals(upperBound)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(lowerBound0.equals(upperBound0)), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalue = Symbol('value')\nupperBound = Symbol('upperBound')\nlowerBound = Symbol('lowerBound')\nlowerBound_equals = Symbol('lowerBound_equals')\nnull = Symbol('null')\npath_conjunction = ((~(lowerBound_equals)) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 125,
          "throwingLine": 127,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeMap.span()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(firstEntry == null)",
          "symbolicPathConjunction": "(firstEntry == null)",
          "backwardsPathConjunction": "(entriesByLowerBound.firstEntry() == null)",
          "simplifiedPathConjunction": "entriesByLowerBound.firstEntry() == null",
          "z3Inputs": "[firstEntry0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfirstEntry0_isNull = Bool('firstEntry0_isNull')\n\nconstraints = [\n  firstEntry0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nentriesByLowerBound = Symbol('entriesByLowerBound')\nentriesByLowerBound_firstEntry = Symbol('entriesByLowerBound_firstEntry')\nnull = Symbol('null')\npath_conjunction = (Eq(entriesByLowerBound_firstEntry, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 146,
          "throwingLine": 150,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeMap.Anonymous-85b2315d-42e9-428f-a81f-e3febc7eb565.span()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 287,
          "throwingLine": 288,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeMap.Anonymous-6b4eed4b-3a3c-474f-bf73-15f73853082e.put(com.google.common.collect.Range, java.lang.Object)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(range == null)",
          "symbolicPathConjunction": "(checkNotNull(range))",
          "backwardsPathConjunction": "(range == null)",
          "simplifiedPathConjunction": "null == range",
          "z3Inputs": "[range0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrange0_isNull = Bool('range0_isNull')\n\nconstraints = [\n  range0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrange = Symbol('range')\nnull = Symbol('null')\npath_conjunction = (Eq(range, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 292,
          "throwingLine": 293,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeMap.Anonymous-6b4eed4b-3a3c-474f-bf73-15f73853082e.put(com.google.common.collect.Range, java.lang.Object)",
          "exception": "throw new IllegalArgumentException(\"Cannot insert range \" + range + \" into an empty subRangeMap\");",
          "pathCojunction": "(!(range == null))",
          "symbolicPathConjunction": "(checkNotNull(range))",
          "backwardsPathConjunction": "(!(range == null))",
          "simplifiedPathConjunction": "null != range",
          "z3Inputs": "[range0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrange0_isNull = Bool('range0_isNull')\n\nconstraints = [\n  Not(range0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrange = Symbol('range')\nnull = Symbol('null')\npath_conjunction = (~((Eq(range, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 292,
          "throwingLine": 294,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeMap.Anonymous-464ab4ad-f5a9-4912-97a2-0b1663afd1e0.putAll(com.google.common.collect.RangeMap)",
          "exception": "throw new IllegalArgumentException(\"Cannot putAll(nonEmptyRangeMap) into an empty \" + \"subRangeMap\");",
          "pathCojunction": "(!(rangeMap.asMapOfRanges().isEmpty()))",
          "symbolicPathConjunction": "(!rangeMap.asMapOfRanges().isEmpty())",
          "backwardsPathConjunction": "(!(rangeMap.asMapOfRanges().isEmpty()))",
          "simplifiedPathConjunction": "!rangeMap.asMapOfRanges()_isEmpty",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  Not(rangeMap0.asMapOfRanges().isEmpty())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrangeMap = Symbol('rangeMap')\nrangeMap_asMapOfRanges_isEmpty = Symbol('rangeMap_asMapOfRanges_isEmpty')\nrangeMap_asMapOfRanges = Symbol('rangeMap_asMapOfRanges')\npath_conjunction = (~(rangeMap_asMapOfRanges_isEmpty))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 299,
          "throwingLine": 301,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeMap.Anonymous-73f2ddf7-a580-479c-958a-bf526fe1c8b6.remove(com.google.common.collect.Range)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(range == null)",
          "symbolicPathConjunction": "(checkNotNull(range))",
          "backwardsPathConjunction": "(range == null)",
          "simplifiedPathConjunction": "null == range",
          "z3Inputs": "[range0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrange0_isNull = Bool('range0_isNull')\n\nconstraints = [\n  range0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrange = Symbol('range')\nnull = Symbol('null')\npath_conjunction = (Eq(range, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 310,
          "throwingLine": 311,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeRangeMap.Anonymous-5645f65b-e17d-4339-873c-5f9cc0e9fb1f.subRangeMap(com.google.common.collect.Range)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(range == null)",
          "symbolicPathConjunction": "(checkNotNull(range))",
          "backwardsPathConjunction": "(range == null)",
          "simplifiedPathConjunction": "null == range",
          "z3Inputs": "[range0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nrange0_isNull = Bool('range0_isNull')\n\nconstraints = [\n  range0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nrange = Symbol('range')\nnull = Symbol('null')\npath_conjunction = (Eq(range, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 325,
          "throwingLine": 326,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/collect/testing/MinimalCollection.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.MinimalCollection.contains(java.lang.Object)",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "(!(allowNulls)) && (object == null)",
          "symbolicPathConjunction": "(!(allowNulls)) && (object == null)",
          "backwardsPathConjunction": "(!(allowNulls)) && (object == null)",
          "simplifiedPathConjunction": "null == object && !allowNulls",
          "z3Inputs": "[object0_isNull = True, allowNulls0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nallowNulls0 = Bool('allowNulls0')\nobject0_isNull = Bool('object0_isNull')\n\nconstraints = [\n  And(Not(allowNulls0), object0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nobject = Symbol('object')\nallowNulls = Symbol('allowNulls')\nnull = Symbol('null')\npath_conjunction = ((~(allowNulls)) & (Eq(object, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 70,
          "throwingLine": 74,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.MinimalCollection.addAll(java.util.Collection<? extends E>)",
          "exception": "throw up();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 108,
          "throwingLine": 109,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.MinimalCollection.removeAll(java.util.Collection<?>)",
          "exception": "throw up();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 111,
          "throwingLine": 112,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.MinimalCollection.retainAll(java.util.Collection<?>)",
          "exception": "throw up();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 114,
          "throwingLine": 115,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.testing.MinimalCollection.clear()",
          "exception": "throw up();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 117,
          "throwingLine": 118,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Enums.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Enums.getIfPresent(java.lang.Class<T>, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(enumClass == null)",
          "symbolicPathConjunction": "(checkNotNull(enumClass))",
          "backwardsPathConjunction": "(enumClass == null)",
          "simplifiedPathConjunction": "enumClass == null",
          "z3Inputs": "[enumClass0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = String('value0')\nenumClass0_isNull = Bool('enumClass0_isNull')\n\nconstraints = [\n  enumClass0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nenumClass = Symbol('enumClass')\nnull = Symbol('null')\npath_conjunction = (Eq(enumClass, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 75,
          "throwingLine": 76,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Enums.getIfPresent(java.lang.Class<T>, java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(enumClass == null)) && (value == null)",
          "symbolicPathConjunction": "(checkNotNull(enumClass)) && (checkNotNull(value))",
          "backwardsPathConjunction": "(!(enumClass == null)) && (value == null)",
          "simplifiedPathConjunction": "null == value && enumClass != null",
          "z3Inputs": "[value0_isNull = True, enumClass0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = String('value0')\nenumClass0_isNull = Bool('enumClass0_isNull')\nvalue0_isNull = Bool('value0_isNull')\n\nconstraints = [\n  And(Not(enumClass0_isNull), value0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nenumClass = Symbol('enumClass')\nvalue = Symbol('value')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(enumClass, null)))) & (Eq(value, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 75,
          "throwingLine": 77,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/hash/HashCode.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.hash.HashCode.writeBytesTo(byte[], int, int)",
          "exception": "throw new IndexOutOfBoundsException(badPositionIndexes(offset, offset + maxLength, dest.length))",
          "pathCojunction": "(offset < 0 || offset + maxLength < offset || offset + maxLength > dest.length)",
          "symbolicPathConjunction": "(Preconditions.checkPositionIndexes(offset, offset + maxLength, dest.length))",
          "backwardsPathConjunction": "(offset < 0 || offset + maxLength < offset || offset + maxLength > dest.length)",
          "simplifiedPathConjunction": "dest.length < maxLength + offset || maxLength < 0 || offset < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noffset0 = Int('offset0')\nmaxLength0 = Int('maxLength0')\nmaxLength1 = Int('maxLength1')\ndest0_length = Int('dest0_length')\n\nconstraints = [\n  maxLength1 == Ints.min(maxLength0, bits() / 8),\n  dest0_length >= 0, # implicit\n  Or(Or(offset0 < 0, offset0 + maxLength1 < offset0), offset0 + maxLength1 > dest0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndest = Symbol('dest')\noffset = Symbol('offset', integer=True)\nmaxLength = Symbol('maxLength', integer=True)\ndest_length = Symbol('dest_length', integer=True)\npath_conjunction = (((StrictLessThan(offset, 0)) | (StrictLessThan((offset + maxLength), offset))) | (StrictGreaterThan((offset + maxLength), dest_length)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 94,
          "throwingLine": 96,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.hash.HashCode.IntHashCode.asLong()",
          "exception": "throw new IllegalStateException(\"this HashCode only has 32 bits; cannot create a long\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 157,
          "throwingLine": 158,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.hash.HashCode.fromString(java.lang.String)",
          "exception": "throw new IllegalArgumentException(\"Illegal hexadecimal character: \" + string.charAt(i + 1))",
          "pathCojunction": "(i < string.length()) && (!(string.charAt(i) >= '0' && string.charAt(i) <= '9')) && (string.charAt(i) >= 'a' && string.charAt(i) <= 'f') && (!(string.charAt(i + 1) >= '0' && string.charAt(i + 1) <= '9')) && (!(string.charAt(i + 1) >= 'a' && string.charAt(i + 1) <= 'f'))",
          "symbolicPathConjunction": "(i < string.length()) && ((!(ch >= '0' && ch <= '9')) && (ch >= 'a' && ch <= 'f')) && ((!(ch >= '0' && ch <= '9')) && (!(ch >= 'a' && ch <= 'f')))",
          "backwardsPathConjunction": "(0 < string.length()) && (!(string.charAt(0) >= '0' && string.charAt(0) <= '9')) && (string.charAt(0) >= 'a' && string.charAt(0) <= 'f') && (!(string.charAt(0 + 1) >= '0' && string.charAt(0 + 1) <= '9')) && (!(string.charAt(0 + 1) >= 'a' && string.charAt(0 + 1) <= 'f'))",
          "simplifiedPathConjunction": "string.charAt(0 + 1) >= wit_str_2 && string.charAt(0 + 1) <= wit_str_3 && (string.charAt(0 + 1) > wit_str_1 || string.charAt(0 + 1) < wit_str_0) && (string.charAt(0 + 1) > '9' || string.charAt(0 + 1) < '0') && (string.charAt(0 + 1) > 'f' || string.charAt(0 + 1) < 'a') && string.length() > 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\ni0 = Int('i0')\nch10 = Int('ch10')\n\nconstraints = [\n  bytes0 == new byte[Length(string0) / 2],\n  i0 == 0,\n  ch10 == string0.charAt(i0) - 'a' + 10 << 4,\n  And(And(And(And(i0 < Length(string0), Not(And(string0.charAt(i0) >= '0', string0.charAt(i0) <= '9'))), And(string0.charAt(i0) >= 'a', string0.charAt(i0) <= 'f')), Not(And(string0.charAt(i0 + 1) >= '0', string0.charAt(i0 + 1) <= '9'))), Not(And(string0.charAt(i0 + 1) >= 'a', string0.charAt(i0 + 1) <= 'f')))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nstring_length = Symbol('string_length')\nstring_charAt = Symbol('string_charAt')\nwit_str_0 = Symbol('wit_str_0') # '0'\nwit_str_1 = Symbol('wit_str_1') # '9'\nwit_str_2 = Symbol('wit_str_2') # 'a'\nwit_str_3 = Symbol('wit_str_3') # 'f'\nwit_str_4 = Symbol('wit_str_4') # '0'\nwit_str_5 = Symbol('wit_str_5') # '9'\nwit_str_6 = Symbol('wit_str_6') # 'a'\nwit_str_7 = Symbol('wit_str_7') # 'f'\npath_conjunction = (((((StrictLessThan(0, string_length)) & (~(((GreaterThan(string_charAt, wit_str_0)) & (LessThan(string_charAt, wit_str_1)))))) & ((GreaterThan(string_charAt, wit_str_2)) & (LessThan(string_charAt, wit_str_3)))) & (~(((GreaterThan(string_charAt, wit_str_4)) & (LessThan(string_charAt, wit_str_5)))))) & (~(((GreaterThan(string_charAt, wit_str_6)) & (LessThan(string_charAt, wit_str_7))))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 354,
          "throwingLine": 365,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.hash.HashCode.fromString(java.lang.String)",
          "exception": "throw new IllegalArgumentException(\"Illegal hexadecimal character: \" + string.charAt(i))",
          "pathCojunction": "(i < string.length()) && (!(string.charAt(i) >= '0' && string.charAt(i) <= '9')) && (!(string.charAt(i) >= 'a' && string.charAt(i) <= 'f'))",
          "symbolicPathConjunction": "(i < string.length()) && ((!(ch >= '0' && ch <= '9')) && (!(ch >= 'a' && ch <= 'f')))",
          "backwardsPathConjunction": "(0 < string.length()) && (!(string.charAt(0) >= '0' && string.charAt(0) <= '9')) && (!(string.charAt(0) >= 'a' && string.charAt(0) <= 'f'))",
          "simplifiedPathConjunction": "(string.charAt(0) > '9' || string.charAt(0) < '0') && (string.charAt(0) > 'f' || string.charAt(0) < 'a') && string.length() > 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\ni0 = Int('i0')\n\nconstraints = [\n  bytes0 == new byte[Length(string0) / 2],\n  i0 == 0,\n  And(And(i0 < Length(string0), Not(And(string0.charAt(i0) >= '0', string0.charAt(i0) <= '9'))), Not(And(string0.charAt(i0) >= 'a', string0.charAt(i0) <= 'f')))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nstring_length = Symbol('string_length')\nstring_charAt = Symbol('string_charAt')\nwit_str_0 = Symbol('wit_str_0') # '0'\nwit_str_1 = Symbol('wit_str_1') # '9'\nwit_str_2 = Symbol('wit_str_2') # 'a'\nwit_str_3 = Symbol('wit_str_3') # 'f'\npath_conjunction = (((StrictLessThan(0, string_length)) & (~(((GreaterThan(string_charAt, wit_str_0)) & (LessThan(string_charAt, wit_str_1)))))) & (~(((GreaterThan(string_charAt, wit_str_2)) & (LessThan(string_charAt, wit_str_3))))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 354,
          "throwingLine": 364,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.hash.HashCode.fromString(java.lang.String)",
          "exception": "throw new IllegalArgumentException(\"Illegal hexadecimal character: \" + string.charAt(i + 1))",
          "pathCojunction": "(i < string.length()) && (string.charAt(i) >= '0' && string.charAt(i) <= '9') && (!(string.charAt(i + 1) >= '0' && string.charAt(i + 1) <= '9')) && (!(string.charAt(i + 1) >= 'a' && string.charAt(i + 1) <= 'f'))",
          "symbolicPathConjunction": "(i < string.length()) && (ch >= '0' && ch <= '9') && ((!(ch >= '0' && ch <= '9')) && (!(ch >= 'a' && ch <= 'f')))",
          "backwardsPathConjunction": "(0 < string.length()) && (string.charAt(0) >= '0' && string.charAt(0) <= '9') && (!(string.charAt(0 + 1) >= '0' && string.charAt(0 + 1) <= '9')) && (!(string.charAt(0 + 1) >= 'a' && string.charAt(0 + 1) <= 'f'))",
          "simplifiedPathConjunction": "string.charAt(0 + 1) >= wit_str_0 && string.charAt(0 + 1) <= wit_str_1 && (string.charAt(0 + 1) > '9' || string.charAt(0 + 1) < '0') && (string.charAt(0 + 1) > 'f' || string.charAt(0 + 1) < 'a') && string.length() > 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\ni0 = Int('i0')\nch10 = Int('ch10')\n\nconstraints = [\n  bytes0 == new byte[Length(string0) / 2],\n  i0 == 0,\n  ch10 == string0.charAt(i0) - '0' << 4,\n  And(And(And(i0 < Length(string0), And(string0.charAt(i0) >= '0', string0.charAt(i0) <= '9')), Not(And(string0.charAt(i0 + 1) >= '0', string0.charAt(i0 + 1) <= '9'))), Not(And(string0.charAt(i0 + 1) >= 'a', string0.charAt(i0 + 1) <= 'f')))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nstring_length = Symbol('string_length')\nstring_charAt = Symbol('string_charAt')\nwit_str_0 = Symbol('wit_str_0') # '0'\nwit_str_1 = Symbol('wit_str_1') # '9'\nwit_str_2 = Symbol('wit_str_2') # '0'\nwit_str_3 = Symbol('wit_str_3') # '9'\nwit_str_4 = Symbol('wit_str_4') # 'a'\nwit_str_5 = Symbol('wit_str_5') # 'f'\npath_conjunction = ((((StrictLessThan(0, string_length)) & ((GreaterThan(string_charAt, wit_str_0)) & (LessThan(string_charAt, wit_str_1)))) & (~(((GreaterThan(string_charAt, wit_str_2)) & (LessThan(string_charAt, wit_str_3)))))) & (~(((GreaterThan(string_charAt, wit_str_4)) & (LessThan(string_charAt, wit_str_5))))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 354,
          "throwingLine": 365,
          "isStatic": true,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.from(com.google.common.collect.FluentIterable<E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(checkNotNull(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 153,
          "throwingLine": 154,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.anyMatch(com.google.common.base.Predicate<? super E>)",
          "exception": "throw new NullPointerException(String.valueOf(\"predicate\"))",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(Iterables.any(iterable, predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 276,
          "throwingLine": 277,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.allMatch(com.google.common.base.Predicate<? super E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(predicate == null)",
          "symbolicPathConjunction": "(Iterables.all(iterable, predicate))",
          "backwardsPathConjunction": "(predicate == null)",
          "z3Inputs": "[predicate0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\npredicate0_isNull = Bool('predicate0_isNull')\n\nconstraints = [\n  predicate0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(predicate, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 287,
          "throwingLine": 288,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.toList()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(ImmutableList.copyOf(iterable))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 461,
          "throwingLine": 462,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.toSortedSet(java.util.Comparator<? super E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(ImmutableSortedSet.copyOf(comparator, iterable))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 509,
          "throwingLine": 510,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.toMap(com.google.common.base.Function<? super E, V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(valueFunction == null)",
          "symbolicPathConjunction": "(Maps.toMap(iterable, valueFunction))",
          "backwardsPathConjunction": "(valueFunction == null)",
          "z3Inputs": "[valueFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalueFunction0_isNull = Bool('valueFunction0_isNull')\n\nconstraints = [\n  valueFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(valueFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 543,
          "throwingLine": 544,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.index(com.google.common.base.Function<? super E, K>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyFunction == null)",
          "symbolicPathConjunction": "(Multimaps.index(iterable, keyFunction))",
          "backwardsPathConjunction": "(keyFunction == null)",
          "z3Inputs": "[keyFunction0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyFunction0_isNull = Bool('keyFunction0_isNull')\n\nconstraints = [\n  keyFunction0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyFunction, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 571,
          "throwingLine": 572,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.FluentIterable.get(int)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(iterable == null)",
          "symbolicPathConjunction": "(Iterables.get(iterable, position))",
          "backwardsPathConjunction": "(iterable == null)",
          "simplifiedPathConjunction": "iterable == null",
          "z3Inputs": "[iterable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\niterable0_isNull = Bool('iterable0_isNull')\n\nconstraints = [\n  iterable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niterable = Symbol('iterable')\nnull = Symbol('null')\npath_conjunction = (Eq(iterable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 663,
          "throwingLine": 664,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ComputingConcurrentHashMap.ComputationExceptionReference.waitForValue()",
          "exception": "throw new ExecutionException(t);",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 240,
          "throwingLine": 241,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/io/SourceSinkFactories.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.io.SourceSinkFactories.asCharSourceFactory(com.google.common.io.SourceSinkFactory.ByteSourceFactory)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(factory == null)",
          "symbolicPathConjunction": "(checkNotNull(factory))",
          "backwardsPathConjunction": "(factory == null)",
          "simplifiedPathConjunction": "factory == null",
          "z3Inputs": "[factory0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfactory0_isNull = Bool('factory0_isNull')\n\nconstraints = [\n  factory0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfactory = Symbol('factory')\nnull = Symbol('null')\npath_conjunction = (Eq(factory, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 103,
          "throwingLine": 104,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.SourceSinkFactories.asCharSinkFactory(com.google.common.io.SourceSinkFactory.ByteSinkFactory)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(factory == null)",
          "symbolicPathConjunction": "(checkNotNull(factory))",
          "backwardsPathConjunction": "(factory == null)",
          "simplifiedPathConjunction": "factory == null",
          "z3Inputs": "[factory0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfactory0_isNull = Bool('factory0_isNull')\n\nconstraints = [\n  factory0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfactory = Symbol('factory')\nnull = Symbol('null')\npath_conjunction = (Eq(factory, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 124,
          "throwingLine": 125,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.SourceSinkFactories.asSlicedByteSourceFactory(com.google.common.io.SourceSinkFactory.ByteSourceFactory, long, long)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(factory == null)",
          "symbolicPathConjunction": "(checkNotNull(factory))",
          "backwardsPathConjunction": "(factory == null)",
          "simplifiedPathConjunction": "factory == null",
          "z3Inputs": "[off0 = 0, len0 = 0, factory0_isNull = True]\n[off0 = -1, factory0_isNull = True, len0 = -1]\n[off0 = -2, factory0_isNull = True, len0 = -2]\n[off0 = -3, factory0_isNull = True, len0 = -3]\n[off0 = -4, factory0_isNull = True, len0 = -4]\n[off0 = -5, factory0_isNull = True, len0 = -5]\n[off0 = -6, factory0_isNull = True, len0 = -6]\n[off0 = -7, factory0_isNull = True, len0 = -7]\n[off0 = -8, factory0_isNull = True, len0 = -8]\n[off0 = -9, factory0_isNull = True, len0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\nfactory0_isNull = Bool('factory0_isNull')\n\nconstraints = [\n  off0 >= -9223372036854775808, off0 <= 9223372036854775807, # implicit\n  len0 >= -9223372036854775808, len0 <= 9223372036854775807, # implicit\n  factory0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfactory = Symbol('factory')\nnull = Symbol('null')\npath_conjunction = (Eq(factory, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 155,
          "throwingLine": 156,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.SourceSinkFactories.FileByteSourceFactory.getExpected(byte[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(bytes == null)",
          "symbolicPathConjunction": "(checkNotNull(bytes))",
          "backwardsPathConjunction": "(bytes == null)",
          "simplifiedPathConjunction": "bytes == null",
          "z3Inputs": "[bytes0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nbytes0_isNull = Bool('bytes0_isNull')\n\nconstraints = [\n  bytes0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbytes = Symbol('bytes')\nnull = Symbol('null')\npath_conjunction = (Eq(bytes, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 286,
          "throwingLine": 287,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.SourceSinkFactories.FileByteSinkFactory.getExpected(byte[])",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(initialBytes == null) && (bytes == null)",
          "symbolicPathConjunction": "(initialBytes == null) && (checkNotNull(bytes))",
          "backwardsPathConjunction": "(initialBytes == null) && (bytes == null)",
          "simplifiedPathConjunction": "bytes == null && initialBytes == null",
          "z3Inputs": "[initialBytes0_isNull = True, bytes0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninitialBytes0_isNull = Bool('initialBytes0_isNull')\nbytes0_isNull = Bool('bytes0_isNull')\n\nconstraints = [\n  And(initialBytes0_isNull, bytes0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nbytes = Symbol('bytes')\ninitialBytes = Symbol('initialBytes')\nnull = Symbol('null')\npath_conjunction = ((Eq(initialBytes, null)) & (Eq(bytes, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 315,
          "throwingLine": 317,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.io.SourceSinkFactories.FileCharSourceFactory.getExpected(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 356,
          "throwingLine": 357,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.io.SourceSinkFactories.FileCharSinkFactory.getExpected(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 385,
          "throwingLine": 386,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFutureTest.Anonymous-d25dfc6f-c54e-41f3-93d7-532327043045.addListener(java.lang.Runnable, java.util.concurrent.Executor)",
          "exception": "throw exception;",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 140,
          "throwingLine": 141,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFutureTest.Anonymous-24d23299-67ef-4403-9ba0-5e5fb7953ed7.call()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(failureCause == null)",
          "symbolicPathConjunction": "(!(checkNotNull(throwable)))",
          "backwardsPathConjunction": "(failureCause == null)",
          "simplifiedPathConjunction": "failureCause == null",
          "z3Inputs": "[failureCause0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfailureCause0_isNull = Bool('failureCause0_isNull')\n\nconstraints = [\n  failureCause0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfailureCause = Symbol('failureCause')\nnull = Symbol('null')\npath_conjunction = (Eq(failureCause, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 272,
          "throwingLine": 273,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFutureTest.Anonymous-2fac5dcc-e5d0-4307-b34b-7f7150636e60.call()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(future == null)",
          "symbolicPathConjunction": "(checkNotNull(future))",
          "backwardsPathConjunction": "(future == null)",
          "simplifiedPathConjunction": "future == null",
          "z3Inputs": "[future0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfuture0_isNull = Bool('future0_isNull')\n\nconstraints = [\n  future0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfuture = Symbol('future')\nnull = Symbol('null')\npath_conjunction = (Eq(future, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 291,
          "throwingLine": 292,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFutureTest.Anonymous-4644ece3-5bdc-4d8a-a42e-54dca8a23802.call()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(future == null)",
          "symbolicPathConjunction": "(checkNotNull(future))",
          "backwardsPathConjunction": "(future == null)",
          "simplifiedPathConjunction": "future == null",
          "z3Inputs": "[future0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfuture0_isNull = Bool('future0_isNull')\n\nconstraints = [\n  future0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfuture = Symbol('future')\nnull = Symbol('null')\npath_conjunction = (Eq(future, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 301,
          "throwingLine": 302,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.AbstractFutureTest.Anonymous-bea1e52d-654c-4bad-9051-6afaf31ba012.call()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(future == null)",
          "symbolicPathConjunction": "(!(checkNotNull(future)))",
          "backwardsPathConjunction": "(future == null)",
          "simplifiedPathConjunction": "future == null",
          "z3Inputs": "[future0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfuture0_isNull = Bool('future0_isNull')\n\nconstraints = [\n  future0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfuture = Symbol('future')\nnull = Symbol('null')\npath_conjunction = (Eq(future, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 311,
          "throwingLine": 312,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTesterTest.GoodEqualsFactory.returnsInt()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 70,
          "throwingLine": 71,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTesterTest.GoodEqualsFactory.voidMethod()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 74,
          "throwingLine": 75,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTesterTest.InstantiableFactoryMethodChosen.create(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 645,
          "throwingLine": 646,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTesterTest.GoodNulls.rejectNull(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(s == null)",
          "symbolicPathConjunction": "(checkNotNull(s))",
          "backwardsPathConjunction": "(s == null)",
          "simplifiedPathConjunction": "null == s",
          "z3Inputs": "[s0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ns0 = String('s0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  s0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ns = Symbol('s')\nnull = Symbol('null')\npath_conjunction = (Eq(s, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1102,
          "throwingLine": 1103,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTesterTest.ConstructorParameterWithOptionalNotInstantiable.equals(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1216,
          "throwingLine": 1217,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTesterTest.ConstructorParameterWithOptionalNotInstantiable.hashCode()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1219,
          "throwingLine": 1220,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.testing.ClassSanityTesterTest.FactoryMethodThrows.create()",
          "exception": "throw new RuntimeException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1258,
          "throwingLine": 1259,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.SimpleTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(target == null)) && (interfaceType == null)",
          "symbolicPathConjunction": "(checkNotNull(target)) && (checkNotNull(interfaceType))",
          "backwardsPathConjunction": "(!(target == null)) && (interfaceType == null)",
          "simplifiedPathConjunction": "interfaceType == null && null != target",
          "z3Inputs": "[timeoutDuration0 = -9223372036854775808,\n target0_isNull = False,\n interfaceType0_isNull = True]\n[interfaceType0_isNull = True,\n timeoutDuration0 = 0,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -1,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -2,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -3,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -4,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -5,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -6,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -7,\n target0_isNull = False]\n[interfaceType0_isNull = True,\n timeoutDuration0 = -8,\n target0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeoutDuration0 = Int('timeoutDuration0')\ntarget0_isNull = Bool('target0_isNull')\ninterfaceType0_isNull = Bool('interfaceType0_isNull')\n\nconstraints = [\n  timeoutDuration0 >= -9223372036854775808, timeoutDuration0 <= 9223372036854775807, # implicit\n  And(Not(target0_isNull), interfaceType0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntarget = Symbol('target')\ninterfaceType = Symbol('interfaceType')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(target, null)))) & (Eq(interfaceType, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 85,
          "throwingLine": 87,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.SimpleTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(target == null)",
          "symbolicPathConjunction": "(checkNotNull(target))",
          "backwardsPathConjunction": "(target == null)",
          "simplifiedPathConjunction": "null == target",
          "z3Inputs": "[timeoutDuration0 = -9223372036854775808,\n target0_isNull = True]\n[timeoutDuration0 = 0, target0_isNull = True]\n[timeoutDuration0 = -1, target0_isNull = True]\n[timeoutDuration0 = -2, target0_isNull = True]\n[timeoutDuration0 = -3, target0_isNull = True]\n[timeoutDuration0 = -4, target0_isNull = True]\n[timeoutDuration0 = -5, target0_isNull = True]\n[timeoutDuration0 = -6, target0_isNull = True]\n[timeoutDuration0 = -7, target0_isNull = True]\n[timeoutDuration0 = -8, target0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeoutDuration0 = Int('timeoutDuration0')\ntarget0_isNull = Bool('target0_isNull')\n\nconstraints = [\n  timeoutDuration0 >= -9223372036854775808, timeoutDuration0 <= 9223372036854775807, # implicit\n  target0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntarget = Symbol('target')\nnull = Symbol('null')\npath_conjunction = (Eq(target, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 85,
          "throwingLine": 86,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.SimpleTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"interfaceType must be an interface type\"))",
          "pathCojunction": "(!(target == null)) && (!(interfaceType == null)) && (!(timeoutUnit == null)) && (!(interfaceType.isInterface()))",
          "symbolicPathConjunction": "(checkNotNull(target)) && (checkNotNull(interfaceType)) && (checkNotNull(timeoutUnit)) && (checkArgument(interfaceType.isInterface(), \"interfaceType must be an interface type\"))",
          "backwardsPathConjunction": "(!(target == null)) && (!(interfaceType == null)) && (!(timeoutUnit == null)) && (!(interfaceType.isInterface()))",
          "simplifiedPathConjunction": "!interfaceType.isInterface() && interfaceType != null && null != target && null != timeoutUnit",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeoutDuration0 = Int('timeoutDuration0')\ntarget0_isNull = Bool('target0_isNull')\ninterfaceType0_isNull = Bool('interfaceType0_isNull')\ntimeoutUnit0_isNull = Bool('timeoutUnit0_isNull')\n\nconstraints = [\n  timeoutDuration0 >= -9223372036854775808, timeoutDuration0 <= 9223372036854775807, # implicit\n  And(And(And(Not(target0_isNull), Not(interfaceType0_isNull)), Not(timeoutUnit0_isNull)), Not(interfaceType0.isInterface()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntarget = Symbol('target')\ninterfaceType = Symbol('interfaceType')\ntimeoutUnit = Symbol('timeoutUnit')\ninterfaceType_isInterface = Symbol('interfaceType_isInterface')\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(target, null)))) & (~((Eq(interfaceType, null))))) & (~((Eq(timeoutUnit, null))))) & (~(interfaceType_isInterface)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 85,
          "throwingLine": 90,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.SimpleTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(target == null)) && (!(interfaceType == null)) && (timeoutUnit == null)",
          "symbolicPathConjunction": "(checkNotNull(target)) && (checkNotNull(interfaceType)) && (checkNotNull(timeoutUnit))",
          "backwardsPathConjunction": "(!(target == null)) && (!(interfaceType == null)) && (timeoutUnit == null)",
          "simplifiedPathConjunction": "null == timeoutUnit && interfaceType != null && null != target",
          "z3Inputs": "[timeoutDuration0 = -9223372036854775808,\n target0_isNull = False,\n timeoutUnit0_isNull = True,\n interfaceType0_isNull = False]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = 0]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -1]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -2]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -3]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -4]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -5]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -6]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -7]\n[interfaceType0_isNull = False,\n timeoutUnit0_isNull = True,\n target0_isNull = False,\n timeoutDuration0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeoutDuration0 = Int('timeoutDuration0')\ntarget0_isNull = Bool('target0_isNull')\ninterfaceType0_isNull = Bool('interfaceType0_isNull')\ntimeoutUnit0_isNull = Bool('timeoutUnit0_isNull')\n\nconstraints = [\n  timeoutDuration0 >= -9223372036854775808, timeoutDuration0 <= 9223372036854775807, # implicit\n  And(And(Not(target0_isNull), Not(interfaceType0_isNull)), timeoutUnit0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntarget = Symbol('target')\ninterfaceType = Symbol('interfaceType')\ntimeoutUnit = Symbol('timeoutUnit')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(target, null)))) & (~((Eq(interfaceType, null))))) & (Eq(timeoutUnit, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 85,
          "throwingLine": 88,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Present.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Present.or(T)",
          "exception": "throw new NullPointerException(String.valueOf(\"use Optional.orNull() instead of Optional.or(null)\"))",
          "pathCojunction": "(defaultValue == null)",
          "symbolicPathConjunction": "(checkNotNull(defaultValue, \"use Optional.orNull() instead of Optional.or(null)\"))",
          "backwardsPathConjunction": "(defaultValue == null)",
          "simplifiedPathConjunction": "defaultValue == null",
          "z3Inputs": "[defaultValue0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndefaultValue0_isNull = Bool('defaultValue0_isNull')\n\nconstraints = [\n  defaultValue0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndefaultValue = Symbol('defaultValue')\nnull = Symbol('null')\npath_conjunction = (Eq(defaultValue, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 50,
          "throwingLine": 51,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Present.or(com.google.common.base.Optional<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(secondChoice == null)",
          "symbolicPathConjunction": "(checkNotNull(secondChoice))",
          "backwardsPathConjunction": "(secondChoice == null)",
          "z3Inputs": "[secondChoice0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsecondChoice0_isNull = Bool('secondChoice0_isNull')\n\nconstraints = [\n  secondChoice0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(secondChoice, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 56,
          "throwingLine": 57,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Present.or(com.google.common.base.Supplier<? extends T>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(supplier == null)",
          "symbolicPathConjunction": "(checkNotNull(supplier))",
          "backwardsPathConjunction": "(supplier == null)",
          "z3Inputs": "[supplier0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsupplier0_isNull = Bool('supplier0_isNull')\n\nconstraints = [\n  supplier0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (Eq(supplier, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 62,
          "throwingLine": 63,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/HashBasedTable.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.HashBasedTable.Factory.get()",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedSize)",
          "pathCojunction": "(expectedSize < 3) && (expectedSize < 0)",
          "symbolicPathConjunction": "(Maps.newHashMapWithExpectedSize(expectedSize))",
          "backwardsPathConjunction": "(expectedSize < 3) && (expectedSize < 0)",
          "simplifiedPathConjunction": "expectedSize < 0",
          "z3Inputs": "[expectedSize0 = -1]\n[expectedSize0 = -2]\n[expectedSize0 = -3]\n[expectedSize0 = -4]\n[expectedSize0 = -5]\n[expectedSize0 = -6]\n[expectedSize0 = -7]\n[expectedSize0 = -8]\n[expectedSize0 = -9]\n[expectedSize0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedSize0 = Int('expectedSize0')\n\nconstraints = [\n  And(expectedSize0 < 3, expectedSize0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedSize = Symbol('expectedSize', integer=True)\npath_conjunction = ((StrictLessThan(expectedSize, 3)) & (StrictLessThan(expectedSize, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 65,
          "throwingLine": 66,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.HashBasedTable.create(int, int)",
          "exception": "throw new IllegalArgumentException(\"expectedCellsPerRow\" + \" cannot be negative but was: \" + expectedCellsPerRow)",
          "pathCojunction": "(expectedCellsPerRow < 0)",
          "symbolicPathConjunction": "(value < 0)",
          "backwardsPathConjunction": "(expectedCellsPerRow < 0)",
          "simplifiedPathConjunction": "expectedCellsPerRow < 0",
          "z3Inputs": "[expectedCellsPerRow0 = -1]\n[expectedCellsPerRow0 = -2]\n[expectedCellsPerRow0 = -3]\n[expectedCellsPerRow0 = -4]\n[expectedCellsPerRow0 = -5]\n[expectedCellsPerRow0 = -6]\n[expectedCellsPerRow0 = -7]\n[expectedCellsPerRow0 = -8]\n[expectedCellsPerRow0 = -9]\n[expectedCellsPerRow0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedRows0 = Int('expectedRows0')\nexpectedCellsPerRow0 = Int('expectedCellsPerRow0')\n\nconstraints = [\n  expectedCellsPerRow0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedCellsPerRow = Symbol('expectedCellsPerRow', integer=True)\npath_conjunction = (StrictLessThan(expectedCellsPerRow, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 89,
          "throwingLine": 90,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.HashBasedTable.create(int, int)",
          "exception": "throw new IllegalArgumentException(\"expectedSize\" + \" cannot be negative but was: \" + expectedRows)",
          "pathCojunction": "(!(expectedCellsPerRow < 0)) && (expectedRows < 3) && (expectedRows < 0)",
          "symbolicPathConjunction": "(!(value < 0)) && (Maps.newHashMapWithExpectedSize(expectedRows))",
          "backwardsPathConjunction": "(!(expectedCellsPerRow < 0)) && (expectedRows < 3) && (expectedRows < 0)",
          "simplifiedPathConjunction": "expectedCellsPerRow >= 0 && expectedRows < 0",
          "z3Inputs": "[expectedCellsPerRow0 = 0, expectedRows0 = -1]\n[expectedCellsPerRow0 = 1, expectedRows0 = -2]\n[expectedCellsPerRow0 = 1, expectedRows0 = -3]\n[expectedCellsPerRow0 = 2, expectedRows0 = -3]\n[expectedCellsPerRow0 = 3, expectedRows0 = -3]\n[expectedCellsPerRow0 = 4, expectedRows0 = -4]\n[expectedCellsPerRow0 = 4, expectedRows0 = -3]\n[expectedCellsPerRow0 = 3, expectedRows0 = -2]\n[expectedCellsPerRow0 = 3, expectedRows0 = -4]\n[expectedCellsPerRow0 = 3, expectedRows0 = -5]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpectedRows0 = Int('expectedRows0')\nexpectedCellsPerRow0 = Int('expectedCellsPerRow0')\n\nconstraints = [\n  And(And(Not(expectedCellsPerRow0 < 0), expectedRows0 < 3), expectedRows0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpectedRows = Symbol('expectedRows', integer=True)\nexpectedCellsPerRow = Symbol('expectedCellsPerRow', integer=True)\npath_conjunction = (((~((StrictLessThan(expectedCellsPerRow, 0)))) & (StrictLessThan(expectedRows, 3))) & (StrictLessThan(expectedRows, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 89,
          "throwingLine": 91,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableMap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.remove(java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 412,
          "throwingLine": 413,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableMap.clear()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 436,
          "throwingLine": 437,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableSortedSetFauxverideShim.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSetFauxverideShim.builder()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 46,
          "throwingLine": 47,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 60,
          "throwingLine": 61,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 74,
          "throwingLine": 75,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 88,
          "throwingLine": 89,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 103,
          "throwingLine": 104,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E, E)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 118,
          "throwingLine": 119,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E, E, E, E...)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 133,
          "throwingLine": 134,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSetFauxverideShim.copyOf(E[])",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 147,
          "throwingLine": 148,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/base/SuppliersTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.SuppliersTest.Anonymous-c80d31de-27f6-460c-a33f-1081d9c51b3e.apply(java.util.List<java.lang.Integer>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(list == null)",
          "symbolicPathConjunction": "(Lists.newArrayList(list))",
          "backwardsPathConjunction": "(list == null)",
          "simplifiedPathConjunction": "list == null",
          "z3Inputs": "[list0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlist0_isNull = Bool('list0_isNull')\n\nconstraints = [\n  list0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlist = Symbol('list')\nnull = Symbol('null')\npath_conjunction = (Eq(list, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 79,
          "throwingLine": 80,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.SuppliersTest.Anonymous-14604c0a-566b-4f6e-b8fe-6afcf558b96b.get()",
          "exception": "throw new NullPointerException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 151,
          "throwingLine": 152,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSet.Builder.add(E...)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(elements == null)",
          "symbolicPathConjunction": "(checkNotNull(elements))",
          "backwardsPathConjunction": "(elements == null)",
          "simplifiedPathConjunction": "elements == null",
          "z3Inputs": "[elements0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  elements0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\nnull = Symbol('null')\npath_conjunction = (Eq(elements, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 211,
          "throwingLine": 212,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.put(K, V)",
          "exception": "throw new AssertionError(\"New Collection violated the Collection spec\");",
          "pathCojunction": "(collection == null) && (!(collection.add(value)))",
          "symbolicPathConjunction": "(collection == null) && (!(collection.add(value)))",
          "backwardsPathConjunction": "(collection == null) && (!(collection.add(value)))",
          "simplifiedPathConjunction": "createCollection(key) == null && !createCollection(key)_add",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncollection1_isNull = Bool('collection1_isNull')\n\nconstraints = [\n  collection0 == map0.get(key0),\n  collection1 == createCollection(key0),\n  And(collection1_isNull, Not(collection1.add(value0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nkey = Symbol('key')\nvalue = Symbol('value')\n_createCollection = Symbol('_createCollection')\n_createCollection_add = Symbol('_createCollection_add')\nnull = Symbol('null')\npath_conjunction = ((Eq(_createCollection, null)) & (~(_createCollection_add)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 189,
          "throwingLine": 198,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.size()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 419,
          "throwingLine": 420,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.hashCode()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 434,
          "throwingLine": 435,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.toString()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 440,
          "throwingLine": 441,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.iterator()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 450,
          "throwingLine": 451,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator.hasNext()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(refreshIfEmpty()))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 480,
          "throwingLine": 481,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator.next()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(refreshIfEmpty()))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 486,
          "throwingLine": 487,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.add(V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 505,
          "throwingLine": 506,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.addAll(java.util.Collection<? extends V>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(collection.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(collection.isEmpty())) && (size())",
          "backwardsPathConjunction": "(!(collection.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "!collection.isEmpty() && ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(And(Not(collection0.isEmpty()), Not(ancestor0_isNull)), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\ncollection_isEmpty = Symbol('collection_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(collection_isEmpty)) & (Ne(ancestor, null))) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 525,
          "throwingLine": 529,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.contains(java.lang.Object)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 542,
          "throwingLine": 543,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.containsAll(java.util.Collection<?>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 548,
          "throwingLine": 549,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.clear()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(size())",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 554,
          "throwingLine": 555,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.remove(java.lang.Object)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 565,
          "throwingLine": 566,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.removeAll(java.util.Collection<?>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(c.isEmpty())) && (size())",
          "backwardsPathConjunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "!c.isEmpty() && ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(And(Not(c0.isEmpty()), Not(ancestor0_isNull)), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nc_isEmpty = Symbol('c_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(c_isEmpty)) & (Ne(ancestor, null))) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 576,
          "throwingLine": 580,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.retainAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(c == null)",
          "symbolicPathConjunction": "(checkNotNull(c))",
          "backwardsPathConjunction": "(c == null)",
          "simplifiedPathConjunction": "c == null",
          "z3Inputs": "[c0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  c0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\nnull = Symbol('null')\npath_conjunction = (Eq(c, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 591,
          "throwingLine": 592,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.retainAll(java.util.Collection<?>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(c == null)) && (ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(checkNotNull(c)) && (size())",
          "backwardsPathConjunction": "(!(c == null)) && (ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate && c != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nc0_isNull = Bool('c0_isNull')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(And(Not(c0_isNull), Not(ancestor0_isNull)), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(c, null)))) & (Ne(ancestor, null))) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 591,
          "throwingLine": 593,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSet.removeAll(java.util.Collection<?>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(c.isEmpty())) && (size())",
          "backwardsPathConjunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "!c.isEmpty() && ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(And(Not(c0.isEmpty()), Not(ancestor0_isNull)), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nc_isEmpty = Symbol('c_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(c_isEmpty)) & (Ne(ancestor, null))) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 618,
          "throwingLine": 622,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSet.removeAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(c.isEmpty())) && (ancestor != null) && (!(delegate != ancestorDelegate)) && (c == null)",
          "symbolicPathConjunction": "(!(c.isEmpty())) && (size()) && (checkNotNull(collection))",
          "backwardsPathConjunction": "(!(c.isEmpty())) && (ancestor != null) && (!(delegate != ancestorDelegate)) && (c == null)",
          "simplifiedPathConjunction": "ancestorDelegate == delegate && c == null && !c.isEmpty() && ancestor != null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldSize0 = Int('oldSize0')\nancestor0_isNull = Bool('ancestor0_isNull')\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  oldSize0 == delegate0.size(),\n  And(And(And(Not(c0.isEmpty()), Not(ancestor0_isNull)), Not(delegate0 != ancestorDelegate0)), c0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nc_isEmpty = Symbol('c_isEmpty')\nnull = Symbol('null')\npath_conjunction = ((((~(c_isEmpty)) & (Ne(ancestor, null))) & (~((Ne(delegate, ancestorDelegate))))) & (Eq(c, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 618,
          "throwingLine": 627,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSet.removeAll(java.util.Collection<?>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(c.isEmpty())) && (!(ancestor != null)) && (!(delegate.isEmpty())) && (c == null)",
          "symbolicPathConjunction": "(!(c.isEmpty())) && (size()) && (checkNotNull(collection))",
          "backwardsPathConjunction": "(!(c.isEmpty())) && (!(ancestor != null)) && (!(delegate.isEmpty())) && (c == null)",
          "simplifiedPathConjunction": "ancestor == null && c == null && !c.isEmpty() && !delegate.isEmpty()",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldSize0 = Int('oldSize0')\nancestor0_isNull = Bool('ancestor0_isNull')\nc0_isNull = Bool('c0_isNull')\n\nconstraints = [\n  oldSize0 == delegate0.size(),\n  And(And(And(Not(c0.isEmpty()), Not(Not(ancestor0_isNull))), Not(delegate0.isEmpty())), c0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nc = Symbol('c')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nc_isEmpty = Symbol('c_isEmpty')\ndelegate_isEmpty = Symbol('delegate_isEmpty')\nnull = Symbol('null')\npath_conjunction = ((((~(c_isEmpty)) & (~((Ne(ancestor, null))))) & (~(delegate_isEmpty))) & (Eq(c, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 618,
          "throwingLine": 627,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet.first()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 656,
          "throwingLine": 657,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet.last()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 662,
          "throwingLine": 663,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet.headSet(V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 668,
          "throwingLine": 669,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet.subSet(V, V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 677,
          "throwingLine": 678,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet.tailSet(V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 686,
          "throwingLine": 687,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.addAll(int, java.util.Collection<? extends V>)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "(!(c.isEmpty())) && (size())",
          "backwardsPathConjunction": "(!(c.isEmpty())) && (ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "!c.isEmpty() && ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(And(Not(c0.isEmpty()), Not(ancestor0_isNull)), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nc_isEmpty = Symbol('c_isEmpty')\nnull = Symbol('null')\npath_conjunction = (((~(c_isEmpty)) & (Ne(ancestor, null))) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 707,
          "throwingLine": 711,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.get(int)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 724,
          "throwingLine": 725,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.set(int, V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 730,
          "throwingLine": 731,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.add(int, V)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 736,
          "throwingLine": 737,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.remove(int)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 747,
          "throwingLine": 748,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.indexOf(java.lang.Object)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 756,
          "throwingLine": 757,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.lastIndexOf(java.lang.Object)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 762,
          "throwingLine": 763,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.listIterator()",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 768,
          "throwingLine": 769,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.listIterator(int)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 774,
          "throwingLine": 775,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.AbstractMapBasedMultimap.WrappedList.subList(int, int)",
          "exception": "throw new ConcurrentModificationException();",
          "pathCojunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "symbolicPathConjunction": "((ancestor != null) && (ancestor.getDelegate()) && (ancestor.getDelegate() != ancestorDelegate))",
          "backwardsPathConjunction": "(ancestor != null) && (delegate != ancestorDelegate)",
          "simplifiedPathConjunction": "ancestor != null && ancestorDelegate != delegate",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\nancestor0_isNull = Bool('ancestor0_isNull')\n\nconstraints = [\n  And(Not(ancestor0_isNull), delegate0 != ancestorDelegate0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndelegate = Symbol('delegate')\nancestor = Symbol('ancestor')\nancestorDelegate = Symbol('ancestorDelegate')\nnull = Symbol('null')\npath_conjunction = ((Ne(ancestor, null)) & (Ne(delegate, ancestorDelegate)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 780,
          "throwingLine": 781,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/base/VerifyTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.VerifyTest.Anonymous-2056b635-9e0a-407b-b9c7-bdb8e4179fbc.toString()",
          "exception": "throw new AssertionFailedError();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 99,
          "throwingLine": 100,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/net/MediaType.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.net.MediaType.withCharset(java.nio.charset.Charset)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(charset == null)",
          "symbolicPathConjunction": "(checkNotNull(charset))",
          "backwardsPathConjunction": "(charset == null)",
          "simplifiedPathConjunction": "charset == null",
          "z3Inputs": "[charset0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncharset0_isNull = Bool('charset0_isNull')\n\nconstraints = [\n  charset0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncharset = Symbol('charset')\nnull = Symbol('null')\npath_conjunction = (Eq(charset, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 492,
          "throwingLine": 493,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/collect/testing/UnhashableObject.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.UnhashableObject.hashCode()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 42,
          "throwingLine": 43,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.testing.features.FeatureUtil.intersection(java.util.Set<? extends T>...)",
          "exception": "throw new IllegalArgumentException(\"Can't intersect no sets; would have to return the universe.\");",
          "pathCojunction": "(sets.length == 0)",
          "symbolicPathConjunction": "(sets.length == 0)",
          "backwardsPathConjunction": "(sets.length == 0)",
          "simplifiedPathConjunction": "sets.length == 0",
          "z3Inputs": "[sets0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsets0_length = Int('sets0_length')\n\nconstraints = [\n  sets0_length >= 0, # implicit\n  sets0_length == 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nextends = Symbol('extends')\nsets_length = Symbol('sets_length', integer=True)\npath_conjunction = (Eq(sets_length, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 309,
          "throwingLine": 311,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/DoubleMath.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.factorial(int)",
          "exception": "throw new IllegalArgumentException(\"n\" + \" (\" + n + \") must be >= 0\")",
          "pathCojunction": "(n < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(n < 0)",
          "simplifiedPathConjunction": "n < 0",
          "z3Inputs": "[n0 = -1]\n[n0 = -2]\n[n0 = -3]\n[n0 = -4]\n[n0 = -5]\n[n0 = -6]\n[n0 = -7]\n[n0 = -8]\n[n0 = -9]\n[n0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\n\nconstraints = [\n  n0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\npath_conjunction = (StrictLessThan(n, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 80,
          "throwingLine": 81,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.fuzzyEquals(double, double, double)",
          "exception": "throw new IllegalArgumentException(\"tolerance\" + \" (\" + tolerance + \") must be >= 0\")",
          "pathCojunction": "(!(tolerance >= 0))",
          "symbolicPathConjunction": "(!(x >= 0))",
          "backwardsPathConjunction": "(!(tolerance >= 0))",
          "simplifiedPathConjunction": "tolerance < 0",
          "z3Inputs": "[tolerance0 = -1]\n[tolerance0 = -2]\n[tolerance0 = -3]\n[tolerance0 = -4]\n[tolerance0 = -5]\n[tolerance0 = -6]\n[tolerance0 = -7]\n[tolerance0 = -8]\n[tolerance0 = -9]\n[tolerance0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Real('a0')\nb0 = Real('b0')\ntolerance0 = Real('tolerance0')\n\nconstraints = [\n  Not(tolerance0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntolerance = Symbol('tolerance', integer=True)\npath_conjunction = (~((GreaterThan(tolerance, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 137,
          "throwingLine": 138,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.fuzzyCompare(double, double, double)",
          "exception": "throw new IllegalArgumentException(\"tolerance\" + \" (\" + tolerance + \") must be >= 0\")",
          "pathCojunction": "(!(tolerance >= 0))",
          "symbolicPathConjunction": "(!(fuzzyEquals(a, b, tolerance)))",
          "backwardsPathConjunction": "(!(tolerance >= 0))",
          "simplifiedPathConjunction": "tolerance < 0",
          "z3Inputs": "[tolerance0 = -1]\n[tolerance0 = -2]\n[tolerance0 = -3]\n[tolerance0 = -4]\n[tolerance0 = -5]\n[tolerance0 = -6]\n[tolerance0 = -7]\n[tolerance0 = -8]\n[tolerance0 = -9]\n[tolerance0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Real('a0')\nb0 = Real('b0')\ntolerance0 = Real('tolerance0')\n\nconstraints = [\n  Not(tolerance0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntolerance = Symbol('tolerance', integer=True)\npath_conjunction = (~((GreaterThan(tolerance, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 160,
          "throwingLine": 161,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.mean(int...)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"Cannot take mean of 0 values\"))",
          "pathCojunction": "(!(values.length > 0))",
          "symbolicPathConjunction": "(checkArgument(values.length > 0, \"Cannot take mean of 0 values\"))",
          "backwardsPathConjunction": "(!(values.length > 0))",
          "simplifiedPathConjunction": "values.length <= 0",
          "z3Inputs": "[values0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalues0_length = Int('values0_length')\n\nconstraints = [\n  values0_length >= 0, # implicit\n  Not(values0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nvalues_length = Symbol('values_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(values_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 182,
          "throwingLine": 183,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.DoubleMath.mean(long...)",
          "exception": "throw new IllegalArgumentException(String.valueOf(\"Cannot take mean of 0 values\"))",
          "pathCojunction": "(!(values.length > 0))",
          "symbolicPathConjunction": "(checkArgument(values.length > 0, \"Cannot take mean of 0 values\"))",
          "backwardsPathConjunction": "(!(values.length > 0))",
          "simplifiedPathConjunction": "values.length <= 0",
          "z3Inputs": "[values0_length = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalues0_length = Int('values0_length')\n\nconstraints = [\n  values0_length >= 0, # implicit\n  Not(values0_length > 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nvalues_length = Symbol('values_length', integer=True)\npath_conjunction = (~((StrictGreaterThan(values_length, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 205,
          "throwingLine": 206,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/math/LongMath.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.math.LongMath.mod(long, int)",
          "exception": "throw new ArithmeticException(\"Modulus must be positive\")",
          "pathCojunction": "((long) m <= 0)",
          "symbolicPathConjunction": "(mod(x, (long) m))",
          "backwardsPathConjunction": "((long) m <= 0)",
          "simplifiedPathConjunction": "m <= 0",
          "z3Inputs": "[m0 = 0, x0 = -9223372036854775808]\n[x0 = 0, m0 = -1]\n[x0 = -1, m0 = -2]\n[x0 = -2, m0 = -3]\n[x0 = -3, m0 = -4]\n[x0 = -4, m0 = -5]\n[x0 = -5, m0 = -6]\n[x0 = -6, m0 = -7]\n[x0 = -7, m0 = -8]\n[x0 = -8, m0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Int('x0')\nm0 = Int('m0')\n\nconstraints = [\n  x0 >= -9223372036854775808, x0 <= 9223372036854775807, # implicit\n  m0 <= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nm = Symbol('m', integer=True)\npath_conjunction = (LessThan(m, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 420,
          "throwingLine": 422,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.LongMath.mod(long, long)",
          "exception": "throw new ArithmeticException(\"Modulus must be positive\");",
          "pathCojunction": "(m <= 0)",
          "symbolicPathConjunction": "(m <= 0)",
          "backwardsPathConjunction": "(m <= 0)",
          "simplifiedPathConjunction": "m <= 0",
          "z3Inputs": "[x0 = 0, m0 = 0]\n[x0 = -1, m0 = -1]\n[x0 = -2, m0 = -2]\n[x0 = -3, m0 = -3]\n[x0 = -4, m0 = -4]\n[x0 = -5, m0 = -5]\n[x0 = -6, m0 = -6]\n[x0 = -7, m0 = -7]\n[x0 = -8, m0 = -8]\n[x0 = -9, m0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Int('x0')\nm0 = Int('m0')\n\nconstraints = [\n  x0 >= -9223372036854775808, x0 <= 9223372036854775807, # implicit\n  m0 >= -9223372036854775808, m0 <= 9223372036854775807, # implicit\n  m0 <= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nm = Symbol('m')\npath_conjunction = (LessThan(m, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 444,
          "throwingLine": 446,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.LongMath.gcd(long, long)",
          "exception": "throw new IllegalArgumentException(\"b\" + \" (\" + b + \") must be >= 0\")",
          "pathCojunction": "(!(a < 0)) && (b < 0)",
          "symbolicPathConjunction": "(!(x < 0)) && (x < 0)",
          "backwardsPathConjunction": "(!(a < 0)) && (b < 0)",
          "simplifiedPathConjunction": "a >= 0 && b < 0",
          "z3Inputs": "[b0 = -1, a0 = 0]\n[b0 = -1, a0 = 1]\n[b0 = -2, a0 = 1]\n[b0 = -3, a0 = 1]\n[b0 = -3, a0 = 2]\n[b0 = -3, a0 = 3]\n[b0 = -4, a0 = 4]\n[b0 = -4, a0 = 5]\n[b0 = -4, a0 = 6]\n[b0 = -4, a0 = 7]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\n\nconstraints = [\n  a0 >= -9223372036854775808, a0 <= 9223372036854775807, # implicit\n  b0 >= -9223372036854775808, b0 <= 9223372036854775807, # implicit\n  And(Not(a0 < 0), b0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\nb = Symbol('b')\npath_conjunction = ((~((StrictLessThan(a, 0)))) & (StrictLessThan(b, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 458,
          "throwingLine": 465,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.LongMath.gcd(long, long)",
          "exception": "throw new IllegalArgumentException(\"a\" + \" (\" + a + \") must be >= 0\")",
          "pathCojunction": "(a < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(a < 0)",
          "simplifiedPathConjunction": "a < 0",
          "z3Inputs": "[b0 = 0, a0 = -1]\n[b0 = -1, a0 = -2]\n[b0 = -1, a0 = -3]\n[b0 = -2, a0 = -3]\n[b0 = -3, a0 = -3]\n[b0 = -4, a0 = -4]\n[b0 = -5, a0 = -5]\n[b0 = -6, a0 = -6]\n[b0 = -7, a0 = -7]\n[b0 = -8, a0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\n\nconstraints = [\n  a0 >= -9223372036854775808, a0 <= 9223372036854775807, # implicit\n  b0 >= -9223372036854775808, b0 <= 9223372036854775807, # implicit\n  a0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\npath_conjunction = (StrictLessThan(a, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 458,
          "throwingLine": 464,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.math.LongMath.checkedAdd(long, long)",
          "exception": "throw new ArithmeticException(\"overflow\")",
          "pathCojunction": "(!((a ^ b) < 0 | (a ^ result) >= 0))",
          "symbolicPathConjunction": "(!(condition))",
          "backwardsPathConjunction": "(!((a ^ b) < 0 | (a ^ a + b) >= 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\nresult0 = Int('result0')\n\nconstraints = [\n  result0 == a0 + b0,\n  a0 >= -9223372036854775808, a0 <= 9223372036854775807, # implicit\n  b0 >= -9223372036854775808, b0 <= 9223372036854775807, # implicit\n  result0 >= -9223372036854775808, result0 <= 9223372036854775807, # implicit\n  Not(a0 ^ b0 < 0 | a0 ^ result0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\nb = Symbol('b')\npath_conjunction = (~(((StrictLessThan((a ^ b), 0)) | (GreaterThan((a ^ (a + b)), 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 509,
          "throwingLine": 511,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.math.LongMath.checkedSubtract(long, long)",
          "exception": "throw new ArithmeticException(\"overflow\")",
          "pathCojunction": "(!((a ^ b) >= 0 | (a ^ result) >= 0))",
          "symbolicPathConjunction": "(!(condition))",
          "backwardsPathConjunction": "(!((a ^ b) >= 0 | (a ^ a - b) >= 0))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\nresult0 = Int('result0')\n\nconstraints = [\n  result0 == a0 - b0,\n  a0 >= -9223372036854775808, a0 <= 9223372036854775807, # implicit\n  b0 >= -9223372036854775808, b0 <= 9223372036854775807, # implicit\n  result0 >= -9223372036854775808, result0 <= 9223372036854775807, # implicit\n  Not(a0 ^ b0 >= 0 | a0 ^ result0 >= 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\na = Symbol('a')\nb = Symbol('b')\npath_conjunction = (~(((GreaterThan((a ^ b), 0)) | (GreaterThan((a ^ (a - b)), 0)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 521,
          "throwingLine": 523,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.math.LongMath.checkedMultiply(long, long)",
          "exception": "throw new ArithmeticException(\"overflow\")",
          "pathCojunction": "(!(leadingZeros > Long.SIZE + 1)) && (!(!(leadingZeros >= Long.SIZE))) && (!(!(a >= 0 | b != Long.MIN_VALUE))) && (!(a == 0 || result / a == b))",
          "symbolicPathConjunction": "(!(leadingZeros > Long.SIZE + 1)) && (!(!(!condition))) && (!(!(!condition))) && (!(condition))",
          "backwardsPathConjunction": "(!(Long.numberOfLeadingZeros(a) + Long.numberOfLeadingZeros(~a) + Long.numberOfLeadingZeros(b) + Long.numberOfLeadingZeros(~b) > Long.SIZE + 1)) && (!(!(Long.numberOfLeadingZeros(a) + Long.numberOfLeadingZeros(~a) + Long.numberOfLeadingZeros(b) + Long.numberOfLeadingZeros(~b) >= Long.SIZE))) && (!(!(a >= 0 | b != Long.MIN_VALUE))) && (!(a == 0 || a * b / a == b))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\nleadingZeros0 = Int('leadingZeros0')\nLong_SIZE0 = Int('Long_SIZE0')\nresult0 = Int('result0')\n\nconstraints = [\n  leadingZeros0 == Long.numberOfLeadingZeros(a0) + Long.numberOfLeadingZeros(~a0) + Long.numberOfLeadingZeros(b0) + Long.numberOfLeadingZeros(~b0),\n  result0 == a0 * b0,\n  a0 >= -9223372036854775808, a0 <= 9223372036854775807, # implicit\n  b0 >= -9223372036854775808, b0 <= 9223372036854775807, # implicit\n  result0 >= -9223372036854775808, result0 <= 9223372036854775807, # implicit\n  And(And(And(Not(leadingZeros0 > Long_SIZE0 + 1), Not(Not(leadingZeros0 >= Long_SIZE0))), Not(Not(a0 >= 0 | b0 != -9223372036854775808))), Not(Or(a0 == 0, result0 / a0 == b0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 533,
          "throwingLine": 553,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.math.LongMath.checkedMultiply(long, long)",
          "exception": "throw new ArithmeticException(\"overflow\")",
          "pathCojunction": "(!(leadingZeros > Long.SIZE + 1)) && (!(!(leadingZeros >= Long.SIZE))) && (!(a >= 0 | b != Long.MIN_VALUE))",
          "symbolicPathConjunction": "(!(leadingZeros > Long.SIZE + 1)) && (!(!(!condition))) && (!(!(condition)))",
          "backwardsPathConjunction": "(!(Long.numberOfLeadingZeros(a) + Long.numberOfLeadingZeros(~a) + Long.numberOfLeadingZeros(b) + Long.numberOfLeadingZeros(~b) > Long.SIZE + 1)) && (!(!(Long.numberOfLeadingZeros(a) + Long.numberOfLeadingZeros(~a) + Long.numberOfLeadingZeros(b) + Long.numberOfLeadingZeros(~b) >= Long.SIZE))) && (!(a >= 0 | b != Long.MIN_VALUE))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\nleadingZeros0 = Int('leadingZeros0')\nLong_SIZE0 = Int('Long_SIZE0')\n\nconstraints = [\n  leadingZeros0 == Long.numberOfLeadingZeros(a0) + Long.numberOfLeadingZeros(~a0) + Long.numberOfLeadingZeros(b0) + Long.numberOfLeadingZeros(~b0),\n  a0 >= -9223372036854775808, a0 <= 9223372036854775807, # implicit\n  b0 >= -9223372036854775808, b0 <= 9223372036854775807, # implicit\n  And(And(Not(leadingZeros0 > Long_SIZE0 + 1), Not(Not(leadingZeros0 >= Long_SIZE0))), Not(a0 >= 0 | b0 != -9223372036854775808))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 533,
          "throwingLine": 551,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.math.LongMath.checkedMultiply(long, long)",
          "exception": "throw new ArithmeticException(\"overflow\")",
          "pathCojunction": "(!(leadingZeros > Long.SIZE + 1)) && (!(leadingZeros >= Long.SIZE))",
          "symbolicPathConjunction": "(!(leadingZeros > Long.SIZE + 1)) && (!(!(condition)))",
          "backwardsPathConjunction": "(!(Long.numberOfLeadingZeros(a) + Long.numberOfLeadingZeros(~a) + Long.numberOfLeadingZeros(b) + Long.numberOfLeadingZeros(~b) > Long.SIZE + 1)) && (!(Long.numberOfLeadingZeros(a) + Long.numberOfLeadingZeros(~a) + Long.numberOfLeadingZeros(b) + Long.numberOfLeadingZeros(~b) >= Long.SIZE))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\na0 = Int('a0')\nb0 = Int('b0')\nleadingZeros0 = Int('leadingZeros0')\nLong_SIZE0 = Int('Long_SIZE0')\n\nconstraints = [\n  leadingZeros0 == Long.numberOfLeadingZeros(a0) + Long.numberOfLeadingZeros(~a0) + Long.numberOfLeadingZeros(b0) + Long.numberOfLeadingZeros(~b0),\n  a0 >= -9223372036854775808, a0 <= 9223372036854775807, # implicit\n  b0 >= -9223372036854775808, b0 <= 9223372036854775807, # implicit\n  And(Not(leadingZeros0 > Long_SIZE0 + 1), Not(leadingZeros0 >= Long_SIZE0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 533,
          "throwingLine": 550,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.math.LongMath.factorial(int)",
          "exception": "throw new IllegalArgumentException(\"n\" + \" (\" + n + \") must be >= 0\")",
          "pathCojunction": "(n < 0)",
          "symbolicPathConjunction": "(x < 0)",
          "backwardsPathConjunction": "(n < 0)",
          "simplifiedPathConjunction": "n < 0",
          "z3Inputs": "[n0 = -1]\n[n0 = -2]\n[n0 = -3]\n[n0 = -4]\n[n0 = -5]\n[n0 = -6]\n[n0 = -7]\n[n0 = -8]\n[n0 = -9]\n[n0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\n\nconstraints = [\n  n0 < 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nn = Symbol('n', integer=True)\npath_conjunction = (StrictLessThan(n, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 614,
          "throwingLine": 615,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/escape/CharEscaper.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.escape.CharEscaper.escape(java.lang.String)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(string == null)",
          "symbolicPathConjunction": "(checkNotNull(string))",
          "backwardsPathConjunction": "(string == null)",
          "simplifiedPathConjunction": "null == string",
          "z3Inputs": "[string0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nstring0 = String('string0')\nstring0_isNull = Bool('string0_isNull')\n\nconstraints = [\n  string0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nstring = Symbol('string')\nnull = Symbol('null')\npath_conjunction = (Eq(string, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 58,
          "throwingLine": 59,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultimap.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultimap.create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(keyComparator == null)",
          "symbolicPathConjunction": "(checkNotNull(keyComparator))",
          "backwardsPathConjunction": "(keyComparator == null)",
          "z3Inputs": "[keyComparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyComparator0_isNull = Bool('keyComparator0_isNull')\n\nconstraints = [\n  keyComparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(keyComparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.TreeMultimap.create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(keyComparator == null)) && (valueComparator == null)",
          "symbolicPathConjunction": "(checkNotNull(keyComparator)) && (checkNotNull(valueComparator))",
          "backwardsPathConjunction": "(!(keyComparator == null)) && (valueComparator == null)",
          "z3Inputs": "[keyComparator0_isNull = False,\n valueComparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nkeyComparator0_isNull = Bool('keyComparator0_isNull')\nvalueComparator0_isNull = Bool('valueComparator0_isNull')\n\nconstraints = [\n  And(Not(keyComparator0_isNull), valueComparator0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(keyComparator, null)))) & (Eq(valueComparator, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 94,
          "throwingLine": 95,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.hash.AbstractNonStreamingHashFunctionTest.NonStreamingVersion.hashString(java.lang.CharSequence, java.nio.charset.Charset)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = String('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 143,
          "throwingLine": 144,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.hash.AbstractNonStreamingHashFunctionTest.NonStreamingVersion.hashLong(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = Int('input0')\n\nconstraints = [\n  input0 >= -9223372036854775808, input0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 148,
          "throwingLine": 149,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.hash.AbstractNonStreamingHashFunctionTest.NonStreamingVersion.hashInt(int)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ninput0 = Int('input0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 153,
          "throwingLine": 154,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/util/concurrent/FutureCallbackTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.ThrowingFuture.get()",
          "exception": "throw runtime;",
          "pathCojunction": "(!(error != null))",
          "symbolicPathConjunction": "(!(error != null))",
          "backwardsPathConjunction": "(!(error != null))",
          "simplifiedPathConjunction": "error == null",
          "z3Inputs": "[error0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nerror0_isNull = Bool('error0_isNull')\n\nconstraints = [\n  Not(Not(error0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerror = Symbol('error')\nnull = Symbol('null')\npath_conjunction = (~((Ne(error, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 212,
          "throwingLine": 213,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.ThrowingFuture.get()",
          "exception": "throw error;",
          "pathCojunction": "(error != null)",
          "symbolicPathConjunction": "(error != null)",
          "backwardsPathConjunction": "(error != null)",
          "simplifiedPathConjunction": "error != null",
          "z3Inputs": "[error0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nerror0_isNull = Bool('error0_isNull')\n\nconstraints = [\n  Not(error0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerror = Symbol('error')\nnull = Symbol('null')\npath_conjunction = (Ne(error, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 212,
          "throwingLine": 213,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.ThrowingFuture.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw runtime;",
          "pathCojunction": "(!(error != null))",
          "symbolicPathConjunction": "(!(error != null))",
          "backwardsPathConjunction": "(!(error != null))",
          "simplifiedPathConjunction": "error == null",
          "z3Inputs": "[timeout0 = -9223372036854775808, error0_isNull = True]\n[error0_isNull = True, timeout0 = 0]\n[error0_isNull = True, timeout0 = -1]\n[error0_isNull = True, timeout0 = -2]\n[error0_isNull = True, timeout0 = -3]\n[error0_isNull = True, timeout0 = -4]\n[error0_isNull = True, timeout0 = -5]\n[error0_isNull = True, timeout0 = -6]\n[error0_isNull = True, timeout0 = -7]\n[error0_isNull = True, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\nerror0_isNull = Bool('error0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  Not(Not(error0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerror = Symbol('error')\nnull = Symbol('null')\npath_conjunction = (~((Ne(error, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 218,
          "throwingLine": 219,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.util.concurrent.FutureCallbackTest.ThrowingFuture.get(long, java.util.concurrent.TimeUnit)",
          "exception": "throw error;",
          "pathCojunction": "(error != null)",
          "symbolicPathConjunction": "(error != null)",
          "backwardsPathConjunction": "(error != null)",
          "simplifiedPathConjunction": "error != null",
          "z3Inputs": "[timeout0 = -9223372036854775808, error0_isNull = False]\n[error0_isNull = False, timeout0 = 0]\n[error0_isNull = False, timeout0 = -1]\n[error0_isNull = False, timeout0 = -2]\n[error0_isNull = False, timeout0 = -3]\n[error0_isNull = False, timeout0 = -4]\n[error0_isNull = False, timeout0 = -5]\n[error0_isNull = False, timeout0 = -6]\n[error0_isNull = False, timeout0 = -7]\n[error0_isNull = False, timeout0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\nerror0_isNull = Bool('error0_isNull')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  Not(error0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nerror = Symbol('error')\nnull = Symbol('null')\npath_conjunction = (Ne(error, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 218,
          "throwingLine": 219,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/collect/ImmutableSortedSet.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.lang.Iterable<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(naturalOrder == null)) && (naturalOrder == null)",
          "symbolicPathConjunction": "(Ordering.<Comparable>natural()) && (copyOf(naturalOrder, elements))",
          "backwardsPathConjunction": "(!((Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE == null)) && ((Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnaturalOrder0_isNull = Bool('naturalOrder0_isNull')\n\nconstraints = [\n  naturalOrder0 == (Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE,\n  And(Not(naturalOrder0_isNull), naturalOrder0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 200,
          "throwingLine": 205,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.lang.Iterable<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(naturalOrder == null)",
          "symbolicPathConjunction": "(Ordering.<Comparable>natural()) && (copyOf(naturalOrder, elements))",
          "backwardsPathConjunction": "((Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnaturalOrder0_isNull = Bool('naturalOrder0_isNull')\n\nconstraints = [\n  naturalOrder0 == (Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE,\n  naturalOrder0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 200,
          "throwingLine": 205,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.lang.Iterable<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(naturalOrder == null)) && (!(naturalOrder == null)) && (elements == null)",
          "symbolicPathConjunction": "(Ordering.<Comparable>natural()) && (copyOf(naturalOrder, elements))",
          "backwardsPathConjunction": "(!((Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE == null)) && (!((Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE == null)) && (elements == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnaturalOrder0_isNull = Bool('naturalOrder0_isNull')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  naturalOrder0 == (Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE,\n  And(And(Not(naturalOrder0_isNull), Not(naturalOrder0_isNull)), elements0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 200,
          "throwingLine": 205,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Collection<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(naturalOrder == null)",
          "symbolicPathConjunction": "(Ordering.<Comparable>natural()) && (copyOf(naturalOrder, elements))",
          "backwardsPathConjunction": "((Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnaturalOrder0_isNull = Bool('naturalOrder0_isNull')\n\nconstraints = [\n  naturalOrder0 == (Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE,\n  naturalOrder0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 237,
          "throwingLine": 242,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Collection<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(naturalOrder == null)) && (naturalOrder == null)",
          "symbolicPathConjunction": "(Ordering.<Comparable>natural()) && (copyOf(naturalOrder, elements))",
          "backwardsPathConjunction": "(!((Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE == null)) && ((Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnaturalOrder0_isNull = Bool('naturalOrder0_isNull')\n\nconstraints = [\n  naturalOrder0 == (Ordering<E>) (Ordering<C>) NaturalOrdering.INSTANCE,\n  And(Not(naturalOrder0_isNull), naturalOrder0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 237,
          "throwingLine": 242,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 292,
          "throwingLine": 293,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(comparator == null)) && (!(comparator == null)) && (elements == null)",
          "symbolicPathConjunction": "(checkNotNull(comparator)) && (SortedIterables.hasSameComparator(comparator, elements))",
          "backwardsPathConjunction": "(!(comparator == null)) && (!(comparator == null)) && (elements == null)",
          "z3Inputs": "[elements0_isNull = True, comparator0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\nelements0_isNull = Bool('elements0_isNull')\n\nconstraints = [\n  And(And(Not(comparator0_isNull), Not(comparator0_isNull)), elements0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nextends = Symbol('extends')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(comparator, null)))) & (~((Eq(comparator, null))))) & (Eq(elements, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 292,
          "throwingLine": 294,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Collection<? extends E>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(comparator == null)",
          "symbolicPathConjunction": "(copyOf(comparator, (Iterable<? extends E>) elements))",
          "backwardsPathConjunction": "(comparator == null)",
          "z3Inputs": "[comparator0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncomparator0_isNull = Bool('comparator0_isNull')\n\nconstraints = [\n  comparator0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsuper = Symbol('super')\nnull = Symbol('null')\npath_conjunction = (Eq(comparator, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 327,
          "throwingLine": 328,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.subSet(E, E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromElement == null)) && (toElement == null)",
          "symbolicPathConjunction": "(subSet(fromElement, true, toElement, false))",
          "backwardsPathConjunction": "(!(fromElement == null)) && (toElement == null)",
          "simplifiedPathConjunction": "null == toElement && fromElement != null",
          "z3Inputs": "[fromElement0_isNull = False, toElement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromElement0_isNull = Bool('fromElement0_isNull')\ntoElement0_isNull = Bool('toElement0_isNull')\n\nconstraints = [\n  And(Not(fromElement0_isNull), toElement0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\ntoElement = Symbol('toElement')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(fromElement, null)))) & (Eq(toElement, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 594,
          "throwingLine": 595,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.subSet(E, E)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromElement == null)",
          "symbolicPathConjunction": "(subSet(fromElement, true, toElement, false))",
          "backwardsPathConjunction": "(fromElement == null)",
          "simplifiedPathConjunction": "fromElement == null",
          "z3Inputs": "[fromElement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromElement0_isNull = Bool('fromElement0_isNull')\n\nconstraints = [\n  fromElement0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\nnull = Symbol('null')\npath_conjunction = (Eq(fromElement, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 594,
          "throwingLine": 595,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.subSet(E, boolean, E, boolean)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(fromElement == null)",
          "symbolicPathConjunction": "(checkNotNull(fromElement))",
          "backwardsPathConjunction": "(fromElement == null)",
          "simplifiedPathConjunction": "fromElement == null",
          "z3Inputs": "[fromElement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromInclusive0 = Bool('fromInclusive0')\ntoInclusive0 = Bool('toInclusive0')\nfromElement0_isNull = Bool('fromElement0_isNull')\n\nconstraints = [\n  fromElement0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\nnull = Symbol('null')\npath_conjunction = (Eq(fromElement, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 604,
          "throwingLine": 605,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.subSet(E, boolean, E, boolean)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(!(fromElement == null)) && (toElement == null)",
          "symbolicPathConjunction": "(checkNotNull(fromElement)) && (checkNotNull(toElement))",
          "backwardsPathConjunction": "(!(fromElement == null)) && (toElement == null)",
          "simplifiedPathConjunction": "null == toElement && fromElement != null",
          "z3Inputs": "[fromElement0_isNull = False, toElement0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromInclusive0 = Bool('fromInclusive0')\ntoInclusive0 = Bool('toInclusive0')\nfromElement0_isNull = Bool('fromElement0_isNull')\ntoElement0_isNull = Bool('toElement0_isNull')\n\nconstraints = [\n  And(Not(fromElement0_isNull), toElement0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfromElement = Symbol('fromElement')\ntoElement = Symbol('toElement')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(fromElement, null)))) & (Eq(toElement, null)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 604,
          "throwingLine": 606,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.pollFirst()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 703,
          "throwingLine": 704,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.collect.ImmutableSortedSet.pollLast()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 717,
          "throwingLine": 718,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Throwables.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfInstanceOf(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw declaredType.cast(throwable);",
          "pathCojunction": "(throwable != null && declaredType.isInstance(throwable))",
          "symbolicPathConjunction": "(throwable != null && declaredType.isInstance(throwable))",
          "backwardsPathConjunction": "(throwable != null && declaredType.isInstance(throwable))",
          "simplifiedPathConjunction": "declaredType.isInstance(throwable) && null != throwable",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  And(Not(throwable0_isNull), declaredType0.isInstance(throwable0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\ndeclaredType = Symbol('declaredType')\ndeclaredType_isInstance = Symbol('declaredType_isInstance')\nnull = Symbol('null')\npath_conjunction = ((Ne(throwable, null)) & declaredType_isInstance)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 67,
          "throwingLine": 70,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable)",
          "exception": "throw RuntimeException.class.cast(throwable)",
          "pathCojunction": "(!(throwable != null && Error.class.isInstance(throwable))) && (throwable != null && RuntimeException.class.isInstance(throwable))",
          "symbolicPathConjunction": "(propagateIfInstanceOf(throwable, Error.class)) && (propagateIfInstanceOf(throwable, RuntimeException.class))",
          "backwardsPathConjunction": "(!(throwable != null && Error.class.isInstance(throwable))) && (throwable != null && RuntimeException.class.isInstance(throwable))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  And(Not(And(Not(throwable0_isNull), Error.class.isInstance(throwable0))), And(Not(throwable0_isNull), RuntimeException.class.isInstance(throwable0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((~(((Ne(throwable, null)) & Error.class_isInstance))) & ((Ne(throwable, null)) & RuntimeException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 88,
          "throwingLine": 90,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable)",
          "exception": "throw Error.class.cast(throwable)",
          "pathCojunction": "(throwable != null && Error.class.isInstance(throwable))",
          "symbolicPathConjunction": "(propagateIfInstanceOf(throwable, Error.class))",
          "backwardsPathConjunction": "(throwable != null && Error.class.isInstance(throwable))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  And(Not(throwable0_isNull), Error.class.isInstance(throwable0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((Ne(throwable, null)) & Error.class_isInstance)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 88,
          "throwingLine": 89,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw Error.class.cast(throwable)",
          "pathCojunction": "(!(throwable != null && declaredType.isInstance(throwable))) && (throwable != null && Error.class.isInstance(throwable))",
          "symbolicPathConjunction": "(propagateIfInstanceOf(throwable, declaredType)) && (propagateIfPossible(throwable))",
          "backwardsPathConjunction": "(!(throwable != null && declaredType.isInstance(throwable))) && (throwable != null && Error.class.isInstance(throwable))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  And(Not(And(Not(throwable0_isNull), declaredType0.isInstance(throwable0))), And(Not(throwable0_isNull), Error.class.isInstance(throwable0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\ndeclaredType = Symbol('declaredType')\ndeclaredType_isInstance = Symbol('declaredType_isInstance')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((~(((Ne(throwable, null)) & declaredType_isInstance))) & ((Ne(throwable, null)) & Error.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 111,
          "throwingLine": 113,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw declaredType.cast(throwable);",
          "pathCojunction": "(throwable != null && declaredType.isInstance(throwable))",
          "symbolicPathConjunction": "(propagateIfInstanceOf(throwable, declaredType))",
          "backwardsPathConjunction": "(throwable != null && declaredType.isInstance(throwable))",
          "simplifiedPathConjunction": "declaredType.isInstance(throwable) && null != throwable",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  And(Not(throwable0_isNull), declaredType0.isInstance(throwable0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\ndeclaredType = Symbol('declaredType')\ndeclaredType_isInstance = Symbol('declaredType_isInstance')\nnull = Symbol('null')\npath_conjunction = ((Ne(throwable, null)) & declaredType_isInstance)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 111,
          "throwingLine": 112,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X>)",
          "exception": "throw RuntimeException.class.cast(throwable)",
          "pathCojunction": "(!(throwable != null && declaredType.isInstance(throwable))) && (!(throwable != null && Error.class.isInstance(throwable))) && (throwable != null && RuntimeException.class.isInstance(throwable))",
          "symbolicPathConjunction": "(propagateIfInstanceOf(throwable, declaredType)) && (propagateIfPossible(throwable))",
          "backwardsPathConjunction": "(!(throwable != null && declaredType.isInstance(throwable))) && (!(throwable != null && Error.class.isInstance(throwable))) && (throwable != null && RuntimeException.class.isInstance(throwable))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  And(And(Not(And(Not(throwable0_isNull), declaredType0.isInstance(throwable0))), Not(And(Not(throwable0_isNull), Error.class.isInstance(throwable0)))), And(Not(throwable0_isNull), RuntimeException.class.isInstance(throwable0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\ndeclaredType = Symbol('declaredType')\ndeclaredType_isInstance = Symbol('declaredType_isInstance')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = (((~(((Ne(throwable, null)) & declaredType_isInstance))) & (~(((Ne(throwable, null)) & Error.class_isInstance)))) & ((Ne(throwable, null)) & RuntimeException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 111,
          "throwingLine": 113,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw declaredType1.cast(throwable)",
          "pathCojunction": "(!(declaredType2 == null)) && (throwable != null && declaredType1.isInstance(throwable))",
          "symbolicPathConjunction": "(checkNotNull(declaredType2)) && (propagateIfInstanceOf(throwable, declaredType1))",
          "backwardsPathConjunction": "(!(declaredType2 == null)) && (throwable != null && declaredType1.isInstance(throwable))",
          "simplifiedPathConjunction": "declaredType1.isInstance(throwable) && declaredType2 != null && null != throwable",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndeclaredType20_isNull = Bool('declaredType20_isNull')\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  And(Not(declaredType20_isNull), And(Not(throwable0_isNull), declaredType10.isInstance(throwable0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\ndeclaredType1 = Symbol('declaredType1')\ndeclaredType2 = Symbol('declaredType2')\ndeclaredType1_isInstance = Symbol('declaredType1_isInstance')\nnull = Symbol('null')\npath_conjunction = ((~((Eq(declaredType2, null)))) & ((Ne(throwable, null)) & declaredType1_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 129,
          "throwingLine": 131,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw Error.class.cast(throwable)",
          "pathCojunction": "(!(declaredType2 == null)) && (!(throwable != null && declaredType1.isInstance(throwable))) && (!(throwable != null && declaredType2.isInstance(throwable))) && (throwable != null && Error.class.isInstance(throwable))",
          "symbolicPathConjunction": "(checkNotNull(declaredType2)) && (propagateIfInstanceOf(throwable, declaredType1)) && (propagateIfPossible(throwable, declaredType2))",
          "backwardsPathConjunction": "(!(declaredType2 == null)) && (!(throwable != null && declaredType1.isInstance(throwable))) && (!(throwable != null && declaredType2.isInstance(throwable))) && (throwable != null && Error.class.isInstance(throwable))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndeclaredType20_isNull = Bool('declaredType20_isNull')\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  And(And(And(Not(declaredType20_isNull), Not(And(Not(throwable0_isNull), declaredType10.isInstance(throwable0)))), Not(And(Not(throwable0_isNull), declaredType20.isInstance(throwable0)))), And(Not(throwable0_isNull), Error.class.isInstance(throwable0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\ndeclaredType1 = Symbol('declaredType1')\ndeclaredType2 = Symbol('declaredType2')\ndeclaredType1_isInstance = Symbol('declaredType1_isInstance')\ndeclaredType2_isInstance = Symbol('declaredType2_isInstance')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(declaredType2, null)))) & (~(((Ne(throwable, null)) & declaredType1_isInstance)))) & (~(((Ne(throwable, null)) & declaredType2_isInstance)))) & ((Ne(throwable, null)) & Error.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 129,
          "throwingLine": 132,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw declaredType2.cast(throwable)",
          "pathCojunction": "(!(declaredType2 == null)) && (!(throwable != null && declaredType1.isInstance(throwable))) && (throwable != null && declaredType2.isInstance(throwable))",
          "symbolicPathConjunction": "(checkNotNull(declaredType2)) && (propagateIfInstanceOf(throwable, declaredType1)) && (propagateIfPossible(throwable, declaredType2))",
          "backwardsPathConjunction": "(!(declaredType2 == null)) && (!(throwable != null && declaredType1.isInstance(throwable))) && (throwable != null && declaredType2.isInstance(throwable))",
          "simplifiedPathConjunction": "declaredType2.isInstance(throwable) && !declaredType1.isInstance(throwable) && declaredType2 != null && null != throwable",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndeclaredType20_isNull = Bool('declaredType20_isNull')\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  And(And(Not(declaredType20_isNull), Not(And(Not(throwable0_isNull), declaredType10.isInstance(throwable0)))), And(Not(throwable0_isNull), declaredType20.isInstance(throwable0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\ndeclaredType1 = Symbol('declaredType1')\ndeclaredType2 = Symbol('declaredType2')\ndeclaredType1_isInstance = Symbol('declaredType1_isInstance')\ndeclaredType2_isInstance = Symbol('declaredType2_isInstance')\nnull = Symbol('null')\npath_conjunction = (((~((Eq(declaredType2, null)))) & (~(((Ne(throwable, null)) & declaredType1_isInstance)))) & ((Ne(throwable, null)) & declaredType2_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 129,
          "throwingLine": 132,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw RuntimeException.class.cast(throwable)",
          "pathCojunction": "(!(declaredType2 == null)) && (!(throwable != null && declaredType1.isInstance(throwable))) && (!(throwable != null && declaredType2.isInstance(throwable))) && (!(throwable != null && Error.class.isInstance(throwable))) && (throwable != null && RuntimeException.class.isInstance(throwable))",
          "symbolicPathConjunction": "(checkNotNull(declaredType2)) && (propagateIfInstanceOf(throwable, declaredType1)) && (propagateIfPossible(throwable, declaredType2))",
          "backwardsPathConjunction": "(!(declaredType2 == null)) && (!(throwable != null && declaredType1.isInstance(throwable))) && (!(throwable != null && declaredType2.isInstance(throwable))) && (!(throwable != null && Error.class.isInstance(throwable))) && (throwable != null && RuntimeException.class.isInstance(throwable))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndeclaredType20_isNull = Bool('declaredType20_isNull')\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  And(And(And(And(Not(declaredType20_isNull), Not(And(Not(throwable0_isNull), declaredType10.isInstance(throwable0)))), Not(And(Not(throwable0_isNull), declaredType20.isInstance(throwable0)))), Not(And(Not(throwable0_isNull), Error.class.isInstance(throwable0)))), And(Not(throwable0_isNull), RuntimeException.class.isInstance(throwable0)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\ndeclaredType1 = Symbol('declaredType1')\ndeclaredType2 = Symbol('declaredType2')\ndeclaredType1_isInstance = Symbol('declaredType1_isInstance')\ndeclaredType2_isInstance = Symbol('declaredType2_isInstance')\nBUG_IN_SIMPLIFICATION\nnull = Symbol('null')\npath_conjunction = (((((~((Eq(declaredType2, null)))) & (~(((Ne(throwable, null)) & declaredType1_isInstance)))) & (~(((Ne(throwable, null)) & declaredType2_isInstance)))) & (~(((Ne(throwable, null)) & Error.class_isInstance)))) & ((Ne(throwable, null)) & RuntimeException.class_isInstance))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 129,
          "throwingLine": 132,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(declaredType2 == null)",
          "symbolicPathConjunction": "(checkNotNull(declaredType2))",
          "backwardsPathConjunction": "(declaredType2 == null)",
          "simplifiedPathConjunction": "declaredType2 == null",
          "z3Inputs": "[declaredType20_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndeclaredType20_isNull = Bool('declaredType20_isNull')\n\nconstraints = [\n  declaredType20_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ndeclaredType2 = Symbol('declaredType2')\nnull = Symbol('null')\npath_conjunction = (Eq(declaredType2, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 129,
          "throwingLine": 130,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Throwables.getCausalChain(java.lang.Throwable)",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(throwable == null)",
          "symbolicPathConjunction": "(checkNotNull(throwable))",
          "backwardsPathConjunction": "(throwable == null)",
          "simplifiedPathConjunction": "null == throwable",
          "z3Inputs": "[throwable0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthrowable0_isNull = Bool('throwable0_isNull')\n\nconstraints = [\n  throwable0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nthrowable = Symbol('throwable')\nnull = Symbol('null')\npath_conjunction = (Eq(throwable, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 197,
          "throwingLine": 198,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava-tests/test/com/google/common/reflect/TypeResolverTest.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.reflect.TypeResolverTest.testWhere_mapFromBoundedWildcard()",
          "exception": "throw new NullPointerException()",
          "pathCojunction": "(subType == null)",
          "symbolicPathConjunction": "(new TypeResolver().where(new TypeCapture<Map<Integer, T>>() {\n}.capture(), new TypeCapture<Map<? extends Number, ? extends Number>>() {\n}.capture()).resolveType(subType))",
          "backwardsPathConjunction": "(((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0] == null)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsubType0_isNull = Bool('subType0_isNull')\n\nconstraints = [\n  subType0 == ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0],\n  subType0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 238,
          "throwingLine": 241,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/guava-19.0/guava/src/com/google/common/base/Verify.java",
      "methods": [
        {
          "qualifiedSignature": "com.google.common.base.Verify.verify(boolean)",
          "exception": "throw new VerifyException();",
          "pathCojunction": "(!(expression))",
          "symbolicPathConjunction": "(!(expression))",
          "backwardsPathConjunction": "(!(expression))",
          "simplifiedPathConjunction": "!expression",
          "z3Inputs": "[expression0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpression0 = Bool('expression0')\n\nconstraints = [\n  Not(expression0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpression = Symbol('expression')\npath_conjunction = (~(expression))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 98,
          "throwingLine": 100,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "com.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object...)",
          "exception": "throw new VerifyException(format(errorMessageTemplate, errorMessageArgs));",
          "pathCojunction": "(!(expression))",
          "symbolicPathConjunction": "(!(expression))",
          "backwardsPathConjunction": "(!(expression))",
          "simplifiedPathConjunction": "!expression",
          "z3Inputs": "[expression0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nexpression0 = Bool('expression0')\nerrorMessageTemplate0 = String('errorMessageTemplate0')\n\nconstraints = [\n  Not(expression0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nexpression = Symbol('expression')\npath_conjunction = (~(expression))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 123,
          "throwingLine": 125,
          "isStatic": true,
          "targetOnlyArguments": true
        }
      ]
    }
  ]
}