{
  "path": "/home/yanghengqin/gs-core-1.3-src/",
  "classes": [
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/graphicGraph/GraphicSprite.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicSprite.setPosition(org.graphstream.ui.graphicGraph.stylesheet.Values)",
          "exception": "throw new RuntimeException(\"WTF !!!\");",
          "pathCojunction": "(values.getValueCount() > 0) && (values.getValueCount() > 1) && (values.getValueCount() > 2) && (x == 1 && y == 1 && z == 1)",
          "symbolicPathConjunction": "(values.getValueCount() > 0) && (values.getValueCount() > 1) && (values.getValueCount() > 2) && (x == 1 && y == 1 && z == 1)",
          "backwardsPathConjunction": "(values.getValueCount() > 0) && (values.getValueCount() > 1) && (values.getValueCount() > 2) && (values.get(0) == 1 && values.get(1) == 1 && values.get(2) == 1)",
          "simplifiedPathConjunction": "values.get(1) == 1 && values.get(1)ValueCount > 2",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nx0 = Real('x0')\ny0 = Real('y0')\nz0 = Real('z0')\nx1 = Real('x1')\ny1 = Real('y1')\nz1 = Real('z1')\n\nconstraints = [\n  x0 == 0,\n  y0 == 0,\n  z0 == 0,\n  x1 == values0.get(0),\n  y1 == values0.get(1),\n  z1 == values0.get(2),\n  And(And(And(values0.getValueCount() > 0, values0.getValueCount() > 1), values0.getValueCount() > 2), And(And(x1 == 1, y1 == 1), z1 == 1))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nvalues = Symbol('values')\nvalues_getValueCount = Symbol('values_getValueCount')\nvalues_get = Symbol('values_get')\npath_conjunction = ((((StrictGreaterThan(values_getValueCount, 0)) & (StrictGreaterThan(values_getValueCount, 1))) & (StrictGreaterThan(values_getValueCount, 2))) & (((Eq(values_get, 1)) & (Eq(values_get, 1))) & (Eq(values_get, 1))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 296,
          "throwingLine": 309,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/dgs/DGSParser.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.dgs.DGSParser.nextStep()",
          "exception": "throw new IOException(\"pushback buffer overflow\")",
          "pathCojunction": "(next != Token.EOF) && (!(next.name().charAt(1) < 0)) && (pushbackOffset + 1 >= pushback.length)",
          "symbolicPathConjunction": "(next != Token.EOF) && ((!(c < 0)) && (pushbackOffset + 1 >= pushback.length))",
          "backwardsPathConjunction": "(directive() != Token.EOF) && (!(directive().name().charAt(1) < 0)) && (pushbackOffset + 1 >= pushback.length)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nr0 = Bool('r0')\nr1 = Bool('r1')\npushbackOffset0 = Int('pushbackOffset0')\npushback0_length = Int('pushback0_length')\n\nconstraints = [\n  r1 == next(),\n  next1 == directive(),\n  pushback0_length >= 0, # implicit\n  And(And(next1 != Token_EOF0, Not(next1.name().charAt(1) < 0)), pushbackOffset0 + 1 >= pushback0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 324,
          "throwingLine": 333,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.dgs.DGSParser.nextStep()",
          "exception": "throw new IOException(\"pushback buffer overflow\")",
          "pathCojunction": "(next != Token.EOF) && (!(next.name().charAt(1) < 0)) && (!(pushbackOffset + 1 >= pushback.length)) && (!(next.name().charAt(0) < 0)) && (pushbackOffset + 1 >= pushback.length)",
          "symbolicPathConjunction": "(next != Token.EOF) && ((!(c < 0)) && (!(pushbackOffset + 1 >= pushback.length))) && ((!(c < 0)) && (pushbackOffset + 1 >= pushback.length))",
          "backwardsPathConjunction": "(directive() != Token.EOF) && (!(directive().name().charAt(1) < 0)) && (!(pushbackOffset + 1 >= pushback.length)) && (!(directive().name().charAt(0) < 0)) && (pushbackOffset + 1 >= pushback.length)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nr0 = Bool('r0')\nr1 = Bool('r1')\npushbackOffset0 = Int('pushbackOffset0')\npushback0_length = Int('pushback0_length')\n\nconstraints = [\n  r1 == next(),\n  next1 == directive(),\n  pushback0_length >= 0, # implicit\n  And(And(And(And(next1 != Token_EOF0, Not(next1.name().charAt(1) < 0)), Not(pushbackOffset0 + 1 >= pushback0_length)), Not(next1.name().charAt(0) < 0)), pushbackOffset0 + 1 >= pushback0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 324,
          "throwingLine": 334,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.dgs.DGSParser.nextStep()",
          "exception": "throw new IOException(\"pushback buffer overflow\")",
          "pathCojunction": "(next != Token.EOF) && (next.name().charAt(1) < 0) && (!(next.name().charAt(0) < 0)) && (pushbackOffset + 1 >= pushback.length)",
          "symbolicPathConjunction": "(next != Token.EOF) && (c < 0) && ((!(c < 0)) && (pushbackOffset + 1 >= pushback.length))",
          "backwardsPathConjunction": "(directive() != Token.EOF) && (directive().name().charAt(1) < 0) && (!(directive().name().charAt(0) < 0)) && (pushbackOffset + 1 >= pushback.length)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nr0 = Bool('r0')\nr1 = Bool('r1')\npushbackOffset0 = Int('pushbackOffset0')\npushback0_length = Int('pushback0_length')\n\nconstraints = [\n  r1 == next(),\n  next1 == directive(),\n  pushback0_length >= 0, # implicit\n  And(And(And(next1 != Token_EOF0, next1.name().charAt(1) < 0), Not(next1.name().charAt(0) < 0)), pushbackOffset0 + 1 >= pushback0_length)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 324,
          "throwingLine": 334,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/util/time/ISODateComponent.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.util.time.ISODateComponent.NotImplementedComponent.set(java.lang.String, java.util.Calendar)",
          "exception": "throw new Error(\"not implemented component\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nvalue0 = String('value0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 310,
          "throwingLine": 311,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.util.time.ISODateComponent.NotImplementedComponent.get(java.util.Calendar)",
          "exception": "throw new Error(\"not implemented component\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 314,
          "throwingLine": 315,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/spriteManager/SpriteManager.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.spriteManager.SpriteManager.addSprite(java.lang.String)",
          "exception": "throw new InvalidSpriteIDException(\"Sprite identifiers cannot contain dots.\")",
          "pathCojunction": "(identifier.indexOf('.') >= 0)",
          "symbolicPathConjunction": "(identifier.indexOf('.') >= 0)",
          "backwardsPathConjunction": "(identifier.indexOf('.') >= 0)",
          "simplifiedPathConjunction": "identifier.indexOf('.') >= 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nidentifier0 = String('identifier0')\n\nconstraints = [\n  identifier0.indexOf('.') >= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nidentifier = Symbol('identifier')\nidentifier_indexOf = Symbol('identifier_indexOf')\npath_conjunction = (GreaterThan(identifier_indexOf, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 258,
          "throwingLine": 259,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.spriteManager.SpriteManager.graphAttributeChanged(java.lang.String, long, java.lang.String, java.lang.Object, java.lang.Object)",
          "exception": "throw new IllegalStateException(\"Sprite changed, but not added.\");",
          "pathCojunction": "(!(attributeLock)) && (attribute.startsWith(\"ui.sprite.\")) && (spriteId.indexOf('.') < 0) && (!(s != null))",
          "symbolicPathConjunction": "(!(attributeLock)) && (attribute.startsWith(\"ui.sprite.\")) && (spriteId.indexOf('.') < 0) && (!(s != null))",
          "backwardsPathConjunction": "(!(attributeLock)) && (attribute.startsWith(\"ui.sprite.\")) && (attribute.substring(10).indexOf('.') < 0) && (!(getSprite(attribute.substring(10)) != null))",
          "simplifiedPathConjunction": "attribute.startsWith(\"ui.sprite.\") && getSprite(attribute.substring(10)) == null && !attributeLock && attribute.substring(10)_indexOf < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ngraphId0 = String('graphId0')\ntime0 = Int('time0')\nattribute0 = String('attribute0')\nattributeLock0 = Bool('attributeLock0')\nspriteId0 = String('spriteId0')\ns0_isNull = Bool('s0_isNull')\n\nconstraints = [\n  spriteId0 == attribute0.substring(10),\n  s0 == getSprite(spriteId0),\n  time0 >= -9223372036854775808, time0 <= 9223372036854775807, # implicit\n  And(And(And(Not(attributeLock0), attribute0.startsWith(\"ui.sprite.\")), spriteId0.indexOf('.') < 0), Not(Not(s0_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nattribute = Symbol('attribute')\nattributeLock = Symbol('attributeLock')\nattribute_startsWith = Symbol('attribute_startsWith')\nattribute_substring_indexOf = Symbol('attribute_substring_indexOf')\nattribute_substring = Symbol('attribute_substring')\n_getSprite = Symbol('_getSprite')\nnull = Symbol('null')\npath_conjunction = ((((~(attributeLock)) & attribute_startsWith) & (StrictLessThan(attribute_substring_indexOf, 0))) & (~((Ne(_getSprite, null)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 445,
          "throwingLine": 466,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/graphicGraph/GraphicNode.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicNode.getBreadthFirstIterator()",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 202,
          "throwingLine": 203,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicNode.getBreadthFirstIterator(boolean)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndirected0 = Bool('directed0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 209,
          "throwingLine": 210,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicNode.getDepthFirstIterator()",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 216,
          "throwingLine": 217,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicNode.getDepthFirstIterator(boolean)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ndirected0 = Bool('directed0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 223,
          "throwingLine": 224,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicNode.getGraphName()",
          "exception": "throw new RuntimeException(\"impossible with GraphicGraph\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 316,
          "throwingLine": 317,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicNode.getHost()",
          "exception": "throw new RuntimeException(\"impossible with GraphicGraph\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 320,
          "throwingLine": 321,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicNode.setGraph(org.graphstream.graph.Graph)",
          "exception": "throw new RuntimeException(\"impossible with GraphicGraph\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 367,
          "throwingLine": 368,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicNode.setGraphName(java.lang.String)",
          "exception": "throw new RuntimeException(\"impossible with GraphicGraph\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnewHost0 = String('newHost0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 371,
          "throwingLine": 372,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicNode.setHost(java.lang.String)",
          "exception": "throw new RuntimeException(\"impossible with GraphicGraph\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnewHost0 = String('newHost0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 375,
          "throwingLine": 376,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/graphicGraph/StyleGroup.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.StyleGroup.setValue(java.lang.String, java.lang.Object)",
          "exception": "throw new RuntimeException(\"you cannot change the values of a style group.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nproperty0 = String('property0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 566,
          "throwingLine": 567,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.StyleGroup.BulkIterator.remove()",
          "exception": "throw new UnsupportedOperationException(\"this iterator does not allows removing elements\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 827,
          "throwingLine": 828,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/graphicGraph/StyleGroupSet.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.StyleGroupSet.ZIndex.ZIndexIterator.remove()",
          "exception": "throw new RuntimeException(\"This iterator does not support removal.\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1330,
          "throwingLine": 1331,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.StyleGroupSet.ElementIterator.remove()",
          "exception": "throw new RuntimeException(\"remove not implemented in this iterator\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1434,
          "throwingLine": 1435,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/netstream/DefaultNetStreamDecoder.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.netstream.DefaultNetStreamDecoder.register(java.lang.String, org.graphstream.stream.thread.ThreadProxyPipe)",
          "exception": "throw new Exception(\"name \" + name + \" already registered\");",
          "pathCojunction": "(streams.containsKey(name))",
          "symbolicPathConjunction": "(streams.containsKey(name))",
          "backwardsPathConjunction": "(streams.containsKey(name))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nname0 = String('name0')\n\nconstraints = [\n  streams0.containsKey(name0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 95,
          "throwingLine": 97,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/graph/implementations/AdjacencyListNode.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListNode.getEdge(int)",
          "exception": "throw new IndexOutOfBoundsException(\"Node \\\"\" + this + \"\\\"\" + \" has no edge \" + i);",
          "pathCojunction": "(i < 0 || i >= degree)",
          "symbolicPathConjunction": "(i < 0 || i >= degree)",
          "backwardsPathConjunction": "(i < 0 || i >= degree)",
          "simplifiedPathConjunction": "degree <= i || i < 0",
          "z3Inputs": "[i0 = -1, degree0 = 0]\n[i0 = -1, degree0 = -1]\n[i0 = -2, degree0 = -2]\n[i0 = -3, degree0 = -3]\n[i0 = -4, degree0 = -4]\n[i0 = -5, degree0 = -5]\n[i0 = -6, degree0 = -6]\n[i0 = -7, degree0 = -7]\n[i0 = -8, degree0 = -8]\n[i0 = -9, degree0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\ndegree0 = Int('degree0')\n\nconstraints = [\n  Or(i0 < 0, i0 >= degree0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\ndegree = Symbol('degree', integer=True)\npath_conjunction = ((StrictLessThan(i, 0)) | (GreaterThan(i, degree)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 191,
          "throwingLine": 193,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListNode.getEnteringEdge(int)",
          "exception": "throw new IndexOutOfBoundsException(\"Node \\\"\" + this + \"\\\"\" + \" has no entering edge \" + i);",
          "pathCojunction": "(i < 0 || i >= oStart)",
          "symbolicPathConjunction": "(getInDegree()) && (i < 0 || i >= getInDegree())",
          "backwardsPathConjunction": "(i < 0 || i >= oStart)",
          "simplifiedPathConjunction": "i >= oStart || i < 0",
          "z3Inputs": "[i0 = -1, oStart0 = 0]\n[i0 = -1, oStart0 = -1]\n[i0 = -2, oStart0 = -2]\n[i0 = -3, oStart0 = -3]\n[i0 = -4, oStart0 = -4]\n[i0 = -5, oStart0 = -5]\n[i0 = -6, oStart0 = -6]\n[i0 = -7, oStart0 = -7]\n[i0 = -8, oStart0 = -8]\n[i0 = -9, oStart0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\noStart0 = Int('oStart0')\n\nconstraints = [\n  Or(i0 < 0, i0 >= oStart0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\noStart = Symbol('oStart', integer=True)\npath_conjunction = ((StrictLessThan(i, 0)) | (GreaterThan(i, oStart)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 200,
          "throwingLine": 202,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListNode.getLeavingEdge(int)",
          "exception": "throw new IndexOutOfBoundsException(\"Node \\\"\" + this + \"\\\"\" + \" has no edge \" + i);",
          "pathCojunction": "(i < 0 || i >= degree - ioStart)",
          "symbolicPathConjunction": "(getOutDegree()) && (i < 0 || i >= getOutDegree())",
          "backwardsPathConjunction": "(i < 0 || i >= degree - ioStart)",
          "simplifiedPathConjunction": "degree <= i + ioStart || i < 0",
          "z3Inputs": "[i0 = -1, degree0 = 0, ioStart0 = 0]\n[i0 = -2]\n[i0 = -3]\n[i0 = -4, degree0 = -1]\n[i0 = -4, degree0 = -2]\n[ioStart0 = -1, i0 = -4, degree0 = -3]\n[i0 = -4, degree0 = -4]\n[i0 = -5, degree0 = -5]\n[i0 = -6, degree0 = -6]\n[ioStart0 = -2, i0 = -7, degree0 = -7]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\ndegree0 = Int('degree0')\nioStart0 = Int('ioStart0')\n\nconstraints = [\n  Or(i0 < 0, i0 >= degree0 - ioStart0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\ndegree = Symbol('degree', integer=True)\nioStart = Symbol('ioStart', integer=True)\npath_conjunction = ((StrictLessThan(i, 0)) | (GreaterThan(i, (degree - ioStart))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 209,
          "throwingLine": 211,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListNode.EdgeIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(iNext >= iEnd)",
          "symbolicPathConjunction": "(iNext >= iEnd)",
          "backwardsPathConjunction": "(iNext >= iEnd)",
          "simplifiedPathConjunction": "iEnd <= iNext",
          "z3Inputs": "[iNext0 = 0, iEnd0 = 0]\n[iEnd0 = -1, iNext0 = -1]\n[iEnd0 = -2, iNext0 = -2]\n[iEnd0 = -3, iNext0 = -3]\n[iEnd0 = -4, iNext0 = -4]\n[iEnd0 = -5, iNext0 = -5]\n[iEnd0 = -6, iNext0 = -6]\n[iEnd0 = -7, iNext0 = -7]\n[iEnd0 = -8, iNext0 = -8]\n[iEnd0 = -9, iNext0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niNext0 = Int('iNext0')\niEnd0 = Int('iEnd0')\n\nconstraints = [\n  iNext0 >= iEnd0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niNext = Symbol('iNext', integer=True)\niEnd = Symbol('iEnd', integer=True)\npath_conjunction = (GreaterThan(iNext, iEnd))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 251,
          "throwingLine": 253,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListNode.EdgeIterator.remove()",
          "exception": "throw new IllegalStateException();",
          "pathCojunction": "(iPrev == -1)",
          "symbolicPathConjunction": "(iPrev == -1)",
          "backwardsPathConjunction": "(iPrev == -1)",
          "simplifiedPathConjunction": "iPrev == -1",
          "z3Inputs": "[iPrev0 = -1]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niPrev0 = Int('iPrev0')\n\nconstraints = [\n  iPrev0 == -1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niPrev = Symbol('iPrev', integer=True)\npath_conjunction = (Eq(iPrev, -1))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 258,
          "throwingLine": 260,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/graph/implementations/AbstractNode.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AbstractNode.Anonymous-1eb6ecfa-dfad-4f78-ba1d-c5c838431d09.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(next == null)",
          "symbolicPathConjunction": "(next == null)",
          "backwardsPathConjunction": "(next == null)",
          "simplifiedPathConjunction": "next == null",
          "z3Inputs": "[next0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnext0_isNull = Bool('next0_isNull')\n\nconstraints = [\n  next0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnext = Symbol('next')\nnull = Symbol('null')\npath_conjunction = (Eq(next, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 453,
          "throwingLine": 455,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AbstractNode.Anonymous-3b8719e1-dcd6-4bbd-878c-0069745ea7d7.remove()",
          "exception": "throw new UnsupportedOperationException(\"This iterator does not support remove\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 461,
          "throwingLine": 462,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/dgs/OldFileSourceDGS.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.dgs.OldFileSourceDGS.nextEvents()",
          "exception": "throw new IOException(\"parse error: \" + filename + \": \" + st.lineno() + \": \" + \"unknown token '\" + key + \"'\")",
          "pathCojunction": "(!(finished)) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"ce\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"cn\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"ae\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"an\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"de\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"dn\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"cg\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"st\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"#\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOL\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOF\"))) && (true)",
          "symbolicPathConjunction": "(!(finished)) && ((!(key.equals(\"ce\"))) && (!(key.equals(\"cn\"))) && (!(key.equals(\"ae\"))) && (!(key.equals(\"an\"))) && (!(key.equals(\"de\"))) && (!(key.equals(\"dn\"))) && (!(key.equals(\"cg\"))) && (!(key.equals(\"st\"))) && (!(key.equals(\"#\"))) && (!(key.equals(\"EOL\"))) && (!(key.equals(\"EOF\"))) && (!(parseError(\"unknown token '\" + getWordOrSymbolOrStringOrEolOrEof() + \"'\"))))",
          "backwardsPathConjunction": "(!(finished)) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"ce\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"cn\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"ae\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"an\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"de\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"dn\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"cg\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"st\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"#\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOL\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOF\"))) && (true)",
          "simplifiedPathConjunction": "!getWordOrSymbolOrStringOrEolOrEof().equals(\"cg\") && !finished",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfinished0 = Bool('finished0')\n\nconstraints = [\n  And(And(And(And(And(And(And(And(And(And(And(And(Not(finished0), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"ce\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"cn\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"ae\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"an\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"de\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"dn\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"cg\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"st\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"#\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOL\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOF\"))), True)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfinished = Symbol('finished')\n_getWordOrSymbolOrStringOrEolOrEof_equals = Symbol('_getWordOrSymbolOrStringOrEolOrEof_equals')\n_getWordOrSymbolOrStringOrEolOrEof = Symbol('_getWordOrSymbolOrStringOrEolOrEof')\npath_conjunction = (((((((((((((~(finished)) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & True)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 119,
          "throwingLine": 123,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.dgs.OldFileSourceDGS.nextStep()",
          "exception": "throw new IOException(\"parse error: \" + filename + \": \" + st.lineno() + \": \" + \"unknown token '\" + key + \"'\")",
          "pathCojunction": "(!(finished)) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"ce\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"cn\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"ae\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"an\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"de\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"dn\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"cg\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"st\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"#\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOL\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOF\"))) && (true)",
          "symbolicPathConjunction": "(!(finished)) && ((!(key.equals(\"ce\"))) && (!(key.equals(\"cn\"))) && (!(key.equals(\"ae\"))) && (!(key.equals(\"an\"))) && (!(key.equals(\"de\"))) && (!(key.equals(\"dn\"))) && (!(key.equals(\"cg\"))) && (!(key.equals(\"st\"))) && (!(key.equals(\"#\"))) && (!(key.equals(\"EOL\"))) && (!(key.equals(\"EOF\"))) && (!(parseError(\"unknown token '\" + getWordOrSymbolOrStringOrEolOrEof() + \"'\"))))",
          "backwardsPathConjunction": "(!(finished)) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"ce\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"cn\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"ae\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"an\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"de\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"dn\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"cg\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"st\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"#\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOL\"))) && (!(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOF\"))) && (true)",
          "simplifiedPathConjunction": "!getWordOrSymbolOrStringOrEolOrEof().equals(\"cg\") && !finished",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfinished0 = Bool('finished0')\n\nconstraints = [\n  And(And(And(And(And(And(And(And(And(And(And(And(Not(finished0), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"ce\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"cn\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"ae\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"an\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"de\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"dn\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"cg\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"st\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"#\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOL\"))), Not(getWordOrSymbolOrStringOrEolOrEof().equals(\"EOF\"))), True)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfinished = Symbol('finished')\n_getWordOrSymbolOrStringOrEolOrEof_equals = Symbol('_getWordOrSymbolOrStringOrEolOrEof_equals')\n_getWordOrSymbolOrStringOrEolOrEof = Symbol('_getWordOrSymbolOrStringOrEolOrEof')\npath_conjunction = (((((((((((((~(finished)) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & (~(_getWordOrSymbolOrStringOrEolOrEof_equals))) & True)\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 126,
          "throwingLine": 130,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/FileSinkGraphML.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.edgeAttributeAdded(java.lang.String, long, java.lang.String, java.lang.String, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nedgeId0 = String('edgeId0')\nattribute0 = String('attribute0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 159,
          "throwingLine": 160,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.edgeAttributeChanged(java.lang.String, long, java.lang.String, java.lang.String, java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nedgeId0 = String('edgeId0')\nattribute0 = String('attribute0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 164,
          "throwingLine": 165,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.edgeAttributeRemoved(java.lang.String, long, java.lang.String, java.lang.String)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nedgeId0 = String('edgeId0')\nattribute0 = String('attribute0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 169,
          "throwingLine": 170,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.graphAttributeAdded(java.lang.String, long, java.lang.String, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nattribute0 = String('attribute0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 174,
          "throwingLine": 175,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.graphAttributeChanged(java.lang.String, long, java.lang.String, java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nattribute0 = String('attribute0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 179,
          "throwingLine": 180,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.graphAttributeRemoved(java.lang.String, long, java.lang.String)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nattribute0 = String('attribute0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 184,
          "throwingLine": 185,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.nodeAttributeAdded(java.lang.String, long, java.lang.String, java.lang.String, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nnodeId0 = String('nodeId0')\nattribute0 = String('attribute0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 189,
          "throwingLine": 190,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.nodeAttributeChanged(java.lang.String, long, java.lang.String, java.lang.String, java.lang.Object, java.lang.Object)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nnodeId0 = String('nodeId0')\nattribute0 = String('attribute0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 194,
          "throwingLine": 195,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.nodeAttributeRemoved(java.lang.String, long, java.lang.String, java.lang.String)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nnodeId0 = String('nodeId0')\nattribute0 = String('attribute0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 199,
          "throwingLine": 200,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.edgeAdded(java.lang.String, long, java.lang.String, java.lang.String, java.lang.String, boolean)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nedgeId0 = String('edgeId0')\nfromNodeId0 = String('fromNodeId0')\ntoNodeId0 = String('toNodeId0')\ndirected0 = Bool('directed0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 204,
          "throwingLine": 205,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.edgeRemoved(java.lang.String, long, java.lang.String)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nedgeId0 = String('edgeId0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 208,
          "throwingLine": 209,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.graphCleared(java.lang.String, long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 212,
          "throwingLine": 213,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.nodeAdded(java.lang.String, long, java.lang.String)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nnodeId0 = String('nodeId0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 216,
          "throwingLine": 217,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.nodeRemoved(java.lang.String, long, java.lang.String)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nnodeId0 = String('nodeId0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 220,
          "throwingLine": 221,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGraphML.stepBegins(java.lang.String, long, double)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nsourceId0 = String('sourceId0')\ntimeId0 = Int('timeId0')\nstep0 = Real('step0')\n\nconstraints = [\n  timeId0 >= -9223372036854775808, timeId0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 224,
          "throwingLine": 225,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/tlp/TLPParserTokenManager.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.tlp.TLPParserTokenManager.ReInit(org.graphstream.util.parser.SimpleCharStream, int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(!(i-- > 0)) && (lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(ReInit(stream)) && (SwitchTo(lexState))",
          "backwardsPathConjunction": "(!(i-- > 0)) && (lexState >= 1 || lexState < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\ni0 = Int('i0')\n\nconstraints = [\n  And(Not(i0-- > 0), Or(lexState0 >= 1, lexState0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\ni = Symbol('i', integer=True)\npath_conjunction = ((~((StrictGreaterThan(i--, 0)))) & ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 742,
          "throwingLine": 744,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.tlp.TLPParserTokenManager.ReInit(org.graphstream.util.parser.SimpleCharStream, int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(i-- > 0) && (lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(ReInit(stream)) && (SwitchTo(lexState))",
          "backwardsPathConjunction": "(i-- > 0) && (lexState >= 1 || lexState < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\ni0 = Int('i0')\n\nconstraints = [\n  And(i0-- > 0, Or(lexState0 >= 1, lexState0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\ni = Symbol('i', integer=True)\npath_conjunction = ((StrictGreaterThan(i--, 0)) & ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 742,
          "throwingLine": 744,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.tlp.TLPParserTokenManager.SwitchTo(int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(lexState >= 1 || lexState < 0)",
          "backwardsPathConjunction": "(lexState >= 1 || lexState < 0)",
          "simplifiedPathConjunction": "lexState >= 1 || lexState < 0",
          "z3Inputs": "[lexState0 = -1]\n[lexState0 = -2]\n[lexState0 = -3]\n[lexState0 = -4]\n[lexState0 = -5]\n[lexState0 = -6]\n[lexState0 = -7]\n[lexState0 = -8]\n[lexState0 = -9]\n[lexState0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\n\nconstraints = [\n  Or(lexState0 >= 1, lexState0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\npath_conjunction = ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 748,
          "throwingLine": 750,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/graph/BreadthFirstIterator.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.graph.BreadthFirstIterator.remove()",
          "exception": "throw new UnsupportedOperationException(\"This iterator does not support remove\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 86,
          "throwingLine": 87,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/pajek/PajekParserTokenManager.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.pajek.PajekParserTokenManager.ReInit(org.graphstream.util.parser.SimpleCharStream, int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(!(i-- > 0)) && (lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(ReInit(stream)) && (SwitchTo(lexState))",
          "backwardsPathConjunction": "(!(i-- > 0)) && (lexState >= 1 || lexState < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\ni0 = Int('i0')\n\nconstraints = [\n  And(Not(i0-- > 0), Or(lexState0 >= 1, lexState0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\ni = Symbol('i', integer=True)\npath_conjunction = ((~((StrictGreaterThan(i--, 0)))) & ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 928,
          "throwingLine": 930,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.pajek.PajekParserTokenManager.ReInit(org.graphstream.util.parser.SimpleCharStream, int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(i-- > 0) && (lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(ReInit(stream)) && (SwitchTo(lexState))",
          "backwardsPathConjunction": "(i-- > 0) && (lexState >= 1 || lexState < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\ni0 = Int('i0')\n\nconstraints = [\n  And(i0-- > 0, Or(lexState0 >= 1, lexState0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\ni = Symbol('i', integer=True)\npath_conjunction = ((StrictGreaterThan(i--, 0)) & ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 928,
          "throwingLine": 930,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.pajek.PajekParserTokenManager.SwitchTo(int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(lexState >= 1 || lexState < 0)",
          "backwardsPathConjunction": "(lexState >= 1 || lexState < 0)",
          "simplifiedPathConjunction": "lexState >= 1 || lexState < 0",
          "z3Inputs": "[lexState0 = -1]\n[lexState0 = -2]\n[lexState0 = -3]\n[lexState0 = -4]\n[lexState0 = -5]\n[lexState0 = -6]\n[lexState0 = -7]\n[lexState0 = -8]\n[lexState0 = -9]\n[lexState0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\n\nconstraints = [\n  Or(lexState0 >= 1, lexState0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\npath_conjunction = ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 934,
          "throwingLine": 936,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/FileSinkSVG2.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkSVG2.begin(java.lang.String)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfileName0 = String('fileName0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 72,
          "throwingLine": 73,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkSVG2.begin(java.io.OutputStream)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 81,
          "throwingLine": 82,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkSVG2.begin(java.io.Writer)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 90,
          "throwingLine": 91,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkSVG2.end()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 99,
          "throwingLine": 100,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/graphicGraph/GraphicGraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.display()",
          "exception": "throw new RuntimeException(\"GraphicGraph is used by display() and cannot recursively define display()\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 862,
          "throwingLine": 863,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.display(boolean)",
          "exception": "throw new RuntimeException(\"GraphicGraph is used by display() and cannot recursively define display()\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nautoLayout0 = Bool('autoLayout0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 867,
          "throwingLine": 868,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.edgeFactory()",
          "exception": "throw new RuntimeException(\"GraphicGraph does not support EdgeFactory\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 882,
          "throwingLine": 883,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.nodeFactory()",
          "exception": "throw new RuntimeException(\"GraphicGraph does not support NodeFactory\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 920,
          "throwingLine": 921,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.setAutoCreate(boolean)",
          "exception": "throw new RuntimeException(\"GraphicGraph does not support auto-creation\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\non0 = Bool('on0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 924,
          "throwingLine": 925,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.setStrict(boolean)",
          "exception": "throw new RuntimeException(\"GraphicGraph does not support strict checking\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\non0 = Bool('on0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 933,
          "throwingLine": 934,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.setEdgeFactory(org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge>)",
          "exception": "throw new RuntimeException(\"you cannot change the edge factory for graphic graphs !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 947,
          "throwingLine": 948,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.setNodeFactory(org.graphstream.graph.NodeFactory<? extends org.graphstream.graph.Node>)",
          "exception": "throw new RuntimeException(\"you cannot change the node factory for graphic graphs !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 952,
          "throwingLine": 953,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.read(java.lang.String)",
          "exception": "throw new RuntimeException(\"GraphicGraph does not support I/O\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfilename0 = String('filename0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 957,
          "throwingLine": 958,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.read(org.graphstream.stream.file.FileSource, java.lang.String)",
          "exception": "throw new RuntimeException(\"GraphicGraph does not support I/O\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfilename0 = String('filename0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 961,
          "throwingLine": 962,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.write(org.graphstream.stream.file.FileSink, java.lang.String)",
          "exception": "throw new RuntimeException(\"GraphicGraph does not support I/O\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfilename0 = String('filename0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 965,
          "throwingLine": 966,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.write(java.lang.String)",
          "exception": "throw new RuntimeException(\"GraphicGraph does not support I/O\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfilename0 = String('filename0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 969,
          "throwingLine": 970,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.addEdge(java.lang.String, int, int)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = String('id0')\nindex10 = Int('index10')\nindex20 = Int('index20')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1352,
          "throwingLine": 1353,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.addEdge(java.lang.String, int, int, boolean)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = String('id0')\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\ndirected0 = Bool('directed0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1357,
          "throwingLine": 1358,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.addEdge(java.lang.String, org.graphstream.graph.Node, org.graphstream.graph.Node)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = String('id0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1361,
          "throwingLine": 1362,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.addEdge(java.lang.String, org.graphstream.graph.Node, org.graphstream.graph.Node, boolean)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nid0 = String('id0')\ndirected0 = Bool('directed0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1366,
          "throwingLine": 1367,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.getEdge(int)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1371,
          "throwingLine": 1372,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.getNode(int)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1376,
          "throwingLine": 1377,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.removeEdge(int)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1380,
          "throwingLine": 1381,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.removeEdge(int, int)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfromIndex0 = Int('fromIndex0')\ntoIndex0 = Int('toIndex0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1384,
          "throwingLine": 1385,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.removeEdge(org.graphstream.graph.Node, org.graphstream.graph.Node)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1388,
          "throwingLine": 1389,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.removeEdge(org.graphstream.graph.Edge)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1392,
          "throwingLine": 1393,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.removeNode(int)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1396,
          "throwingLine": 1397,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.GraphicGraph.removeNode(org.graphstream.graph.Node)",
          "exception": "throw new RuntimeException(\"not implemented !\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 1400,
          "throwingLine": 1401,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/thread/ThreadProxyPipeOld.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.thread.ThreadProxyPipeOld.blockingPump()",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 270,
          "throwingLine": 271,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.thread.ThreadProxyPipeOld.blockingPump(long)",
          "exception": "throw new UnsupportedOperationException();",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ntimeout0 = Int('timeout0')\n\nconstraints = [\n  timeout0 >= -9223372036854775808, timeout0 <= 9223372036854775807, # implicit\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 279,
          "throwingLine": 280,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/swingViewer/GraphRendererBase.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.swingViewer.GraphRendererBase.open(org.graphstream.ui.graphicGraph.GraphicGraph, java.awt.Container)",
          "exception": "throw new RuntimeException(\"renderer already open, cannot open twice\");",
          "pathCojunction": "(this.graph != null)",
          "symbolicPathConjunction": "(this.graph != null)",
          "backwardsPathConjunction": "(this.graph != null)",
          "z3Inputs": "[this_graph0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nthis_graph0_isNull = Bool('this_graph0_isNull')\n\nconstraints = [\n  Not(this_graph0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 63,
          "throwingLine": 65,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/graphicGraph/stylesheet/parser/StyleSheetParserTokenManager.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.stylesheet.parser.StyleSheetParserTokenManager.ReInit(org.graphstream.util.parser.SimpleCharStream, int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(i-- > 0) && (lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(ReInit(stream)) && (SwitchTo(lexState))",
          "backwardsPathConjunction": "(i-- > 0) && (lexState >= 1 || lexState < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\ni0 = Int('i0')\n\nconstraints = [\n  And(i0-- > 0, Or(lexState0 >= 1, lexState0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\ni = Symbol('i', integer=True)\npath_conjunction = ((StrictGreaterThan(i--, 0)) & ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 3032,
          "throwingLine": 3034,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.stylesheet.parser.StyleSheetParserTokenManager.ReInit(org.graphstream.util.parser.SimpleCharStream, int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(!(i-- > 0)) && (lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(ReInit(stream)) && (SwitchTo(lexState))",
          "backwardsPathConjunction": "(!(i-- > 0)) && (lexState >= 1 || lexState < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\ni0 = Int('i0')\n\nconstraints = [\n  And(Not(i0-- > 0), Or(lexState0 >= 1, lexState0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\ni = Symbol('i', integer=True)\npath_conjunction = ((~((StrictGreaterThan(i--, 0)))) & ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 3032,
          "throwingLine": 3034,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.stylesheet.parser.StyleSheetParserTokenManager.SwitchTo(int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(lexState >= 1 || lexState < 0)",
          "backwardsPathConjunction": "(lexState >= 1 || lexState < 0)",
          "simplifiedPathConjunction": "lexState >= 1 || lexState < 0",
          "z3Inputs": "[lexState0 = -1]\n[lexState0 = -2]\n[lexState0 = -3]\n[lexState0 = -4]\n[lexState0 = -5]\n[lexState0 = -6]\n[lexState0 = -7]\n[lexState0 = -8]\n[lexState0 = -9]\n[lexState0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\n\nconstraints = [\n  Or(lexState0 >= 1, lexState0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\npath_conjunction = ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 3038,
          "throwingLine": 3040,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/FileSinkGEXF2.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGEXF2.begin(java.lang.String)",
          "exception": "throw new IOException(\"cannot call begin() twice without calling end() before.\");",
          "pathCojunction": "(currentContext != null)",
          "symbolicPathConjunction": "(currentContext != null)",
          "backwardsPathConjunction": "(currentContext != null)",
          "simplifiedPathConjunction": "currentContext != null",
          "z3Inputs": "[currentContext0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfileName0 = String('fileName0')\ncurrentContext0_isNull = Bool('currentContext0_isNull')\n\nconstraints = [\n  Not(currentContext0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncurrentContext = Symbol('currentContext')\nnull = Symbol('null')\npath_conjunction = (Ne(currentContext, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 146,
          "throwingLine": 148,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGEXF2.begin(java.io.OutputStream)",
          "exception": "throw new IOException(\"cannot call begin() twice without calling end() before.\");",
          "pathCojunction": "(currentContext != null)",
          "symbolicPathConjunction": "(currentContext != null)",
          "backwardsPathConjunction": "(currentContext != null)",
          "simplifiedPathConjunction": "currentContext != null",
          "z3Inputs": "[currentContext0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncurrentContext0_isNull = Bool('currentContext0_isNull')\n\nconstraints = [\n  Not(currentContext0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncurrentContext = Symbol('currentContext')\nnull = Symbol('null')\npath_conjunction = (Ne(currentContext, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 160,
          "throwingLine": 162,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkGEXF2.begin(java.io.Writer)",
          "exception": "throw new IOException(\"cannot call begin() twice without calling end() before.\");",
          "pathCojunction": "(currentContext != null)",
          "symbolicPathConjunction": "(currentContext != null)",
          "backwardsPathConjunction": "(currentContext != null)",
          "simplifiedPathConjunction": "currentContext != null",
          "z3Inputs": "[currentContext0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ncurrentContext0_isNull = Bool('currentContext0_isNull')\n\nconstraints = [\n  Not(currentContext0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ncurrentContext = Symbol('currentContext')\nnull = Symbol('null')\npath_conjunction = (Ne(currentContext, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 174,
          "throwingLine": 176,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/swingViewer/util/GraphMetrics.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.swingViewer.util.GraphMetrics.setRatioPx2Gu(double)",
          "exception": "throw new RuntimeException(String.format(\"ratio PX to GU cannot be negative (%f)\", ratio));",
          "pathCojunction": "(!(ratio > 0)) && (!(ratio == 0)) && (ratio < 0)",
          "symbolicPathConjunction": "(!(ratio > 0)) && (!(ratio == 0)) && (ratio < 0)",
          "backwardsPathConjunction": "(!(ratio > 0)) && (!(ratio == 0)) && (ratio < 0)",
          "simplifiedPathConjunction": "ratio < 0",
          "z3Inputs": "[ratio0 = -1]\n[ratio0 = -1/2]\n[ratio0 = -3/4]\n[ratio0 = -7/8]\n[ratio0 = -15/16]\n[ratio0 = -31/32]\n[ratio0 = -63/64]\n[ratio0 = -127/128]\n[ratio0 = -255/256]\n[ratio0 = -511/512]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nratio0 = Real('ratio0')\n\nconstraints = [\n  And(And(Not(ratio0 > 0), Not(ratio0 == 0)), ratio0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nratio = Symbol('ratio', integer=True)\npath_conjunction = (((~((StrictGreaterThan(ratio, 0)))) & (~((Eq(ratio, 0))))) & (StrictLessThan(ratio, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 339,
          "throwingLine": 345,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.swingViewer.util.GraphMetrics.setRatioPx2Gu(double)",
          "exception": "throw new RuntimeException(\"ratio PX to GU cannot be zero\");",
          "pathCojunction": "(!(ratio > 0)) && (ratio == 0)",
          "symbolicPathConjunction": "(!(ratio > 0)) && (ratio == 0)",
          "backwardsPathConjunction": "(!(ratio > 0)) && (ratio == 0)",
          "simplifiedPathConjunction": "ratio == 0",
          "z3Inputs": "[ratio0 = 0]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nratio0 = Real('ratio0')\n\nconstraints = [\n  And(Not(ratio0 > 0), ratio0 == 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nratio = Symbol('ratio', integer=True)\npath_conjunction = ((~((StrictGreaterThan(ratio, 0)))) & (Eq(ratio, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 339,
          "throwingLine": 344,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/graphicGraph/stylesheet/parser/StyleSheetParser.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.stylesheet.parser.StyleSheetParser.values()",
          "exception": "throw new Error(\"Missing return statement in function\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  value1 == value(),\n  values1 == new Values(value1.units, value1.value),\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 692,
          "throwingLine": 714,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.graphicGraph.stylesheet.parser.StyleSheetParser.colors()",
          "exception": "throw new Error(\"Missing return statement in function\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  colors0 == new Colors(),\n  color1 == color(),\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 836,
          "throwingLine": 858,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/FileSinkImages.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkImages.setLayoutStabilizationLimit(double)",
          "exception": "throw new NullPointerException(\"did you enable layout ?\");",
          "pathCojunction": "(layout == null)",
          "symbolicPathConjunction": "(layout == null)",
          "backwardsPathConjunction": "(layout == null)",
          "simplifiedPathConjunction": "layout == null",
          "z3Inputs": "[layout0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlimit0 = Real('limit0')\nlayout0_isNull = Bool('layout0_isNull')\n\nconstraints = [\n  layout0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlayout = Symbol('layout')\nnull = Symbol('null')\npath_conjunction = (Eq(layout, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 506,
          "throwingLine": 508,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkImages.begin(java.io.OutputStream)",
          "exception": "throw new IOException(\"not implemented\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 701,
          "throwingLine": 702,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkImages.begin(java.io.Writer)",
          "exception": "throw new IOException(\"not implemented\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 710,
          "throwingLine": 711,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkImages.writeAll(org.graphstream.graph.Graph, java.io.OutputStream)",
          "exception": "throw new IOException(\"not implemented\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 750,
          "throwingLine": 751,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkImages.writeAll(org.graphstream.graph.Graph, java.io.Writer)",
          "exception": "throw new IOException(\"not implemented\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 761,
          "throwingLine": 762,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/swingViewer/util/DefaultCamera.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.swingViewer.util.DefaultCamera.pushView(org.graphstream.ui.graphicGraph.GraphicGraph, java.awt.Graphics2D)",
          "exception": "throw new RuntimeException(\"DefaultCamera.pushView() / popView() wrongly nested\");",
          "pathCojunction": "(!(oldTx == null))",
          "symbolicPathConjunction": "(!(oldTx == null))",
          "backwardsPathConjunction": "(!(oldTx == null))",
          "simplifiedPathConjunction": "null != oldTx",
          "z3Inputs": "[oldTx0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noldTx0_isNull = Bool('oldTx0_isNull')\n\nconstraints = [\n  Not(oldTx0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noldTx = Symbol('oldTx')\nnull = Symbol('null')\npath_conjunction = (~((Eq(oldTx, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 482,
          "throwingLine": 494,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/graph/implementations/AdjacencyListGraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListGraph.getEdge(int)",
          "exception": "throw new IndexOutOfBoundsException(\"Edge \" + index + \" does not exist\");",
          "pathCojunction": "(index < 0 || index >= edgeCount)",
          "symbolicPathConjunction": "(index < 0 || index >= edgeCount)",
          "backwardsPathConjunction": "(index < 0 || index >= edgeCount)",
          "simplifiedPathConjunction": "edgeCount <= index || index < 0",
          "z3Inputs": "[index0 = -1, edgeCount0 = 0]\n[edgeCount0 = -1, index0 = -1]\n[edgeCount0 = -2, index0 = -2]\n[index0 = -3]\n[index0 = -4]\n[edgeCount0 = -3, index0 = -5]\n[edgeCount0 = -4, index0 = -6]\n[index0 = -7]\n[edgeCount0 = -5, index0 = -8]\n[edgeCount0 = -6, index0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nedgeCount0 = Int('edgeCount0')\n\nconstraints = [\n  Or(index0 < 0, index0 >= edgeCount0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nedgeCount = Symbol('edgeCount', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (GreaterThan(index, edgeCount)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 219,
          "throwingLine": 221,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListGraph.getNode(int)",
          "exception": "throw new IndexOutOfBoundsException(\"Node \" + index + \" does not exist\");",
          "pathCojunction": "(index < 0 || index > nodeCount)",
          "symbolicPathConjunction": "(index < 0 || index > nodeCount)",
          "backwardsPathConjunction": "(index < 0 || index > nodeCount)",
          "simplifiedPathConjunction": "index > nodeCount || index < 0",
          "z3Inputs": "[index0 = -1, nodeCount0 = -1]\n[index0 = -2, nodeCount0 = -2]\n[index0 = -3, nodeCount0 = -4]\n[index0 = -3, nodeCount0 = -5]\n[index0 = -3, nodeCount0 = -6]\n[index0 = -3, nodeCount0 = -7]\n[index0 = -3, nodeCount0 = -8]\n[index0 = -4, nodeCount0 = -8]\n[index0 = -5]\n[index0 = -6, nodeCount0 = -8]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nindex0 = Int('index0')\nnodeCount0 = Int('nodeCount0')\n\nconstraints = [\n  Or(index0 < 0, index0 > nodeCount0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nindex = Symbol('index', integer=True)\nnodeCount = Symbol('nodeCount', integer=True)\npath_conjunction = ((StrictLessThan(index, 0)) | (StrictGreaterThan(index, nodeCount)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 239,
          "throwingLine": 241,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListGraph.EdgeIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(iNext >= edgeCount)",
          "symbolicPathConjunction": "(iNext >= edgeCount)",
          "backwardsPathConjunction": "(iNext >= edgeCount)",
          "simplifiedPathConjunction": "edgeCount <= iNext",
          "z3Inputs": "[iNext0 = 0, edgeCount0 = 0]\n[edgeCount0 = -1, iNext0 = -1]\n[edgeCount0 = -2, iNext0 = -2]\n[edgeCount0 = -3, iNext0 = -3]\n[edgeCount0 = -4, iNext0 = -4]\n[edgeCount0 = -5, iNext0 = -5]\n[edgeCount0 = -6, iNext0 = -6]\n[edgeCount0 = -7, iNext0 = -7]\n[edgeCount0 = -8, iNext0 = -8]\n[edgeCount0 = -9, iNext0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niNext0 = Int('iNext0')\nedgeCount0 = Int('edgeCount0')\n\nconstraints = [\n  iNext0 >= edgeCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niNext = Symbol('iNext', integer=True)\nedgeCount = Symbol('edgeCount', integer=True)\npath_conjunction = (GreaterThan(iNext, edgeCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 262,
          "throwingLine": 264,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListGraph.EdgeIterator.remove()",
          "exception": "throw new IllegalStateException();",
          "pathCojunction": "(iPrev == -1)",
          "symbolicPathConjunction": "(iPrev == -1)",
          "backwardsPathConjunction": "(iPrev == -1)",
          "simplifiedPathConjunction": "iPrev == -1",
          "z3Inputs": "[iPrev0 = -1]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niPrev0 = Int('iPrev0')\n\nconstraints = [\n  iPrev0 == -1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niPrev = Symbol('iPrev', integer=True)\npath_conjunction = (Eq(iPrev, -1))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 269,
          "throwingLine": 271,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListGraph.NodeIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(iNext >= nodeCount)",
          "symbolicPathConjunction": "(iNext >= nodeCount)",
          "backwardsPathConjunction": "(iNext >= nodeCount)",
          "simplifiedPathConjunction": "iNext >= nodeCount",
          "z3Inputs": "[iNext0 = 0, nodeCount0 = 0]\n[nodeCount0 = -1, iNext0 = -1]\n[nodeCount0 = -2, iNext0 = -2]\n[nodeCount0 = -3, iNext0 = -3]\n[nodeCount0 = -4, iNext0 = -4]\n[nodeCount0 = -5, iNext0 = -5]\n[nodeCount0 = -6, iNext0 = -6]\n[nodeCount0 = -7, iNext0 = -7]\n[nodeCount0 = -8, iNext0 = -8]\n[nodeCount0 = -9, iNext0 = -9]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niNext0 = Int('iNext0')\nnodeCount0 = Int('nodeCount0')\n\nconstraints = [\n  iNext0 >= nodeCount0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niNext = Symbol('iNext', integer=True)\nnodeCount = Symbol('nodeCount', integer=True)\npath_conjunction = (GreaterThan(iNext, nodeCount))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 287,
          "throwingLine": 289,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AdjacencyListGraph.NodeIterator.remove()",
          "exception": "throw new IllegalStateException();",
          "pathCojunction": "(iPrev == -1)",
          "symbolicPathConjunction": "(iPrev == -1)",
          "backwardsPathConjunction": "(iPrev == -1)",
          "simplifiedPathConjunction": "iPrev == -1",
          "z3Inputs": "[iPrev0 = -1]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\niPrev0 = Int('iPrev0')\n\nconstraints = [\n  iPrev0 == -1\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\niPrev = Symbol('iPrev', integer=True)\npath_conjunction = (Eq(iPrev, -1))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 294,
          "throwingLine": 296,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/dot/DOTParserTokenManager.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.dot.DOTParserTokenManager.ReInit(org.graphstream.util.parser.SimpleCharStream, int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(i-- > 0) && (lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(ReInit(stream)) && (SwitchTo(lexState))",
          "backwardsPathConjunction": "(i-- > 0) && (lexState >= 1 || lexState < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\ni0 = Int('i0')\n\nconstraints = [\n  And(i0-- > 0, Or(lexState0 >= 1, lexState0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\ni = Symbol('i', integer=True)\npath_conjunction = ((StrictGreaterThan(i--, 0)) & ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 673,
          "throwingLine": 675,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.dot.DOTParserTokenManager.ReInit(org.graphstream.util.parser.SimpleCharStream, int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(!(i-- > 0)) && (lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(ReInit(stream)) && (SwitchTo(lexState))",
          "backwardsPathConjunction": "(!(i-- > 0)) && (lexState >= 1 || lexState < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\ni0 = Int('i0')\n\nconstraints = [\n  And(Not(i0-- > 0), Or(lexState0 >= 1, lexState0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\ni = Symbol('i', integer=True)\npath_conjunction = ((~((StrictGreaterThan(i--, 0)))) & ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 673,
          "throwingLine": 675,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.dot.DOTParserTokenManager.SwitchTo(int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(lexState >= 1 || lexState < 0)",
          "backwardsPathConjunction": "(lexState >= 1 || lexState < 0)",
          "simplifiedPathConjunction": "lexState >= 1 || lexState < 0",
          "z3Inputs": "[lexState0 = -1]\n[lexState0 = -2]\n[lexState0 = -3]\n[lexState0 = -4]\n[lexState0 = -5]\n[lexState0 = -6]\n[lexState0 = -7]\n[lexState0 = -8]\n[lexState0 = -9]\n[lexState0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\n\nconstraints = [\n  Or(lexState0 >= 1, lexState0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\npath_conjunction = ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 679,
          "throwingLine": 681,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/graph/DepthFirstIterator.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.graph.DepthFirstIterator.next()",
          "exception": "throw new NoSuchElementException();",
          "pathCojunction": "(next == null)",
          "symbolicPathConjunction": "(next == null)",
          "backwardsPathConjunction": "(next == null)",
          "simplifiedPathConjunction": "next == null",
          "z3Inputs": "[next0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nnext0_isNull = Bool('next0_isNull')\n\nconstraints = [\n  next0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nnext = Symbol('next')\nnull = Symbol('null')\npath_conjunction = (Eq(next, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 92,
          "throwingLine": 94,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.DepthFirstIterator.remove()",
          "exception": "throw new UnsupportedOperationException(\"This iterator does not support remove\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 102,
          "throwingLine": 103,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/FileSourceBase.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSourceBase.end()",
          "exception": "throw new RuntimeException(\"poped one too many tokenizer\");",
          "pathCojunction": "(tok_stack.size() <= 0)",
          "symbolicPathConjunction": "(tok_stack.size() <= 0)",
          "backwardsPathConjunction": "(tok_stack.size() <= 0)",
          "simplifiedPathConjunction": "tok_stack.size() <= 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  tok_stack0.size() <= 0\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ntok_stack = Symbol('tok_stack')\ntok_stack_size = Symbol('tok_stack_size')\npath_conjunction = (LessThan(tok_stack_size, 0))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": true,
          "line": 200,
          "throwingLine": 201,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/gml/GMLParserTokenManager.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.gml.GMLParserTokenManager.ReInit(org.graphstream.util.parser.SimpleCharStream, int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(i-- > 0) && (lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(ReInit(stream)) && (SwitchTo(lexState))",
          "backwardsPathConjunction": "(i-- > 0) && (lexState >= 1 || lexState < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\ni0 = Int('i0')\n\nconstraints = [\n  And(i0-- > 0, Or(lexState0 >= 1, lexState0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\ni = Symbol('i', integer=True)\npath_conjunction = ((StrictGreaterThan(i--, 0)) & ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 486,
          "throwingLine": 488,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.gml.GMLParserTokenManager.ReInit(org.graphstream.util.parser.SimpleCharStream, int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(!(i-- > 0)) && (lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(ReInit(stream)) && (SwitchTo(lexState))",
          "backwardsPathConjunction": "(!(i-- > 0)) && (lexState >= 1 || lexState < 0)",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\ni0 = Int('i0')\n\nconstraints = [\n  And(Not(i0-- > 0), Or(lexState0 >= 1, lexState0 < 0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\ni = Symbol('i', integer=True)\npath_conjunction = ((~((StrictGreaterThan(i--, 0)))) & ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 486,
          "throwingLine": 488,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.gml.GMLParserTokenManager.SwitchTo(int)",
          "exception": "throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);",
          "pathCojunction": "(lexState >= 1 || lexState < 0)",
          "symbolicPathConjunction": "(lexState >= 1 || lexState < 0)",
          "backwardsPathConjunction": "(lexState >= 1 || lexState < 0)",
          "simplifiedPathConjunction": "lexState >= 1 || lexState < 0",
          "z3Inputs": "[lexState0 = -1]\n[lexState0 = -2]\n[lexState0 = -3]\n[lexState0 = -4]\n[lexState0 = -5]\n[lexState0 = -6]\n[lexState0 = -7]\n[lexState0 = -8]\n[lexState0 = -9]\n[lexState0 = -10]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nlexState0 = Int('lexState0')\n\nconstraints = [\n  Or(lexState0 >= 1, lexState0 < 0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nlexState = Symbol('lexState', integer=True)\npath_conjunction = ((GreaterThan(lexState, 1)) | (StrictLessThan(lexState, 0)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 492,
          "throwingLine": 494,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/FileSinkBase.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph, java.lang.String)",
          "exception": "throw new IOException(\"cannot call begin() twice without calling end() before.\");",
          "pathCojunction": "(output != null)",
          "symbolicPathConjunction": "(begin(fileName))",
          "backwardsPathConjunction": "(output != null)",
          "simplifiedPathConjunction": "null != output",
          "z3Inputs": "[output0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfileName0 = String('fileName0')\noutput0_isNull = Bool('output0_isNull')\n\nconstraints = [\n  Not(output0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutput = Symbol('output')\nnull = Symbol('null')\npath_conjunction = (Ne(output, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 90,
          "throwingLine": 91,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph, java.io.OutputStream)",
          "exception": "throw new IOException(\"cannot call begin() twice without calling end() before.\");",
          "pathCojunction": "(output != null)",
          "symbolicPathConjunction": "(begin(stream))",
          "backwardsPathConjunction": "(output != null)",
          "simplifiedPathConjunction": "null != output",
          "z3Inputs": "[output0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noutput0_isNull = Bool('output0_isNull')\n\nconstraints = [\n  Not(output0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutput = Symbol('output')\nnull = Symbol('null')\npath_conjunction = (Ne(output, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 96,
          "throwingLine": 97,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph, java.io.Writer)",
          "exception": "throw new IOException(\"cannot call begin() twice without calling end() before.\");",
          "pathCojunction": "(output != null)",
          "symbolicPathConjunction": "(begin(writer))",
          "backwardsPathConjunction": "(output != null)",
          "simplifiedPathConjunction": "null != output",
          "z3Inputs": "[output0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noutput0_isNull = Bool('output0_isNull')\n\nconstraints = [\n  Not(output0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutput = Symbol('output')\nnull = Symbol('null')\npath_conjunction = (Ne(output, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 102,
          "throwingLine": 103,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkBase.begin(java.lang.String)",
          "exception": "throw new IOException(\"cannot call begin() twice without calling end() before.\");",
          "pathCojunction": "(output != null)",
          "symbolicPathConjunction": "(output != null)",
          "backwardsPathConjunction": "(output != null)",
          "simplifiedPathConjunction": "null != output",
          "z3Inputs": "[output0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfileName0 = String('fileName0')\noutput0_isNull = Bool('output0_isNull')\n\nconstraints = [\n  Not(output0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutput = Symbol('output')\nnull = Symbol('null')\npath_conjunction = (Ne(output, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 150,
          "throwingLine": 152,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkBase.begin(java.io.OutputStream)",
          "exception": "throw new IOException(\"cannot call begin() twice without calling end() before.\");",
          "pathCojunction": "(output != null)",
          "symbolicPathConjunction": "(output != null)",
          "backwardsPathConjunction": "(output != null)",
          "simplifiedPathConjunction": "null != output",
          "z3Inputs": "[output0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noutput0_isNull = Bool('output0_isNull')\n\nconstraints = [\n  Not(output0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutput = Symbol('output')\nnull = Symbol('null')\npath_conjunction = (Ne(output, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 164,
          "throwingLine": 166,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSinkBase.begin(java.io.Writer)",
          "exception": "throw new IOException(\"cannot call begin() twice without calling end() before.\");",
          "pathCojunction": "(output != null)",
          "symbolicPathConjunction": "(output != null)",
          "backwardsPathConjunction": "(output != null)",
          "simplifiedPathConjunction": "null != output",
          "z3Inputs": "[output0_isNull = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noutput0_isNull = Bool('output0_isNull')\n\nconstraints = [\n  Not(output0_isNull)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\noutput = Symbol('output')\nnull = Symbol('null')\npath_conjunction = (Ne(output, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 178,
          "throwingLine": 180,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/graph/implementations/AbstractGraph.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AbstractGraph.read(java.lang.String)",
          "exception": "throw new IOException(\"not a regular file '\" + filename + \"'\")",
          "pathCojunction": "(!(new File(fileName).isFile()))",
          "symbolicPathConjunction": "(FileSourceFactory.sourceFor(filename))",
          "backwardsPathConjunction": "(!(new File(fileName).isFile()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfilename0 = String('filename0')\nfileName0 = String('fileName0')\n\nconstraints = [\n  Not(new File(fileName0).isFile())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfileName = Symbol('fileName')\nnew File(fileName)_isFile = Symbol('new File(fileName)_isFile')\npath_conjunction = (~(new File(fileName)_isFile))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 768,
          "throwingLine": 769,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AbstractGraph.read(java.lang.String)",
          "exception": "throw new IOException(\"not a readable file '\" + filename + \"'\")",
          "pathCojunction": "(!(!new File(fileName).isFile())) && (!(new File(fileName).canRead()))",
          "symbolicPathConjunction": "(FileSourceFactory.sourceFor(filename))",
          "backwardsPathConjunction": "(!(!new File(fileName).isFile())) && (!(new File(fileName).canRead()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfilename0 = String('filename0')\nfileName0 = String('fileName0')\n\nconstraints = [\n  And(Not(Not(new File(fileName0).isFile())), Not(new File(fileName0).canRead()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfileName = Symbol('fileName')\nnew File(fileName)_isFile = Symbol('new File(fileName)_isFile')\nnew File(fileName)_canRead = Symbol('new File(fileName)_canRead')\npath_conjunction = ((~((~(new File(fileName)_isFile)))) & (~(new File(fileName)_canRead)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": false,
          "maybe": true,
          "line": 768,
          "throwingLine": 769,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.graph.implementations.AbstractGraph.write(java.lang.String)",
          "exception": "throw new IOException(\"No sink writer for \" + filename);",
          "pathCojunction": "(!(output != null))",
          "symbolicPathConjunction": "(!(output != null))",
          "backwardsPathConjunction": "(!(FileSinkFactory.sinkFor(filename) != null))",
          "simplifiedPathConjunction": "FileSinkFactory.sinkFor(filename) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfilename0 = String('filename0')\noutput0_isNull = Bool('output0_isNull')\n\nconstraints = [\n  output0 == FileSinkFactory.sinkFor(filename0),\n  Not(Not(output0_isNull))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfilename = Symbol('filename')\nFileSinkFactory_sinkFor = Symbol('FileSinkFactory_sinkFor')\nnull = Symbol('null')\npath_conjunction = (~((Ne(FileSinkFactory_sinkFor, null))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": false,
          "maybe": true,
          "line": 783,
          "throwingLine": 788,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/FileSourceFactory.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSourceFactory.sourceFor(java.lang.String)",
          "exception": "throw new IOException(\"not a regular file '\" + fileName + \"'\");",
          "pathCojunction": "(!(file.isFile()))",
          "symbolicPathConjunction": "(!file.isFile())",
          "backwardsPathConjunction": "(!(new File(fileName).isFile()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfileName0 = String('fileName0')\n\nconstraints = [\n  file0 == new File(fileName0),\n  Not(file0.isFile())\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfileName = Symbol('fileName')\nnew File(fileName)_isFile = Symbol('new File(fileName)_isFile')\npath_conjunction = (~(new File(fileName)_isFile))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 79,
          "throwingLine": 83,
          "isStatic": true,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.file.FileSourceFactory.sourceFor(java.lang.String)",
          "exception": "throw new IOException(\"not a readable file '\" + fileName + \"'\");",
          "pathCojunction": "(!(!file.isFile())) && (!(file.canRead()))",
          "symbolicPathConjunction": "(!(!file.isFile())) && (!file.canRead())",
          "backwardsPathConjunction": "(!(!new File(fileName).isFile())) && (!(new File(fileName).canRead()))",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nfileName0 = String('fileName0')\n\nconstraints = [\n  file0 == new File(fileName0),\n  And(Not(Not(file0.isFile())), Not(file0.canRead()))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nfileName = Symbol('fileName')\nnew File(fileName)_isFile = Symbol('new File(fileName)_isFile')\nnew File(fileName)_canRead = Symbol('new File(fileName)_canRead')\npath_conjunction = ((~((~(new File(fileName)_isFile)))) & (~(new File(fileName)_canRead)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 79,
          "throwingLine": 86,
          "isStatic": true,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/util/set/FixedArrayList.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.util.set.FixedArrayList.get(int)",
          "exception": "throw new NoSuchElementException(\"no element at index \" + i);",
          "pathCojunction": "(e == null)",
          "symbolicPathConjunction": "(e == null)",
          "backwardsPathConjunction": "(elements.get(i) == null)",
          "simplifiedPathConjunction": "elements.get(i) == null",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  e0 == elements0.get(i0),\n  e0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\nelements = Symbol('elements')\nelements_get = Symbol('elements_get')\nnull = Symbol('null')\npath_conjunction = (Eq(elements_get, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 131,
          "throwingLine": 135,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.util.set.FixedArrayList.toArray(T[])",
          "exception": "throw new RuntimeException(\"not implemented yet\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 276,
          "throwingLine": 278,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.util.set.FixedArrayList.add(E)",
          "exception": "throw new java.lang.NullPointerException(\"this array cannot contain null value\");",
          "pathCojunction": "(element == null)",
          "symbolicPathConjunction": "(element == null)",
          "backwardsPathConjunction": "(element == null)",
          "simplifiedPathConjunction": "element == null",
          "z3Inputs": "[element0_isNull = True]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nelement0_isNull = Bool('element0_isNull')\n\nconstraints = [\n  element0_isNull\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelement = Symbol('element')\nnull = Symbol('null')\npath_conjunction = (Eq(element, null))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 294,
          "throwingLine": 296,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.util.set.FixedArrayList.remove(int)",
          "exception": "throw new ArrayIndexOutOfBoundsException(\"index \" + i + \" does not exist\");",
          "pathCojunction": "(i < 0 || i >= n)",
          "symbolicPathConjunction": "(i < 0 || i >= n)",
          "backwardsPathConjunction": "(i < 0 || i >= elements.size())",
          "simplifiedPathConjunction": "elements.size() <= i || i < 0",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\ni0 = Int('i0')\nn0 = Int('n0')\n\nconstraints = [\n  n0 == elements0.size(),\n  Or(i0 < 0, i0 >= n0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\ni = Symbol('i', integer=True)\nelements = Symbol('elements')\nelements_size = Symbol('elements_size')\npath_conjunction = ((StrictLessThan(i, 0)) | (GreaterThan(i, elements_size)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 336,
          "throwingLine": 340,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.util.set.FixedArrayList.removeAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException(\"not implemented yet\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 393,
          "throwingLine": 394,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.util.set.FixedArrayList.retainAll(java.util.Collection<?>)",
          "exception": "throw new UnsupportedOperationException(\"not implemented yet\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 399,
          "throwingLine": 400,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.util.set.FixedArrayList.FixedArrayIterator.next()",
          "exception": "throw new NoSuchElementException(\"no more elements in iterator\");",
          "pathCojunction": "(!(j < n))",
          "symbolicPathConjunction": "(!(j < n))",
          "backwardsPathConjunction": "(!(i + 1 < elements.size()))",
          "simplifiedPathConjunction": "elements.size() - i <= 1",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\ni0 = Int('i0')\nj0 = Int('j0')\n\nconstraints = [\n  n0 == elements0.size(),\n  j0 == i0 + 1,\n  Not(j0 < n0)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\ni = Symbol('i', integer=True)\nelements_size = Symbol('elements_size')\npath_conjunction = (~((StrictLessThan((i + 1), elements_size))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 439,
          "throwingLine": 453,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.util.set.FixedArrayList.FixedArrayIterator.next()",
          "exception": "throw new NoSuchElementException(\"no more elements in iterator\");",
          "pathCojunction": "(j < n) && (!(e != null))",
          "symbolicPathConjunction": "(j < n) && (!(e != null))",
          "backwardsPathConjunction": "(i + 1 < elements.size()) && (!(elements.get(i + 1) != null))",
          "simplifiedPathConjunction": "elements.get(i + 1) == null && elements.size() - i > 1",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nn0 = Int('n0')\ni0 = Int('i0')\nj0 = Int('j0')\ne0_isNull = Bool('e0_isNull')\n\nconstraints = [\n  n0 == elements0.size(),\n  j0 == i0 + 1,\n  e0 == elements0.get(j0),\n  And(j0 < n0, Not(Not(e0_isNull)))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nelements = Symbol('elements')\ni = Symbol('i', integer=True)\nelements_size = Symbol('elements_size')\nelements_get = Symbol('elements_get')\nnull = Symbol('null')\npath_conjunction = ((StrictLessThan((i + 1), elements_size)) & (~((Ne(elements_get, null)))))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": true,
          "line": 439,
          "throwingLine": 453,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/ui/spriteManager/Sprite.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.ui.spriteManager.Sprite.getAttributeKeyIterator()",
          "exception": "throw new RuntimeException(\"not implemented\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 400,
          "throwingLine": 401,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.spriteManager.Sprite.getAttributeKeySet()",
          "exception": "throw new RuntimeException(\"not implemented\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 408,
          "throwingLine": 409,
          "isStatic": false,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.ui.spriteManager.Sprite.getAttributeMap()",
          "exception": "throw new RuntimeException(\"not implemented\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 412,
          "throwingLine": 413,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/file/gml/GMLParser.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.file.gml.GMLParser.list()",
          "exception": "throw new Error(\"Missing return statement in function\");",
          "pathCojunction": "true",
          "backwardsPathConjunction": "true",
          "simplifiedPathConjunction": "true",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\n\nconstraints = [\n  values0 == new KeyValues(),\n  True\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "soundSymbolic": false,
          "soundBackwards": true,
          "maybe": false,
          "line": 214,
          "throwingLine": 233,
          "isStatic": false,
          "targetOnlyArguments": true
        }
      ]
    },
    {
      "path": "/home/yanghengqin/gs-core-1.3-src/org/graphstream/stream/netstream/packing/Base64.java",
      "methods": [
        {
          "qualifiedSignature": "org.graphstream.stream.netstream.packing.Base64.decode(byte[], int, int, int)",
          "exception": "throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);",
          "pathCojunction": "(!(source == null)) && (!(off < 0 || off + len > source.length)) && (!(len == 0)) && (len < 4)",
          "symbolicPathConjunction": "(!(source == null)) && (!(off < 0 || off + len > source.length)) && (!(len == 0)) && (len < 4)",
          "backwardsPathConjunction": "(!(source == null)) && (!(off < 0 || off + len > source.length)) && (!(len == 0)) && (len < 4)",
          "simplifiedPathConjunction": "off >= 0 && len <= -off + source.length && len < 4 && len != 0 && null != source",
          "z3Inputs": "[off0 = 0,\n source0_length = 0,\n len0 = -1,\n source0_isNull = False]\n[off0 = 1,\n source0_length = 1,\n source0_isNull = False,\n len0 = -2]\n[off0 = 1,\n source0_length = 1,\n source0_isNull = False,\n len0 = -3]\n[off0 = 1,\n source0_length = 1,\n source0_isNull = False,\n len0 = -4]\n[off0 = 2,\n source0_length = 2,\n source0_isNull = False,\n len0 = -4]\n[off0 = 1,\n source0_length = 3,\n source0_isNull = False,\n len0 = -5]\n[off0 = 1,\n source0_length = 4,\n source0_isNull = False,\n len0 = -5]\n[off0 = 1,\n source0_length = 5,\n source0_isNull = False,\n len0 = -5]\n[off0 = 1,\n source0_length = 6,\n source0_isNull = False,\n len0 = -5]\n[off0 = 1,\n source0_length = 6,\n source0_isNull = False,\n len0 = -6]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\noff0 = Int('off0')\nlen0 = Int('len0')\noptions0 = Int('options0')\nsource0_isNull = Bool('source0_isNull')\nsource0_length = Int('source0_length')\n\nconstraints = [\n  source0_length >= 0, # implicit\n  And(And(And(Not(source0_isNull), Not(Or(off0 < 0, off0 + len0 > source0_length))), Not(len0 == 0)), len0 < 4)\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nsource = Symbol('source')\noff = Symbol('off', integer=True)\nlen = Symbol('len', integer=True)\nsource_length = Symbol('source_length', integer=True)\nnull = Symbol('null')\npath_conjunction = ((((~((Eq(source, null)))) & (~(((StrictLessThan(off, 0)) | (StrictGreaterThan((off + len), source_length)))))) & (~((Eq(len, 0))))) & (StrictLessThan(len, 4)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 1179,
          "throwingLine": 1193,
          "isStatic": true,
          "targetOnlyArguments": true
        },
        {
          "qualifiedSignature": "org.graphstream.stream.netstream.packing.Base64.OutputStream.flushBase64()",
          "exception": "throw new java.io.IOException(\"Base64 input not properly padded.\");",
          "pathCojunction": "(position > 0) && (!(encode))",
          "symbolicPathConjunction": "(position > 0) && (!(encode))",
          "backwardsPathConjunction": "(position > 0) && (!(encode))",
          "simplifiedPathConjunction": "!encode && position > 0",
          "z3Inputs": "[position0 = 1, encode0 = False]\n[position0 = 2, encode0 = False]\n[position0 = 3, encode0 = False]\n[position0 = 4, encode0 = False]\n[position0 = 5, encode0 = False]\n[position0 = 6, encode0 = False]\n[position0 = 7, encode0 = False]\n[position0 = 8, encode0 = False]\n[position0 = 9, encode0 = False]\n[position0 = 10, encode0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nposition0 = Int('position0')\nencode0 = Bool('encode0')\n\nconstraints = [\n  And(position0 > 0, Not(encode0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nposition = Symbol('position', integer=True)\nencode = Symbol('encode')\npath_conjunction = ((StrictGreaterThan(position, 0)) & (~(encode)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2031,
          "throwingLine": 2038,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.netstream.packing.Base64.OutputStream.close()",
          "exception": "throw new java.io.IOException(\"Base64 input not properly padded.\");",
          "pathCojunction": "(position > 0) && (!(encode))",
          "symbolicPathConjunction": "(flushBase64())",
          "backwardsPathConjunction": "(position > 0) && (!(encode))",
          "simplifiedPathConjunction": "!encode && position > 0",
          "z3Inputs": "[position0 = 1, encode0 = False]\n[position0 = 2, encode0 = False]\n[position0 = 3, encode0 = False]\n[position0 = 4, encode0 = False]\n[position0 = 5, encode0 = False]\n[position0 = 6, encode0 = False]\n[position0 = 7, encode0 = False]\n[position0 = 8, encode0 = False]\n[position0 = 9, encode0 = False]\n[position0 = 10, encode0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nencode0 = Bool('encode0')\nposition0 = Int('position0')\n\nconstraints = [\n  And(position0 > 0, Not(encode0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nencode = Symbol('encode')\nposition = Symbol('position', integer=True)\npath_conjunction = ((StrictGreaterThan(position, 0)) & (~(encode)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2051,
          "throwingLine": 2053,
          "isStatic": false,
          "targetOnlyArguments": false
        },
        {
          "qualifiedSignature": "org.graphstream.stream.netstream.packing.Base64.OutputStream.suspendEncoding()",
          "exception": "throw new java.io.IOException(\"Base64 input not properly padded.\");",
          "pathCojunction": "(position > 0) && (!(encode))",
          "symbolicPathConjunction": "(flushBase64())",
          "backwardsPathConjunction": "(position > 0) && (!(encode))",
          "simplifiedPathConjunction": "!encode && position > 0",
          "z3Inputs": "[position0 = 1, encode0 = False]\n[position0 = 2, encode0 = False]\n[position0 = 3, encode0 = False]\n[position0 = 4, encode0 = False]\n[position0 = 5, encode0 = False]\n[position0 = 6, encode0 = False]\n[position0 = 7, encode0 = False]\n[position0 = 8, encode0 = False]\n[position0 = 9, encode0 = False]\n[position0 = 10, encode0 = False]\n",
          "z3Program": "from z3 import *\nfrom z3_all_models import *\n\nencode0 = Bool('encode0')\nposition0 = Int('position0')\n\nconstraints = [\n  And(position0 > 0, Not(encode0))\n]\n\nsolver = Solver()\nfor constraint in constraints:\n  solver.add(constraint)\n\nmodels = list(all_smt(solver))\nfor model in models: print(model)",
          "symPyProgram": "from sympy import Symbol\nfrom sympy import simplify\nfrom sympy.core.relational import Eq, Ne, StrictGreaterThan, StrictLessThan, LessThan, GreaterThan\nfrom sympy.printing import ccode\n\nencode = Symbol('encode')\nposition = Symbol('position', integer=True)\npath_conjunction = ((StrictGreaterThan(position, 0)) & (~(encode)))\nprint(ccode(simplify(path_conjunction)))",
          "soundSymbolic": true,
          "soundBackwards": true,
          "maybe": false,
          "line": 2073,
          "throwingLine": 2074,
          "isStatic": false,
          "targetOnlyArguments": false
        }
      ]
    }
  ]
}