{
	"classes":[
		{
			"className":"org.jgrapht.generate.GridGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.GridGraphGenerator: void <init>(int,int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qillegal number of columns (\\E[\\s\\S]*\\Q). there must be at least two.\\E",
							"method":"<org.jgrapht.generate.GridGraphGenerator: void <init>(int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":1,
							"conditions":"i0 >= 2, i1 >= 2",
							"preConditions":[
								"parameter0 larger or equal 2",
								"parameter1 smaller than 2"
							],
							"keyPreCondition":"parameter1 smaller than 2"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qillegal number of rows (\\E[\\s\\S]*\\Q). there must be at least two.\\E",
							"method":"<org.jgrapht.generate.GridGraphGenerator: void <init>(int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"conditions":"i0 >= 2",
							"preConditions":[
								"parameter0 smaller than 2"
							],
							"keyPreCondition":"parameter0 smaller than 2"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.RankingPathElement",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.RankingPathElement: void <init>(org.jgrapht.Graph,org.jgrapht.alg.RankingPathElement,java.lang.Object,double)>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.RankingPathElement: void <init>(org.jgrapht.Graph,org.jgrapht.alg.RankingPathElement,java.lang.Object,double)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.AbstractPathElement: void <init>(org.jgrapht.Graph,org.jgrapht.alg.AbstractPathElement,java.lang.Object)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.alg.AbstractPathElement: void <init>(org.jgrapht.Graph,org.jgrapht.alg.AbstractPathElement,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.AbstractPathElement: void <init>(org.jgrapht.Graph,org.jgrapht.alg.AbstractPathElement,java.lang.Object)>(r1, r2, r3) -> $r5 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, r2, $r4) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter2)) is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter2)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter2)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.generate.CompleteBipartiteGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.CompleteBipartiteGraphGenerator: void <init>(int,int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.CompleteBipartiteGraphGenerator: void <init>(int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 < 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.CompleteBipartiteGraphGenerator: void <init>(int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 < 0, i1 >= 0",
							"preConditions":[
								"parameter0 larger or equal 0",
								"parameter1 smaller than 0"
							],
							"keyPreCondition":"parameter1 smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.SimpleDirectedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.SimpleDirectedGraph: void <init>(org.jgrapht.EdgeFactory)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.SimpleDirectedGraph: void <init>(org.jgrapht.EdgeFactory)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 0, 0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 0, 0) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.HopcroftKarpBipartiteMatching",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void <init>(org.jgrapht.UndirectedGraph,java.util.Set,java.util.Set)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void <init>(org.jgrapht.UndirectedGraph,java.util.Set,java.util.Set)>",
							"modifier":"public",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean $assertionsDisabled> is 0",
								"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>() is 0"
							],
							"keyPreCondition":"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>() is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QThere are edges within partition 2, i.e. not a bipartite graph\\E",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>",
							"modifier":"private",
							"throwUnit":"throw $r10",
							"callChain":"throw $r10",
							"throwUnitOrder":2,
							"conditions":"$z0 == 0, $z2 == 0, $z4 == 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: org.jgrapht.UndirectedGraph graph> instanceof org.jgrapht.graph.Multigraph is 0",
								"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean interSectionNotEmpty(java.util.Set,java.util.Set)>(@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set partition1>, new java.util.HashSet) is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean interSectionNotEmpty(java.util.Set,java.util.Set)>(@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set partition2>, new java.util.HashSet) is not 0"
							],
							"keyPreCondition":"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean interSectionNotEmpty(java.util.Set,java.util.Set)>(@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set partition2>, new java.util.HashSet) is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QThere are edges within partition 1, i.e. not a bipartite graph\\E",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>",
							"modifier":"private",
							"throwUnit":"throw $r14",
							"callChain":"throw $r14",
							"throwUnitOrder":1,
							"conditions":"$z0 == 0, $z2 == 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: org.jgrapht.UndirectedGraph graph> instanceof org.jgrapht.graph.Multigraph is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean interSectionNotEmpty(java.util.Set,java.util.Set)>(@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set partition1>, new java.util.HashSet) is not 0"
							],
							"keyPreCondition":"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean interSectionNotEmpty(java.util.Set,java.util.Set)>(@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set partition1>, new java.util.HashSet) is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QMulti graphs are not allowed as input, only simple graphs!\\E",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>",
							"modifier":"private",
							"throwUnit":"throw $r18",
							"callChain":"throw $r18",
							"throwUnitOrder":0,
							"conditions":"$z0 == 0",
							"preConditions":[
								"@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: org.jgrapht.UndirectedGraph graph> instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: org.jgrapht.UndirectedGraph graph> instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>",
							"modifier":"private",
							"invokeUnit":"$r13 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r12, $r11)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r13 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r12, $r11) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: org.jgrapht.UndirectedGraph graph> instanceof org.jgrapht.graph.Multigraph is 0",
								"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean interSectionNotEmpty(java.util.Set,java.util.Set)>(@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set partition1>, new java.util.HashSet) is 0",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set partition2>.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean checkInputData()>",
							"modifier":"private",
							"invokeUnit":"$r17 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r16, $r15)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r17 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r16, $r15) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: org.jgrapht.UndirectedGraph graph> instanceof org.jgrapht.graph.Multigraph is 0",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set partition1>.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void greedyMatch()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void greedyMatch()>",
							"modifier":"private",
							"invokeUnit":"$r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, $r4)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, $r4) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set partition1>.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void maxMatching()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void maxMatching()>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void greedyMatch()>()",
							"invokedMethod":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void greedyMatch()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void greedyMatch()>() -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, $r4) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set partition1>.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void maxMatching()>",
							"modifier":"private",
							"invokeUnit":"$r1 = specialinvoke r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>()",
							"invokedMethod":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r1 = specialinvoke r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>() -> $r22 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r21, $r20) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke new java.util.HashSet.<java.util.Set: int size()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean interSectionNotEmpty(java.util.Set,java.util.Set)>(new java.util.HashSet, @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set unmatchedVertices2>) is 0",
								"interfaceinvoke interfaceinvoke new java.util.HashSet.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void maxMatching()>",
							"modifier":"private",
							"invokeUnit":"$r1 = specialinvoke r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>()",
							"invokedMethod":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r1 = specialinvoke r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>() -> $r33 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r32, $r31) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke new java.util.HashSet.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void maxMatching()>",
							"modifier":"private",
							"invokeUnit":"$r3 = specialinvoke r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>()",
							"invokedMethod":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r3 = specialinvoke r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>() -> $r22 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r21, $r20) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke new java.util.HashSet.<java.util.Set: int size()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean interSectionNotEmpty(java.util.Set,java.util.Set)>(new java.util.HashSet, @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set unmatchedVertices2>) is 0",
								"interfaceinvoke interfaceinvoke new java.util.HashSet.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>().<java.util.List: boolean isEmpty()>() is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: void maxMatching()>",
							"modifier":"private",
							"invokeUnit":"$r3 = specialinvoke r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>()",
							"invokedMethod":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r3 = specialinvoke r0.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>() -> $r33 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r32, $r31) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke new java.util.HashSet.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>().<java.util.List: boolean isEmpty()>() is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>",
							"modifier":"private",
							"invokeUnit":"$r22 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r21, $r20)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r22 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r21, $r20) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke new java.util.HashSet.<java.util.Set: int size()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: boolean interSectionNotEmpty(java.util.Set,java.util.Set)>(new java.util.HashSet, @this: org.jgrapht.alg.HopcroftKarpBipartiteMatching.<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.Set unmatchedVertices2>) is 0",
								"interfaceinvoke interfaceinvoke new java.util.HashSet.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.HopcroftKarpBipartiteMatching: java.util.List getAugmentingPaths()>",
							"modifier":"private",
							"invokeUnit":"$r33 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r32, $r31)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r33 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r32, $r31) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke new java.util.HashSet.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.UnmodifiableGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableGraph: void <init>(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.UnmodifiableGraph: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.UnmodifiableGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.UnmodifiableGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableGraph: boolean addVertex(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.UnmodifiableGraph: boolean addVertex(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableGraph: boolean removeAllEdges(java.util.Collection)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.UnmodifiableGraph: boolean removeAllEdges(java.util.Collection)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableGraph: java.util.Set removeAllEdges(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.UnmodifiableGraph: java.util.Set removeAllEdges(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableGraph: boolean removeAllVertices(java.util.Collection)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.UnmodifiableGraph: boolean removeAllVertices(java.util.Collection)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableGraph: boolean removeEdge(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.UnmodifiableGraph: boolean removeEdge(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableGraph: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.UnmodifiableGraph: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableGraph: boolean removeVertex(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.UnmodifiableGraph: boolean removeVertex(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph may not be constructed without either of vertex-set partitions specified\\E",
							"method":"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":1,
							"conditions":"$r1 != null, $r2 == null",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r21",
							"callChain":"throw $r21",
							"throwUnitOrder":3,
							"conditions":"$r1 != null, $r2 == null, $r4 != null, $z0 != 0, i5_1 >= $i0, $z2 != 0, $i1 == $i2",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is not null",
								"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: boolean $assertionsDisabled> is not 0",
								"0 smaller than interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first>.<java.util.List: int size()>()",
								"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: boolean $assertionsDisabled> is 0",
								"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights>[i5_1].length"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights>[i5_1].length"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r21",
							"callChain":"throw $r21",
							"throwUnitOrder":3,
							"conditions":"$r1 != null, $r2 == null, $r4 != null, $z0 != 0, $i3 == $i4, i5_1 >= $i0, $z2 != 0, $i1 == $i2",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is not null",
								"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: boolean $assertionsDisabled> is 0",
								"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second>.<java.util.List: int size()>() is @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights>.length",
								"0 smaller than interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first>.<java.util.List: int size()>()",
								"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights>[i5_1].length"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights>[i5_1].length"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r26",
							"callChain":"throw $r26",
							"throwUnitOrder":2,
							"conditions":"$r1 != null, $r2 == null, $r4 != null, $z0 != 0, $i3 == $i4",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is not null",
								"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: boolean $assertionsDisabled> is 0",
								"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights>.length"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights>.length"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph may not be constructed without either of vertex-set partitions specified\\E",
							"method":"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":1,
							"conditions":"$r1 != null, $r2 == null, $r4 != null",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List first> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: java.util.List second> is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph may not be constructed without weight-matrix specified\\E",
							"method":"<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r27",
							"callChain":"throw $r27",
							"throwUnitOrder":0,
							"conditions":"$r1 != null",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator: double[][] weights> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.BellmanFordShortestPath",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.BellmanFordShortestPath: double getCost(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph must contain the end vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordShortestPath: double getCost(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>(r1) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 != 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QThe end vertex is the same as the start vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordShortestPath: double getCost(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is not 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph must contain the start vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordShortestPath: double getCost(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void lazyCalculate()>()",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordShortestPath: void lazyCalculate()>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void lazyCalculate()>() -> specialinvoke $r4.<org.jgrapht.alg.BellmanFordIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>($r6, $r5, $d0) -> specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>(r2, r3) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z0 == 0, $z1 != 0",
							"preConditions":[
								"@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.alg.BellmanFordIterator iter> is null",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is 0",
								"interfaceinvoke parameter_0_in_method_<init>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter_1_in_method_<init>) is 0"
							],
							"keyPreCondition":"interfaceinvoke parameter_0_in_method_<init>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter_1_in_method_<init>) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordShortestPath: java.util.List getPathEdgeList(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph must contain the end vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordShortestPath: java.util.List getPathEdgeList(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>(r1) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 != 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QThe end vertex is the same as the start vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordShortestPath: java.util.List getPathEdgeList(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is not 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph must contain the start vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordShortestPath: java.util.List getPathEdgeList(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void lazyCalculate()>()",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordShortestPath: void lazyCalculate()>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BellmanFordShortestPath: void lazyCalculate()>() -> specialinvoke $r4.<org.jgrapht.alg.BellmanFordIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>($r6, $r5, $d0) -> specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>(r2, r3) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z0 == 0, $z1 != 0",
							"preConditions":[
								"@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.alg.BellmanFordIterator iter> is null",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is 0",
								"interfaceinvoke parameter_0_in_method_<init>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter_1_in_method_<init>) is 0"
							],
							"keyPreCondition":"interfaceinvoke parameter_0_in_method_<init>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter_1_in_method_<init>) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph must contain the end vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":1,
							"conditions":"$z0 == 0, $z1 != 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QThe end vertex is the same as the start vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordShortestPath: void assertGetPath(java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"$z0 == 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is not 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: java.lang.Object startVertex>) is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordShortestPath: void lazyCalculate()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph must contain the start vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordShortestPath: void lazyCalculate()>",
							"modifier":"private",
							"invokeUnit":"specialinvoke $r4.<org.jgrapht.alg.BellmanFordIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>($r6, $r5, $d0)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke $r4.<org.jgrapht.alg.BellmanFordIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>($r6, $r5, $d0) -> specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>(r2, r3) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"@this: org.jgrapht.alg.BellmanFordShortestPath.<org.jgrapht.alg.BellmanFordShortestPath: org.jgrapht.alg.BellmanFordIterator iter> is null",
								"interfaceinvoke parameter_0_in_method_<init>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter_1_in_method_<init>) is 0"
							],
							"keyPreCondition":"interfaceinvoke parameter_0_in_method_<init>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter_1_in_method_<init>) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.ListenableUndirectedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(java.lang.Class)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qbase graph cannot be listenable\\E",
							"method":"<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(java.lang.Class)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>($r1)",
							"invokedMethod":"<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>($r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is not null",
								"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
							],
							"keyPreCondition":"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(java.lang.Class)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>($r1)",
							"invokedMethod":"<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>($r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qbase graph cannot be listenable\\E",
							"method":"<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, r1 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter0 instanceof org.jgrapht.ListenableGraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.ListenableGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.FloydWarshallShortestPaths",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.FloydWarshallShortestPaths: int getShortestPathsCount()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: int getShortestPathsCount()>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>() -> specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.Map paths> is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: int getShortestPathsCount()>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>() -> $r10 = virtualinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object)>($r5, $r9) -> specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.Map paths> is null",
								"0 smaller than interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List vertices>.<java.util.List: int size()>()",
								"0 is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>",
							"modifier":"private",
							"invokeUnit":"$r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.FloydWarshallShortestPaths: double shortestDistance(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: double shortestDistance(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.FloydWarshallShortestPaths: double getDiameter()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: double getDiameter()>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List getShortestPathAsVertexList(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List getShortestPathAsVertexList(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List getShortestPaths(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List getShortestPaths(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>() -> specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.Map paths> is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List getShortestPaths(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>() -> $r10 = virtualinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object)>($r5, $r9) -> specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.Map paths> is null",
								"0 smaller than interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List vertices>.<java.util.List: int size()>()",
								"0 is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List getShortestPaths()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List getShortestPaths()>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>() -> specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.Map paths> is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List getShortestPaths()>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>() -> $r10 = virtualinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object)>($r5, $r9) -> specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.Map paths> is null",
								"0 smaller than interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List vertices>.<java.util.List: int size()>()",
								"0 is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>()",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.Map paths> is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculatePaths()>",
							"modifier":"private",
							"invokeUnit":"$r10 = virtualinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object)>($r5, $r9)",
							"invokedMethod":"<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r10 = virtualinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object)>($r5, $r9) -> specialinvoke r0.<org.jgrapht.alg.FloydWarshallShortestPaths: void lazyCalculateMatrix()>() -> $r25 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>(r65, $r21) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: double[][] d> is null",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"@this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.Map paths> is null",
								"0 smaller than interfaceinvoke @this: org.jgrapht.alg.FloydWarshallShortestPaths.<org.jgrapht.alg.FloydWarshallShortestPaths: java.util.List vertices>.<java.util.List: int size()>()",
								"0 is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.KruskalMinimumSpanningTree",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.KruskalMinimumSpanningTree: void <init>(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.KruskalMinimumSpanningTree: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"$r12 = virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r10)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r12 = virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r10) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke virtualinvoke new java.util.ArrayList.<java.util.ArrayList: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.KruskalMinimumSpanningTree: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"$r13 = virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r11)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r13 = virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r11) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke virtualinvoke new java.util.ArrayList.<java.util.ArrayList: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.KruskalMinimumSpanningTree: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>($r10, $r11)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>($r10, $r11) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z0 != 0",
							"preConditions":[
								"interfaceinvoke virtualinvoke new java.util.ArrayList.<java.util.ArrayList: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke virtualinvoke new org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(new org.jgrapht.alg.util.UnionFind0).<java.lang.Object: boolean equals(java.lang.Object)>(virtualinvoke new org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(new org.jgrapht.alg.util.UnionFind1)) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.KruskalMinimumSpanningTree: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>($r10, $r11)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>($r10, $r11) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 != 0, $z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_union) is not 0",
								"interfaceinvoke virtualinvoke new java.util.ArrayList.<java.util.ArrayList: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke virtualinvoke new org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(new org.jgrapht.alg.util.UnionFind0).<java.lang.Object: boolean equals(java.lang.Object)>(virtualinvoke new org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(new org.jgrapht.alg.util.UnionFind1)) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.KruskalMinimumSpanningTree: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>($r10, $r11)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>($r10, $r11) -> $r6 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_union) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke virtualinvoke new java.util.ArrayList.<java.util.ArrayList: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke virtualinvoke new org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(new org.jgrapht.alg.util.UnionFind0).<java.lang.Object: boolean equals(java.lang.Object)>(virtualinvoke new org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(new org.jgrapht.alg.util.UnionFind1)) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.KruskalMinimumSpanningTree: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>($r10, $r11)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"virtualinvoke $r1.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>($r10, $r11) -> $r7 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r4) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_union) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke virtualinvoke new java.util.ArrayList.<java.util.ArrayList: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke virtualinvoke new org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(new org.jgrapht.alg.util.UnionFind0).<java.lang.Object: boolean equals(java.lang.Object)>(virtualinvoke new org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(new org.jgrapht.alg.util.UnionFind1)) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.util.PrefetchIterator",
			"methods":[
				{
					"methodName":"<org.jgrapht.util.PrefetchIterator: void remove()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.util.PrefetchIterator: void remove()>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.ClassBasedVertexFactory",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.ClassBasedVertexFactory: java.lang.Object createVertex()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.RuntimeException",
							"message":"\\QVertex factory failed\\E",
							"method":"<org.jgrapht.graph.ClassBasedVertexFactory: java.lang.Object createVertex()>",
							"modifier":"public",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":0,
							"preConditions":[
								"This is a rethrow exception after an exception with type java.lang.Exception is caught."
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.StrongConnectivityInspector",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.StrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qnull not allowed for graph!\\E",
							"method":"<org.jgrapht.alg.StrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.StrongConnectivityInspector: java.util.List stronglyConnectedSets()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.alg.StrongConnectivityInspector: java.util.List stronglyConnectedSets()>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r8.<org.jgrapht.graph.EdgeReversedGraph: void <init>(org.jgrapht.DirectedGraph)>($r9)",
							"invokedMethod":"<org.jgrapht.graph.EdgeReversedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke $r8.<org.jgrapht.graph.EdgeReversedGraph: void <init>(org.jgrapht.DirectedGraph)>($r9) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.StrongConnectivityInspector.<org.jgrapht.alg.StrongConnectivityInspector: java.util.List stronglyConnectedSets> is null",
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.StrongConnectivityInspector: java.util.List stronglyConnectedSubgraphs()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.alg.StrongConnectivityInspector: java.util.List stronglyConnectedSubgraphs()>",
							"modifier":"public",
							"invokeUnit":"$r3 = virtualinvoke r0.<org.jgrapht.alg.StrongConnectivityInspector: java.util.List stronglyConnectedSets()>()",
							"invokedMethod":"<org.jgrapht.alg.StrongConnectivityInspector: java.util.List stronglyConnectedSets()>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"$r3 = virtualinvoke r0.<org.jgrapht.alg.StrongConnectivityInspector: java.util.List stronglyConnectedSets()>() -> specialinvoke $r8.<org.jgrapht.graph.EdgeReversedGraph: void <init>(org.jgrapht.DirectedGraph)>($r9) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.StrongConnectivityInspector.<org.jgrapht.alg.StrongConnectivityInspector: java.util.List stronglyConnectedSets> is null",
								"@this: org.jgrapht.alg.StrongConnectivityInspector.<org.jgrapht.alg.StrongConnectivityInspector: java.util.List stronglyConnectedSubgraphs> is null",
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedHashSetImpl",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedHashSetImpl: void clearVisited(int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedHashSetImpl: void clearVisited(int)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.generate.EmptyGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.EmptyGraphGenerator: void <init>(int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.EmptyGraphGenerator: void <init>(int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 >= 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.GraphTests",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.GraphTests: boolean isConnected(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.GraphTests: boolean isConnected(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"$r9 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, $r8)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r9 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, $r8) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgeSet()>().<java.util.Set: int size()>() larger or equal interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() - 1",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() larger or equal 2",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgeSet()>().<java.util.Set: int size()>() smaller or equal interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() - 1 * interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() - 2 / 2",
								"virtualinvoke new java.util.LinkedList.<java.util.LinkedList: boolean isEmpty()>() is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphTests: boolean isTree(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.GraphTests: boolean isTree(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"$z0 = staticinvoke <org.jgrapht.experimental.GraphTests: boolean isConnected(org.jgrapht.Graph)>(r0)",
							"invokedMethod":"<org.jgrapht.experimental.GraphTests: boolean isConnected(org.jgrapht.Graph)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$z0 = staticinvoke <org.jgrapht.experimental.GraphTests: boolean isConnected(org.jgrapht.Graph)>(r0) -> $r9 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, $r8) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgeSet()>().<java.util.Set: int size()>() larger or equal interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() - 1",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() larger or equal 2",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgeSet()>().<java.util.Set: int size()>() smaller or equal interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() - 1 * interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() - 2 / 2",
								"virtualinvoke new java.util.LinkedList.<java.util.LinkedList: boolean isEmpty()>() is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphTests: boolean isBipartite(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.GraphTests: boolean isBipartite(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"$r11 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, $r10)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r11 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, $r10) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"4 * interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgeSet()>().<java.util.Set: int size()>() smaller or equal interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() * interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>()",
								"staticinvoke <org.jgrapht.experimental.GraphTests: boolean isEmpty(org.jgrapht.Graph)>(parameter0) is 0",
								"interfaceinvoke new java.util.HashSet.<java.util.Set: boolean isEmpty()>() is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.Subgraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such edge in base graph\\E",
							"method":"<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r9",
							"callChain":"throw $r9",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $z0 == 0, r1 != null",
							"preConditions":[
								"parameter1 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object,java.lang.Object)>(parameter0, parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object,java.lang.Object)>(parameter0, parameter1) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r2) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter1) is 0",
								"parameter1 is not null"
							],
							"keyPreCondition":"parameter1 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r2) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter1) is 0",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r8",
							"callChain":"throw $r8",
							"throwUnitOrder":3,
							"conditions":"r0 != null, $z0 != 0, $z1 != 0, $z2 != 0, $r7 == r4, $z0 == 0, r1 != null",
							"preConditions":[
								"parameter2 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter2) is not 0",
								"<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is not 0",
								"<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is 0",
								"parameter1 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter2) is not parameter1"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter2) is not parameter1"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r8",
							"callChain":"throw $r8",
							"throwUnitOrder":3,
							"conditions":"r0 != null, $z0 != 0, $z1 != 0, $r10 == r3, $z2 != 0, $r7 == r4, $z0 == 0, r1 != null",
							"preConditions":[
								"parameter2 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter2) is not 0",
								"<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter2) is parameter0",
								"parameter1 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter2) is not parameter1"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter2) is not parameter1"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r11",
							"callChain":"throw $r11",
							"throwUnitOrder":2,
							"conditions":"r0 != null, $z0 != 0, $z1 != 0, $r10 == r3, $z0 == 0, r1 != null",
							"preConditions":[
								"parameter2 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter2) is not 0",
								"<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is 0",
								"parameter1 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter2) is not parameter0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter2) is not parameter0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such edge in base graph\\E",
							"method":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r12",
							"callChain":"throw $r12",
							"throwUnitOrder":1,
							"conditions":"r0 != null, $z0 != 0",
							"preConditions":[
								"parameter2 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter2) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter2) is 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r13",
							"callChain":"throw $r13",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter2 is null"
							],
							"keyPreCondition":"parameter2 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r3)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r3) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter2 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter2) is not 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r3)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r3) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter2 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter2) is not 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r4)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r4) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter1) is 0",
								"parameter2 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter2) is not 0",
								"parameter1 is not null"
							],
							"keyPreCondition":"parameter1 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r4)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r4) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter1) is 0",
								"parameter2 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter2) is not 0",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.Subgraph: boolean addVertex(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in base graph\\E",
							"method":"<org.jgrapht.graph.Subgraph: boolean addVertex(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":1,
							"conditions":"r0 != null, $z0 != 0",
							"preConditions":[
								"parameter0 is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: boolean addVertex(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.Subgraph: java.util.Set edgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: java.util.Set edgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph: java.util.Set edgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.ListenableUndirectedWeightedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(java.lang.Class)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qbase graph cannot be listenable\\E",
							"method":"<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(java.lang.Class)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>($r1)",
							"invokedMethod":"<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>($r1) -> specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>($r2) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is not null",
								"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
							],
							"keyPreCondition":"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(java.lang.Class)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>($r1)",
							"invokedMethod":"<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>($r1) -> specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>($r2) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qbase graph cannot be listenable\\E",
							"method":"<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>($r2)",
							"invokedMethod":"<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>($r2) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is not null",
								"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
							],
							"keyPreCondition":"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.ListenableUndirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>($r2)",
							"invokedMethod":"<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>($r2) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.UnmodifiableDirectedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.UnmodifiableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.UnmodifiableGraph: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.UnmodifiableGraph: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.UnmodifiableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.cycle.JohnsonSimpleCycles",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.cycle.JohnsonSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.JohnsonSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.JohnsonSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.JohnsonSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.JohnsonSimpleCycles: java.util.List findSimpleCycles()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph.\\E",
							"method":"<org.jgrapht.alg.cycle.JohnsonSimpleCycles: java.util.List findSimpleCycles()>",
							"modifier":"public",
							"throwUnit":"throw $r20",
							"callChain":"throw $r20",
							"throwUnitOrder":0,
							"conditions":"$r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.cycle.JohnsonSimpleCycles.<org.jgrapht.alg.cycle.JohnsonSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.alg.cycle.JohnsonSimpleCycles.<org.jgrapht.alg.cycle.JohnsonSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.generate.ScaleFreeGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.ScaleFreeGraphGenerator: void <init>(int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid size: \\E[\\s\\S]*\\Q (must be non-negative)\\E",
							"method":"<org.jgrapht.generate.ScaleFreeGraphGenerator: void <init>(int)>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":0,
							"conditions":"i0 >= 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.generate.ScaleFreeGraphGenerator: void <init>(int,long)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid size: \\E[\\s\\S]*\\Q (must be non-negative)\\E",
							"method":"<org.jgrapht.generate.ScaleFreeGraphGenerator: void <init>(int,long)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"i0 >= 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl: void clearVisited(int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl: void clearVisited(int)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.MinSourceSinkCut",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid capacity (must be non-negative)\\E",
							"method":"<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r14",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2) -> specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> throw $r14",
							"throwUnitOrder":-1,
							"conditions":"r3 != null, $i2 > 0, $z0 == 0, $i3 >= 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter_1_in_method_<init> cmpg 0.0 larger than 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter_1_in_method_<init> smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter_1_in_method_<init> smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid epsilon (must be positive)\\E",
							"method":"<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r13",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2) -> specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> throw $r13",
							"throwUnitOrder":-1,
							"conditions":"r3 != null, $i2 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter_1_in_method_<init> cmpg 0.0 smaller or equal 0"
							],
							"keyPreCondition":"parameter_1_in_method_<init> cmpg 0.0 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qnetwork is null\\E",
							"method":"<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r12",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2) -> specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> throw $r12",
							"throwUnitOrder":-1,
							"conditions":"r3 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph,double)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid capacity (must be non-negative)\\E",
							"method":"<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph,double)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r14",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2) -> specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> throw $r14",
							"throwUnitOrder":-1,
							"conditions":"r3 != null, $i2 > 0, $z0 == 0, $i3 >= 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter_1_in_method_<init> cmpg 0.0 larger than 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter_1_in_method_<init> smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter_1_in_method_<init> smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid epsilon (must be positive)\\E",
							"method":"<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph,double)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r13",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2) -> specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> throw $r13",
							"throwUnitOrder":-1,
							"conditions":"r3 != null, $i2 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter_1_in_method_<init> cmpg 0.0 smaller or equal 0"
							],
							"keyPreCondition":"parameter_1_in_method_<init> cmpg 0.0 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qnetwork is null\\E",
							"method":"<org.jgrapht.alg.MinSourceSinkCut: void <init>(org.jgrapht.DirectedGraph,double)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r12",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>(r2) -> specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> throw $r12",
							"throwUnitOrder":-1,
							"conditions":"r3 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.MinSourceSinkCut: void computeMinCut(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.MinSourceSinkCut: void computeMinCut(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r23 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r22, $r21, $r8)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r23 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r22, $r21, $r8) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0",
								"interfaceinvoke @this: org.jgrapht.alg.MinSourceSinkCut.<org.jgrapht.alg.MinSourceSinkCut: java.util.Set minCut>.<java.util.Set: boolean contains(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object remove()>()) is 0",
								"interfaceinvoke interfaceinvoke new java.util.HashSet.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.MinSourceSinkCut: void computeMinCut(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r30 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r29, $r28, $r8)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r30 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r29, $r28, $r8) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0",
								"interfaceinvoke @this: org.jgrapht.alg.MinSourceSinkCut.<org.jgrapht.alg.MinSourceSinkCut: java.util.Set minCut>.<java.util.Set: boolean contains(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object remove()>()) is 0",
								"interfaceinvoke interfaceinvoke new java.util.HashSet.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.MinSourceSinkCut: java.util.Set getCutEdges()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.MinSourceSinkCut: java.util.Set getCutEdges()>",
							"modifier":"public",
							"invokeUnit":"$r13 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r11, $r10, $r6)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r13 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r11, $r10, $r6) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"@this: org.jgrapht.alg.MinSourceSinkCut.<org.jgrapht.alg.MinSourceSinkCut: java.util.Set minCut> is not null",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.MinSourceSinkCut.<org.jgrapht.alg.MinSourceSinkCut: java.util.Set minCut>.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.MinSourceSinkCut.<org.jgrapht.alg.MinSourceSinkCut: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.MinSourceSinkCut.<org.jgrapht.alg.MinSourceSinkCut: java.util.Set minCut>.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.EdmondsKarpMaximumFlow",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid capacity (must be non-negative)\\E",
							"method":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9)",
							"invokedMethod":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"throwUnit":"throw $r14",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r2, d0) -> throw $r14",
							"throwUnitOrder":-1,
							"conditions":"r3 != null, $i2 > 0, $z0 == 0, $i3 >= 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter_1_in_method_<init> cmpg 0.0 larger than 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter_1_in_method_<init> smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter_1_in_method_<init> smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid epsilon (must be positive)\\E",
							"method":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9)",
							"invokedMethod":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"throwUnit":"throw $r13",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r2, d0) -> throw $r13",
							"throwUnitOrder":-1,
							"conditions":"r3 != null, $i2 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter_1_in_method_<init> cmpg 0.0 smaller or equal 0"
							],
							"keyPreCondition":"parameter_1_in_method_<init> cmpg 0.0 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qnetwork is null\\E",
							"method":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9)",
							"invokedMethod":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"throwUnit":"throw $r12",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r2, d0) -> throw $r12",
							"throwUnitOrder":-1,
							"conditions":"r3 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid capacity (must be non-negative)\\E",
							"method":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r2, d0)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"throwUnit":"throw $r14",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r2, d0) -> throw $r14",
							"throwUnitOrder":-1,
							"conditions":"r3 != null, $i2 > 0, $z0 == 0, $i3 >= 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 cmpg 0.0 larger than 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter1 smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter1 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid epsilon (must be positive)\\E",
							"method":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r2, d0)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"throwUnit":"throw $r13",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r2, d0) -> throw $r13",
							"throwUnitOrder":-1,
							"conditions":"r3 != null, $i2 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 cmpg 0.0 smaller or equal 0"
							],
							"keyPreCondition":"parameter1 cmpg 0.0 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qnetwork is null\\E",
							"method":"<org.jgrapht.alg.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r2, d0)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"throwUnit":"throw $r12",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r2, d0) -> throw $r12",
							"throwUnitOrder":-1,
							"conditions":"r3 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.dag.DirectedAcyclicGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addDagEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qloops not allowed\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addDagEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"callChain":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z3 == 0, $z0 == 0, r1 != null",
							"preConditions":[
								"@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingMultipleEdges> is not 0",
								"@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is 0",
								"parameter1 is not null",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qloops not allowed\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addDagEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"callChain":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z4 == 0, $z1 != 0, $z3 == 0, $z0 == 0, r1 != null",
							"preConditions":[
								"@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingMultipleEdges> is 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean containsEdge(java.lang.Object,java.lang.Object)>(parameter0, parameter1) is 0",
								"@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is 0",
								"parameter1 is not null",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addDagEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2) -> virtualinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addDagEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2) -> virtualinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addDagEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2) -> virtualinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r2) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter1) is 0",
								"parameter1 is not null"
							],
							"keyPreCondition":"parameter1 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addDagEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r3 = specialinvoke r0.<org.jgrapht.graph.SimpleDirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r1, r2) -> virtualinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r2) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter1) is 0",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"preConditions":[
								"This is a rethrow exception after an exception with type org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException is caught."
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter2 is null"
							],
							"keyPreCondition":"parameter2 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qvertices must be in the graph already!\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r1.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>(r2, r3)",
							"invokedMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r1.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>(r2, r3) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$r3 == null",
							"preConditions":[
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qvertices must be in the graph already!\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r1.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>(r2, r3)",
							"invokedMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r1.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>(r2, r3) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$r3 == null, $r6 != null",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Q(start > finish): invariant broken\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r1.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>(r2, r3)",
							"invokedMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: void <init>(int,int)>",
							"callChain":"specialinvoke r1.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>(r2, r3) -> specialinvoke $r10.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: void <init>(int,int)>($i2, $i3) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"i0 <= i1",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1).<java.lang.Integer: int intValue()>() smaller than virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0).<java.lang.Integer: int intValue()>()",
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"parameter_0_in_method_<init> larger than parameter_1_in_method_<init>"
							],
							"keyPreCondition":"parameter_0_in_method_<init> larger than parameter_1_in_method_<init>"
						},
						{
							"exceptionName":"org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r1.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>(r2, r3)",
							"invokedMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r14",
							"throwUnitInMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>",
							"callChain":"specialinvoke r1.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>(r2, r3) -> specialinvoke r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>(r1, $r8, $r12, $r10) -> throw $r14",
							"throwUnitOrder":-1,
							"conditions":"i0 <= i1",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1).<java.lang.Integer: int intValue()>() smaller than virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0).<java.lang.Integer: int intValue()>()",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null"
						},
						{
							"exceptionName":"org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r1.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>(r2, r3)",
							"invokedMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r14",
							"throwUnitInMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>",
							"callChain":"specialinvoke r1.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>(r2, r3) -> specialinvoke r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>(r1, $r8, $r12, $r10) -> throw $r14",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $i1 != $i2, $z3 == 0, i0 <= i1",
							"preConditions":[
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object getEdgeTarget(java.lang.Object)>(interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>())).<java.lang.Integer: int intValue()>() is parameter_3_in_method_dfsF.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: int finish>",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1).<java.lang.Integer: int intValue()>() smaller than virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0).<java.lang.Integer: int intValue()>()",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qloops not allowed\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"callChain":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, $z0 == 0, $z1 != 0, $z2 != 0, $z3 == 0, $z0 == 0, r1 != null, $r3 == null, $r6 != null, i0 <= i1, $z0 == 0, $i1 != $i2, $z3 == 0",
							"preConditions":[
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingMultipleEdges> is not 0",
								"@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is 0",
								"parameter1 is not null",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qloops not allowed\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"callChain":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, $z0 == 0, $z1 != 0, $z4 == 0, $z2 != 0, $z3 == 0, $z0 == 0, r1 != null, $r3 == null, $r6 != null, i0 <= i1, $z0 == 0, $i1 != $i2, $z3 == 0",
							"preConditions":[
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingMultipleEdges> is 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean containsEdge(java.lang.Object,java.lang.Object)>(parameter0, parameter1) is 0",
								"@this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean allowingLoops> is 0",
								"parameter1 is not null",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"callChain":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, $r3 == null, $r6 != null, i0 <= i1, $z0 == 0, $i1 != $i2, $z3 == 0",
							"preConditions":[
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"parameter2 is null"
							],
							"keyPreCondition":"parameter2 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0) -> virtualinvoke r1.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r2) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null, $r3 == null, $r6 != null, i0 <= i1, $z0 == 0, $i1 != $i2, $z3 == 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0) -> virtualinvoke r1.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r2) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null, $r3 == null, $r6 != null, i0 <= i1, $z0 == 0, $i1 != $i2, $z3 == 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0) -> virtualinvoke r1.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r3) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null, $r3 == null, $r6 != null, i0 <= i1, $z0 == 0, $i1 != $i2, $z3 == 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter1) is 0",
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"parameter1 is not null"
							],
							"keyPreCondition":"parameter1 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addDagEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$z1 = specialinvoke r1.<org.jgrapht.graph.SimpleDirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r0) -> virtualinvoke r1.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r3) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null, $r3 == null, $r6 != null, i0 <= i1, $z0 == 0, $i1 != $i2, $z3 == 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter1) is 0",
								"parameter2 is not null",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph.<org.jgrapht.graph.AbstractBaseGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean containsEdge(java.lang.Object)>(parameter2) is 0",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qvertices must be in the graph already!\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"conditions":"$r3 == null",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qvertices must be in the graph already!\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"conditions":"$r3 == null, $r6 != null",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Q(start > finish): invariant broken\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"specialinvoke $r10.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: void <init>(int,int)>($i2, $i3)",
							"invokedMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: void <init>(int,int)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: void <init>(int,int)>",
							"callChain":"specialinvoke $r10.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: void <init>(int,int)>($i2, $i3) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"i0 <= i1",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1).<java.lang.Integer: int intValue()>() smaller than virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0).<java.lang.Integer: int intValue()>()",
								"parameter_0_in_method_<init> larger than parameter_1_in_method_<init>"
							],
							"keyPreCondition":"parameter_0_in_method_<init> larger than parameter_1_in_method_<init>"
						},
						{
							"exceptionName":"org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>(r1, $r8, $r12, $r10)",
							"invokedMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>",
							"throwUnit":"throw $r14",
							"throwUnitInMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>",
							"callChain":"specialinvoke r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>(r1, $r8, $r12, $r10) -> throw $r14",
							"throwUnitOrder":-1,
							"conditions":"i0 <= i1",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1).<java.lang.Integer: int intValue()>() smaller than virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0).<java.lang.Integer: int intValue()>()",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null"
						},
						{
							"exceptionName":"org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void updateDag(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>(r1, $r8, $r12, $r10)",
							"invokedMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>",
							"throwUnit":"throw $r14",
							"throwUnitInMethod":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>",
							"callChain":"specialinvoke r0.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>(r1, $r8, $r12, $r10) -> throw $r14",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $i1 != $i2, $z3 == 0, i0 <= i1",
							"preConditions":[
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object getEdgeTarget(java.lang.Object)>(interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>())).<java.lang.Integer: int intValue()>() is parameter_3_in_method_dfsF.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: int finish>",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0) is not null",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter1).<java.lang.Integer: int intValue()>() smaller than virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(parameter0).<java.lang.Integer: int intValue()>()",
								"parameter_0_in_method_<init> smaller or equal parameter_1_in_method_<init>",
								"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke interfaceinvoke parameter_1_in_method_dfsF.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"preConditions":[
								"This is a rethrow exception after an exception with type org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException is caught."
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>",
							"modifier":"private",
							"throwUnit":"throw $r14",
							"callChain":"throw $r14",
							"throwUnitOrder":0,
							"preConditions":[
								"This is a rethrow exception after an exception with type java.lang.UnsupportedOperationException is caught."
							]
						},
						{
							"exceptionName":"org.jgrapht.experimental.dag.DirectedAcyclicGraph$CycleFoundException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph: void dfsF(java.lang.Object,java.util.Set,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region)>",
							"modifier":"private",
							"throwUnit":"throw $r14",
							"callChain":"throw $r14",
							"throwUnitOrder":0,
							"conditions":"$z0 == 0, $i1 != $i2, $z3 == 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping topoOrderMap>.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Integer getTopologicalIndex(java.lang.Object)>(virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.lang.Object getEdgeTarget(java.lang.Object)>(interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.experimental.dag.DirectedAcyclicGraph.<org.jgrapht.experimental.dag.DirectedAcyclicGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>())).<java.lang.Integer: int intValue()>() is parameter3.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: int finish>",
								"interfaceinvoke interfaceinvoke parameter1.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke interfaceinvoke parameter1.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.DirectedSubgraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.DirectedSubgraph: int inDegreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.DirectedSubgraph: int inDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.DirectedSubgraph: int inDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.DirectedSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.DirectedSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.DirectedSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.DirectedSubgraph: int outDegreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.DirectedSubgraph: int outDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.DirectedSubgraph: int outDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.DirectedSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.DirectedSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.DirectedSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.DirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.TarjanLowestCommonAncestor",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0) -> $r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> $r26 = virtualinvoke $r24.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r25) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0) is not null",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.Set black>.<java.util.Set: boolean contains(java.lang.Object)>(virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getA()>()) is not 0",
								"virtualinvoke virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getB()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0) -> $r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> $r32 = virtualinvoke $r30.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r31) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0) is not null",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.Set black>.<java.util.Set: boolean contains(java.lang.Object)>(virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getB()>()) is not 0",
								"virtualinvoke virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getA()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"callChain":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0) -> $r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"callChain":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0) -> $r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0) -> $r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> $r6 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0) -> $r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> $r7 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r4) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.lang.Object calculate(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r6 = virtualinvoke r4.<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>(r5, $r0) -> $r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> $r44 = virtualinvoke $r42.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"modifier":"public",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> $r26 = virtualinvoke $r24.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r25) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0) is not null",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.Set black>.<java.util.Set: boolean contains(java.lang.Object)>(virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getA()>()) is not 0",
								"virtualinvoke virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getB()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"modifier":"public",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> $r32 = virtualinvoke $r30.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r31) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0) is not null",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.Set black>.<java.util.Set: boolean contains(java.lang.Object)>(virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getB()>()) is not 0",
								"virtualinvoke virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getA()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"modifier":"public",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"modifier":"public",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"modifier":"public",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> $r6 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"modifier":"public",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> $r7 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r4) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor: java.util.List calculate(java.lang.Object,java.util.List)>",
							"modifier":"public",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>($r0, r3) -> $r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> $r44 = virtualinvoke $r42.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.NeighborIndex$Neighbors",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QAttempting to remove a neighbor that wasn't present\\E",
							"method":"<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r6",
							"callChain":"throw $r6",
							"throwUnitOrder":0,
							"conditions":"r4 != null",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex$Neighbors.<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex$Neighbors.<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.CliqueMinimalSeparatorDecomposition",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: void computeMinimalTriangulation()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: void computeMinimalTriangulation()>",
							"modifier":"private",
							"invokeUnit":"specialinvoke $r67.<org.jgrapht.graph.SimpleGraph: void <init>(org.jgrapht.EdgeFactory)>($r3)",
							"invokedMethod":"<org.jgrapht.graph.SimpleGraph: void <init>(org.jgrapht.EdgeFactory)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"callChain":"specialinvoke $r67.<org.jgrapht.graph.SimpleGraph: void <init>(org.jgrapht.EdgeFactory)>($r3) -> specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 0, 0) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: void computeMinimalTriangulation()>",
							"modifier":"private",
							"invokeUnit":"$r18 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r8, $r16)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r18 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r8, $r16) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"1 smaller or equal interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set vertexSet()>().<java.util.Set: int size()>()",
								"parameter_0_in_method_<init> is not null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: void computeAtoms()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.RuntimeException",
							"message":"\\Qseparator did not separate the graph\\E",
							"method":"<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: void computeAtoms()>",
							"modifier":"private",
							"throwUnit":"throw $r26",
							"callChain":"throw $r26",
							"throwUnitOrder":0,
							"conditions":"$z6 == 0, $z0 == 0, $z1 == 0, $z7 == 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"interfaceinvoke virtualinvoke @this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.LinkedList meo>.<java.util.LinkedList: java.util.Iterator descendingIterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.List generators>.<java.util.List: boolean contains(java.lang.Object)>(interfaceinvoke virtualinvoke @this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.LinkedList meo>.<java.util.LinkedList: java.util.Iterator descendingIterator()>().<java.util.Iterator: java.lang.Object next()>()) is not 0",
								"staticinvoke <org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: boolean isClique(org.jgrapht.UndirectedGraph,java.util.Set)>(@this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: org.jgrapht.UndirectedGraph graph>, new java.util.HashSet) is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"virtualinvoke new org.jgrapht.alg.ConnectivityInspector.<org.jgrapht.alg.ConnectivityInspector: boolean isGraphConnected()>() is not 0"
							],
							"keyPreCondition":"virtualinvoke new org.jgrapht.alg.ConnectivityInspector.<org.jgrapht.alg.ConnectivityInspector: boolean isGraphConnected()>() is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: void computeAtoms()>",
							"modifier":"private",
							"invokeUnit":"$r17 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r6, $r14)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r17 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r6, $r14) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke virtualinvoke @this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.LinkedList meo>.<java.util.LinkedList: java.util.Iterator descendingIterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.List generators>.<java.util.List: boolean contains(java.lang.Object)>(interfaceinvoke virtualinvoke @this: org.jgrapht.alg.CliqueMinimalSeparatorDecomposition.<org.jgrapht.alg.CliqueMinimalSeparatorDecomposition: java.util.LinkedList meo>.<java.util.LinkedList: java.util.Iterator descendingIterator()>().<java.util.Iterator: java.lang.Object next()>()) is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: java.util.List findSimpleCycles()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph.\\E",
							"method":"<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: java.util.List findSimpleCycles()>",
							"modifier":"public",
							"throwUnit":"throw $r19",
							"callChain":"throw $r19",
							"throwUnitOrder":0,
							"conditions":"$r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles.<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles.<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qnull not allowed for graph!\\E",
							"method":"<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: java.util.List findSimpleCycles()>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r20.<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>($r3)",
							"invokedMethod":"<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
							"callChain":"specialinvoke $r20.<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>($r3) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles.<org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles: org.jgrapht.DirectedGraph graph> is not null",
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.TarjanLowestCommonAncestor$Worker",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r26 = virtualinvoke $r24.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r25)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r26 = virtualinvoke $r24.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r25) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0) is not null",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.Set black>.<java.util.Set: boolean contains(java.lang.Object)>(virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getA()>()) is not 0",
								"virtualinvoke virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getB()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r32 = virtualinvoke $r30.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r31)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r32 = virtualinvoke $r30.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r31) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0) is not null",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.Set black>.<java.util.Set: boolean contains(java.lang.Object)>(virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getB()>()) is not 0",
								"virtualinvoke virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getA()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> $r6 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> $r7 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r4) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r44 = virtualinvoke $r42.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r44 = virtualinvoke $r42.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"modifier":"default",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> $r26 = virtualinvoke $r24.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r25) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.Set black>.<java.util.Set: boolean contains(java.lang.Object)>(virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getA()>()) is not 0",
								"virtualinvoke virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getB()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"modifier":"default",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> $r32 = virtualinvoke $r30.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>($r31) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter1) is not null",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.Set black>.<java.util.Set: boolean contains(java.lang.Object)>(virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getB()>()) is not 0",
								"virtualinvoke virtualinvoke interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap lrrMap>.<org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap: java.lang.Object get(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse: java.lang.Object getA()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_0_in_method_find) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"modifier":"default",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"modifier":"default",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"modifier":"default",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> $r6 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"modifier":"default",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> virtualinvoke $r41.<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>(r1, $r40) -> $r7 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r4) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List access$100(org.jgrapht.alg.TarjanLowestCommonAncestor$Worker,java.lang.Object)>",
							"modifier":"default",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: java.util.List calculate(java.lang.Object)>(r1) -> $r44 = virtualinvoke $r42.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke staticinvoke <org.jgrapht.alg.TarjanLowestCommonAncestor: org.jgrapht.Graph access$300(org.jgrapht.alg.TarjanLowestCommonAncestor)>(@this: org.jgrapht.alg.TarjanLowestCommonAncestor$Worker.<org.jgrapht.alg.TarjanLowestCommonAncestor$Worker: org.jgrapht.alg.TarjanLowestCommonAncestor this$0>).<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter1).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter_1_in_method_union) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.Pseudograph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.Pseudograph: void <init>(org.jgrapht.EdgeFactory)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Pseudograph: void <init>(org.jgrapht.EdgeFactory)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 1, 1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 1, 1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.ClassBasedEdgeFactory",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.ClassBasedEdgeFactory: java.lang.Object createEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.RuntimeException",
							"message":"\\QEdge factory failed\\E",
							"method":"<org.jgrapht.graph.ClassBasedEdgeFactory: java.lang.Object createEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":0,
							"preConditions":[
								"This is a rethrow exception after an exception with type java.lang.Exception is caught."
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.AsUnweightedDirectedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.AsUnweightedDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.AsUnweightedDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AsUnweightedGraph: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AsUnweightedGraph: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AsUnweightedGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.DirectedMultigraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.DirectedMultigraph: void <init>(org.jgrapht.EdgeFactory)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.DirectedMultigraph: void <init>(org.jgrapht.EdgeFactory)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 1, 0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 1, 0) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.ListenableDirectedWeightedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(java.lang.Class)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qbase graph cannot be listenable\\E",
							"method":"<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(java.lang.Class)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>($r1)",
							"invokedMethod":"<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>($r1) -> specialinvoke r0.<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>($r2) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is not null",
								"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
							],
							"keyPreCondition":"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(java.lang.Class)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>($r1)",
							"invokedMethod":"<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>($r1) -> specialinvoke r0.<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>($r2) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qbase graph cannot be listenable\\E",
							"method":"<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>($r2)",
							"invokedMethod":"<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>($r2) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is not null",
								"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
							],
							"keyPreCondition":"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.ListenableDirectedWeightedGraph: void <init>(org.jgrapht.WeightedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>($r2)",
							"invokedMethod":"<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>($r2) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.DefaultEdge",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.DefaultEdge: java.lang.Object clone()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.InternalError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.DefaultEdge: java.lang.Object clone()>",
							"modifier":"public",
							"invokeUnit":"$r1 = specialinvoke r0.<org.jgrapht.graph.IntrusiveEdge: java.lang.Object clone()>()",
							"invokedMethod":"<org.jgrapht.graph.IntrusiveEdge: java.lang.Object clone()>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.graph.IntrusiveEdge: java.lang.Object clone()>",
							"callChain":"$r1 = specialinvoke r0.<org.jgrapht.graph.IntrusiveEdge: java.lang.Object clone()>() -> throw $r3",
							"throwUnitOrder":-1,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.DijkstraShortestPath",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.DijkstraShortestPath: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,double)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qgraph must contain the end vertex\\E",
							"method":"<org.jgrapht.alg.DijkstraShortestPath: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,double)>",
							"modifier":"public",
							"throwUnit":"throw $r6",
							"callChain":"throw $r6",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter2) is 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter2) is 0"
						},
						{
							"exceptionName":"java.util.NoSuchElementException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.DijkstraShortestPath: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,double)>",
							"modifier":"public",
							"invokeUnit":"$r5 = virtualinvoke $r3.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object next()>()",
							"invokedMethod":"<org.jgrapht.traverse.CrossComponentIterator: java.lang.Object next()>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.traverse.CrossComponentIterator: java.lang.Object next()>",
							"callChain":"$r5 = virtualinvoke $r3.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object next()>() -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0",
							"preConditions":[
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter2) is not 0",
								"virtualinvoke new org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>() is 0"
							],
							"keyPreCondition":"virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>() is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DijkstraShortestPath: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,double)>",
							"modifier":"public",
							"invokeUnit":"$r5 = virtualinvoke $r3.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object next()>()",
							"invokedMethod":"<org.jgrapht.traverse.CrossComponentIterator: java.lang.Object next()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r5 = virtualinvoke $r3.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object next()>() -> specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void addUnseenChildrenOf(java.lang.Object)>($r5) -> $r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, $r5, r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.traverse.CrossComponentIterator$Specifics specifics>.<org.jgrapht.traverse.CrossComponentIterator$Specifics: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_addUnseenChildrenOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter2) is not 0",
								"virtualinvoke new org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DijkstraShortestPath: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,double)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.DijkstraShortestPath: void createEdgeList(org.jgrapht.Graph,org.jgrapht.traverse.ClosestFirstIterator,java.lang.Object,java.lang.Object)>(r1, $r3, r4, r2)",
							"invokedMethod":"<org.jgrapht.alg.DijkstraShortestPath: void createEdgeList(org.jgrapht.Graph,org.jgrapht.traverse.ClosestFirstIterator,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.DijkstraShortestPath: void createEdgeList(org.jgrapht.Graph,org.jgrapht.traverse.ClosestFirstIterator,java.lang.Object,java.lang.Object)>(r1, $r3, r4, r2) -> r8_2 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r4, $r3, r8_1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0, $z0 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"virtualinvoke parameter_1_in_method_createEdgeList.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object getSpanningTreeEdge(java.lang.Object)>(parameter2) is not null",
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter2) is not 0",
								"virtualinvoke new org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: boolean hasNext()>() is not 0",
								"virtualinvoke virtualinvoke new org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object next()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter2) is not 0",
								"virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.DijkstraShortestPath: void createEdgeList(org.jgrapht.Graph,org.jgrapht.traverse.ClosestFirstIterator,java.lang.Object,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DijkstraShortestPath: void createEdgeList(org.jgrapht.Graph,org.jgrapht.traverse.ClosestFirstIterator,java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"r8_2 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r4, $r3, r8_1)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"r8_2 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r4, $r3, r8_1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"virtualinvoke parameter1.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object getSpanningTreeEdge(java.lang.Object)>(parameter3) is not null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.GraphSquare",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: void <init>(org.jgrapht.Graph,boolean)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.GraphSquare: void <init>(org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>($r2, 0, z0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>($r2, 0, z0) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.experimental.GraphSquare: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.experimental.GraphSquare: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: boolean addVertex(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.experimental.GraphSquare: boolean addVertex(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: boolean removeAllEdges(java.util.Collection)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.experimental.GraphSquare: boolean removeAllEdges(java.util.Collection)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: java.util.Set removeAllEdges(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.experimental.GraphSquare: java.util.Set removeAllEdges(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: boolean removeAllVertices(java.util.Collection)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.experimental.GraphSquare: boolean removeAllVertices(java.util.Collection)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: boolean removeEdge(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.experimental.GraphSquare: boolean removeEdge(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.experimental.GraphSquare: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: boolean removeVertex(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.experimental.GraphSquare: boolean removeVertex(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: void addEdgesStartingAt(org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.GraphSquare: void addEdgesStartingAt(org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>",
							"modifier":"private",
							"invokeUnit":"$r3 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, r2)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r3 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, r2) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter2).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object,java.lang.Object)>(parameter1, parameter2) is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: void addSquareEdges(org.jgrapht.Graph,boolean)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.GraphSquare: void addSquareEdges(org.jgrapht.Graph,boolean)>",
							"modifier":"private",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, $r3)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, $r3) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_1_in_method_neighborListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.GraphSquare: void addSquareEdges(org.jgrapht.Graph,boolean)>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r5.<org.jgrapht.experimental.GraphSquare: void addEdgesStartingAt(org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>(r0, $r3, $r6, z1)",
							"invokedMethod":"<org.jgrapht.experimental.GraphSquare: void addEdgesStartingAt(org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r5.<org.jgrapht.experimental.GraphSquare: void addEdgesStartingAt(org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>(r0, $r3, $r6, z1) -> $r3 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, r2) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_2_in_method_addEdgesStartingAt).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object,java.lang.Object)>(parameter_1_in_method_addEdgesStartingAt, parameter_2_in_method_addEdgesStartingAt) is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"0 smaller than interfaceinvoke staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(parameter0, interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.List: int size()>()",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.GraphSquare: void access$000(org.jgrapht.experimental.GraphSquare,org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.GraphSquare: void access$000(org.jgrapht.experimental.GraphSquare,org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.experimental.GraphSquare: void addEdgesStartingAt(org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>(r1, r2, r3, z0)",
							"invokedMethod":"<org.jgrapht.experimental.GraphSquare: void addEdgesStartingAt(org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.experimental.GraphSquare: void addEdgesStartingAt(org.jgrapht.Graph,java.lang.Object,java.lang.Object,boolean)>(r1, r2, r3, z0) -> $r3 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>(r0, r2) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter1.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter1.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter3).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter3.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object,java.lang.Object)>(parameter3, parameter3) is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter1.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter1.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.AsUndirectedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.AsUndirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.AsUndirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AsUndirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph does not support edge addition\\E",
							"method":"<org.jgrapht.graph.AsUndirectedGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AsUndirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph does not support edge addition\\E",
							"method":"<org.jgrapht.graph.AsUndirectedGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AsUndirectedGraph: int inDegreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph only supports undirected operations\\E",
							"method":"<org.jgrapht.graph.AsUndirectedGraph: int inDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AsUndirectedGraph: java.util.Set incomingEdgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph only supports undirected operations\\E",
							"method":"<org.jgrapht.graph.AsUndirectedGraph: java.util.Set incomingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AsUndirectedGraph: int outDegreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph only supports undirected operations\\E",
							"method":"<org.jgrapht.graph.AsUndirectedGraph: int outDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AsUndirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph only supports undirected operations\\E",
							"method":"<org.jgrapht.graph.AsUndirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.GraphUnion",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg1 is equal to g2\\E",
							"method":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"public",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":2,
							"conditions":"r1 != null, r2 != null, r1 != r2",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter0 is parameter1"
							],
							"keyPreCondition":"parameter0 is parameter1"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg2 is null\\E",
							"method":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"public",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":1,
							"conditions":"r1 != null, r2 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg1 is null\\E",
							"method":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"public",
							"throwUnit":"throw $r6",
							"callChain":"throw $r6",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg1 is equal to g2\\E",
							"method":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null, r1 != r2",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter0 is parameter1"
							],
							"keyPreCondition":"parameter0 is parameter1"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg2 is null\\E",
							"method":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg1 is null\\E",
							"method":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.GraphUnion: org.jgrapht.EdgeFactory getEdgeFactory()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qunion of graphs is read-only\\E",
							"method":"<org.jgrapht.graph.GraphUnion: org.jgrapht.EdgeFactory getEdgeFactory()>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.GraphUnion: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qunion of graphs is read-only\\E",
							"method":"<org.jgrapht.graph.GraphUnion: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.GraphUnion: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qunion of graphs is read-only\\E",
							"method":"<org.jgrapht.graph.GraphUnion: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.GraphUnion: boolean addVertex(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qunion of graphs is read-only\\E",
							"method":"<org.jgrapht.graph.GraphUnion: boolean addVertex(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.GraphUnion: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qunion of graphs is read-only\\E",
							"method":"<org.jgrapht.graph.GraphUnion: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.GraphUnion: boolean removeEdge(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qunion of graphs is read-only\\E",
							"method":"<org.jgrapht.graph.GraphUnion: boolean removeEdge(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.GraphUnion: boolean removeVertex(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qunion of graphs is read-only\\E",
							"method":"<org.jgrapht.graph.GraphUnion: boolean removeVertex(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.GraphUnion: double getEdgeWeight(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such edge in the union\\E",
							"method":"<org.jgrapht.graph.GraphUnion: double getEdgeWeight(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"$z0 == 0, $z1 == 0, $z2 == 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter0) is 0",
								"interfaceinvoke @this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g2>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g2>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such edge in the union\\E",
							"method":"<org.jgrapht.graph.GraphUnion: double getEdgeWeight(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"$z0 == 0, $z3 == 0, $z1 == 0, $z2 == 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g2>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter0) is 0",
								"interfaceinvoke @this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g1>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.GraphUnion.<org.jgrapht.graph.GraphUnion: org.jgrapht.Graph g2>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter0) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.BellmanFordIterator",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.BellmanFordIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>",
					"modifier":"protected",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph must contain the start vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>",
							"modifier":"protected",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>(r2, r3)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>(r2, r3) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordIterator: java.util.List next()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.util.NoSuchElementException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BellmanFordIterator: java.util.List next()>",
							"modifier":"public",
							"throwUnit":"throw $r12",
							"callChain":"throw $r12",
							"throwUnitOrder":0,
							"conditions":"$z1 == 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: boolean hasNext()>() is 0"
							],
							"keyPreCondition":"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: boolean hasNext()>() is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.BellmanFordIterator: java.util.List next()>",
							"modifier":"public",
							"invokeUnit":"$r9 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r8, $r7, $r5)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r9 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r8, $r7, $r5) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1 larger or equal 0",
								"interfaceinvoke virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1)).<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNegativeedge-weights are not allowed in an unidrected graph!\\E",
							"method":"<org.jgrapht.alg.BellmanFordIterator: java.util.List next()>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void relaxVertex(java.lang.Object,java.lang.Object)>($r9, $r7)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordIterator: void relaxVertex(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void relaxVertex(java.lang.Object,java.lang.Object)>($r9, $r7) -> virtualinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $i1 >= 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"@this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is not 0",
								"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1 larger or equal 0",
								"interfaceinvoke virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1)).<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.alg.BellmanFordPathElement getPathElement(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>, interfaceinvoke virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1)).<java.util.Iterator: java.lang.Object next()>(), interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1))) is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter_1_in_method_relaxVertex) cmpg 0.0 smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter_1_in_method_relaxVertex) cmpg 0.0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNegativeedge-weights are not allowed in an unidrected graph!\\E",
							"method":"<org.jgrapht.alg.BellmanFordIterator: java.util.List next()>",
							"modifier":"public",
							"invokeUnit":"$z3 = specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>($r9, $r7)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>",
							"callChain":"$z3 = specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>($r9, $r7) -> virtualinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $i1 >= 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"@this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is not 0",
								"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1 larger or equal 0",
								"interfaceinvoke virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1)).<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.alg.BellmanFordPathElement getPathElement(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>, interfaceinvoke virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1)).<java.util.Iterator: java.lang.Object next()>(), interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1))) is not null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter_1_in_method_relaxVertexAgain) cmpg 0.0 smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter_1_in_method_relaxVertexAgain) cmpg 0.0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.BellmanFordIterator: java.util.List next()>",
							"modifier":"public",
							"invokeUnit":"$z3 = specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>($r9, $r7)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$z3 = specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>($r9, $r7) -> $d0 = virtualinvoke r0.<org.jgrapht.alg.BellmanFordIterator: double calculatePathCost(java.lang.Object,java.lang.Object)>(r2, r1) -> $r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0, $z0 == 0, $i1 >= 0",
							"preConditions":[
								"virtualinvoke parameter_0_in_method_relaxVertexAgain.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_relaxVertexAgain)) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter_1_in_method_relaxVertexAgain) cmpg 0.0 larger or equal 0",
								"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1 larger or equal 0",
								"interfaceinvoke virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1)).<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.alg.BellmanFordPathElement getPathElement(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>, interfaceinvoke virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1)).<java.util.Iterator: java.lang.Object next()>(), interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1))) is not null",
								"virtualinvoke parameter_0_in_method_relaxVertexAgain.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_relaxVertexAgain)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_0_in_method_relaxVertexAgain.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_relaxVertexAgain)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.BellmanFordIterator: java.util.List next()>",
							"modifier":"public",
							"invokeUnit":"$z3 = specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>($r9, $r7)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$z3 = specialinvoke r0.<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>($r9, $r7) -> $r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0, $z0 == 0, $i1 >= 0",
							"preConditions":[
								"virtualinvoke parameter_0_in_method_relaxVertexAgain.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_relaxVertexAgain)) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter_1_in_method_relaxVertexAgain) cmpg 0.0 larger or equal 0",
								"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1 larger or equal 0",
								"interfaceinvoke virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1)).<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.alg.BellmanFordPathElement getPathElement(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>, interfaceinvoke virtualinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1)).<java.util.Iterator: java.lang.Object next()>(), interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: java.lang.Object get(int)>(interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: java.util.List prevImprovedVertices>.<java.util.List: int size()>() - 1))) is not null",
								"virtualinvoke parameter_0_in_method_relaxVertexAgain.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_relaxVertexAgain)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_0_in_method_relaxVertexAgain.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_relaxVertexAgain)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordIterator: void remove()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BellmanFordIterator: void remove()>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>",
					"modifier":"protected",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNegativeedge-weights are not allowed in an unidrected graph!\\E",
							"method":"<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>",
							"modifier":"protected",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"$z0 == 0, $i1 >= 0",
							"preConditions":[
								"@this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter0) cmpg 0.0 smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter0) cmpg 0.0 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordIterator: double calculatePathCost(java.lang.Object,java.lang.Object)>",
					"modifier":"protected",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.BellmanFordIterator: double calculatePathCost(java.lang.Object,java.lang.Object)>",
							"modifier":"protected",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter1)) is 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph must contain the start vertex!\\E",
							"method":"<org.jgrapht.alg.BellmanFordIterator: void assertBellmanFordIterator(org.jgrapht.Graph,java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.alg.BellmanFordPathElement createSeenData(java.lang.Object,java.lang.Object,double)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.alg.BellmanFordPathElement createSeenData(java.lang.Object,java.lang.Object,double)>",
							"modifier":"private",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter1)) is 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordIterator: void relaxVertex(java.lang.Object,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNegativeedge-weights are not allowed in an unidrected graph!\\E",
							"method":"<org.jgrapht.alg.BellmanFordIterator: void relaxVertex(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $i1 >= 0",
							"preConditions":[
								"@this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter1) cmpg 0.0 smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter1) cmpg 0.0 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNegativeedge-weights are not allowed in an unidrected graph!\\E",
							"method":"<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.alg.BellmanFordIterator: void assertValidEdge(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $i1 >= 0",
							"preConditions":[
								"@this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph> instanceof org.jgrapht.UndirectedGraph is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter1) cmpg 0.0 smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter1) cmpg 0.0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$d0 = virtualinvoke r0.<org.jgrapht.alg.BellmanFordIterator: double calculatePathCost(java.lang.Object,java.lang.Object)>(r2, r1)",
							"invokedMethod":"<org.jgrapht.alg.BellmanFordIterator: double calculatePathCost(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$d0 = virtualinvoke r0.<org.jgrapht.alg.BellmanFordIterator: double calculatePathCost(java.lang.Object,java.lang.Object)>(r2, r1) -> $r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0, $z0 == 0, $i1 >= 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter1)) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter1) cmpg 0.0 larger or equal 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.BellmanFordIterator: boolean relaxVertexAgain(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0, $z0 == 0, $i1 >= 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter1)) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.BellmanFordIterator.<org.jgrapht.alg.BellmanFordIterator: org.jgrapht.Graph graph>.<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter1) cmpg 0.0 larger or equal 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set getAllEdges(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set getAllEdges(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter1) is not 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set getAllEdges(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter1) is not 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: void addEdgeToTouchingVertices(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: void addEdgeToTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"parameter_0_in_method_getEdgeContainer is not null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: void addEdgeToTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"parameter_0_in_method_getEdgeContainer is null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: void addEdgeToTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"virtualinvoke virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter0).<java.lang.Object: boolean equals(java.lang.Object)>(virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter0)) is 0",
								"parameter_0_in_method_getEdgeContainer is not null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: void addEdgeToTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"virtualinvoke virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter0).<java.lang.Object: boolean equals(java.lang.Object)>(virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter0)) is 0",
								"parameter_0_in_method_getEdgeContainer is null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set edgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set edgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set edgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: int inDegreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qno such operation in an undirected graph\\E",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: int inDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set incomingEdgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qno such operation in an undirected graph\\E",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set incomingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: int outDegreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qno such operation in an undirected graph\\E",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: int outDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set outgoingEdgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qno such operation in an undirected graph\\E",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: java.util.Set outgoingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.MixedGraphUnion",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg1 is equal to g2\\E",
							"method":"<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null, r1 != r2",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter0 is parameter1"
							],
							"keyPreCondition":"parameter0 is parameter1"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg2 is null\\E",
							"method":"<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg1 is null\\E",
							"method":"<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg1 is equal to g2\\E",
							"method":"<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null, r1 != r2",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter0 is parameter1"
							],
							"keyPreCondition":"parameter0 is parameter1"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg2 is null\\E",
							"method":"<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg1 is null\\E",
							"method":"<org.jgrapht.graph.MixedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.cycle.TiernanSimpleCycles",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.cycle.TiernanSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.TiernanSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.TiernanSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.TiernanSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.TiernanSimpleCycles: java.util.List findSimpleCycles()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph.\\E",
							"method":"<org.jgrapht.alg.cycle.TiernanSimpleCycles: java.util.List findSimpleCycles()>",
							"modifier":"public",
							"throwUnit":"throw $r47",
							"callChain":"throw $r47",
							"throwUnitOrder":0,
							"conditions":"$r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.cycle.TiernanSimpleCycles.<org.jgrapht.alg.cycle.TiernanSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.alg.cycle.TiernanSimpleCycles.<org.jgrapht.alg.cycle.TiernanSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.traverse.ClosestFirstIterator",
			"methods":[
				{
					"methodName":"<org.jgrapht.traverse.ClosestFirstIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qgraph must contain the start vertex\\E",
							"method":"<org.jgrapht.traverse.ClosestFirstIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>(r1, r2) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"r4 != null, r8 != null, $z0 == 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qgraph must not be null\\E",
							"method":"<org.jgrapht.traverse.ClosestFirstIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r15",
							"throwUnitInMethod":"<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>(r1, r2) -> throw $r15",
							"throwUnitOrder":-1,
							"conditions":"r4 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qradius may not be specified for cross-component traversal\\E",
							"method":"<org.jgrapht.traverse.ClosestFirstIterator: void <init>(org.jgrapht.Graph,java.lang.Object,double)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>($z0)",
							"invokedMethod":"<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>($z0) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"z0 == 0, $b0 == 0, r4 != null, r8 != null, $z0 == 0",
							"preConditions":[
								"parameter_0_in_method_checkRadiusTraversal is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is not 0",
								"parameter0 is not null",
								"@this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: double radius> cmpl #Infinity is not 0"
							],
							"keyPreCondition":"@this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: double radius> cmpl #Infinity is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.traverse.ClosestFirstIterator: void setCrossComponentTraversal(boolean)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qradius may not be specified for cross-component traversal\\E",
							"method":"<org.jgrapht.traverse.ClosestFirstIterator: void setCrossComponentTraversal(boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>(z1)",
							"invokedMethod":"<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>(z1) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"z0 == 0, $b0 == 0",
							"preConditions":[
								"parameter0 is not 0",
								"@this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: boolean initialized> is not 0",
								"@this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: double radius> cmpl #Infinity is not 0"
							],
							"keyPreCondition":"@this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: double radius> cmpl #Infinity is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.traverse.ClosestFirstIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>",
					"modifier":"protected",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QdecreaseKey() got larger key value. Current key: \\E[\\s\\S]*\\Q new key: \\E[\\s\\S]*",
							"method":"<org.jgrapht.traverse.ClosestFirstIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>",
							"modifier":"protected",
							"invokeUnit":"virtualinvoke $r9.<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>(r3, $d0)",
							"invokedMethod":"<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>",
							"throwUnit":"throw $r12",
							"throwUnitInMethod":"<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>",
							"callChain":"virtualinvoke $r9.<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>(r3, $d0) -> throw $r12",
							"throwUnitOrder":-1,
							"conditions":"$i3 <= 0",
							"preConditions":[
								"virtualinvoke virtualinvoke @this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object getSeenData(java.lang.Object)>(parameter0).<org.jgrapht.util.FibonacciHeapNode: java.lang.Object getData()>().<org.jgrapht.traverse.ClosestFirstIterator$QueueEntry: boolean frozen> is 0",
								"specialinvoke @this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: double calculatePathLength(java.lang.Object,java.lang.Object)>(parameter0, parameter1) cmpg virtualinvoke virtualinvoke @this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: java.lang.Object getSeenData(java.lang.Object)>(parameter0).<org.jgrapht.util.FibonacciHeapNode: double getKey()>() smaller than 0",
								"parameter_1_in_method_decreaseKey cmpl parameter_0_in_method_decreaseKey.<org.jgrapht.util.FibonacciHeapNode: double key> larger than 0"
							],
							"keyPreCondition":"parameter_1_in_method_decreaseKey cmpl parameter_0_in_method_decreaseKey.<org.jgrapht.util.FibonacciHeapNode: double key> larger than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.traverse.ClosestFirstIterator: void assertNonNegativeEdge(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qnegative edge weights not allowed\\E",
							"method":"<org.jgrapht.traverse.ClosestFirstIterator: void assertNonNegativeEdge(java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":0,
							"conditions":"$i1 >= 0",
							"preConditions":[
								"interfaceinvoke virtualinvoke @this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: org.jgrapht.Graph getGraph()>().<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter0) cmpg 0.0 smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke virtualinvoke @this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: org.jgrapht.Graph getGraph()>().<org.jgrapht.Graph: double getEdgeWeight(java.lang.Object)>(parameter0) cmpg 0.0 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.traverse.ClosestFirstIterator: double calculatePathLength(java.lang.Object,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.traverse.ClosestFirstIterator: double calculatePathLength(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r2, r1, r3)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r2, r1, r3) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter1)) is 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qradius may not be specified for cross-component traversal\\E",
							"method":"<org.jgrapht.traverse.ClosestFirstIterator: void checkRadiusTraversal(boolean)>",
							"modifier":"private",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"z0 == 0, $b0 == 0",
							"preConditions":[
								"parameter0 is not 0",
								"@this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: double radius> cmpl #Infinity is not 0"
							],
							"keyPreCondition":"@this: org.jgrapht.traverse.ClosestFirstIterator.<org.jgrapht.traverse.ClosestFirstIterator: double radius> cmpl #Infinity is not 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.CycleDetector",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.CycleDetector: java.util.Set findCycles()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qnull not allowed for graph!\\E",
							"method":"<org.jgrapht.alg.CycleDetector: java.util.Set findCycles()>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r0.<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>($r2)",
							"invokedMethod":"<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
							"callChain":"specialinvoke $r0.<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>($r2) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.CycleDetector: void execute(java.util.Set,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.util.NoSuchElementException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.CycleDetector: void execute(java.util.Set,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke $r0.<org.jgrapht.alg.CycleDetector$ProbeIterator: java.lang.Object next()>()",
							"invokedMethod":"<org.jgrapht.traverse.CrossComponentIterator: java.lang.Object next()>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.traverse.CrossComponentIterator: java.lang.Object next()>",
							"callChain":"virtualinvoke $r0.<org.jgrapht.alg.CycleDetector$ProbeIterator: java.lang.Object next()>() -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0",
							"preConditions":[
								"virtualinvoke new org.jgrapht.alg.CycleDetector$ProbeIterator.<org.jgrapht.alg.CycleDetector$ProbeIterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>() is 0"
							],
							"keyPreCondition":"virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>() is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.CycleDetector: void execute(java.util.Set,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke $r0.<org.jgrapht.alg.CycleDetector$ProbeIterator: java.lang.Object next()>()",
							"invokedMethod":"<org.jgrapht.traverse.CrossComponentIterator: java.lang.Object next()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke $r0.<org.jgrapht.alg.CycleDetector$ProbeIterator: java.lang.Object next()>() -> specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void addUnseenChildrenOf(java.lang.Object)>($r5) -> $r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, $r5, r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.traverse.CrossComponentIterator$Specifics specifics>.<org.jgrapht.traverse.CrossComponentIterator$Specifics: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_addUnseenChildrenOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>() is not 0",
								"virtualinvoke new org.jgrapht.alg.CycleDetector$ProbeIterator.<org.jgrapht.alg.CycleDetector$ProbeIterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.util.FibonacciHeap",
			"methods":[
				{
					"methodName":"<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QdecreaseKey() got larger key value. Current key: \\E[\\s\\S]*\\Q new key: \\E[\\s\\S]*",
							"method":"<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>",
							"modifier":"public",
							"throwUnit":"throw $r12",
							"callChain":"throw $r12",
							"throwUnitOrder":0,
							"conditions":"$i3 <= 0",
							"preConditions":[
								"parameter1 cmpl parameter0.<org.jgrapht.util.FibonacciHeapNode: double key> larger than 0"
							],
							"keyPreCondition":"parameter1 cmpl parameter0.<org.jgrapht.util.FibonacciHeapNode: double key> larger than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.util.FibonacciHeap: void delete(org.jgrapht.util.FibonacciHeapNode)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QdecreaseKey() got larger key value. Current key: \\E[\\s\\S]*\\Q new key: \\E[\\s\\S]*",
							"method":"<org.jgrapht.util.FibonacciHeap: void delete(org.jgrapht.util.FibonacciHeapNode)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>(r1, #-Infinity)",
							"invokedMethod":"<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>",
							"throwUnit":"throw $r12",
							"throwUnitInMethod":"<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.util.FibonacciHeap: void decreaseKey(org.jgrapht.util.FibonacciHeapNode,double)>(r1, #-Infinity) -> throw $r12",
							"throwUnitOrder":-1,
							"conditions":"$i3 <= 0",
							"preConditions":[
								"parameter_1_in_method_decreaseKey cmpl parameter0.<org.jgrapht.util.FibonacciHeapNode: double key> larger than 0"
							],
							"keyPreCondition":"parameter_1_in_method_decreaseKey cmpl parameter0.<org.jgrapht.util.FibonacciHeapNode: double key> larger than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.flow.EdmondsKarpMaximumFlow",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid capacity (must be non-negative)\\E",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"throwUnit":"throw $r14",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> throw $r14",
							"throwUnitOrder":-1,
							"conditions":"r3 != null, $i2 > 0, $z0 == 0, $i3 >= 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter_1_in_method_<init> cmpg 0.0 larger than 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter_1_in_method_<init> smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter_1_in_method_<init> smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid epsilon (must be positive)\\E",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"throwUnit":"throw $r13",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> throw $r13",
							"throwUnitOrder":-1,
							"conditions":"r3 != null, $i2 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter_1_in_method_<init> cmpg 0.0 smaller or equal 0"
							],
							"keyPreCondition":"parameter_1_in_method_<init> cmpg 0.0 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qnetwork is null\\E",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"throwUnit":"throw $r12",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>(r1, 1.0E-9) -> throw $r12",
							"throwUnitOrder":-1,
							"conditions":"r3 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid capacity (must be non-negative)\\E",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"modifier":"public",
							"throwUnit":"throw $r14",
							"callChain":"throw $r14",
							"throwUnitOrder":2,
							"conditions":"r3 != null, $i2 > 0, $z0 == 0, $i3 >= 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 cmpg 0.0 larger than 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter1 smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: double getEdgeWeight(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) cmpg neg parameter1 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid epsilon (must be positive)\\E",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"modifier":"public",
							"throwUnit":"throw $r13",
							"callChain":"throw $r13",
							"throwUnitOrder":1,
							"conditions":"r3 != null, $i2 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 cmpg 0.0 smaller or equal 0"
							],
							"keyPreCondition":"parameter1 cmpg 0.0 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qnetwork is null\\E",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void <init>(org.jgrapht.DirectedGraph,double)>",
							"modifier":"public",
							"throwUnit":"throw $r12",
							"callChain":"throw $r12",
							"throwUnitOrder":0,
							"conditions":"r3 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qsource is equal to sink\\E",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r21",
							"callChain":"throw $r21",
							"throwUnitOrder":2,
							"conditions":"$z0 != 0, $z1 != 0, $z2 == 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network>.<org.jgrapht.DirectedGraph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network>.<org.jgrapht.DirectedGraph: boolean containsVertex(java.lang.Object)>(parameter1) is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid sink (null or not from this network)\\E",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r22",
							"callChain":"throw $r22",
							"throwUnitOrder":1,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network>.<org.jgrapht.DirectedGraph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network>.<org.jgrapht.DirectedGraph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network>.<org.jgrapht.DirectedGraph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qinvalid source (null or not from this network)\\E",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r23",
							"callChain":"throw $r23",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network>.<org.jgrapht.DirectedGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.DirectedGraph network>.<org.jgrapht.DirectedGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void augmentFlow()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void augmentFlow()>",
							"modifier":"private",
							"invokeUnit":"$z1 = specialinvoke r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: boolean augmentFlowAlongInternal(double,org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension,java.util.Set)>($d4, $r9, $r0)",
							"invokedMethod":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: boolean augmentFlowAlongInternal(double,org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension,java.util.Set)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: void pushFlowThrough(org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase,double)>",
							"callChain":"$z1 = specialinvoke r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: boolean augmentFlowAlongInternal(double,org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension,java.util.Set)>($d4, $r9, $r0) -> virtualinvoke r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase,double)>(r6, d0) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i0 == 0, $i1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: boolean $assertionsDisabled> is 0",
								"virtualinvoke @this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: int compareFlowTo(double,double)>(parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: double flow>, 0.0) is not 0",
								"parameter_1_in_method_augmentFlowAlongInternal is not @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension currentSource>",
								"interfaceinvoke parameter_2_in_method_augmentFlowAlongInternal.<java.util.Set: boolean contains(java.lang.Object)>(parameter_1_in_method_augmentFlowAlongInternal) is 0",
								"specialinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: boolean augmentFlowAlongInternal(double,org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension,java.util.Set)>(parameter_0_in_method_augmentFlowAlongInternal, virtualinvoke interfaceinvoke parameter_1_in_method_augmentFlowAlongInternal.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension: java.util.List lastArcs>.<java.util.List: java.lang.Object get(int)>(0).<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>(), parameter_2_in_method_augmentFlowAlongInternal) is not 0",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension currentSink>.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension: java.util.List lastArcs>.<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: int compareFlowTo(double,double)>(virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase getInverse()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: double flow>, 0.0) is not 0"
							],
							"keyPreCondition":"virtualinvoke @this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: int compareFlowTo(double,double)>(virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase getInverse()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: double flow>, 0.0) is not 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void augmentFlow()>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase,double)>(r6, $d4)",
							"invokedMethod":"<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: void pushFlowThrough(org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase,double)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: void pushFlowThrough(org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase,double)>",
							"callChain":"virtualinvoke r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase,double)>(r6, $d4) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i0 == 0, $i1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: boolean $assertionsDisabled> is 0",
								"virtualinvoke @this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: int compareFlowTo(double,double)>(parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: double flow>, 0.0) is not 0",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension currentSink>.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension: java.util.List lastArcs>.<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: boolean augmentFlowAlongInternal(double,org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension,java.util.Set)>(staticinvoke <java.lang.Math: double min(double,double)>(virtualinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension currentSink>.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension: java.util.List lastArcs>.<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess>, interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension currentSink>.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension: java.util.List lastArcs>.<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$EdgeExtension: double capacity> - interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension currentSink>.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension: java.util.List lastArcs>.<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$EdgeExtension: double flow>), virtualinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension currentSink>.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension: java.util.List lastArcs>.<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>(), new java.util.HashSet) is not 0",
								"virtualinvoke @this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: int compareFlowTo(double,double)>(virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase getInverse()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: double flow>, 0.0) is not 0"
							],
							"keyPreCondition":"virtualinvoke @this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: int compareFlowTo(double,double)>(virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase getInverse()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: double flow>, 0.0) is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: boolean augmentFlowAlongInternal(double,org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension,java.util.Set)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: boolean augmentFlowAlongInternal(double,org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension,java.util.Set)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase,double)>(r6, d0)",
							"invokedMethod":"<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: void pushFlowThrough(org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase,double)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: void pushFlowThrough(org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase,double)>",
							"callChain":"virtualinvoke r1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase,double)>(r6, d0) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i0 == 0, $i1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: boolean $assertionsDisabled> is 0",
								"virtualinvoke @this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: int compareFlowTo(double,double)>(parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: double flow>, 0.0) is not 0",
								"parameter1 is not @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension currentSource>",
								"interfaceinvoke parameter2.<java.util.Set: boolean contains(java.lang.Object)>(parameter1) is 0",
								"specialinvoke @this: org.jgrapht.alg.flow.EdmondsKarpMaximumFlow.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow: boolean augmentFlowAlongInternal(double,org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension,java.util.Set)>(parameter0, virtualinvoke interfaceinvoke parameter1.<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$VertexExtension: java.util.List lastArcs>.<java.util.List: java.lang.Object get(int)>(0).<org.jgrapht.alg.flow.EdmondsKarpMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>(), parameter2) is not 0",
								"virtualinvoke @this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: int compareFlowTo(double,double)>(virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase getInverse()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: double flow>, 0.0) is not 0"
							],
							"keyPreCondition":"virtualinvoke @this: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase: int compareFlowTo(double,double)>(virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase getInverse()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$EdgeExtensionBase: double flow>, 0.0) is not 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching: void <init>(org.jgrapht.WeightedGraph,java.util.List,java.util.List)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph supplied isn't complete bipartite with equally sized partitions!\\E",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching: void <init>(org.jgrapht.WeightedGraph,java.util.List,java.util.List)>",
							"modifier":"public",
							"throwUnit":"throw $r9",
							"callChain":"throw $r9",
							"throwUnitOrder":1,
							"conditions":"$i0 == $i1, $i3 == $i4",
							"preConditions":[
								"interfaceinvoke parameter1.<java.util.List: int size()>() is interfaceinvoke parameter2.<java.util.List: int size()>()",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.WeightedGraph: java.util.Set edgeSet()>().<java.util.Set: int size()>() is not interfaceinvoke parameter1.<java.util.List: int size()>() * interfaceinvoke parameter1.<java.util.List: int size()>()"
							],
							"keyPreCondition":"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.WeightedGraph: java.util.Set edgeSet()>().<java.util.Set: int size()>() is not interfaceinvoke parameter1.<java.util.List: int size()>() * interfaceinvoke parameter1.<java.util.List: int size()>()"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph supplied isn't complete bipartite with equally sized partitions!\\E",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching: void <init>(org.jgrapht.WeightedGraph,java.util.List,java.util.List)>",
							"modifier":"public",
							"throwUnit":"throw $r10",
							"callChain":"throw $r10",
							"throwUnitOrder":0,
							"conditions":"$i0 == $i1",
							"preConditions":[
								"interfaceinvoke parameter1.<java.util.List: int size()>() is not interfaceinvoke parameter2.<java.util.List: int size()>()"
							],
							"keyPreCondition":"interfaceinvoke parameter1.<java.util.List: int size()>() is not interfaceinvoke parameter2.<java.util.List: int size()>()"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching: void <init>(org.jgrapht.WeightedGraph,java.util.List,java.util.List)>",
							"modifier":"public",
							"invokeUnit":"$r7 = virtualinvoke $r6.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>()",
							"invokedMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>",
							"throwUnit":"throw $r42",
							"throwUnitInMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"callChain":"$r7 = virtualinvoke $r6.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>() -> virtualinvoke r0.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>() -> throw $r42",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is not 0",
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0",
								"virtualinvoke @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int buildMaximalMatching()>() smaller than @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] costMatrix>[0].length",
								"interfaceinvoke parameter1.<java.util.List: int size()>() is interfaceinvoke parameter2.<java.util.List: int size()>()",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.WeightedGraph: java.util.Set edgeSet()>().<java.util.Set: int size()>() is interfaceinvoke parameter1.<java.util.List: int size()>() * interfaceinvoke parameter1.<java.util.List: int size()>()",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.WeightedGraph: java.util.Set vertexSet()>().<java.util.Set: boolean isEmpty()>() is 0",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
							],
							"keyPreCondition":"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching: void <init>(org.jgrapht.WeightedGraph,java.util.List,java.util.List)>",
							"modifier":"public",
							"invokeUnit":"$r7 = virtualinvoke $r6.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>()",
							"invokedMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>",
							"throwUnit":"throw $r42",
							"throwUnitInMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"callChain":"$r7 = virtualinvoke $r6.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>() -> virtualinvoke r0.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>() -> throw $r42",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i3 == 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int uncovered(double[][],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] excessMatrix>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0",
								"virtualinvoke @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int buildMaximalMatching()>() smaller than @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] costMatrix>[0].length",
								"interfaceinvoke parameter1.<java.util.List: int size()>() is interfaceinvoke parameter2.<java.util.List: int size()>()",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.WeightedGraph: java.util.Set edgeSet()>().<java.util.Set: int size()>() is interfaceinvoke parameter1.<java.util.List: int size()>() * interfaceinvoke parameter1.<java.util.List: int size()>()",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.WeightedGraph: java.util.Set vertexSet()>().<java.util.Set: boolean isEmpty()>() is 0",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
							],
							"keyPreCondition":"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching: void <init>(org.jgrapht.WeightedGraph,java.util.List,java.util.List)>",
							"modifier":"public",
							"invokeUnit":"$r7 = virtualinvoke $r6.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>()",
							"invokedMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>",
							"throwUnit":"throw $r41",
							"throwUnitInMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"callChain":"$r7 = virtualinvoke $r6.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>() -> virtualinvoke r0.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>() -> throw $r41",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i3 == 0",
							"preConditions":[
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0",
								"virtualinvoke @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int buildMaximalMatching()>() smaller than @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] costMatrix>[0].length",
								"interfaceinvoke parameter1.<java.util.List: int size()>() is interfaceinvoke parameter2.<java.util.List: int size()>()",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.WeightedGraph: java.util.Set edgeSet()>().<java.util.Set: int size()>() is interfaceinvoke parameter1.<java.util.List: int size()>() * interfaceinvoke parameter1.<java.util.List: int size()>()",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.WeightedGraph: java.util.Set vertexSet()>().<java.util.Set: boolean isEmpty()>() is 0",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int uncovered(double[][],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] excessMatrix>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is not 0"
							],
							"keyPreCondition":"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int uncovered(double[][],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] excessMatrix>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is not 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.AsUnweightedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.AsUnweightedGraph: void <init>(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.AsUnweightedGraph: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AsUnweightedGraph: double getEdgeWeight(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AsUnweightedGraph: double getEdgeWeight(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.StoerWagnerMinimumCut",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.StoerWagnerMinimumCut: void <init>(org.jgrapht.UndirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNegative edge weights not allowed\\E",
							"method":"<org.jgrapht.alg.StoerWagnerMinimumCut: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r41",
							"callChain":"throw $r41",
							"throwUnitOrder":1,
							"conditions":"$i0 >= 2, $z1 == 0, $i3 >= 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.UndirectedGraph: java.util.Set vertexSet()>().<java.util.Set: int size()>() larger or equal 2",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.UndirectedGraph: java.util.Set edgeSet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke parameter0.<org.jgrapht.UndirectedGraph: double getEdgeWeight(java.lang.Object)>($parameter05) cmpg 0.0 smaller than 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.UndirectedGraph: double getEdgeWeight(java.lang.Object)>($parameter05) cmpg 0.0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph has less than 2 vertices\\E",
							"method":"<org.jgrapht.alg.StoerWagnerMinimumCut: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r37",
							"callChain":"throw $r37",
							"throwUnitOrder":0,
							"conditions":"$i0 >= 2",
							"preConditions":[
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.UndirectedGraph: java.util.Set vertexSet()>().<java.util.Set: int size()>() smaller than 2"
							],
							"keyPreCondition":"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.UndirectedGraph: java.util.Set vertexSet()>().<java.util.Set: int size()>() smaller than 2"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.StoerWagnerMinimumCut: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.alg.StoerWagnerMinimumCut: void minimumCutPhase(java.util.Set)>(r36)",
							"invokedMethod":"<org.jgrapht.alg.StoerWagnerMinimumCut: void minimumCutPhase(java.util.Set)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.alg.StoerWagnerMinimumCut: void minimumCutPhase(java.util.Set)>(r36) -> $r14 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r13, r30, r29) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"virtualinvoke new java.util.PriorityQueue.<java.util.PriorityQueue: boolean isEmpty()>() is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.StoerWagnerMinimumCut.<org.jgrapht.alg.StoerWagnerMinimumCut: org.jgrapht.WeightedGraph workingGraph>.<org.jgrapht.WeightedGraph: java.util.Set edgesOf(java.lang.Object)>(virtualinvoke new java.util.PriorityQueue.<java.util.PriorityQueue: java.lang.Object poll()>().<org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight: java.util.Set vertex>).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.StoerWagnerMinimumCut.<org.jgrapht.alg.StoerWagnerMinimumCut: org.jgrapht.WeightedGraph workingGraph>.<org.jgrapht.WeightedGraph: java.util.Set vertexSet()>().<java.util.Set: int size()>() larger than 1",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.StoerWagnerMinimumCut: void minimumCutPhase(java.util.Set)>",
					"modifier":"protected",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.StoerWagnerMinimumCut: void minimumCutPhase(java.util.Set)>",
							"modifier":"protected",
							"invokeUnit":"$r14 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r13, r30, r29)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r14 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r13, r30, r29) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"virtualinvoke new java.util.PriorityQueue.<java.util.PriorityQueue: boolean isEmpty()>() is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.StoerWagnerMinimumCut.<org.jgrapht.alg.StoerWagnerMinimumCut: org.jgrapht.WeightedGraph workingGraph>.<org.jgrapht.WeightedGraph: java.util.Set edgesOf(java.lang.Object)>(virtualinvoke new java.util.PriorityQueue.<java.util.PriorityQueue: java.lang.Object poll()>().<org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight: java.util.Set vertex>).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.traverse.DepthFirstIterator",
			"methods":[
				{
					"methodName":"<org.jgrapht.traverse.DepthFirstIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qgraph must contain the start vertex\\E",
							"method":"<org.jgrapht.traverse.DepthFirstIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>(r1, r2) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"r4 != null, r8 != null, $z0 == 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke parameter0.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qgraph must not be null\\E",
							"method":"<org.jgrapht.traverse.DepthFirstIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r15",
							"throwUnitInMethod":"<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void <init>(org.jgrapht.Graph,java.lang.Object)>(r1, r2) -> throw $r15",
							"throwUnitOrder":-1,
							"conditions":"r4 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.traverse.DepthFirstIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>",
					"modifier":"protected",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.traverse.DepthFirstIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>",
							"modifier":"protected",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"conditions":"r3 == $r4, $z1 != 0, $z0 != 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.traverse.DepthFirstIterator.<org.jgrapht.traverse.DepthFirstIterator: java.lang.Object getSeenData(java.lang.Object)>(parameter0) is <org.jgrapht.traverse.CrossComponentIterator$VisitColor: org.jgrapht.traverse.CrossComponentIterator$VisitColor WHITE>",
								"<org.jgrapht.traverse.DepthFirstIterator: boolean $assertionsDisabled> is 0",
								"interfaceinvoke @this: org.jgrapht.traverse.DepthFirstIterator.<org.jgrapht.traverse.DepthFirstIterator: java.util.Deque stack>.<java.util.Deque: boolean removeLastOccurrence(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.traverse.DepthFirstIterator.<org.jgrapht.traverse.DepthFirstIterator: java.util.Deque stack>.<java.util.Deque: boolean removeLastOccurrence(java.lang.Object)>(parameter0) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.IntrusiveEdge",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.IntrusiveEdge: java.lang.Object clone()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.InternalError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.IntrusiveEdge: java.lang.Object clone()>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":0,
							"preConditions":[
								"This is a rethrow exception after an exception with type java.lang.CloneNotSupportedException is caught."
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.BlockCutpointGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10) -> $r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, $r5, r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10) -> $i3 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_0_in_method_dfsVisit.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_getNumOrder is null"
							],
							"keyPreCondition":"parameter_0_in_method_getNumOrder is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10) -> $i4 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter_0_in_method_dfsVisit)) is not 0",
								"virtualinvoke parameter_0_in_method_dfsVisit.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_getNumOrder is null"
							],
							"keyPreCondition":"parameter_0_in_method_getNumOrder is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10) -> $i5 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter_0_in_method_dfsVisit)) is not 0",
								"virtualinvoke parameter_0_in_method_dfsVisit.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_dfsVisit is null"
							],
							"keyPreCondition":"parameter_0_in_method_dfsVisit is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10) -> $i6 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter_0_in_method_dfsVisit)) is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter_0_in_method_dfsVisit)) smaller than specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(parameter_0_in_method_dfsVisit)",
								"virtualinvoke staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter_0_in_method_dfsVisit).<java.lang.Object: boolean equals(java.lang.Object)>(parameter_1_in_method_dfsVisit) is 0",
								"virtualinvoke parameter_0_in_method_dfsVisit.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_getNumOrder is null"
							],
							"keyPreCondition":"parameter_0_in_method_getNumOrder is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10) -> $i8 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter_0_in_method_dfsVisit)) is 0",
								"virtualinvoke parameter_0_in_method_dfsVisit.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_dfsVisit is null"
							],
							"keyPreCondition":"parameter_0_in_method_dfsVisit is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10) -> specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>(r1, $r7) -> $i0 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter_0_in_method_dfsVisit)) is 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter_0_in_method_dfsVisit), parameter_0_in_method_dfsVisit) larger or equal specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(parameter_0_in_method_dfsVisit)",
								"virtualinvoke parameter_0_in_method_dfsVisit.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_getNumOrder is null"
							],
							"keyPreCondition":"parameter_0_in_method_getNumOrder is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>($r10, $r10) -> specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>(r1, $r7) -> $i1 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(r8) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter_0_in_method_dfsVisit)) is 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_dfsVisit).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter_0_in_method_dfsVisit), parameter_0_in_method_dfsVisit) larger or equal specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(parameter_0_in_method_dfsVisit)",
								"virtualinvoke parameter_0_in_method_dfsVisit.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_1_in_method_biconnectedComponentFinished is null"
							],
							"keyPreCondition":"parameter_1_in_method_biconnectedComponentFinished is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r18.<org.jgrapht.graph.SimpleGraph: void <init>(org.jgrapht.EdgeFactory)>($r20)",
							"invokedMethod":"<org.jgrapht.graph.SimpleGraph: void <init>(org.jgrapht.EdgeFactory)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"callChain":"specialinvoke $r18.<org.jgrapht.graph.SimpleGraph: void <init>(org.jgrapht.EdgeFactory)>($r20) -> specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 0, 0) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, $z0 == 0, $z1 == 0, $z0 != 0, r1 != null",
							"preConditions":[
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: java.util.Set cutpoints>.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_getNumOrder is not null",
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: boolean addVertex(java.lang.Object)>($r18)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: boolean addVertex(java.lang.Object)>($r18) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, $z0 == 0, $z1 == 0, $z0 != 0, r1 != null, r1 != null",
							"preConditions":[
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: java.util.Set cutpoints>.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_getNumOrder is not null",
								"parameter_0_in_method_<init> is not null",
								"parameter_0_in_method_addVertex is null"
							],
							"keyPreCondition":"parameter_0_in_method_addVertex is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph getBlock(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNo such vertex in the graph!\\E",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph getBlock(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set vertexSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set vertexSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BlockCutpointGraph: boolean isCutpoint(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNo such vertex in the graph!\\E",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: boolean isCutpoint(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set vertexSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set vertexSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$i0 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"$i0 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"parameter_0_in_method_getNumOrder is null"
							],
							"keyPreCondition":"parameter_0_in_method_getNumOrder is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$i1 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(r8)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"$i1 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(r8) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, $r5, r1)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, $r5, r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$i3 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"$i3 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_getNumOrder is null"
							],
							"keyPreCondition":"parameter_0_in_method_getNumOrder is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$i4 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"$i4 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter0)) is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_getNumOrder is null"
							],
							"keyPreCondition":"parameter_0_in_method_getNumOrder is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$i5 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"$i5 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter0)) is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$i6 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"$i6 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter0)) is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter0)) smaller than specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(parameter0)",
								"virtualinvoke staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter0).<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_getNumOrder is null"
							],
							"keyPreCondition":"parameter_0_in_method_getNumOrder is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$i8 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"$i8 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter0)) is 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>(r1, $r7)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>(r1, $r7) -> $i0 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>($r7) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter0)) is 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter0), parameter0) larger or equal specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(parameter0)",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_0_in_method_getNumOrder is null"
							],
							"keyPreCondition":"parameter_0_in_method_getNumOrder is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>(r1, $r7)",
							"invokedMethod":"<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: void biconnectedComponentFinished(java.lang.Object,java.lang.Object)>(r1, $r7) -> $i1 = specialinvoke r0.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(r8) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r1 != null, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter0)) is 0",
								"specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int dfsVisit(java.lang.Object,java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: org.jgrapht.UndirectedGraph graph>.<org.jgrapht.UndirectedGraph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), parameter0), parameter0) larger or equal specialinvoke @this: org.jgrapht.alg.BlockCutpointGraph.<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>(parameter0)",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"parameter_1_in_method_biconnectedComponentFinished is null"
							],
							"keyPreCondition":"parameter_1_in_method_biconnectedComponentFinished is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.BlockCutpointGraph: int getNumOrder(java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, r1 != null",
							"preConditions":[
								"<org.jgrapht.alg.BlockCutpointGraph: boolean $assertionsDisabled> is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.Multigraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.Multigraph: void <init>(org.jgrapht.EdgeFactory)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Multigraph: void <init>(org.jgrapht.EdgeFactory)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 1, 0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 1, 0) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.DirectedGraphUnion",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg1 is equal to g2\\E",
							"method":"<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null, r1 != r2",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter0 is parameter1"
							],
							"keyPreCondition":"parameter0 is parameter1"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg2 is null\\E",
							"method":"<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg1 is null\\E",
							"method":"<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg1 is equal to g2\\E",
							"method":"<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null, r1 != r2",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter0 is parameter1"
							],
							"keyPreCondition":"parameter0 is parameter1"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg2 is null\\E",
							"method":"<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg1 is null\\E",
							"method":"<org.jgrapht.graph.DirectedGraphUnion: void <init>(org.jgrapht.DirectedGraph,org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.ParanoidGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.ParanoidGraph: void <init>(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.ParanoidGraph: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.ParanoidGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QParanoidGraph detected objects o1 (hashCode=\\E[\\s\\S]*\\Q) and o2 (hashCode=\\E[\\s\\S]*\\Q) where o1.equals(o2) but o1.hashCode() != o2.hashCode()\\E",
							"method":"<org.jgrapht.graph.ParanoidGraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"staticinvoke <org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>($r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>",
							"callChain":"staticinvoke <org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>($r1, r2) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, $r2 != r3, $z0 == 0, $i0 == $i1",
							"preConditions":[
								"interfaceinvoke interfaceinvoke parameter_0_in_method_verifyAdd.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter_0_in_method_verifyAdd.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>() is not parameter2",
								"virtualinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_verifyAdd.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter2) is not 0",
								"virtualinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_verifyAdd.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<java.lang.Object: int hashCode()>() is not virtualinvoke parameter2.<java.lang.Object: int hashCode()>()"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_verifyAdd.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<java.lang.Object: int hashCode()>() is not virtualinvoke parameter2.<java.lang.Object: int hashCode()>()"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.ParanoidGraph: boolean addVertex(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QParanoidGraph detected objects o1 (hashCode=\\E[\\s\\S]*\\Q) and o2 (hashCode=\\E[\\s\\S]*\\Q) where o1.equals(o2) but o1.hashCode() != o2.hashCode()\\E",
							"method":"<org.jgrapht.graph.ParanoidGraph: boolean addVertex(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"staticinvoke <org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>($r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>",
							"callChain":"staticinvoke <org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>($r1, r2) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, $r2 != r3, $z0 == 0, $i0 == $i1",
							"preConditions":[
								"interfaceinvoke interfaceinvoke parameter_0_in_method_verifyAdd.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter_0_in_method_verifyAdd.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>() is not parameter0",
								"virtualinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_verifyAdd.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_verifyAdd.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<java.lang.Object: int hashCode()>() is not virtualinvoke parameter0.<java.lang.Object: int hashCode()>()"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_verifyAdd.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<java.lang.Object: int hashCode()>() is not virtualinvoke parameter0.<java.lang.Object: int hashCode()>()"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QParanoidGraph detected objects o1 (hashCode=\\E[\\s\\S]*\\Q) and o2 (hashCode=\\E[\\s\\S]*\\Q) where o1.equals(o2) but o1.hashCode() != o2.hashCode()\\E",
							"method":"<org.jgrapht.graph.ParanoidGraph: void verifyAdd(java.util.Set,java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":0,
							"conditions":"$z1 == 0, $r2 != r3, $z0 == 0, $i0 == $i1",
							"preConditions":[
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>() is not parameter1",
								"virtualinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<java.lang.Object: boolean equals(java.lang.Object)>(parameter1) is not 0",
								"virtualinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<java.lang.Object: int hashCode()>() is not virtualinvoke parameter1.<java.lang.Object: int hashCode()>()"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>().<java.lang.Object: int hashCode()>() is not virtualinvoke parameter1.<java.lang.Object: int hashCode()>()"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.DirectedNeighborIndex",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.DirectedNeighborIndex: java.util.Set predecessorsOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DirectedNeighborIndex: java.util.Set predecessorsOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>(r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List predecessorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.DirectedGraph: java.util.Set incomingEdgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.DirectedNeighborIndex: java.util.List predecessorListOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DirectedNeighborIndex: java.util.List predecessorListOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>(r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List predecessorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.DirectedGraph: java.util.Set incomingEdgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.DirectedNeighborIndex: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DirectedNeighborIndex: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r2.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getSuccessors(java.lang.Object)>($r4)",
							"invokedMethod":"<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getSuccessors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r2.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getSuccessors(java.lang.Object)>($r4) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_0_in_method_getSuccessors).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map successorMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_getSuccessors) is null",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map successorMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdge()>())) is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DirectedNeighborIndex: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r2.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>($r6)",
							"invokedMethod":"<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r2.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>($r6) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List predecessorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.DirectedGraph: java.util.Set incomingEdgesOf(java.lang.Object)>(parameter_0_in_method_getPredecessors).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_getPredecessors) is null",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeTarget(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdge()>())) is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DirectedNeighborIndex: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"$r9 = specialinvoke r2.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>($r6)",
							"invokedMethod":"<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r9 = specialinvoke r2.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>($r6) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List predecessorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.DirectedGraph: java.util.Set incomingEdgesOf(java.lang.Object)>(parameter_0_in_method_getPredecessors).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_getPredecessors) is null",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeTarget(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdge()>())) is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DirectedNeighborIndex: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"$r10 = specialinvoke r2.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getSuccessors(java.lang.Object)>($r4)",
							"invokedMethod":"<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getSuccessors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r10 = specialinvoke r2.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getSuccessors(java.lang.Object)>($r4) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_0_in_method_getSuccessors).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map successorMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_getSuccessors) is null",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map successorMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdge()>())) is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.DirectedNeighborIndex: void edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QAttempting to remove a neighbor that wasn't present\\E",
							"method":"<org.jgrapht.alg.DirectedNeighborIndex: void edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>($r1)",
							"invokedMethod":"<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>($r1) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r4 != null",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex$Neighbors.<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_removeNeighbor) is null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex$Neighbors.<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_removeNeighbor) is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QAttempting to remove a neighbor that wasn't present\\E",
							"method":"<org.jgrapht.alg.DirectedNeighborIndex: void edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r11.<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>($r2)",
							"invokedMethod":"<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>",
							"callChain":"virtualinvoke $r11.<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>($r2) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r4 != null",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map successorMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex$Neighbors.<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_removeNeighbor) is null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex$Neighbors.<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_removeNeighbor) is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getPredecessors(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r6 = staticinvoke <org.jgrapht.Graphs: java.util.List predecessorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r5, r1)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List predecessorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r6 = staticinvoke <org.jgrapht.Graphs: java.util.List predecessorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.DirectedGraph: java.util.Set incomingEdgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map predecessorMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_predecessorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getSuccessors(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.DirectedNeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getSuccessors(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r6 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r5, r1)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r6 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.DirectedNeighborIndex.<org.jgrapht.alg.DirectedNeighborIndex: java.util.Map successorMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.UndirectedGraphUnion",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph,org.jgrapht.util.WeightCombiner)>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg1 is equal to g2\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null, r1 != r2",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter0 is parameter1"
							],
							"keyPreCondition":"parameter0 is parameter1"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg2 is null\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg1 is null\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph,org.jgrapht.util.WeightCombiner)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph)>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg1 is equal to g2\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null, r1 != r2",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter0 is parameter1"
							],
							"keyPreCondition":"parameter0 is parameter1"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg2 is null\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg1 is null\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.UndirectedGraph)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion,org.jgrapht.util.WeightCombiner)>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg1 is equal to g2\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion,org.jgrapht.util.WeightCombiner)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null, r1 != r2",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter0 is parameter1"
							],
							"keyPreCondition":"parameter0 is parameter1"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg2 is null\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion,org.jgrapht.util.WeightCombiner)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg1 is null\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion,org.jgrapht.util.WeightCombiner)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, r3) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion)>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg1 is equal to g2\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null, r1 != r2",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter0 is parameter1"
							],
							"keyPreCondition":"parameter0 is parameter1"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg2 is null\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null, r2 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qg1 is null\\E",
							"method":"<org.jgrapht.graph.UndirectedGraphUnion: void <init>(org.jgrapht.UndirectedGraph,org.jgrapht.graph.UndirectedGraphUnion)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphUnion: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,org.jgrapht.util.WeightCombiner)>(r1, r2, $r3) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.HamiltonianCycle",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.HamiltonianCycle: java.util.List getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.HamiltonianCycle: java.util.List getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph)>",
							"modifier":"public",
							"invokeUnit":"$d0 = virtualinvoke r1.<org.jgrapht.graph.SimpleWeightedGraph: double getEdgeWeight(java.lang.Object)>($r9)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: double getEdgeWeight(java.lang.Object)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: double getEdgeWeight(java.lang.Object)>",
							"callChain":"$d0 = virtualinvoke r1.<org.jgrapht.graph.SimpleWeightedGraph: double getEdgeWeight(java.lang.Object)>($r9) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r0 != null",
							"preConditions":[
								"parameter_0_in_method_getEdgeWeight instanceof org.jgrapht.graph.DefaultWeightedEdge is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.List: int size()>() * interfaceinvoke new java.util.LinkedList.<java.util.List: int size()>() - 1 / 2 is interfaceinvoke virtualinvoke parameter0.<org.jgrapht.graph.SimpleWeightedGraph: java.util.Set edgeSet()>().<java.util.Set: int size()>()",
								"interfaceinvoke new java.util.LinkedList.<java.util.List: int size()>() is not interfaceinvoke virtualinvoke parameter0.<org.jgrapht.graph.SimpleWeightedGraph: java.util.Set vertexSet()>().<java.util.Set: int size()>()",
								"0 smaller than interfaceinvoke new java.util.LinkedList.<java.util.List: int size()>()",
								"parameter_0_in_method_getEdgeWeight is null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeWeight is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.MaximumWeightBipartiteMatching",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
							"modifier":"private",
							"throwUnit":"throw $r40",
							"callChain":"throw $r40",
							"throwUnitOrder":0,
							"conditions":"$z1 != 0, $i15 <= 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.MaximumWeightBipartiteMatching: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"9223372036854775807L cmp 0L smaller or equal 0"
							],
							"keyPreCondition":"9223372036854775807L cmp 0L smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
							"modifier":"private",
							"throwUnit":"throw $r40",
							"callChain":"throw $r40",
							"throwUnitOrder":0,
							"conditions":"$z1 != 0, $i15 <= 0, $i16 > 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.MaximumWeightBipartiteMatching: boolean $assertionsDisabled> is 0",
								"9223372036854775807L cmp 0L larger than 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"9223372036854775807L cmp 0L smaller or equal 0"
							],
							"keyPreCondition":"9223372036854775807L cmp 0L smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
							"modifier":"private",
							"invokeUnit":"$r27 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r25, $r24, $r20)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r27 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r25, $r24, $r20) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: boolean isTargetVertex(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph>.<org.jgrapht.WeightedGraph: java.util.Set edgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
							"modifier":"private",
							"invokeUnit":"$r32 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r31, $r24, $r20)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r32 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r31, $r24, $r20) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: boolean isTargetVertex(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph>.<org.jgrapht.WeightedGraph: java.util.Set edgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: java.util.Map hasVertexBeenProcessed>.<java.util.Map: java.lang.Object get(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph>.<org.jgrapht.WeightedGraph: java.util.Set edgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>())).<java.lang.Boolean: boolean booleanValue()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void findPathsToVerticesFromVertices(java.util.List,boolean,java.util.Map)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void findPathsToVerticesFromVertices(java.util.List,boolean,java.util.Map)>",
							"modifier":"private",
							"invokeUnit":"$r11 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r10, $r9, $r5)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r11 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r10, $r9, $r5) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke parameter0.<java.util.List: int size()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph>.<org.jgrapht.WeightedGraph: java.util.Set edgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: java.util.Set maximumWeightBipartiteMatching()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: java.util.Set maximumWeightBipartiteMatching()>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r1.<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>($r7)",
							"invokedMethod":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
							"throwUnit":"throw $r40",
							"throwUnitInMethod":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
							"callChain":"specialinvoke r1.<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>($r7) -> throw $r40",
							"throwUnitOrder":-1,
							"conditions":"$z1 != 0, $i15 <= 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.MaximumWeightBipartiteMatching: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"9223372036854775807L cmp 0L smaller or equal 0"
							],
							"keyPreCondition":"9223372036854775807L cmp 0L smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: java.util.Set maximumWeightBipartiteMatching()>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r1.<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>($r7)",
							"invokedMethod":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
							"throwUnit":"throw $r40",
							"throwUnitInMethod":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
							"callChain":"specialinvoke r1.<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>($r7) -> throw $r40",
							"throwUnitOrder":-1,
							"conditions":"$z1 != 0, $i15 <= 0, $i16 > 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.MaximumWeightBipartiteMatching: boolean $assertionsDisabled> is 0",
								"9223372036854775807L cmp 0L larger than 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is not 0",
								"9223372036854775807L cmp 0L smaller or equal 0"
							],
							"keyPreCondition":"9223372036854775807L cmp 0L smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: java.util.Set maximumWeightBipartiteMatching()>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r1.<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>($r7)",
							"invokedMethod":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r1.<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>($r7) -> $r27 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r25, $r24, $r20) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_adjustVertexWeights.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: boolean isTargetVertex(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_adjustVertexWeights.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph>.<org.jgrapht.WeightedGraph: java.util.Set edgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_adjustVertexWeights.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: java.util.Set maximumWeightBipartiteMatching()>",
							"modifier":"private",
							"invokeUnit":"specialinvoke r1.<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>($r7)",
							"invokedMethod":"<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r1.<org.jgrapht.alg.MaximumWeightBipartiteMatching: void adjustVertexWeights(java.util.Map)>($r7) -> $r32 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r31, $r24, $r20) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_adjustVertexWeights.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"specialinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: boolean isTargetVertex(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_adjustVertexWeights.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph>.<org.jgrapht.WeightedGraph: java.util.Set edgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_adjustVertexWeights.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: java.util.Map hasVertexBeenProcessed>.<java.util.Map: java.lang.Object get(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph>, interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.MaximumWeightBipartiteMatching.<org.jgrapht.alg.MaximumWeightBipartiteMatching: org.jgrapht.WeightedGraph graph>.<org.jgrapht.WeightedGraph: java.util.Set edgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_adjustVertexWeights.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>(), interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_adjustVertexWeights.<java.util.Map: java.util.Set keySet()>().<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>())).<java.lang.Boolean: boolean booleanValue()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.DefaultListenableGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qbase graph cannot be listenable\\E",
							"method":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0)",
							"invokedMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, r1 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter0 instanceof org.jgrapht.ListenableGraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.ListenableGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0)",
							"invokedMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qbase graph cannot be listenable\\E",
							"method":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"throwUnit":"throw $r11",
							"callChain":"throw $r11",
							"throwUnitOrder":0,
							"conditions":"$z1 == 0, r1 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter0 instanceof org.jgrapht.ListenableGraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.ListenableGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.DefaultListenableGraph: java.lang.Object clone()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.RuntimeException",
							"message":"\\Qinternal error\\E",
							"method":"<org.jgrapht.graph.DefaultListenableGraph: java.lang.Object clone()>",
							"modifier":"public",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"preConditions":[
								"This is a rethrow exception after an exception with type java.lang.CloneNotSupportedException is caught."
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.GraphDelegator",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.KosarajuStrongConnectivityInspector",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qnull not allowed for graph!\\E",
							"method":"<org.jgrapht.alg.KosarajuStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KosarajuStrongConnectivityInspector: java.util.List stronglyConnectedSets()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.alg.KosarajuStrongConnectivityInspector: java.util.List stronglyConnectedSets()>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r8.<org.jgrapht.graph.EdgeReversedGraph: void <init>(org.jgrapht.DirectedGraph)>($r9)",
							"invokedMethod":"<org.jgrapht.graph.EdgeReversedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke $r8.<org.jgrapht.graph.EdgeReversedGraph: void <init>(org.jgrapht.DirectedGraph)>($r9) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.KosarajuStrongConnectivityInspector.<org.jgrapht.alg.KosarajuStrongConnectivityInspector: java.util.List stronglyConnectedSets> is null",
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.AllDirectedPaths",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.AllDirectedPaths: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph cannot be null!\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QIf search is not restricted to simple paths, a maximum path length must be set to avoid infinite cycles\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"r0 == null, z0 != 0, r0 != null",
							"preConditions":[
								"parameter3 is null",
								"parameter2 is 0"
							],
							"keyPreCondition":"parameter3 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QIf search is not restricted to simple paths, a maximum path length must be set to avoid infinite cycles\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"r0 == null, $i0 >= 0, z0 != 0, r0 != null",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"parameter2 is 0",
								"parameter3 is null"
							],
							"keyPreCondition":"parameter3 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxPathLength must be non-negative if defined\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"r0 == null, $i0 >= 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"r3 == null, $r6 == null, $z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r20",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0) -> throw $r20",
							"throwUnitOrder":-1,
							"conditions":"r3 == null, $r6 == null, $z2 != 0, $z4 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"r3 == null, $i8 >= 0, $i9 != 0, $r6 == null, $z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r20",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0) -> throw $r20",
							"throwUnitOrder":-1,
							"conditions":"r3 == null, $i8 >= 0, $i9 != 0, $r6 == null, $z2 != 0, $z4 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxPathLength must be non-negative if defined\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r23",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0) -> throw $r23",
							"throwUnitOrder":-1,
							"conditions":"r3 == null, $i8 >= 0",
							"preConditions":[
								"parameter3 is not null",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r61",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r61",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $z16 == 0, $r6 == null, $z0 != 0, $z1 != 0, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"parameter3 is not null",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r55",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r55",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $z16 == 0, $r6 == null, $z2 != 0, r2 == null, $i9 < $i10, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is not null",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
							],
							"keyPreCondition":"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r54",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r54",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $z16 == 0, $z12 == 0, $z13 != 0, $z15 != 0, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"parameter3 is not null",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r61",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r61",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $i11 >= 0, $i12 != 0, $z16 == 0, $r6 == null, $z0 != 0, $z1 != 0, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r55",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r55",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $i11 >= 0, $i12 != 0, $z16 == 0, $r6 == null, $z2 != 0, r2 == null, $i9 < $i10, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
							],
							"keyPreCondition":"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r54",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r54",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $i11 >= 0, $i12 != 0, $z16 == 0, $z12 == 0, $z13 != 0, $z15 != 0, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxPathLength must be non-negative if defined\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.lang.Object,java.lang.Object,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"throwUnit":"throw $r53",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>($r2, $r4, z0, r5) -> $r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r53",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $i11 >= 0, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is not null",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter_0_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter_1_in_method_getAllPaths.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QIf search is not restricted to simple paths, a maximum path length must be set to avoid infinite cycles\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":1,
							"conditions":"r0 == null, z0 != 0, r0 != null",
							"preConditions":[
								"parameter3 is null",
								"parameter2 is 0"
							],
							"keyPreCondition":"parameter3 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QIf search is not restricted to simple paths, a maximum path length must be set to avoid infinite cycles\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":1,
							"conditions":"r0 == null, $i0 >= 0, z0 != 0, r0 != null",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"parameter2 is 0",
								"parameter3 is null"
							],
							"keyPreCondition":"parameter3 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxPathLength must be non-negative if defined\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"throwUnit":"throw $r8",
							"callChain":"throw $r8",
							"throwUnitOrder":0,
							"conditions":"r0 == null, $i0 >= 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"callChain":"$r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"r3 == null, $r6 == null, $z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"throwUnit":"throw $r20",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"callChain":"$r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0) -> throw $r20",
							"throwUnitOrder":-1,
							"conditions":"r3 == null, $r6 == null, $z2 != 0, $z4 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"callChain":"$r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"r3 == null, $i8 >= 0, $i9 != 0, $r6 == null, $z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"throwUnit":"throw $r20",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"callChain":"$r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0) -> throw $r20",
							"throwUnitOrder":-1,
							"conditions":"r3 == null, $i8 >= 0, $i9 != 0, $r6 == null, $z2 != 0, $z4 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxPathLength must be non-negative if defined\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"throwUnit":"throw $r23",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"callChain":"$r5 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>(r3, r0) -> throw $r23",
							"throwUnitOrder":-1,
							"conditions":"r3 == null, $i8 >= 0",
							"preConditions":[
								"parameter3 is not null",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"throwUnit":"throw $r61",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r61",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $z16 == 0, $r6 == null, $z0 != 0, $z1 != 0, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"parameter3 is not null",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"throwUnit":"throw $r55",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r55",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $z16 == 0, $r6 == null, $z2 != 0, r2 == null, $i9 < $i10, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is not null",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
							],
							"keyPreCondition":"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"throwUnit":"throw $r54",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r54",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $z16 == 0, $z12 == 0, $z13 != 0, $z15 != 0, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"parameter3 is not null",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"throwUnit":"throw $r61",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r61",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $i11 >= 0, $i12 != 0, $z16 == 0, $r6 == null, $z0 != 0, $z1 != 0, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"throwUnit":"throw $r55",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r55",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $i11 >= 0, $i12 != 0, $z16 == 0, $r6 == null, $z2 != 0, r2 == null, $i9 < $i10, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
							],
							"keyPreCondition":"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"throwUnit":"throw $r54",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r54",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $i11 >= 0, $i12 != 0, $z16 == 0, $z12 == 0, $z13 != 0, $z15 != 0, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxPathLength must be non-negative if defined\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List getAllPaths(java.util.Set,java.util.Set,boolean,java.lang.Integer)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5)",
							"invokedMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"throwUnit":"throw $r53",
							"throwUnitInMethod":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"callChain":"$r6 = specialinvoke r4.<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>(r1, r3, z0, r0, $r5) -> throw $r53",
							"throwUnitOrder":-1,
							"conditions":"r2 == null, $i11 >= 0, r3 == null, $r6 == null, $z0 != 0, $z1 != 0, $z2 != 0, $z4 != 0, $i8 >= 0, $i9 != 0",
							"preConditions":[
								"parameter3 is not null",
								"parameter3 is null",
								"parameter2 is not 0",
								"interfaceinvoke parameter0.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is not 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is not 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"modifier":"private",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":2,
							"conditions":"r3 == null, $r6 == null, $z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter1 is null",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"modifier":"private",
							"throwUnit":"throw $r20",
							"callChain":"throw $r20",
							"throwUnitOrder":1,
							"conditions":"r3 == null, $r6 == null, $z2 != 0, $z4 != 0",
							"preConditions":[
								"parameter1 is null",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"modifier":"private",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":2,
							"conditions":"r3 == null, $i8 >= 0, $i9 != 0, $r6 == null, $z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter1 is not null",
								"virtualinvoke parameter1.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter1.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Queue: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"modifier":"private",
							"throwUnit":"throw $r20",
							"callChain":"throw $r20",
							"throwUnitOrder":1,
							"conditions":"r3 == null, $i8 >= 0, $i9 != 0, $r6 == null, $z2 != 0, $z4 != 0",
							"preConditions":[
								"parameter1 is not null",
								"virtualinvoke parameter1.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter1.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.HashMap.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke new java.util.LinkedList.<java.util.Queue: java.lang.Object poll()>()) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxPathLength must be non-negative if defined\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.Map edgeMinDistancesBackwards(java.util.Set,java.lang.Integer)>",
							"modifier":"private",
							"throwUnit":"throw $r23",
							"callChain":"throw $r23",
							"throwUnitOrder":0,
							"conditions":"r3 == null, $i8 >= 0",
							"preConditions":[
								"parameter1 is not null",
								"virtualinvoke parameter1.<java.lang.Integer: int intValue()>() smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter1.<java.lang.Integer: int intValue()>() smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"modifier":"private",
							"throwUnit":"throw $r61",
							"callChain":"throw $r61",
							"throwUnitOrder":6,
							"conditions":"r2 == null, $z16 == 0, $r6 == null, $z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"modifier":"private",
							"throwUnit":"throw $r55",
							"callChain":"throw $r55",
							"throwUnitOrder":2,
							"conditions":"r2 == null, $z16 == 0, $r6 == null, $z2 != 0, r2 == null, $i9 < $i10",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"parameter3 is not null",
								"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
							],
							"keyPreCondition":"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"modifier":"private",
							"throwUnit":"throw $r54",
							"callChain":"throw $r54",
							"throwUnitOrder":1,
							"conditions":"r2 == null, $z16 == 0, $z12 == 0, $z13 != 0, $z15 != 0",
							"preConditions":[
								"parameter3 is null",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"modifier":"private",
							"throwUnit":"throw $r61",
							"callChain":"throw $r61",
							"throwUnitOrder":6,
							"conditions":"r2 == null, $i11 >= 0, $i12 != 0, $z16 == 0, $r6 == null, $z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
							],
							"keyPreCondition":"interfaceinvoke new java.util.LinkedList.<java.util.Deque: boolean isEmpty()>() is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"modifier":"private",
							"throwUnit":"throw $r55",
							"callChain":"throw $r55",
							"throwUnitOrder":2,
							"conditions":"r2 == null, $i11 >= 0, $i12 != 0, $z16 == 0, $r6 == null, $z2 != 0, r2 == null, $i9 < $i10",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is 0",
								"interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>() is not null",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
							],
							"keyPreCondition":"virtualinvoke staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(interfaceinvoke interfaceinvoke new java.util.LinkedList.<java.util.Deque: java.lang.Object poll()>().<java.util.List: int size()>()).<java.lang.Integer: int intValue()>() larger or equal virtualinvoke parameter3.<java.lang.Integer: int intValue()>()"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"modifier":"private",
							"throwUnit":"throw $r54",
							"callChain":"throw $r54",
							"throwUnitOrder":1,
							"conditions":"r2 == null, $i11 >= 0, $i12 != 0, $z16 == 0, $z12 == 0, $z13 != 0, $z15 != 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() larger or equal 0",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() is not 0",
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"<org.jgrapht.alg.AllDirectedPaths: boolean $assertionsDisabled> is 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.lang.Object getEdgeSource(java.lang.Object)>(interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AllDirectedPaths.<org.jgrapht.alg.AllDirectedPaths: org.jgrapht.DirectedGraph graph>.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()).<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: java.lang.Object next()>()) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxPathLength must be non-negative if defined\\E",
							"method":"<org.jgrapht.alg.AllDirectedPaths: java.util.List generatePaths(java.util.Set,java.util.Set,boolean,java.lang.Integer,java.util.Map)>",
							"modifier":"private",
							"throwUnit":"throw $r53",
							"callChain":"throw $r53",
							"throwUnitOrder":0,
							"conditions":"r2 == null, $i11 >= 0",
							"preConditions":[
								"parameter3 is not null",
								"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter3.<java.lang.Integer: int intValue()>() smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.alg.color.GreedyColoring",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.alg.color.GreedyColoring: void <init>(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.alg.color.GreedyColoring: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.experimental.alg.color.GreedyColoring: void <init>(org.jgrapht.Graph,int)>(r1, 0)",
							"invokedMethod":"<org.jgrapht.experimental.alg.color.GreedyColoring: void <init>(org.jgrapht.Graph,int)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.experimental.alg.color.GreedyColoring: void <init>(org.jgrapht.Graph,int)>(r1, 0) -> specialinvoke r0.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: void <init>(org.jgrapht.Graph)>(r1) -> $r16 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r12, $r9) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"0 smaller than interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>()",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.experimental.alg.IntArrayGraphAlgorithm.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: java.util.List _vertices>.<java.util.List: java.lang.Object get(int)>(0)).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.alg.color.GreedyColoring: void <init>(org.jgrapht.Graph,int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.alg.color.GreedyColoring: void <init>(org.jgrapht.Graph,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: void <init>(org.jgrapht.Graph)>(r1) -> $r16 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r12, $r9) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"0 smaller than interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>()",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.experimental.alg.IntArrayGraphAlgorithm.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: java.util.List _vertices>.<java.util.List: java.lang.Object get(int)>(0)).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.EdgeReversedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.EdgeReversedGraph: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.EdgeReversedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.PartiteRandomGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int,int,int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int,int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 < 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qillegal number of edges\\E",
							"method":"<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int,int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":1,
							"conditions":"i0 < 0, i1 >= 0, i2 < 0",
							"preConditions":[
								"parameter0 larger or equal 0",
								"parameter1 larger or equal 0",
								"parameter2 smaller than 0"
							],
							"keyPreCondition":"parameter2 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qillegal number of edges\\E",
							"method":"<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int,int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":1,
							"conditions":"i0 < 0, i1 >= 0, i2 < 0, i2 <= $i3",
							"preConditions":[
								"parameter0 larger or equal 0",
								"parameter1 larger or equal 0",
								"parameter2 larger or equal 0",
								"parameter2 larger than parameter0 * parameter1"
							],
							"keyPreCondition":"parameter2 larger than parameter0 * parameter1"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int,int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 < 0, i1 >= 0",
							"preConditions":[
								"parameter0 larger or equal 0",
								"parameter1 smaller than 0"
							],
							"keyPreCondition":"parameter1 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int[],int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qillegal number of edges\\E",
							"method":"<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int[],int)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":2,
							"conditions":"i0 >= 0, i6_1 >= $i1, $i2 >= 0, i7_2 >= i6_1, i0 <= $i5",
							"preConditions":[
								"parameter1 larger or equal 0",
								"0 smaller than parameter0.length",
								"parameter0[i6_1] larger or equal 0",
								"0 smaller than 0",
								"parameter1 larger than parameter0[i6_1] * parameter0[i7_2]"
							],
							"keyPreCondition":"parameter1 larger than parameter0[i6_1] * parameter0[i7_2]"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int[],int)>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":1,
							"conditions":"i0 >= 0, i6_1 >= $i1, $i2 >= 0",
							"preConditions":[
								"parameter1 larger or equal 0",
								"0 smaller than parameter0.length",
								"parameter0[i6_1] smaller than 0"
							],
							"keyPreCondition":"parameter0[i6_1] smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qillegal number of edges\\E",
							"method":"<org.jgrapht.experimental.PartiteRandomGraphGenerator: void <init>(int[],int)>",
							"modifier":"public",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":0,
							"conditions":"i0 >= 0",
							"preConditions":[
								"parameter1 smaller than 0"
							],
							"keyPreCondition":"parameter1 smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.DefaultDirectedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.DefaultDirectedGraph: void <init>(org.jgrapht.EdgeFactory)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.DefaultDirectedGraph: void <init>(org.jgrapht.EdgeFactory)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 0, 1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 0, 1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.cycle.PatonCycleBase",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.cycle.PatonCycleBase: void <init>(org.jgrapht.UndirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.PatonCycleBase: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.PatonCycleBase: void setGraph(org.jgrapht.UndirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.PatonCycleBase: void setGraph(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.PatonCycleBase: java.util.List findCycleBase()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph.\\E",
							"method":"<org.jgrapht.alg.cycle.PatonCycleBase: java.util.List findCycleBase()>",
							"modifier":"public",
							"throwUnit":"throw $r25",
							"callChain":"throw $r25",
							"throwUnitOrder":0,
							"conditions":"$r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.cycle.PatonCycleBase.<org.jgrapht.alg.cycle.PatonCycleBase: org.jgrapht.UndirectedGraph graph> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.alg.cycle.PatonCycleBase.<org.jgrapht.alg.cycle.PatonCycleBase: org.jgrapht.UndirectedGraph graph> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.MaskSubgraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.MaskSubgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: boolean addVertex(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.MaskSubgraph: boolean addVertex(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: java.util.Set edgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.util.Set edgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.util.Set edgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: java.lang.Object getEdgeSource(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.lang.Object getEdgeSource(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"<org.jgrapht.graph.MaskSubgraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke virtualinvoke @this: org.jgrapht.graph.MaskSubgraph.<org.jgrapht.graph.MaskSubgraph: java.util.Set edgeSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke virtualinvoke @this: org.jgrapht.graph.MaskSubgraph.<org.jgrapht.graph.MaskSubgraph: java.util.Set edgeSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: java.lang.Object getEdgeTarget(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.lang.Object getEdgeTarget(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"<org.jgrapht.graph.MaskSubgraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke virtualinvoke @this: org.jgrapht.graph.MaskSubgraph.<org.jgrapht.graph.MaskSubgraph: java.util.Set edgeSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke virtualinvoke @this: org.jgrapht.graph.MaskSubgraph.<org.jgrapht.graph.MaskSubgraph: java.util.Set edgeSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: double getEdgeWeight(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: double getEdgeWeight(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"<org.jgrapht.graph.MaskSubgraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke virtualinvoke @this: org.jgrapht.graph.MaskSubgraph.<org.jgrapht.graph.MaskSubgraph: java.util.Set edgeSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke virtualinvoke @this: org.jgrapht.graph.MaskSubgraph.<org.jgrapht.graph.MaskSubgraph: java.util.Set edgeSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: int inDegreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: int inDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>(r1) -> virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: int inDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: java.util.Set incomingEdgesOf(java.lang.Object)>(r1) -> virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: int outDegreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: int outDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(r1) -> virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: int outDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(r1) -> virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.util.Set outgoingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.MaskSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: boolean removeAllEdges(java.util.Collection)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.MaskSubgraph: boolean removeAllEdges(java.util.Collection)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: java.util.Set removeAllEdges(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.util.Set removeAllEdges(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: boolean removeAllVertices(java.util.Collection)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.MaskSubgraph: boolean removeAllVertices(java.util.Collection)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: boolean removeEdge(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.MaskSubgraph: boolean removeEdge(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.MaskSubgraph: java.lang.Object removeEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.MaskSubgraph: boolean removeVertex(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qthis graph is unmodifiable\\E",
							"method":"<org.jgrapht.graph.MaskSubgraph: boolean removeVertex(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.generate.LinearGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.LinearGraphGenerator: void <init>(int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.LinearGraphGenerator: void <init>(int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 >= 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.ListenableDirectedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.ListenableDirectedGraph: void <init>(java.lang.Class)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qbase graph cannot be listenable\\E",
							"method":"<org.jgrapht.graph.ListenableDirectedGraph: void <init>(java.lang.Class)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>($r1)",
							"invokedMethod":"<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>($r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is not null",
								"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
							],
							"keyPreCondition":"parameter_0_in_method_<init> instanceof org.jgrapht.ListenableGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.ListenableDirectedGraph: void <init>(java.lang.Class)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>($r1)",
							"invokedMethod":"<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>($r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qbase graph cannot be listenable\\E",
							"method":"<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"$z1 == 0, r1 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter0 instanceof org.jgrapht.ListenableGraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.ListenableGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.ListenableDirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.DefaultListenableGraph: void <init>(org.jgrapht.Graph,boolean)>(r1, 0) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.UniformRandomGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.UniformRandomGraphGenerator: void <init>(int,int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qillegal number of edges\\E",
							"method":"<org.jgrapht.experimental.UniformRandomGraphGenerator: void <init>(int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":1,
							"conditions":"i0 >= 0, i1 < 0",
							"preConditions":[
								"parameter0 larger or equal 0",
								"parameter1 smaller than 0"
							],
							"keyPreCondition":"parameter1 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qillegal number of edges\\E",
							"method":"<org.jgrapht.experimental.UniformRandomGraphGenerator: void <init>(int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":1,
							"conditions":"i0 >= 0, i1 < 0, i1 <= $i4",
							"preConditions":[
								"parameter0 larger or equal 0",
								"parameter1 larger or equal 0",
								"parameter1 larger than parameter0 * parameter0 - 1 / 2"
							],
							"keyPreCondition":"parameter1 larger than parameter0 * parameter0 - 1 / 2"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.experimental.UniformRandomGraphGenerator: void <init>(int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"i0 >= 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.Subgraph$BaseGraphListener",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.Subgraph$BaseGraphListener: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph$BaseGraphListener: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3)",
							"invokedMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, $z0 != 0, $z1 != 0, $z2 != 0, $r7 == r4, $z0 == 0, r1 != null",
							"preConditions":[
								"parameter_2_in_method_addEdge is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter_2_in_method_addEdge) is not 0",
								"<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is not 0",
								"<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is 0",
								"parameter_1_in_method_addEdge is not null",
								"staticinvoke <org.jgrapht.graph.Subgraph: boolean access$100(org.jgrapht.graph.Subgraph)>(@this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_2_in_method_addEdge) is not parameter_1_in_method_addEdge"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_2_in_method_addEdge) is not parameter_1_in_method_addEdge"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph$BaseGraphListener: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3)",
							"invokedMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, $z0 != 0, $z1 != 0, $r10 == r3, $z2 != 0, $r7 == r4, $z0 == 0, r1 != null",
							"preConditions":[
								"parameter_2_in_method_addEdge is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter_2_in_method_addEdge) is not 0",
								"<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is 0",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_2_in_method_addEdge) is parameter_0_in_method_addEdge",
								"parameter_1_in_method_addEdge is not null",
								"staticinvoke <org.jgrapht.graph.Subgraph: boolean access$100(org.jgrapht.graph.Subgraph)>(@this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_2_in_method_addEdge) is not parameter_1_in_method_addEdge"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_2_in_method_addEdge) is not parameter_1_in_method_addEdge"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph$BaseGraphListener: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3)",
							"invokedMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r11",
							"throwUnitInMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3) -> throw $r11",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, $z0 != 0, $z1 != 0, $r10 == r3, $z0 == 0, r1 != null",
							"preConditions":[
								"parameter_2_in_method_addEdge is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter_2_in_method_addEdge) is not 0",
								"<org.jgrapht.graph.Subgraph: boolean $assertionsDisabled> is 0",
								"parameter_1_in_method_addEdge is not null",
								"staticinvoke <org.jgrapht.graph.Subgraph: boolean access$100(org.jgrapht.graph.Subgraph)>(@this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_2_in_method_addEdge) is not parameter_0_in_method_addEdge"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_2_in_method_addEdge) is not parameter_0_in_method_addEdge"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such edge in base graph\\E",
							"method":"<org.jgrapht.graph.Subgraph$BaseGraphListener: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3)",
							"invokedMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r12",
							"throwUnitInMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3) -> throw $r12",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, $z0 != 0",
							"preConditions":[
								"parameter_2_in_method_addEdge is not null",
								"staticinvoke <org.jgrapht.graph.Subgraph: boolean access$100(org.jgrapht.graph.Subgraph)>(@this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter_2_in_method_addEdge) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter_2_in_method_addEdge) is 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph$BaseGraphListener: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3)",
							"invokedMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r13",
							"throwUnitInMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3) -> throw $r13",
							"throwUnitOrder":-1,
							"conditions":"r0 != null",
							"preConditions":[
								"staticinvoke <org.jgrapht.graph.Subgraph: boolean access$100(org.jgrapht.graph.Subgraph)>(@this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"parameter_2_in_method_addEdge is null"
							],
							"keyPreCondition":"parameter_2_in_method_addEdge is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph$BaseGraphListener: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3)",
							"invokedMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3) -> virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r3) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_addEdge) is 0",
								"parameter_2_in_method_addEdge is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter_2_in_method_addEdge) is not 0",
								"staticinvoke <org.jgrapht.graph.Subgraph: boolean access$100(org.jgrapht.graph.Subgraph)>(@this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"parameter_0_in_method_addEdge is not null"
							],
							"keyPreCondition":"parameter_0_in_method_addEdge is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph$BaseGraphListener: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3)",
							"invokedMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3) -> virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r3) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_addEdge) is 0",
								"parameter_2_in_method_addEdge is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter_2_in_method_addEdge) is not 0",
								"staticinvoke <org.jgrapht.graph.Subgraph: boolean access$100(org.jgrapht.graph.Subgraph)>(@this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"parameter_0_in_method_addEdge is null"
							],
							"keyPreCondition":"parameter_0_in_method_addEdge is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph$BaseGraphListener: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3)",
							"invokedMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3) -> virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r4) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_1_in_method_addEdge) is 0",
								"parameter_2_in_method_addEdge is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter_2_in_method_addEdge) is not 0",
								"staticinvoke <org.jgrapht.graph.Subgraph: boolean access$100(org.jgrapht.graph.Subgraph)>(@this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"parameter_1_in_method_addEdge is not null"
							],
							"keyPreCondition":"parameter_1_in_method_addEdge is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.Subgraph$BaseGraphListener: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3)",
							"invokedMethod":"<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.graph.Subgraph: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r3) -> virtualinvoke r1.<org.jgrapht.graph.Subgraph: boolean assertVertexExist(java.lang.Object)>(r4) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_1_in_method_addEdge) is 0",
								"parameter_2_in_method_addEdge is not null",
								"interfaceinvoke @this: org.jgrapht.graph.Subgraph.<org.jgrapht.graph.Subgraph: org.jgrapht.Graph base>.<org.jgrapht.Graph: boolean containsEdge(java.lang.Object)>(parameter_2_in_method_addEdge) is not 0",
								"staticinvoke <org.jgrapht.graph.Subgraph: boolean access$100(org.jgrapht.graph.Subgraph)>(@this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.Subgraph$BaseGraphListener.<org.jgrapht.graph.Subgraph$BaseGraphListener: org.jgrapht.graph.Subgraph this$0>.<org.jgrapht.graph.Subgraph: boolean containsVertex(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"parameter_1_in_method_addEdge is null"
							],
							"keyPreCondition":"parameter_1_in_method_addEdge is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.generate.CompleteGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.CompleteGraphGenerator: void <init>(int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.CompleteGraphGenerator: void <init>(int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 >= 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.DirectedPseudograph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.DirectedPseudograph: void <init>(org.jgrapht.EdgeFactory)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.DirectedPseudograph: void <init>(org.jgrapht.EdgeFactory)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 1, 1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 1, 1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.UndirectedSubgraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.UndirectedSubgraph: int degreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.UndirectedSubgraph: int degreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.UndirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.UndirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.UndirectedSubgraph: int degreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.graph.UndirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.graph.UndirectedSubgraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set getAllEdges(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set getAllEdges(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter1) is not 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set getAllEdges(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter1) is not 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.lang.Object getEdge(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.lang.Object getEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r5 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r5 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter1) is not 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.lang.Object getEdge(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r5 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r5 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke @this: org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph this$0>.<org.jgrapht.graph.AbstractBaseGraph: boolean containsVertex(java.lang.Object)>(parameter1) is not 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: void addEdgeToTouchingVertices(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: void addEdgeToTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"parameter_0_in_method_getEdgeContainer is not null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: void addEdgeToTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"parameter_0_in_method_getEdgeContainer is null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: void addEdgeToTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"parameter_0_in_method_getEdgeContainer is not null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: void addEdgeToTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"parameter_0_in_method_getEdgeContainer is null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: int degreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qno such operation in a directed graph\\E",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: int degreeOf(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set edgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set edgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r3 = specialinvoke r1.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r3 = specialinvoke r1.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r2) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set edgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r3 = specialinvoke r1.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r3 = specialinvoke r1.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r2) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set edgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r5 = specialinvoke r1.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r5 = specialinvoke r1.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r2) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set edgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r5 = specialinvoke r1.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r2)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r5 = specialinvoke r1.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r2) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: int inDegreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: int inDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: int inDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set incomingEdgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set incomingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set incomingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: int outDegreeOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: int outDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: int outDegreeOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set outgoingEdgesOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set outgoingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: java.util.Set outgoingEdgesOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>(r1) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: void removeEdgeFromTouchingVertices(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: void removeEdgeFromTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"parameter_0_in_method_getEdgeContainer is not null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: void removeEdgeFromTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r6 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r3) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"parameter_0_in_method_getEdgeContainer is null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: void removeEdgeFromTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"parameter_0_in_method_getEdgeContainer is not null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: void removeEdgeFromTouchingVertices(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"$r7 = specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>($r5) -> virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter_0_in_method_getEdgeContainer) is 0",
								"parameter_0_in_method_getEdgeContainer is null"
							],
							"keyPreCondition":"parameter_0_in_method_getEdgeContainer is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex in graph: \\E[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is not null"
							],
							"keyPreCondition":"parameter0 is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics: org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer getEdgeContainer(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractGraph: boolean assertVertexExist(java.lang.Object)>",
							"callChain":"virtualinvoke $r2.<org.jgrapht.graph.AbstractBaseGraph: boolean assertVertexExist(java.lang.Object)>(r1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, r1 != null",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.graph.AbstractGraph.<org.jgrapht.graph.AbstractGraph: boolean containsVertex(java.lang.Object)>(parameter0) is 0",
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.NaiveLcaFinder",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.NaiveLcaFinder: java.util.Set findLcas(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\QfindLcas has not yet been implemented\\E",
							"method":"<org.jgrapht.alg.NaiveLcaFinder: java.util.Set findLcas(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.CycleDetector$ProbeIterator",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.CycleDetector$ProbeIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>",
					"modifier":"protected",
					"exceptions":[
						{
							"exceptionName":"org.jgrapht.alg.CycleDetector$CycleDetectedException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.CycleDetector$ProbeIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>",
							"modifier":"protected",
							"throwUnit":"throw $r14",
							"callChain":"throw $r14",
							"throwUnitOrder":0,
							"conditions":"i1_3 <= $i3, $r5 != null, r3 == $r4, $z1 != 0, $z0 != 0",
							"preConditions":[
								"0 larger than -1",
								"interfaceinvoke @this: org.jgrapht.traverse.DepthFirstIterator.<org.jgrapht.traverse.DepthFirstIterator: java.util.Deque stack>.<java.util.Deque: boolean removeLastOccurrence(java.lang.Object)>(parameter0) is not 0",
								"@this: org.jgrapht.alg.CycleDetector$ProbeIterator.<org.jgrapht.alg.CycleDetector$ProbeIterator: java.util.Set cycleSet> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.alg.CycleDetector$ProbeIterator.<org.jgrapht.alg.CycleDetector$ProbeIterator: java.util.Set cycleSet> is null"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.CycleDetector$ProbeIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>",
							"modifier":"protected",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.traverse.DepthFirstIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.traverse.DepthFirstIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.traverse.DepthFirstIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.traverse.DepthFirstIterator: void encounterVertexAgain(java.lang.Object,java.lang.Object)>(r1, r2) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"r3 == $r4, $z1 != 0, $z0 != 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.traverse.DepthFirstIterator.<org.jgrapht.traverse.DepthFirstIterator: java.lang.Object getSeenData(java.lang.Object)>(parameter0) is <org.jgrapht.traverse.CrossComponentIterator$VisitColor: org.jgrapht.traverse.CrossComponentIterator$VisitColor WHITE>",
								"<org.jgrapht.traverse.DepthFirstIterator: boolean $assertionsDisabled> is 0",
								"interfaceinvoke @this: org.jgrapht.traverse.DepthFirstIterator.<org.jgrapht.traverse.DepthFirstIterator: java.util.Deque stack>.<java.util.Deque: boolean removeLastOccurrence(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.traverse.DepthFirstIterator.<org.jgrapht.traverse.DepthFirstIterator: java.util.Deque stack>.<java.util.Deque: boolean removeLastOccurrence(java.lang.Object)>(parameter0) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.SimpleGraphPath",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.SimpleGraphPath: void <init>(org.jgrapht.graph.SimpleGraph,java.util.List,double)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QThe specified vertices do not form a path\\E",
							"method":"<org.jgrapht.graph.SimpleGraphPath: void <init>(org.jgrapht.graph.SimpleGraph,java.util.List,double)>",
							"modifier":"public",
							"throwUnit":"throw $r11",
							"callChain":"throw $r11",
							"throwUnitOrder":1,
							"conditions":"$i0 >= 2, i4_1 >= $i2, $r10 == null",
							"preConditions":[
								"interfaceinvoke parameter1.<java.util.List: int size()>() larger or equal 2",
								"0 smaller than interfaceinvoke virtualinvoke @this: org.jgrapht.graph.SimpleGraphPath.<org.jgrapht.graph.SimpleGraphPath: java.util.List getVertexList()>().<java.util.List: int size()>() - 1",
								"virtualinvoke virtualinvoke @this: org.jgrapht.graph.SimpleGraphPath.<org.jgrapht.graph.SimpleGraphPath: org.jgrapht.graph.SimpleGraph getGraph()>().<org.jgrapht.graph.SimpleGraph: java.lang.Object getEdge(java.lang.Object,java.lang.Object)>(interfaceinvoke virtualinvoke @this: org.jgrapht.graph.SimpleGraphPath.<org.jgrapht.graph.SimpleGraphPath: java.util.List getVertexList()>().<java.util.List: java.lang.Object get(int)>(0), interfaceinvoke virtualinvoke @this: org.jgrapht.graph.SimpleGraphPath.<org.jgrapht.graph.SimpleGraphPath: java.util.List getVertexList()>().<java.util.List: java.lang.Object get(int)>(0 + 1)) is null"
							],
							"keyPreCondition":"virtualinvoke virtualinvoke @this: org.jgrapht.graph.SimpleGraphPath.<org.jgrapht.graph.SimpleGraphPath: org.jgrapht.graph.SimpleGraph getGraph()>().<org.jgrapht.graph.SimpleGraph: java.lang.Object getEdge(java.lang.Object,java.lang.Object)>(interfaceinvoke virtualinvoke @this: org.jgrapht.graph.SimpleGraphPath.<org.jgrapht.graph.SimpleGraphPath: java.util.List getVertexList()>().<java.util.List: java.lang.Object get(int)>(0), interfaceinvoke virtualinvoke @this: org.jgrapht.graph.SimpleGraphPath.<org.jgrapht.graph.SimpleGraphPath: java.util.List getVertexList()>().<java.util.List: java.lang.Object get(int)>(0 + 1)) is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QAt least two vertices are required to form a path\\E",
							"method":"<org.jgrapht.graph.SimpleGraphPath: void <init>(org.jgrapht.graph.SimpleGraph,java.util.List,double)>",
							"modifier":"public",
							"throwUnit":"throw $r13",
							"callChain":"throw $r13",
							"throwUnitOrder":0,
							"conditions":"$i0 >= 2",
							"preConditions":[
								"interfaceinvoke parameter1.<java.util.List: int size()>() smaller than 2"
							],
							"keyPreCondition":"interfaceinvoke parameter1.<java.util.List: int size()>() smaller than 2"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.generate.WheelGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.WheelGraphGenerator: void <init>(int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.WheelGraphGenerator: void <init>(int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.generate.WheelGraphGenerator: void <init>(int,boolean)>(i0, 1)",
							"invokedMethod":"<org.jgrapht.generate.WheelGraphGenerator: void <init>(int,boolean)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.generate.WheelGraphGenerator: void <init>(int,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.generate.WheelGraphGenerator: void <init>(int,boolean)>(i0, 1) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"i0 >= 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.generate.WheelGraphGenerator: void <init>(int,boolean)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.WheelGraphGenerator: void <init>(int,boolean)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 >= 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.generate.WheelGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.WheelGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r4.<org.jgrapht.generate.RingGraphGenerator: void <init>(int)>($i2)",
							"invokedMethod":"<org.jgrapht.generate.RingGraphGenerator: void <init>(int)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.generate.RingGraphGenerator: void <init>(int)>",
							"callChain":"specialinvoke $r4.<org.jgrapht.generate.RingGraphGenerator: void <init>(int)>($i2) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"i0 >= 0",
							"preConditions":[
								"@this: org.jgrapht.generate.WheelGraphGenerator.<org.jgrapht.generate.WheelGraphGenerator: int size> larger or equal 1",
								"parameter_0_in_method_<init> smaller than 0"
							],
							"keyPreCondition":"parameter_0_in_method_<init> smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.WheelGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r4.<org.jgrapht.generate.RingGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>(r5, $r2, r6)",
							"invokedMethod":"<org.jgrapht.generate.RingGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.generate.LinearGraphGenerator: void <init>(int)>",
							"callChain":"virtualinvoke $r4.<org.jgrapht.generate.RingGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>(r5, $r2, r6) -> specialinvoke $r1.<org.jgrapht.generate.LinearGraphGenerator: void <init>(int)>($i1) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"i0 >= 0, i0 >= 0",
							"preConditions":[
								"@this: org.jgrapht.generate.RingGraphGenerator.<org.jgrapht.generate.RingGraphGenerator: int size> larger or equal 1",
								"@this: org.jgrapht.generate.WheelGraphGenerator.<org.jgrapht.generate.WheelGraphGenerator: int size> larger or equal 1",
								"parameter_0_in_method_<init> larger or equal 0",
								"parameter_0_in_method_<init> smaller than 0"
							],
							"keyPreCondition":"parameter_0_in_method_<init> smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>",
					"modifier":"protected",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>",
							"modifier":"protected",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>()",
							"invokedMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"throwUnit":"throw $r42",
							"throwUnitInMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"callChain":"virtualinvoke r0.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>() -> throw $r42",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is not 0",
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0",
								"virtualinvoke @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int buildMaximalMatching()>() smaller than @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] costMatrix>[0].length",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
							],
							"keyPreCondition":"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>",
							"modifier":"protected",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>()",
							"invokedMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"throwUnit":"throw $r42",
							"throwUnitInMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"callChain":"virtualinvoke r0.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>() -> throw $r42",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i3 == 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int uncovered(double[][],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] excessMatrix>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0",
								"virtualinvoke @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int buildMaximalMatching()>() smaller than @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] costMatrix>[0].length",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
							],
							"keyPreCondition":"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] buildMatching()>",
							"modifier":"protected",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>()",
							"invokedMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"throwUnit":"throw $r41",
							"throwUnitInMethod":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"callChain":"virtualinvoke r0.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>() -> throw $r41",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i3 == 0",
							"preConditions":[
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0",
								"virtualinvoke @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int buildMaximalMatching()>() smaller than @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] costMatrix>[0].length",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int uncovered(double[][],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] excessMatrix>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is not 0"
							],
							"keyPreCondition":"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int uncovered(double[][],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] excessMatrix>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"modifier":"default",
							"throwUnit":"throw $r42",
							"callChain":"throw $r42",
							"throwUnitOrder":1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is not 0",
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
							],
							"keyPreCondition":"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"modifier":"default",
							"throwUnit":"throw $r42",
							"callChain":"throw $r42",
							"throwUnitOrder":1,
							"conditions":"$z0 != 0, $i3 == 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int uncovered(double[][],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] excessMatrix>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
							],
							"keyPreCondition":"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean minimal(int[],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int[] rowMatched>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: void buildVertexCoverage()>",
							"modifier":"default",
							"throwUnit":"throw $r41",
							"callChain":"throw $r41",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $i3 == 0",
							"preConditions":[
								"<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean $assertionsDisabled> is 0",
								"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int uncovered(double[][],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] excessMatrix>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is not 0"
							],
							"keyPreCondition":"staticinvoke <org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: int uncovered(double[][],boolean[],boolean[])>(@this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: double[][] excessMatrix>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] rowsCovered>, @this: org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation.<org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation: boolean[] columnsCovered>) is not 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.SimpleGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.SimpleGraph: void <init>(org.jgrapht.EdgeFactory)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.SimpleGraph: void <init>(org.jgrapht.EdgeFactory)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 0, 0)",
							"invokedMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AbstractBaseGraph: void <init>(org.jgrapht.EdgeFactory,boolean,boolean)>(r1, 0, 0) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.cycle.HawickJamesSimpleCycles",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":0,
							"conditions":"r2 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void initState(org.jgrapht.alg.cycle.HawickJamesSimpleCycles$Operation)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void initState(org.jgrapht.alg.cycle.HawickJamesSimpleCycles$Operation)>",
							"modifier":"private",
							"invokeUnit":"$r14 = specialinvoke r0.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: java.util.List[] buildAdjacencyList()>()",
							"invokedMethod":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: java.util.List[] buildAdjacencyList()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r14 = specialinvoke r0.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: java.util.List[] buildAdjacencyList()>() -> $r5 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r4, r3) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"0 smaller than @this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: int nVertices>",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: java.util.List[] buildAdjacencyList()>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: java.util.List[] buildAdjacencyList()>",
							"modifier":"private",
							"invokeUnit":"$r5 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r4, r3)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r5 = staticinvoke <org.jgrapht.Graphs: java.util.List successorListOf(org.jgrapht.DirectedGraph,java.lang.Object)>($r4, r3) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.DirectedGraph: java.util.Set outgoingEdgesOf(java.lang.Object)>(parameter_1_in_method_successorListOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"0 smaller than @this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: int nVertices>",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_successorListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: java.util.List findSimpleCycles()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph.\\E",
							"method":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: java.util.List findSimpleCycles()>",
							"modifier":"public",
							"throwUnit":"throw $r13",
							"callChain":"throw $r13",
							"throwUnitOrder":0,
							"conditions":"$r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void printSimpleCycles()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph.\\E",
							"method":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: void printSimpleCycles()>",
							"modifier":"public",
							"throwUnit":"throw $r13",
							"callChain":"throw $r13",
							"throwUnitOrder":0,
							"conditions":"$r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: long countSimpleCycles()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph.\\E",
							"method":"<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: long countSimpleCycles()>",
							"modifier":"public",
							"throwUnit":"throw $r13",
							"callChain":"throw $r13",
							"throwUnitOrder":0,
							"conditions":"$r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.alg.cycle.HawickJamesSimpleCycles.<org.jgrapht.alg.cycle.HawickJamesSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.KShortestPathsIterator",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QstartVertex is null\\E",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>(r1, r2) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, r1 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qgraph is null\\E",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>(r1, r2) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPathsIterator: java.util.Set next()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.util.NoSuchElementException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: java.util.Set next()>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"$z1 == 0",
							"preConditions":[
								"virtualinvoke @this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: boolean hasNext()>() is 0"
							],
							"keyPreCondition":"virtualinvoke @this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: boolean hasNext()>() is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPathsIterator: void remove()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: void remove()>",
							"modifier":"public",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"preConditions":[
								"Direct Throw Without Any Condition"
							]
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QstartVertex is null\\E",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":1,
							"conditions":"r0 != null, r1 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qgraph is null\\E",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPathsIterator: org.jgrapht.alg.RankingPathElementList createSeenData(java.lang.Object,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: org.jgrapht.alg.RankingPathElementList createSeenData(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r4 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter1)) is 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPathsIterator: void savePassData(java.util.Set)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxSize is negative or 0\\E",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: void savePassData(java.util.Set)>",
							"modifier":"private",
							"invokeUnit":"specialinvoke $r7.<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>($r8, $i0, $r3)",
							"invokedMethod":"<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>",
							"callChain":"specialinvoke $r7.<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>($r8, $i0, $r3) -> specialinvoke r0.<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>(r1, i0, r2) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"i0 > 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke parameter0.<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"parameter_1_in_method_<init> smaller or equal 0"
							],
							"keyPreCondition":"parameter_1_in_method_<init> smaller or equal 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPathsIterator: boolean tryToAddNewPaths(java.lang.Object,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: boolean tryToAddNewPaths(java.lang.Object,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, r5, r1)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, r5, r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter1)) is 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPathsIterator: void updateOutgoingVertices(java.lang.Object,java.util.Set)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: void updateOutgoingVertices(java.lang.Object,java.util.Set)>",
							"modifier":"private",
							"invokeUnit":"$r5 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r4, $r3, r1)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r5 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r4, $r3, r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke specialinvoke @this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(parameter0).<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.KShortestPathsIterator: void updateOutgoingVertices(java.lang.Object,java.util.Set)>",
							"modifier":"private",
							"invokeUnit":"$z4 = specialinvoke r0.<org.jgrapht.alg.KShortestPathsIterator: boolean tryToAddNewPaths(java.lang.Object,java.lang.Object)>($r5, $r3)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPathsIterator: boolean tryToAddNewPaths(java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$z4 = specialinvoke r0.<org.jgrapht.alg.KShortestPathsIterator: boolean tryToAddNewPaths(java.lang.Object,java.lang.Object)>($r5, $r3) -> $r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, r5, r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_0_in_method_tryToAddNewPaths.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_tryToAddNewPaths)) is 0",
								"interfaceinvoke specialinvoke @this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(parameter0).<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: org.jgrapht.Graph graph>, interfaceinvoke specialinvoke @this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(parameter0).<java.util.Iterator: java.lang.Object next()>(), parameter0).<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: java.lang.Object startVertex>) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: java.util.Map seenDataContainer>.<java.util.Map: boolean containsKey(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: org.jgrapht.Graph graph>, interfaceinvoke specialinvoke @this: org.jgrapht.alg.KShortestPathsIterator.<org.jgrapht.alg.KShortestPathsIterator: java.util.Iterator edgesOfIterator(java.lang.Object)>(parameter0).<java.util.Iterator: java.lang.Object next()>(), parameter0)) is not 0",
								"virtualinvoke parameter_0_in_method_tryToAddNewPaths.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_tryToAddNewPaths)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_0_in_method_tryToAddNewPaths.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_tryToAddNewPaths)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.cycle.TarjanSimpleCycles",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.cycle.TarjanSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.TarjanSimpleCycles: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.TarjanSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph argument.\\E",
							"method":"<org.jgrapht.alg.cycle.TarjanSimpleCycles: void setGraph(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.cycle.TarjanSimpleCycles: java.util.List findSimpleCycles()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QNull graph.\\E",
							"method":"<org.jgrapht.alg.cycle.TarjanSimpleCycles: java.util.List findSimpleCycles()>",
							"modifier":"public",
							"throwUnit":"throw $r10",
							"callChain":"throw $r10",
							"throwUnitOrder":0,
							"conditions":"$r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.cycle.TarjanSimpleCycles.<org.jgrapht.alg.cycle.TarjanSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.alg.cycle.TarjanSimpleCycles.<org.jgrapht.alg.cycle.TarjanSimpleCycles: org.jgrapht.DirectedGraph graph> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2GraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.alg.color.BrownBacktrackColoring",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.alg.color.BrownBacktrackColoring: void <init>(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.experimental.alg.color.BrownBacktrackColoring: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: void <init>(org.jgrapht.Graph)>(r1) -> $r16 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r12, $r9) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"0 smaller than interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>()",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.experimental.alg.IntArrayGraphAlgorithm.<org.jgrapht.experimental.alg.IntArrayGraphAlgorithm: java.util.List _vertices>.<java.util.List: java.lang.Object get(int)>(0)).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter0.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.flow.PushRelabelMaximumFlow",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void initialize(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,java.util.Queue)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void initialize(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,java.util.Queue)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r1.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r8, $d0)",
							"invokedMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"callChain":"virtualinvoke r1.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r8, $d0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i2 < 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: java.util.List getOutgoing()>().<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void initialize(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,java.util.Queue)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r1.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r8, $d0)",
							"invokedMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"callChain":"virtualinvoke r1.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r8, $d0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i2 < 0, $i3 >= 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 larger or equal 0",
								"interfaceinvoke interfaceinvoke virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: java.util.List getOutgoing()>().<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void initialize(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,java.util.Queue)>($r3, $r5, $r1)",
							"invokedMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void initialize(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,java.util.Queue)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void initialize(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,java.util.Queue)>($r3, $r5, $r1) -> virtualinvoke r1.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r8, $d0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i2 < 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke virtualinvoke parameter_0_in_method_initialize.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: java.util.List getOutgoing()>().<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke r0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void initialize(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,java.util.Queue)>($r3, $r5, $r1)",
							"invokedMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void initialize(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,java.util.Queue)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"callChain":"virtualinvoke r0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void initialize(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension,java.util.Queue)>($r3, $r5, $r1) -> virtualinvoke r1.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r8, $d0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i2 < 0, $i3 >= 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 larger or equal 0",
								"interfaceinvoke interfaceinvoke virtualinvoke parameter_0_in_method_initialize.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: java.util.List getOutgoing()>().<java.util.List: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$z8 = specialinvoke r0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>(r26)",
							"invokedMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"callChain":"$z8 = specialinvoke r0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>(r26) -> virtualinvoke r3.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r0, $d4) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i2 < 0, $i3 >= 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter_0_in_method_pushFlowThrough.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 larger or equal 0",
								"virtualinvoke parameter_0_in_method_discharge.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter_0_in_method_discharge.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: org.jgrapht.alg.interfaces.MaximumFlowAlgorithm$MaximumFlow buildMaximumFlow(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$z8 = specialinvoke r0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>(r26)",
							"invokedMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"callChain":"$z8 = specialinvoke r0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>(r26) -> virtualinvoke r3.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r0, $d4) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i2 < 0, $i3 >= 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter_0_in_method_discharge.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 larger or equal 0",
								"virtualinvoke parameter_0_in_method_discharge.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter_0_in_method_discharge.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void relabel(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void relabel(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>",
							"modifier":"private",
							"throwUnit":"throw $r8",
							"callChain":"throw $r8",
							"throwUnitOrder":1,
							"conditions":"$z0 != 0, $z1 != 0, $i3 > 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is not 0",
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.flow.PushRelabelMaximumFlow.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: java.util.Map labeling>.<java.util.Map: java.lang.Object get(java.lang.Object)>(staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(staticinvoke <org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: int access$000(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>(parameter0))).<java.lang.Integer: int intValue()>() smaller or equal 0"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.flow.PushRelabelMaximumFlow.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: java.util.Map labeling>.<java.util.Map: java.lang.Object get(java.lang.Object)>(staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(staticinvoke <org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: int access$000(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>(parameter0))).<java.lang.Integer: int intValue()>() smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void relabel(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>",
							"modifier":"private",
							"throwUnit":"throw $r8",
							"callChain":"throw $r8",
							"throwUnitOrder":1,
							"conditions":"$z0 != 0, $z3 != 0, $z1 != 0, $i3 > 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"staticinvoke <org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: boolean access$100(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>(parameter0) is not 0",
								"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.flow.PushRelabelMaximumFlow.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: java.util.Map labeling>.<java.util.Map: java.lang.Object get(java.lang.Object)>(staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(staticinvoke <org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: int access$000(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>(parameter0))).<java.lang.Integer: int intValue()>() smaller or equal 0"
							],
							"keyPreCondition":"virtualinvoke interfaceinvoke @this: org.jgrapht.alg.flow.PushRelabelMaximumFlow.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: java.util.Map labeling>.<java.util.Map: java.lang.Object get(java.lang.Object)>(staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(staticinvoke <org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: int access$000(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>(parameter0))).<java.lang.Integer: int intValue()>() smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void relabel(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>",
							"modifier":"private",
							"throwUnit":"throw $r13",
							"callChain":"throw $r13",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $z3 != 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"staticinvoke <org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: boolean access$100(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>(parameter0) is 0"
							],
							"keyPreCondition":"staticinvoke <org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension: boolean access$100(org.jgrapht.alg.flow.PushRelabelMaximumFlow$VertexExtension)>(parameter0) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke r3.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r0, $d4)",
							"invokedMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"callChain":"virtualinvoke r3.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r0, $d4) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i2 < 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean discharge(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension)>",
							"modifier":"private",
							"invokeUnit":"virtualinvoke r3.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r0, $d4)",
							"invokedMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"callChain":"virtualinvoke r3.<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>(r0, $d4) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $i2 < 0, $i3 >= 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 larger or equal 0",
								"virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
					"modifier":"protected",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"modifier":"protected",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $i2 < 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: void pushFlowThrough(org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension,double)>",
							"modifier":"protected",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $i2 < 0, $i3 >= 0",
							"preConditions":[
								"<org.jgrapht.alg.flow.PushRelabelMaximumFlow: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getSource()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 larger or equal 0",
								"virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<org.jgrapht.alg.flow.PushRelabelMaximumFlow$EdgeExtension: org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase getTarget()>().<org.jgrapht.alg.flow.MaximumFlowAlgorithmBase$VertexExtensionBase: double excess> cmpl 0.0 smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.NeighborIndex",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.NeighborIndex: java.util.Set neighborsOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.NeighborIndex: java.util.Set neighborsOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>(r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.NeighborIndex: java.util.List neighborListOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.NeighborIndex: java.util.List neighborListOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r2 = specialinvoke r0.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r2 = specialinvoke r0.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>(r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.NeighborIndex: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.NeighborIndex: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r2.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>($r4)",
							"invokedMethod":"<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r2.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>($r4) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_getNeighbors).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_getNeighbors) is null",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdge()>())) is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.NeighborIndex: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r2.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>($r6)",
							"invokedMethod":"<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r2.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>($r6) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_getNeighbors).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_getNeighbors) is null",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdge()>())) is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.NeighborIndex: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"$r9 = specialinvoke r2.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>($r6)",
							"invokedMethod":"<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r9 = specialinvoke r2.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>($r6) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_getNeighbors).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_getNeighbors) is null",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdge()>())) is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.NeighborIndex: void edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"$r10 = specialinvoke r2.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>($r4)",
							"invokedMethod":"<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r10 = specialinvoke r2.<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>($r4) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_getNeighbors).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_getNeighbors) is null",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdge()>())) is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.NeighborIndex: void edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QAttempting to remove a neighbor that wasn't present\\E",
							"method":"<org.jgrapht.alg.NeighborIndex: void edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r8.<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>($r1)",
							"invokedMethod":"<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>",
							"callChain":"virtualinvoke $r8.<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>($r1) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r4 != null",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeTarget()>()) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex$Neighbors.<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_removeNeighbor) is null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex$Neighbors.<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_removeNeighbor) is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QAttempting to remove a neighbor that wasn't present\\E",
							"method":"<org.jgrapht.alg.NeighborIndex: void edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent)>",
							"modifier":"public",
							"invokeUnit":"virtualinvoke $r11.<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>($r2)",
							"invokedMethod":"<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>",
							"callChain":"virtualinvoke $r11.<org.jgrapht.alg.NeighborIndex$Neighbors: void removeNeighbor(java.lang.Object)>($r2) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r4 != null",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.event.GraphEdgeChangeEvent: java.lang.Object getEdgeSource()>()) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex$Neighbors.<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_removeNeighbor) is null"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex$Neighbors.<org.jgrapht.alg.NeighborIndex$Neighbors: java.util.Map neighborCounts>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter_0_in_method_removeNeighbor) is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.NeighborIndex: org.jgrapht.alg.NeighborIndex$Neighbors getNeighbors(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, r1)",
							"invokedMethod":"<org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r6 = staticinvoke <org.jgrapht.Graphs: java.util.List neighborListOf(org.jgrapht.Graph,java.lang.Object)>($r5, r1) -> $r6 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(r1, $r5, r2) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(parameter0).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.NeighborIndex.<org.jgrapht.alg.NeighborIndex: java.util.Map neighborMap>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_neighborListOf.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r17",
							"callChain":"throw $r17",
							"throwUnitOrder":3,
							"conditions":"$r1 != null, $r2 != null, $z0 != 0, i5_1 >= $i0, $z1 != 0, $i1 == $i2",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is not null",
								"<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: boolean $assertionsDisabled> is not 0",
								"0 smaller than interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices>.<java.util.List: int size()>()",
								"<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: boolean $assertionsDisabled> is 0",
								"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights>[i5_1].length"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights>[i5_1].length"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r17",
							"callChain":"throw $r17",
							"throwUnitOrder":3,
							"conditions":"$r1 != null, $r2 != null, $z0 != 0, $i3 == $i4, i5_1 >= $i0, $z1 != 0, $i1 == $i2",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is not null",
								"<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: boolean $assertionsDisabled> is 0",
								"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices>.<java.util.List: int size()>() is @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights>.length",
								"0 smaller than interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices>.<java.util.List: int size()>()",
								"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights>[i5_1].length"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights>[i5_1].length"
						},
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r21",
							"callChain":"throw $r21",
							"throwUnitOrder":2,
							"conditions":"$r1 != null, $r2 != null, $z0 != 0, $i3 == $i4",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is not null",
								"<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: boolean $assertionsDisabled> is 0",
								"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights>.length"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices>.<java.util.List: int size()>() is not @this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights>.length"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph may not be constructed without vertex-set specified\\E",
							"method":"<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r22",
							"callChain":"throw $r22",
							"throwUnitOrder":1,
							"conditions":"$r1 != null, $r2 != null",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is not null",
								"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: java.util.List vertices> is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph may not be constructed without weight-matrix specified\\E",
							"method":"<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: void generateGraph(org.jgrapht.WeightedGraph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r23",
							"callChain":"throw $r23",
							"throwUnitOrder":0,
							"conditions":"$r1 != null",
							"preConditions":[
								"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator.<org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator: double[][] weights> is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.ConnectivityInspector",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.ConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.alg.ConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.graph.AsUndirectedGraph: void <init>(org.jgrapht.DirectedGraph)>(r2)",
							"invokedMethod":"<org.jgrapht.graph.AsUndirectedGraph: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.graph.AsUndirectedGraph: void <init>(org.jgrapht.DirectedGraph)>(r2) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.ConnectivityInspector: java.util.Set connectedSetOf(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.util.NoSuchElementException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.ConnectivityInspector: java.util.Set connectedSetOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r8 = virtualinvoke $r5.<org.jgrapht.traverse.BreadthFirstIterator: java.lang.Object next()>()",
							"invokedMethod":"<org.jgrapht.traverse.CrossComponentIterator: java.lang.Object next()>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.traverse.CrossComponentIterator: java.lang.Object next()>",
							"callChain":"$r8 = virtualinvoke $r5.<org.jgrapht.traverse.BreadthFirstIterator: java.lang.Object next()>() -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.ConnectivityInspector.<org.jgrapht.alg.ConnectivityInspector: java.util.Map vertexToConnectedSet>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null",
								"virtualinvoke new org.jgrapht.traverse.BreadthFirstIterator.<org.jgrapht.traverse.BreadthFirstIterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>() is 0"
							],
							"keyPreCondition":"virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>() is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.ConnectivityInspector: java.util.Set connectedSetOf(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r8 = virtualinvoke $r5.<org.jgrapht.traverse.BreadthFirstIterator: java.lang.Object next()>()",
							"invokedMethod":"<org.jgrapht.traverse.CrossComponentIterator: java.lang.Object next()>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r8 = virtualinvoke $r5.<org.jgrapht.traverse.BreadthFirstIterator: java.lang.Object next()>() -> specialinvoke r0.<org.jgrapht.traverse.CrossComponentIterator: void addUnseenChildrenOf(java.lang.Object)>($r5) -> $r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r6, $r5, r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: org.jgrapht.traverse.CrossComponentIterator$Specifics specifics>.<org.jgrapht.traverse.CrossComponentIterator$Specifics: java.util.Set edgesOf(java.lang.Object)>(parameter_0_in_method_addUnseenChildrenOf).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke @this: org.jgrapht.traverse.CrossComponentIterator.<org.jgrapht.traverse.CrossComponentIterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.ConnectivityInspector.<org.jgrapht.alg.ConnectivityInspector: java.util.Map vertexToConnectedSet>.<java.util.Map: java.lang.Object get(java.lang.Object)>(parameter0) is null",
								"virtualinvoke new org.jgrapht.traverse.BreadthFirstIterator.<org.jgrapht.traverse.BreadthFirstIterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: void <init>(int,int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Q(start > finish): invariant broken\\E",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region: void <init>(int,int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 <= i1",
							"preConditions":[
								"parameter0 larger than parameter1"
							],
							"keyPreCondition":"parameter0 larger than parameter1"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, r3, r4, 1) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Multigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.Pseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.UndirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qcan not match directed with undirected graphs\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0, $z8 == 0, $z12 != 0, $z9 == 0, $z11 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter0 instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.UndirectedGraph is 0",
								"parameter0 instanceof org.jgrapht.UndirectedGraph is not 0",
								"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.DirectedGraph is not 0"
						},
						{
							"exceptionName":"java.lang.UnsupportedOperationException",
							"message":"\\Qgraphs with multiple edges are not supported\\E",
							"method":"<org.jgrapht.alg.isomorphism.VF2SubgraphIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1)",
							"invokedMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,boolean)>(r1, r2, 1) -> specialinvoke r0.<org.jgrapht.alg.isomorphism.VF2AbstractIsomorphismInspector: void <init>(org.jgrapht.Graph,org.jgrapht.Graph,java.util.Comparator,java.util.Comparator,boolean)>(r1, r2, null, null, z0) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z2 != 0, $z3 != 0, $z4 != 0, $z5 != 0, $z6 != 0, $z7 == 0",
							"preConditions":[
								"parameter0 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.Multigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.Pseudograph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedMultigraph is 0",
								"parameter0 instanceof org.jgrapht.graph.DirectedPseudograph is 0",
								"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
							],
							"keyPreCondition":"parameter1 instanceof org.jgrapht.graph.DirectedPseudograph is not 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.AsWeightedDirectedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.AsWeightedDirectedGraph: void <init>(org.jgrapht.DirectedGraph,java.util.Map)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AsWeightedDirectedGraph: void <init>(org.jgrapht.DirectedGraph,java.util.Map)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>(r1, r2) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, r2 != null, r1 != null",
							"preConditions":[
								"<org.jgrapht.graph.AsWeightedGraph: boolean $assertionsDisabled> is 0",
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.AsWeightedDirectedGraph: void <init>(org.jgrapht.DirectedGraph,java.util.Map)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>(r1, r2) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.generate.RandomGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>(i0, i1, $l2)",
							"invokedMethod":"<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>",
							"callChain":"specialinvoke r0.<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>(i0, i1, $l2) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"i0 < 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>(i0, i1, $l2)",
							"invokedMethod":"<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>",
							"callChain":"specialinvoke r0.<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>(i0, i1, $l2) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"i0 < 0, i1 >= 0",
							"preConditions":[
								"parameter0 larger or equal 0",
								"parameter1 smaller than 0"
							],
							"keyPreCondition":"parameter1 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 < 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.RandomGraphGenerator: void <init>(int,int,long)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 < 0, i1 >= 0",
							"preConditions":[
								"parameter0 larger or equal 0",
								"parameter1 smaller than 0"
							],
							"keyPreCondition":"parameter1 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.generate.RandomGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QnumOfEdges is not valid for the graph type \n-> Invalid number Of Edges=\\E[\\s\\S]*\\Q for: graph type=\\E[\\s\\S]*\\Q ,number Of Vertexes=\\E[\\s\\S]*\\Q\n-> Advice: For the Max value , check the javadoc for org.jgrapht.generate.RandomGraphGenerator.DefaultEdgeTopologyFactory\\E",
							"method":"<org.jgrapht.generate.RandomGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r6",
							"callChain":"throw $r6",
							"throwUnitOrder":1,
							"conditions":"$i2 == $i3, $z0 != 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() is @this: org.jgrapht.generate.RandomGraphGenerator.<org.jgrapht.generate.RandomGraphGenerator: int numOfVertexes>",
								"interfaceinvoke specialinvoke @this: org.jgrapht.generate.RandomGraphGenerator.<org.jgrapht.generate.RandomGraphGenerator: org.jgrapht.generate.RandomGraphGenerator$EdgeTopologyFactory edgeTopologyFactoryChooser(org.jgrapht.Graph,int)>(parameter0, @this: org.jgrapht.generate.RandomGraphGenerator.<org.jgrapht.generate.RandomGraphGenerator: int numOfEdges>).<org.jgrapht.generate.RandomGraphGenerator$EdgeTopologyFactory: boolean isNumberOfEdgesValid(org.jgrapht.Graph,int)>(parameter0, @this: org.jgrapht.generate.RandomGraphGenerator.<org.jgrapht.generate.RandomGraphGenerator: int numOfEdges>) is 0"
							],
							"keyPreCondition":"interfaceinvoke specialinvoke @this: org.jgrapht.generate.RandomGraphGenerator.<org.jgrapht.generate.RandomGraphGenerator: org.jgrapht.generate.RandomGraphGenerator$EdgeTopologyFactory edgeTopologyFactoryChooser(org.jgrapht.Graph,int)>(parameter0, @this: org.jgrapht.generate.RandomGraphGenerator.<org.jgrapht.generate.RandomGraphGenerator: int numOfEdges>).<org.jgrapht.generate.RandomGraphGenerator$EdgeTopologyFactory: boolean isNumberOfEdgesValid(org.jgrapht.Graph,int)>(parameter0, @this: org.jgrapht.generate.RandomGraphGenerator.<org.jgrapht.generate.RandomGraphGenerator: int numOfEdges>) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QVertex factory did not produce \\E[\\s\\S]*\\Q distinct vertices.\\E",
							"method":"<org.jgrapht.generate.RandomGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r19",
							"callChain":"throw $r19",
							"throwUnitOrder":0,
							"conditions":"$i2 == $i3",
							"preConditions":[
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() is not @this: org.jgrapht.generate.RandomGraphGenerator.<org.jgrapht.generate.RandomGraphGenerator: int numOfVertexes>"
							],
							"keyPreCondition":"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: int size()>() is not @this: org.jgrapht.generate.RandomGraphGenerator.<org.jgrapht.generate.RandomGraphGenerator: int numOfVertexes>"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.generate.RingGraphGenerator",
			"methods":[
				{
					"methodName":"<org.jgrapht.generate.RingGraphGenerator: void <init>(int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.RingGraphGenerator: void <init>(int)>",
							"modifier":"public",
							"throwUnit":"throw $r1",
							"callChain":"throw $r1",
							"throwUnitOrder":0,
							"conditions":"i0 >= 0",
							"preConditions":[
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.generate.RingGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qmust be non-negative\\E",
							"method":"<org.jgrapht.generate.RingGraphGenerator: void generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r1.<org.jgrapht.generate.LinearGraphGenerator: void <init>(int)>($i1)",
							"invokedMethod":"<org.jgrapht.generate.LinearGraphGenerator: void <init>(int)>",
							"throwUnit":"throw $r1",
							"throwUnitInMethod":"<org.jgrapht.generate.LinearGraphGenerator: void <init>(int)>",
							"callChain":"specialinvoke $r1.<org.jgrapht.generate.LinearGraphGenerator: void <init>(int)>($i1) -> throw $r1",
							"throwUnitOrder":-1,
							"conditions":"i0 >= 0",
							"preConditions":[
								"@this: org.jgrapht.generate.RingGraphGenerator.<org.jgrapht.generate.RingGraphGenerator: int size> larger or equal 1",
								"parameter_0_in_method_<init> smaller than 0"
							],
							"keyPreCondition":"parameter_0_in_method_<init> smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.KShortestPaths",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QnMaxHops is negative or 0\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, $i2)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, $i2) -> specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, r1 != null, i0 > 0, i1 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter2 larger than 0",
								"parameter_3_in_method_<init> smaller or equal 0"
							],
							"keyPreCondition":"parameter_3_in_method_<init> smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QnPaths is negative or 0\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, $i2)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, $i2) -> specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, r1 != null, i0 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter2 smaller or equal 0"
							],
							"keyPreCondition":"parameter2 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QstartVertex is null\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, $i2)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, $i2) -> specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, r1 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qgraph is null\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, $i2)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, $i2) -> specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QnMaxHops is negative or 0\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, r1 != null, i0 > 0, i1 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter2 larger than 0",
								"parameter3 smaller or equal 0"
							],
							"keyPreCondition":"parameter3 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QnPaths is negative or 0\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, r1 != null, i0 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter2 smaller or equal 0"
							],
							"keyPreCondition":"parameter2 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QstartVertex is null\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, r1 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qgraph is null\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void <init>(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>(r1, r2, i0, i1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph must contain the end vertex!\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>(r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, $z0 == 0, $z1 != 0",
							"preConditions":[
								"parameter0 is not null",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: java.lang.Object startVertex>) is 0",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QThe end vertex is the same as the start vertex!\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>",
							"throwUnit":"throw $r6",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>(r1) -> throw $r6",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, $z0 == 0",
							"preConditions":[
								"parameter0 is not null",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: java.lang.Object startVertex>) is not 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: java.lang.Object startVertex>) is not 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QendVertex is null\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QstartVertex is null\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r2.<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>($r4, $r3, r1, $i0)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke $r2.<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>($r4, $r3, r1, $i0) -> specialinvoke r0.<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>(r1, r2) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, r1 != null, r0 != null, $z0 == 0, $z1 != 0",
							"preConditions":[
								"parameter_0_in_method_<init> is not null",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: java.lang.Object startVertex>) is 0",
								"parameter0 is not null",
								"parameter_1_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_1_in_method_<init> is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qgraph is null\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: java.util.List getPaths(java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke $r2.<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>($r4, $r3, r1, $i0)",
							"invokedMethod":"<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>",
							"throwUnit":"throw $r3",
							"throwUnitInMethod":"<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>",
							"callChain":"specialinvoke $r2.<org.jgrapht.alg.KShortestPathsIterator: void <init>(org.jgrapht.Graph,java.lang.Object,java.lang.Object,int)>($r4, $r3, r1, $i0) -> specialinvoke r0.<org.jgrapht.alg.KShortestPathsIterator: void assertKShortestPathsIterator(org.jgrapht.Graph,java.lang.Object)>(r1, r2) -> throw $r3",
							"throwUnitOrder":-1,
							"conditions":"r0 != null, r0 != null, $z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: java.lang.Object startVertex>) is 0",
								"parameter0 is not null",
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph must contain the end vertex!\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":2,
							"conditions":"r0 != null, $z0 == 0, $z1 != 0",
							"preConditions":[
								"parameter0 is not null",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: java.lang.Object startVertex>) is 0",
								"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.util.Set vertexSet()>().<java.util.Set: boolean contains(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QThe end vertex is the same as the start vertex!\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r6",
							"callChain":"throw $r6",
							"throwUnitOrder":1,
							"conditions":"r0 != null, $z0 == 0",
							"preConditions":[
								"parameter0 is not null",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: java.lang.Object startVertex>) is not 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.KShortestPaths.<org.jgrapht.alg.KShortestPaths: java.lang.Object startVertex>) is not 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QendVertex is null\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void assertGetPaths(java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QnMaxHops is negative or 0\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"modifier":"private",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":3,
							"conditions":"r0 != null, r1 != null, i0 > 0, i1 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter2 larger than 0",
								"parameter3 smaller or equal 0"
							],
							"keyPreCondition":"parameter3 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QnPaths is negative or 0\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"modifier":"private",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":2,
							"conditions":"r0 != null, r1 != null, i0 > 0",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is not null",
								"parameter2 smaller or equal 0"
							],
							"keyPreCondition":"parameter2 smaller or equal 0"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QstartVertex is null\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"modifier":"private",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":1,
							"conditions":"r0 != null, r1 != null",
							"preConditions":[
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\Qgraph is null\\E",
							"method":"<org.jgrapht.alg.KShortestPaths: void assertKShortestPathsFinder(org.jgrapht.Graph,java.lang.Object,int,int)>",
							"modifier":"private",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"r0 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.AsWeightedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, r2 != null, r1 != null",
							"preConditions":[
								"<org.jgrapht.graph.AsWeightedGraph: boolean $assertionsDisabled> is 0",
								"parameter0 is not null",
								"parameter1 is null"
							],
							"keyPreCondition":"parameter1 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.AsWeightedGraph: void <init>(org.jgrapht.Graph,java.util.Map)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator",
			"methods":[
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: boolean hasNext()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.util.ConcurrentModificationException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: boolean hasNext()>",
							"modifier":"public",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":0,
							"conditions":"$b2 == 0",
							"preConditions":[
								"@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation> cmp staticinvoke <org.jgrapht.experimental.dag.DirectedAcyclicGraph: long access$100(org.jgrapht.experimental.dag.DirectedAcyclicGraph)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: org.jgrapht.experimental.dag.DirectedAcyclicGraph this$0>) is not 0"
							],
							"keyPreCondition":"@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation> cmp staticinvoke <org.jgrapht.experimental.dag.DirectedAcyclicGraph: long access$100(org.jgrapht.experimental.dag.DirectedAcyclicGraph)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: org.jgrapht.experimental.dag.DirectedAcyclicGraph this$0>) is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: java.lang.Object next()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.util.NoSuchElementException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: java.lang.Object next()>",
							"modifier":"public",
							"throwUnit":"throw $r9",
							"callChain":"throw $r9",
							"throwUnitOrder":1,
							"conditions":"$b2 == 0, $r3 != null",
							"preConditions":[
								"@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation> cmp staticinvoke <org.jgrapht.experimental.dag.DirectedAcyclicGraph: long access$100(org.jgrapht.experimental.dag.DirectedAcyclicGraph)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: org.jgrapht.experimental.dag.DirectedAcyclicGraph this$0>) is 0",
								"@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: java.lang.Integer nextIndex> is null"
							],
							"keyPreCondition":"@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: java.lang.Integer nextIndex> is null"
						},
						{
							"exceptionName":"java.util.ConcurrentModificationException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: java.lang.Object next()>",
							"modifier":"public",
							"throwUnit":"throw $r11",
							"callChain":"throw $r11",
							"throwUnitOrder":0,
							"conditions":"$b2 == 0",
							"preConditions":[
								"@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation> cmp staticinvoke <org.jgrapht.experimental.dag.DirectedAcyclicGraph: long access$100(org.jgrapht.experimental.dag.DirectedAcyclicGraph)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: org.jgrapht.experimental.dag.DirectedAcyclicGraph this$0>) is not 0"
							],
							"keyPreCondition":"@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation> cmp staticinvoke <org.jgrapht.experimental.dag.DirectedAcyclicGraph: long access$100(org.jgrapht.experimental.dag.DirectedAcyclicGraph)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: org.jgrapht.experimental.dag.DirectedAcyclicGraph this$0>) is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: void remove()>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalStateException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: void remove()>",
							"modifier":"public",
							"throwUnit":"throw $r6",
							"callChain":"throw $r6",
							"throwUnitOrder":1,
							"conditions":"$b2 == 0, null == $r5",
							"preConditions":[
								"@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation> cmp staticinvoke <org.jgrapht.experimental.dag.DirectedAcyclicGraph: long access$100(org.jgrapht.experimental.dag.DirectedAcyclicGraph)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: org.jgrapht.experimental.dag.DirectedAcyclicGraph this$0>) is 0",
								"null is interfaceinvoke staticinvoke <org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping access$300(org.jgrapht.experimental.dag.DirectedAcyclicGraph)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: org.jgrapht.experimental.dag.DirectedAcyclicGraph this$0>).<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Object getVertex(java.lang.Integer)>(staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: int currentTopoIndex>))"
							],
							"keyPreCondition":"null is interfaceinvoke staticinvoke <org.jgrapht.experimental.dag.DirectedAcyclicGraph: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping access$300(org.jgrapht.experimental.dag.DirectedAcyclicGraph)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: org.jgrapht.experimental.dag.DirectedAcyclicGraph this$0>).<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoOrderMapping: java.lang.Object getVertex(java.lang.Integer)>(staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: int currentTopoIndex>))"
						},
						{
							"exceptionName":"java.util.ConcurrentModificationException",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: void remove()>",
							"modifier":"public",
							"throwUnit":"throw $r9",
							"callChain":"throw $r9",
							"throwUnitOrder":0,
							"conditions":"$b2 == 0",
							"preConditions":[
								"@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation> cmp staticinvoke <org.jgrapht.experimental.dag.DirectedAcyclicGraph: long access$100(org.jgrapht.experimental.dag.DirectedAcyclicGraph)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: org.jgrapht.experimental.dag.DirectedAcyclicGraph this$0>) is not 0"
							],
							"keyPreCondition":"@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: long updateCountAtCreation> cmp staticinvoke <org.jgrapht.experimental.dag.DirectedAcyclicGraph: long access$100(org.jgrapht.experimental.dag.DirectedAcyclicGraph)>(@this: org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator.<org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator: org.jgrapht.experimental.dag.DirectedAcyclicGraph this$0>) is not 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.AStarShortestPath",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.AStarShortestPath: void <init>(org.jgrapht.Graph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QGraph cannot be null!\\E",
							"method":"<org.jgrapht.alg.AStarShortestPath: void <init>(org.jgrapht.Graph)>",
							"modifier":"public",
							"throwUnit":"throw $r2",
							"callChain":"throw $r2",
							"throwUnitOrder":0,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.AStarShortestPath: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object,org.jgrapht.alg.interfaces.AStarAdmissibleHeuristic)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QSource or target vertex not contained in the graph!\\E",
							"method":"<org.jgrapht.alg.AStarShortestPath: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object,org.jgrapht.alg.interfaces.AStarAdmissibleHeuristic)>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":0,
							"conditions":"$z0 == 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QSource or target vertex not contained in the graph!\\E",
							"method":"<org.jgrapht.alg.AStarShortestPath: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object,org.jgrapht.alg.interfaces.AStarAdmissibleHeuristic)>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":0,
							"conditions":"$z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.AStarShortestPath: org.jgrapht.GraphPath getShortestPath(java.lang.Object,java.lang.Object,org.jgrapht.alg.interfaces.AStarAdmissibleHeuristic)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.AStarShortestPath: void expandNode(org.jgrapht.util.FibonacciHeapNode,java.lang.Object)>($r13, r4)",
							"invokedMethod":"<org.jgrapht.alg.AStarShortestPath: void expandNode(org.jgrapht.util.FibonacciHeapNode,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.AStarShortestPath: void expandNode(org.jgrapht.util.FibonacciHeapNode,java.lang.Object)>($r13, r4) -> $r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r5, $r3, $r6) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(virtualinvoke parameter_0_in_method_expandNode.<org.jgrapht.util.FibonacciHeapNode: java.lang.Object getData()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: boolean containsVertex(java.lang.Object)>(parameter1) is not 0",
								"virtualinvoke virtualinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.util.FibonacciHeap openList>.<org.jgrapht.util.FibonacciHeap: org.jgrapht.util.FibonacciHeapNode removeMin()>().<org.jgrapht.util.FibonacciHeapNode: java.lang.Object getData()>() is not parameter1",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.AStarShortestPath: void expandNode(org.jgrapht.util.FibonacciHeapNode,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.AStarShortestPath: void expandNode(org.jgrapht.util.FibonacciHeapNode,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r5, $r3, $r6)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r5, $r3, $r6) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke interfaceinvoke interfaceinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: org.jgrapht.Graph graph>.<org.jgrapht.Graph: java.util.Set edgesOf(java.lang.Object)>(virtualinvoke parameter0.<org.jgrapht.util.FibonacciHeapNode: java.lang.Object getData()>()).<java.util.Set: java.util.Iterator iterator()>().<java.util.Iterator: boolean hasNext()>() is not 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.AStarShortestPath: java.util.List buildPath(java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.AStarShortestPath: java.util.List buildPath(java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r5, $r6, r1)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r7 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r5, $r6, r1) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0",
								"interfaceinvoke @this: org.jgrapht.alg.AStarShortestPath.<org.jgrapht.alg.AStarShortestPath: java.util.Map cameFrom>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter0.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter_1_in_method_getOppositeVertex)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.RankingPathElementList",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElement)>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qpath must be empty\\E",
							"method":"<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElement)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>(r1, i0, r2)",
							"invokedMethod":"<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>(r1, i0, r2) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"i0 > 0, r2 != null, $r3 == null",
							"preConditions":[
								"parameter1 larger than 0",
								"parameter2 is not null",
								"virtualinvoke parameter2.<org.jgrapht.alg.AbstractPathElement: java.lang.Object getPrevEdge()>() is not null"
							],
							"keyPreCondition":"virtualinvoke parameter2.<org.jgrapht.alg.AbstractPathElement: java.lang.Object getPrevEdge()>() is not null"
						},
						{
							"exceptionName":"java.lang.NullPointerException",
							"message":"\\QpathElement is null\\E",
							"method":"<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElement)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>(r1, i0, r2)",
							"invokedMethod":"<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>(r1, i0, r2) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"i0 > 0, r2 != null",
							"preConditions":[
								"parameter1 larger than 0",
								"parameter2 is null"
							],
							"keyPreCondition":"parameter2 is null"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxSize is negative or 0\\E",
							"method":"<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElement)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>(r1, i0, r2)",
							"invokedMethod":"<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>",
							"throwUnit":"throw $r9",
							"throwUnitInMethod":"<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.AbstractPathElement)>(r1, i0, r2) -> throw $r9",
							"throwUnitOrder":-1,
							"conditions":"i0 > 0",
							"preConditions":[
								"parameter1 smaller or equal 0"
							],
							"keyPreCondition":"parameter1 smaller or equal 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElementList,java.lang.Object)>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,org.jgrapht.alg.RankingPathElementList,java.lang.Object)>",
							"modifier":"default",
							"throwUnit":"throw $r5",
							"callChain":"throw $r5",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0",
								"virtualinvoke @this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.util.ArrayList pathElements>.<java.util.ArrayList: boolean isEmpty()>() is not 0"
							],
							"keyPreCondition":"virtualinvoke @this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.util.ArrayList pathElements>.<java.util.ArrayList: boolean isEmpty()>() is not 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>",
					"modifier":"default",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\QmaxSize is negative or 0\\E",
							"method":"<org.jgrapht.alg.RankingPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>",
							"modifier":"default",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>(r1, i0, r2)",
							"invokedMethod":"<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>",
							"throwUnit":"throw $r4",
							"throwUnitInMethod":"<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>",
							"callChain":"specialinvoke r0.<org.jgrapht.alg.AbstractPathElementList: void <init>(org.jgrapht.Graph,int,java.lang.Object)>(r1, i0, r2) -> throw $r4",
							"throwUnitOrder":-1,
							"conditions":"i0 > 0",
							"preConditions":[
								"parameter1 smaller or equal 0"
							],
							"keyPreCondition":"parameter1 smaller or equal 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.RankingPathElementList: boolean addPathElements(org.jgrapht.alg.RankingPathElementList,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.RankingPathElementList: boolean addPathElements(org.jgrapht.alg.RankingPathElementList,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r19",
							"callChain":"throw $r19",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $z2 != 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is not 0",
								"virtualinvoke @this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.lang.Object vertex>.<java.lang.Object: boolean equals(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: org.jgrapht.Graph graph>, parameter1, virtualinvoke parameter0.<org.jgrapht.alg.RankingPathElementList: java.lang.Object getVertex()>())) is 0"
							],
							"keyPreCondition":"virtualinvoke @this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.lang.Object vertex>.<java.lang.Object: boolean equals(java.lang.Object)>(staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: org.jgrapht.Graph graph>, parameter1, virtualinvoke parameter0.<org.jgrapht.alg.RankingPathElementList: java.lang.Object getVertex()>())) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.RankingPathElementList: boolean addPathElements(org.jgrapht.alg.RankingPathElementList,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r16 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r14, r4, $r15)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r16 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r14, r4, $r15) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter1)) is 0",
								"<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.RankingPathElementList: boolean isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.alg.RankingPathElementList: boolean isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement)>",
							"modifier":"private",
							"invokeUnit":"specialinvoke $r23.<org.jgrapht.alg.ConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>($r20)",
							"invokedMethod":"<org.jgrapht.alg.ConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke $r23.<org.jgrapht.alg.ConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>($r20) -> specialinvoke $r1.<org.jgrapht.graph.AsUndirectedGraph: void <init>(org.jgrapht.DirectedGraph)>(r2) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.lang.Object guardVertexToNotDisconnect> is not null",
								"interfaceinvoke @this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.util.Map path2disconnect>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0",
								"@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: org.jgrapht.Graph graph> instanceof org.jgrapht.DirectedGraph is not 0",
								"parameter_0_in_method_<init> is null"
							],
							"keyPreCondition":"parameter_0_in_method_<init> is null"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.RankingPathElementList: boolean isNotValidPath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.RankingPathElementList: boolean isNotValidPath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$z0 = specialinvoke r0.<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>",
							"throwUnit":"throw $r8",
							"throwUnitInMethod":"<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>",
							"callChain":"$z0 = specialinvoke r0.<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>(r1, r2) -> throw $r8",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, $z1 != 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is not 0",
								"virtualinvoke staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: org.jgrapht.Graph graph>, parameter1, virtualinvoke parameter0.<org.jgrapht.alg.RankingPathElement: java.lang.Object getVertex()>()).<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.lang.Object vertex>) is 0"
							],
							"keyPreCondition":"virtualinvoke staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: org.jgrapht.Graph graph>, parameter1, virtualinvoke parameter0.<org.jgrapht.alg.RankingPathElement: java.lang.Object getVertex()>()).<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.lang.Object vertex>) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.RankingPathElementList: boolean isNotValidPath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$z0 = specialinvoke r0.<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>(r1, r2)",
							"invokedMethod":"<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$z0 = specialinvoke r0.<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>(r1, r2) -> $r5 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, $r4) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter1)) is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>",
							"modifier":"private",
							"throwUnit":"throw $r8",
							"callChain":"throw $r8",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $z1 != 0, $z0 == 0, $z1 == 0",
							"preConditions":[
								"<org.jgrapht.alg.RankingPathElementList: boolean $assertionsDisabled> is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is not 0",
								"virtualinvoke staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: org.jgrapht.Graph graph>, parameter1, virtualinvoke parameter0.<org.jgrapht.alg.RankingPathElement: java.lang.Object getVertex()>()).<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.lang.Object vertex>) is 0"
							],
							"keyPreCondition":"virtualinvoke staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>(@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: org.jgrapht.Graph graph>, parameter1, virtualinvoke parameter0.<org.jgrapht.alg.RankingPathElement: java.lang.Object getVertex()>()).<java.lang.Object: boolean equals(java.lang.Object)>(@this: org.jgrapht.alg.RankingPathElementList.<org.jgrapht.alg.RankingPathElementList: java.lang.Object vertex>) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qno such vertex: \\E[\\s\\S]*",
							"method":"<org.jgrapht.alg.RankingPathElementList: boolean isSimplePath(org.jgrapht.alg.RankingPathElement,java.lang.Object)>",
							"modifier":"private",
							"invokeUnit":"$r5 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, $r4)",
							"invokedMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"throwUnit":"throw $r5",
							"throwUnitInMethod":"<org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>",
							"callChain":"$r5 = staticinvoke <org.jgrapht.Graphs: java.lang.Object getOppositeVertex(org.jgrapht.Graph,java.lang.Object,java.lang.Object)>($r3, r1, $r4) -> throw $r5",
							"throwUnitOrder":-1,
							"conditions":"$z0 == 0, $z1 == 0",
							"preConditions":[
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeSource(java.lang.Object)>(parameter1)) is 0",
								"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
							],
							"keyPreCondition":"virtualinvoke parameter_2_in_method_getOppositeVertex.<java.lang.Object: boolean equals(java.lang.Object)>(interfaceinvoke parameter_0_in_method_getOppositeVertex.<org.jgrapht.Graph: java.lang.Object getEdgeTarget(java.lang.Object)>(parameter1)) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.util.UnionFind",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r7",
							"callChain":"throw $r7",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":0,
							"conditions":"$z0 == 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"throwUnit":"throw $r3",
							"callChain":"throw $r3",
							"throwUnitOrder":0,
							"conditions":"$z0 == 0, $z1 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r6 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r6 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r1) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is 0"
						},
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qelements must be contained in given set\\E",
							"method":"<org.jgrapht.alg.util.UnionFind: void union(java.lang.Object,java.lang.Object)>",
							"modifier":"public",
							"invokeUnit":"$r7 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r4)",
							"invokedMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"throwUnit":"throw $r7",
							"throwUnitInMethod":"<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>",
							"callChain":"$r7 = virtualinvoke r0.<org.jgrapht.alg.util.UnionFind: java.lang.Object find(java.lang.Object)>(r4) -> throw $r7",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0",
							"preConditions":[
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter0) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is not 0",
								"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is 0"
							],
							"keyPreCondition":"interfaceinvoke @this: org.jgrapht.alg.util.UnionFind.<org.jgrapht.alg.util.UnionFind: java.util.Map parentMap>.<java.util.Map: boolean containsKey(java.lang.Object)>(parameter1) is 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.GabowStrongConnectivityInspector",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.GabowStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qnull not allowed for graph!\\E",
							"method":"<org.jgrapht.alg.GabowStrongConnectivityInspector: void <init>(org.jgrapht.DirectedGraph)>",
							"modifier":"public",
							"throwUnit":"throw $r4",
							"callChain":"throw $r4",
							"throwUnitOrder":0,
							"conditions":"r3 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.graph.UnmodifiableUndirectedGraph",
			"methods":[
				{
					"methodName":"<org.jgrapht.graph.UnmodifiableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.IllegalArgumentException",
							"message":"\\Qg must not be null.\\E",
							"method":"<org.jgrapht.graph.UnmodifiableUndirectedGraph: void <init>(org.jgrapht.UndirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"specialinvoke r0.<org.jgrapht.graph.UnmodifiableGraph: void <init>(org.jgrapht.Graph)>(r1)",
							"invokedMethod":"<org.jgrapht.graph.UnmodifiableGraph: void <init>(org.jgrapht.Graph)>",
							"throwUnit":"throw $r2",
							"throwUnitInMethod":"<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>",
							"callChain":"specialinvoke r0.<org.jgrapht.graph.UnmodifiableGraph: void <init>(org.jgrapht.Graph)>(r1) -> specialinvoke r0.<org.jgrapht.graph.GraphDelegator: void <init>(org.jgrapht.Graph)>(r1) -> throw $r2",
							"throwUnitOrder":-1,
							"conditions":"r1 != null",
							"preConditions":[
								"parameter0 is null"
							],
							"keyPreCondition":"parameter0 is null"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.alg.TransitiveClosure",
			"methods":[
				{
					"methodName":"<org.jgrapht.alg.TransitiveClosure: void closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph)>",
					"modifier":"public",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.TransitiveClosure: void closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph)>",
							"modifier":"public",
							"invokeUnit":"$i1 = specialinvoke r3.<org.jgrapht.alg.TransitiveClosure: int computeBinaryLog(int)>($i0)",
							"invokedMethod":"<org.jgrapht.alg.TransitiveClosure: int computeBinaryLog(int)>",
							"throwUnit":"throw $r0",
							"throwUnitInMethod":"<org.jgrapht.alg.TransitiveClosure: int computeBinaryLog(int)>",
							"callChain":"$i1 = specialinvoke r3.<org.jgrapht.alg.TransitiveClosure: int computeBinaryLog(int)>($i0) -> throw $r0",
							"throwUnitOrder":-1,
							"conditions":"$z0 != 0, i0 >= 0",
							"preConditions":[
								"<org.jgrapht.alg.TransitiveClosure: boolean $assertionsDisabled> is 0",
								"parameter_0_in_method_computeBinaryLog smaller than 0"
							],
							"keyPreCondition":"parameter_0_in_method_computeBinaryLog smaller than 0"
						}
					]
				},
				{
					"methodName":"<org.jgrapht.alg.TransitiveClosure: int computeBinaryLog(int)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.alg.TransitiveClosure: int computeBinaryLog(int)>",
							"modifier":"private",
							"throwUnit":"throw $r0",
							"callChain":"throw $r0",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, i0 >= 0",
							"preConditions":[
								"<org.jgrapht.alg.TransitiveClosure: boolean $assertionsDisabled> is 0",
								"parameter0 smaller than 0"
							],
							"keyPreCondition":"parameter0 smaller than 0"
						}
					]
				}
			]
		},
		{
			"className":"org.jgrapht.traverse.TopologicalOrderIterator",
			"methods":[
				{
					"methodName":"<org.jgrapht.traverse.TopologicalOrderIterator: void <init>(org.jgrapht.DirectedGraph,java.util.Queue,java.util.Map)>",
					"modifier":"private",
					"exceptions":[
						{
							"exceptionName":"java.lang.AssertionError",
							"message":"[\\s\\S]*",
							"method":"<org.jgrapht.traverse.TopologicalOrderIterator: void <init>(org.jgrapht.DirectedGraph,java.util.Queue,java.util.Map)>",
							"modifier":"private",
							"throwUnit":"throw $r6",
							"callChain":"throw $r6",
							"throwUnitOrder":0,
							"conditions":"$z0 != 0, $z1 != 0, $z2 == 0",
							"preConditions":[
								"<org.jgrapht.traverse.TopologicalOrderIterator: boolean $assertionsDisabled> is 0",
								"interfaceinvoke interfaceinvoke parameter0.<org.jgrapht.DirectedGraph: java.util.Set vertexSet()>().<java.util.Set: boolean isEmpty()>() is 0",
								"interfaceinvoke parameter1.<java.util.Queue: boolean isEmpty()>() is not 0"
							],
							"keyPreCondition":"interfaceinvoke parameter1.<java.util.Queue: boolean isEmpty()>() is not 0"
						}
					]
				}
			]
		}
	]
}